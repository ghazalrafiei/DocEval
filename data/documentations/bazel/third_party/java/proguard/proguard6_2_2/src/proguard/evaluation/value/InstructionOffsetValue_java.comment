['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This class represents a partially evaluated instruction offset. It can
 * contain 0 or more specific instruction offsets. Each instruction offset
 * can be flagged as an ordinary offset, a method parameter, a method return
 * value, a field value, a new instance value, or an exception handler.
 *
 * @author Eric Lafortune
 ','line_number':25,'multiline':True]
['text':' Method parameter indices are not really instruction offsets.','line_number':39,'multiline':False]
['text':'*
     * Creates a new InstructionOffsetValue with the given instruction offset.
     ','line_number':50,'multiline':True]
['text':'*
     * Creates a new InstructionOffsetValue with the given list of instruction
     * offsets.
     ','line_number':59,'multiline':True]
['text':'*
     * Returns the number of instruction offsets of this value.
     ','line_number':69,'multiline':True]
['text':'*
     * Returns the specified instruction offset of this value.
     ','line_number':78,'multiline':True]
['text':'*
     * Returns whether the given value is present in this list of instruction
     * offsets.
     ','line_number':87,'multiline':True]
['text':'*
     * Returns the minimum value from this list of instruction offsets.
     * Returns <code>Integer.MAX_VALUE</code> if the list is empty.
     ','line_number':105,'multiline':True]
['text':'*
     * Returns the maximum value from this list of instruction offsets.
     * Returns <code>Integer.MIN_VALUE</code> if the list is empty.
     ','line_number':127,'multiline':True]
['text':'*
     * Returns whether the specified instruction offset corresponds to a method
     * parameter.
     ','line_number':149,'multiline':True]
['text':'*
     * Returns the specified method parameter (assuming it is one).
     ','line_number':159,'multiline':True]
['text':'*
     * Returns whether the specified instruction offset corresponds to a method
     * return value.
     ','line_number':168,'multiline':True]
['text':'*
     * Returns whether the specified instruction offset corresponds to a field
     * value.
     ','line_number':178,'multiline':True]
['text':'*
     * Returns whether the specified instruction offset corresponds to a new
     * instance.
     ','line_number':188,'multiline':True]
['text':'*
     * Returns whether the specified instruction offset corresponds to a cast.
     ','line_number':198,'multiline':True]
['text':'*
     * Returns whether the specified instruction offset corresponds to an
     * exception handler.
     ','line_number':207,'multiline':True]
['text':'*
     * Returns an InstructionOffsetValue that contains the instructions offsets
     * of this value and the given instruction offset.
     ','line_number':217,'multiline':True]
['text':'*
     * Returns an InstructionOffsetValue that contains the instructions offsets
     * of this value but not the given instruction offset.
     ','line_number':236,'multiline':True]
['text':'*
     * Returns the generalization of this InstructionOffsetValue and the given
     * other InstructionOffsetValue. The values of the other InstructionOffsetValue
     * are guaranteed to remain at the end of the list, in the same order.
     ','line_number':258,'multiline':True]
['text':' If the values array of either is empty, we can return the other one.','line_number':265,'multiline':False]
['text':' Compute the length of the union of the arrays.','line_number':278,'multiline':False]
['text':' If the length of the union array is equal to the length of the other','line_number':288,'multiline':False]
['text':' values array, we can return it.','line_number':289,'multiline':False]
['text':' If the length of the union array is equal to the length of this','line_number':295,'multiline':False]
['text':' values array, we can return it. We have to make sure that the other','line_number':296,'multiline':False]
['text':' values are at the end. We'll just test one special case, with a','line_number':297,'multiline':False]
['text':' single other value.','line_number':298,'multiline':False]
['text':' Create the union array.','line_number':306,'multiline':False]
['text':' Is the length of the union array is equal to the sum of the lengths?','line_number':310,'multiline':False]
['text':' We can just copy all values, because they are unique.','line_number':313,'multiline':False]
['text':' Copy the values that are different from the other array.','line_number':320,'multiline':False]
['text':' Copy the values from the other array.','line_number':330,'multiline':False]
['text':' Implementations for Value.','line_number':337,'multiline':False]
['text':' Implementations for Object.','line_number':370,'multiline':False]
