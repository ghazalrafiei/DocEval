['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This AttributeVisitor redirects unconditional branches so any common code
 * is shared, and the code preceding the branch can be removed, in the code
 * attributes that it visits.
 *
 * @author Eric Lafortune
 ','line_number':31,'multiline':True]
['text':'*','line_number':43,'multiline':False]
['text':'/
    private static       boolean DEBUG = true;
    //','line_number':45,'multiline':True]
['text':'*
     * Creates a new GotoCommonCodeReplacer.
     * @param extraInstructionVisitor an optional extra visitor for all replaced
     *                                goto instructions.
     ','line_number':56,'multiline':True]
['text':' Implementations for AttributeVisitor.','line_number':67,'multiline':False]
['text':'        DEBUG =','line_number':74,'multiline':False]
['text':'            clazz.getName().equals("abc/Def") &&','line_number':75,'multiline':False]
['text':'            method.getName(clazz).equals("abc");','line_number':76,'multiline':False]
['text':' Mark all branch targets.','line_number':78,'multiline':False]
['text':' Reset the code attribute editor.','line_number':81,'multiline':False]
['text':' Remap the variables of the instructions.','line_number':84,'multiline':False]
['text':' Apply the code atribute editor.','line_number':87,'multiline':False]
['text':' Implementations for InstructionVisitor.','line_number':92,'multiline':False]
['text':' Check if the instruction is an unconditional goto instruction that','line_number':99,'multiline':False]
['text':' isn't the target of a branch itself.','line_number':100,'multiline':False]
['text':' Get the number of common bytes.','line_number':109,'multiline':False]
['text':' Delete the common instructions.','line_number':120,'multiline':False]
['text':' Redirect the goto instruction, if it is still necessary.','line_number':131,'multiline':False]
['text':' Visit the instruction, if required.','line_number':141,'multiline':False]
['text':' Small utility methods.','line_number':151,'multiline':False]
['text':'*
     * Returns the number of common bytes preceding the given offsets,
     * avoiding branches and exception blocks.
     ','line_number':153,'multiline':True]
['text':' Find the block of common instructions preceding it.','line_number':159,'multiline':False]
['text':' Is the code identical at both offsets?','line_number':173,'multiline':False]
['text':' Are there instructions at either offset but not both?','line_number':179,'multiline':False]
['text':' Are there instructions at both offsets?','line_number':186,'multiline':False]
['text':' Are the offsets involved in some branches?','line_number':190,'multiline':False]
['text':' Note that the preverifier doesn't like initializer','line_number':191,'multiline':False]
['text':' invocations to be moved around.','line_number':192,'multiline':False]
['text':' Also note that the preverifier doesn't like pop instructions','line_number':193,'multiline':False]
['text':' that work on different operands.','line_number':194,'multiline':False]
['text':' Make sure the new branch target was a branch target before,','line_number':207,'multiline':False]
['text':' in order not to introduce new entries in the stack map table.','line_number':208,'multiline':False]
['text':'*
     * Returns whether the given opcode represents a pop instruction that must
     * get a consistent type (pop, pop2, arraylength).
     ','line_number':225,'multiline':True]
['text':'*
     * Returns the whether there is a boundary of an exception block between
     * the given offsets (including both).
     ','line_number':237,'multiline':True]
['text':' Swap the offsets if the second one is smaller than the first one.','line_number':243,'multiline':False]
['text':' Check if there is a boundary of an exception block.','line_number':251,'multiline':False]
