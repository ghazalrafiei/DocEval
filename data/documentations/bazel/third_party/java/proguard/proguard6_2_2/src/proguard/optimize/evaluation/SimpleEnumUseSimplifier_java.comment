['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This AttributeVisitor simplifies the use of enums in the code attributes that
 * it visits.
 *
 * @see SimpleEnumMarker
 * @see MemberReferenceFixer
 * @author Eric Lafortune
 ','line_number':36,'multiline':True]
['text':'*','line_number':51,'multiline':False]
['text':'/
    private static       boolean DEBUG = System.getProperty("enum") != null;
    //','line_number':53,'multiline':True]
['text':' Fields acting as parameters and return values for the visitor methods.','line_number':64,'multiline':False]
['text':'*
     * Creates a new SimpleEnumUseSimplifier.
     ','line_number':72,'multiline':True]
['text':'*
     * Creates a new SimpleEnumDescriptorSimplifier.
     * @param partialEvaluator        the partial evaluator that will
     *                                execute the code and provide
     *                                information about the results.
     * @param extraInstructionVisitor an optional extra visitor for all
     *                                simplified instructions.
     ','line_number':81,'multiline':True]
['text':' Implementations for AttributeVisitor.','line_number':97,'multiline':False]
['text':' Skip the non-static methods of simple enum classes.','line_number':109,'multiline':False]
['text':' Evaluate the method.','line_number':116,'multiline':False]
['text':' Reset the code changes.','line_number':121,'multiline':False]
['text':' Replace any instructions that can be simplified.','line_number':124,'multiline':False]
['text':' Apply all accumulated changes to the code.','line_number':136,'multiline':False]
['text':' Implementations for InstructionVisitor.','line_number':141,'multiline':False]
['text':' Load a simple enum integer from an integer array.','line_number':151,'multiline':False]
['text':' Store a simple enum integer in an integer array.','line_number':163,'multiline':False]
['text':' Replace any producers of null constants.','line_number':169,'multiline':False]
['text':' Return a simple enum integer instead of an enum.','line_number':178,'multiline':False]
['text':' Replace any producers of null constants.','line_number':184,'multiline':False]
['text':' Load a simple enum integer instead of an enum.','line_number':207,'multiline':False]
['text':' Replace any producers of null constants.','line_number':214,'multiline':False]
['text':' Store a simple enum integer instead of an enum.','line_number':232,'multiline':False]
['text':' Replace any producers of null constants.','line_number':239,'multiline':False]
['text':' Replace any producers of null constants.','line_number':255,'multiline':False]
['text':' Check if the instruction is calling a simple enum.','line_number':266,'multiline':False]
['text':' Fall through to check the parameters.','line_number':282,'multiline':False]
['text':' Replace any producers of null constants.','line_number':288,'multiline':False]
['text':' Create an integer array instead of an enum array.','line_number':304,'multiline':False]
['text':' Enum classes can only be simple if the checkcast','line_number':317,'multiline':False]
['text':' succeeds, so we can delete it.','line_number':318,'multiline':False]
['text':' Replace any producers of null constants.','line_number':323,'multiline':False]
['text':' Enum classes can only be simple if the instanceof','line_number':332,'multiline':False]
['text':' succeeds, so we can push a constant result.','line_number':333,'multiline':False]
['text':' Replace any producers of null constants.','line_number':339,'multiline':False]
['text':' Compare simple enum integers instead of enums.','line_number':356,'multiline':False]
['text':' Replace any producers of null constants.','line_number':363,'multiline':False]
['text':' Compare simple enum integers instead of enums.','line_number':373,'multiline':False]
['text':' Replace any producers of null constants.','line_number':380,'multiline':False]
['text':' Compare with 0 instead of null.','line_number':390,'multiline':False]
['text':' Compare with 0 instead of null.','line_number':404,'multiline':False]
['text':' Implementations for ConstantVisitor.','line_number':422,'multiline':False]
['text':' Does the constant refer to a simple enum type?','line_number':429,'multiline':False]
['text':' Does the constant refer to a simple enum type?','line_number':436,'multiline':False]
['text':' Implementations for ParameterVisitor.','line_number':441,'multiline':False]
['text':' Check if the parameter is passing a simple enum as a more general type.','line_number':445,'multiline':False]
['text':' Replace any producers of null constants for this parameter.','line_number':450,'multiline':False]
['text':' Small utility methods.','line_number':462,'multiline':False]
['text':'*
     * Returns whether the constant at the given offset is referencing a
     * simple enum class.
     ','line_number':464,'multiline':True]
['text':'*
     * Returns whether the given method is returning a simple enum class.
     ','line_number':478,'multiline':True]
['text':'*
     * Returns whether the instruction at the given offset is pushing a simple
     * enum class.
     ','line_number':505,'multiline':True]
['text':'*
     * Returns whether the instruction at the given offset is popping a simple
     * enum class.
     ','line_number':521,'multiline':True]
['text':'*
     * Returns whether the instruction at the given offset is popping a simple
     * enum class.
     ','line_number':531,'multiline':True]
['text':'*
     * Returns whether the instruction at the given offset is popping a simple
     * enum type. This includes simple enum arrays.
     ','line_number':545,'multiline':True]
['text':'*
     * Returns whether the instruction at the given offset is popping a
     * one-dimensional simple enum array.
     ','line_number':558,'multiline':True]
['text':'*
     * Returns whether the given class is not null and a simple enum class.
     ','line_number':572,'multiline':True]
['text':'*
     * Returns whether the specified enum method is supported for simple enums.
     ','line_number':582,'multiline':True]
['text':'*
     * Replaces the instruction at the given offset by the given instructions.
     ','line_number':608,'multiline':True]
['text':' Visit the instruction, if required.','line_number':620,'multiline':False]
['text':' Note: we're not passing the right arguments for now, knowing that','line_number':623,'multiline':False]
['text':' they aren't used anyway.','line_number':624,'multiline':False]
['text':'*
     * Replaces the instruction at the given offset by the given instruction,
     * popping any now unused stack entries.
     ','line_number':630,'multiline':True]
['text':' Pop unneeded stack entries if necessary.','line_number':639,'multiline':False]
['text':' Visit the instruction, if required.','line_number':650,'multiline':False]
['text':' Note: we're not passing the right arguments for now, knowing that','line_number':653,'multiline':False]
['text':' they aren't used anyway.','line_number':654,'multiline':False]
['text':'*
     * Deletes the instruction at the given offset, popping any now unused
     * stack entries.
     ','line_number':660,'multiline':True]
['text':' Pop unneeded stack entries if necessary.','line_number':668,'multiline':False]
['text':'int popCount = instruction.stackPopCount(clazz);','line_number':669,'multiline':False]
['text':'','line_number':670,'multiline':False]
['text':'insertPopInstructions(offset, popCount);','line_number':671,'multiline':False]
['text':'','line_number':672,'multiline':False]
['text':'if (DEBUG) System.out.println("  Deleting instruction "+instruction.toString(offset)+(popCount == 0 ? "" : " ("+popCount+" pops)"));','line_number':673,'multiline':False]
['text':' Visit the instruction, if required.','line_number':679,'multiline':False]
['text':' Note: we're not passing the right arguments for now, knowing that','line_number':682,'multiline':False]
['text':' they aren't used anyway.','line_number':683,'multiline':False]
['text':'*
     * Pops the given number of stack entries before the instruction at the
     * given offset.
     ','line_number':689,'multiline':True]
['text':' Insert a single pop instruction.','line_number':703,'multiline':False]
['text':' Insert a single pop2 instruction.','line_number':713,'multiline':False]
['text':' Insert the specified number of pop instructions.','line_number':723,'multiline':False]
['text':'*
     * Replaces aconst_null producers of the consumer of the top stack entry
     * at the given offset by iconst_0.
     ','line_number':751,'multiline':True]
['text':'*
     * Turn null reference producers of the specified stack entry into 0 int
     * producers. The partial evaluator generally can't identify them as
     * simple enums.
     ','line_number':764,'multiline':True]
['text':' Is the producer always pushing null?','line_number':780,'multiline':False]
['text':' Is it a simple case?','line_number':788,'multiline':False]
['text':' Replace pushing null by pushing 0.','line_number':798,'multiline':False]
['text':' Otherwise pop the null and then push 0.','line_number':807,'multiline':False]
['text':'*
     * Turn null reference producers of the specified reference variable into
     * 0 int producers. The partial evaluator generally can't identify them
     * as simple enums.
     ','line_number':825,'multiline':True]
['text':' Is the producer always storing null?','line_number':844,'multiline':False]
['text':' Replace storing the null reference value by storing an','line_number':848,'multiline':False]
['text':' int value.','line_number':849,'multiline':False]
['text':' Replace pushing null by pushing 0.','line_number':855,'multiline':False]
