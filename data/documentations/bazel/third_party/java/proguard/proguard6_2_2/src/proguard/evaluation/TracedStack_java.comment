['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This Stack saves additional information with stack elements, to keep track
 * of their origins.
 * <p>
 * The stack stores a given producer Value along with each Value it stores.
 * It then generalizes a given collected Value with the producer Value
 * of each Value it loads. The producer Value and the initial collected Value
 * can be set. The generalized collected Value can be retrieved, either taking
 * into account dup/swap instructions as proper instructions or ignoring them.
 *
 * @author Eric Lafortune
 ','line_number':25,'multiline':True]
['text':'*
     * Creates a new TracedStack with a given maximum size.
     ','line_number':44,'multiline':True]
['text':'*
     * Creates a new TracedStack that is a copy of the given TracedStack.
     ','line_number':56,'multiline':True]
['text':'*
     * Sets the Value that will be stored along with all push and pop
     * instructions.
     ','line_number':68,'multiline':True]
['text':'*
     * Gets the specified producer Value from the stack, without disturbing it.
     * @param index the index of the stack element, counting from the bottom
     *              of the stack.
     * @return the producer value at the specified position.
     ','line_number':78,'multiline':True]
['text':'*
     * Gets the specified actual producer Value from the stack, ignoring
     * dup/swap instructions, without disturbing it.
     * @param index the index of the stack element, counting from the bottom
     *              of the stack.
     * @return the producer value at the specified position.
     ','line_number':90,'multiline':True]
['text':'*
     * Gets the specified producer Value from the stack, without disturbing it.
     * @param index the index of the stack element, counting from the top
     *              of the stack.
     * @return the producer value at the specified position.
     ','line_number':103,'multiline':True]
['text':'*
     * Gets the specified actual producer Value from the stack, ignoring
     * dup/swap instructions, without disturbing it.
     * @param index the index of the stack element, counting from the top
     *              of the stack.
     * @return the producer value at the specified position.
     ','line_number':115,'multiline':True]
['text':' Implementations for Stack.','line_number':128,'multiline':False]
['text':' Account for the extra space required by Category 2 values.','line_number':176,'multiline':False]
['text':' Account for the extra space required by Category 2 values.','line_number':189,'multiline':False]
['text':' Implementations for Object.','line_number':313,'multiline':False]
['text':' Small utility methods.','line_number':360,'multiline':False]
