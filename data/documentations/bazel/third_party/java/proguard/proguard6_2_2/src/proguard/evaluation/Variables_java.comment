['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This class represents a local variable frame that contains <code>Value</code>
 * objects. Values are generalizations of all values that have been stored in
 * the respective variables.
 *
 * @author Eric Lafortune
 ','line_number':27,'multiline':True]
['text':'*
     * Creates a new Variables object with a given maximum number of variables.
     ','line_number':43,'multiline':True]
['text':'*
     * Creates a Variables object that is a copy of the given Variables object.
     ','line_number':53,'multiline':True]
['text':' Create the values array.','line_number':58,'multiline':False]
['text':' Copy the values.','line_number':61,'multiline':False]
['text':'*
     * Resets this Variables object, so that it can be reused.
     ','line_number':66,'multiline':True]
['text':' Is the values array large enough?','line_number':71,'multiline':False]
['text':' Create a new one.','line_number':74,'multiline':False]
['text':' Clear the old variables.','line_number':79,'multiline':False]
['text':'*
     * Initializes the values of this Variables object with the values of the
     * given Variables object. The other object may have fewer values, in which
     * case the remaining values are left unchanged.
     ','line_number':87,'multiline':True]
['text':' Copy the values.','line_number':99,'multiline':False]
['text':'*
     * Generalizes the values of this Variables object with the values of the
     * given Variables object.
     * @param clearConflictingOtherVariables specifies whether the other
     *                                       variables should be cleared too,
     *                                       in case of conflicts.
     * @return whether the generalization has made any difference.
     ','line_number':104,'multiline':True]
['text':' Occasionally, two values of different types might be present','line_number':127,'multiline':False]
['text':' in the same variable in a variable frame (corresponding to','line_number':128,'multiline':False]
['text':' two local variables that share the same index), at some point','line_number':129,'multiline':False]
['text':' outside of their scopes. Don't generalize the variable then,','line_number':130,'multiline':False]
['text':' but let it clear instead.','line_number':131,'multiline':False]
['text':'*
     * Returns the number of variables.
     ','line_number':159,'multiline':True]
['text':'*
     * Gets the Value of the variable with the given index, without disturbing it.
     ','line_number':168,'multiline':True]
['text':'*
     * Stores the given Value at the given variable index.
     ','line_number':183,'multiline':True]
['text':' Store the value.','line_number':194,'multiline':False]
['text':' Account for the extra space required by Category 2 values.','line_number':197,'multiline':False]
['text':'*
     * Loads the Value from the variable with the given index.
     ','line_number':205,'multiline':True]
['text':' Load methods that provide convenient casts to the expected value types.','line_number':220,'multiline':False]
['text':'*
     * Loads the IntegerValue from the variable with the given index.
     ','line_number':222,'multiline':True]
['text':'*
     * Loads the LongValue from the variable with the given index.
     ','line_number':231,'multiline':True]
['text':'*
     * Loads the FloatValue from the variable with the given index.
     ','line_number':240,'multiline':True]
['text':'*
     * Loads the DoubleValue from the variable with the given index.
     ','line_number':249,'multiline':True]
['text':'*
     * Loads the ReferenceValue from the variable with the given index.
     ','line_number':258,'multiline':True]
['text':'*
     * Loads the InstructionOffsetValue from the variable with the given index.
     ','line_number':267,'multiline':True]
['text':' Implementations for Object.','line_number':276,'multiline':False]
['text':' Occasionally, two values of different types might be','line_number':298,'multiline':False]
['text':' present in the same variable in a variable frame','line_number':299,'multiline':False]
['text':' (corresponding to two local variables that share the','line_number':300,'multiline':False]
['text':' same index), at some point outside of their scopes.','line_number':301,'multiline':False]
['text':' We'll ignore these.','line_number':302,'multiline':False]
