['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This StringParser can create StringMatcher instances for regular expressions
 * matching names. The regular expressions are interpreted as comma-separated
 * lists of names, optionally prefixed with '!' negators.
 * If a name with a negator matches, a negative match is returned, without
 * considering any subsequent entries in the list.
 * The regular expressions can contain the following wildcards:
 * '?'   for a single character,
 * '*'   for any number of characters, and
 * '<n>' for a reference to an earlier wildcard (n = 1, 2, ...)
 *
 * @author Eric Lafortune
 ','line_number':25,'multiline':True]
['text':'*
     * Creates a new NameParser.
     ','line_number':43,'multiline':True]
['text':'*
     * Creates a new NameParser that supports references to earlier
     * wildcards.
     *
     * @param variableStringMatchers an optional mutable list of
     *                               VariableStringMatcher instances that match
     *                               the wildcards.
     ','line_number':52,'multiline':True]
['text':' Implementations for StringParser.','line_number':66,'multiline':False]
['text':' Look for wildcards.','line_number':73,'multiline':False]
['text':' Is there a '*' wildcard?','line_number':78,'multiline':False]
['text':' Create a matcher for the wildcard.','line_number':83,'multiline':False]
['text':' Recursively create a matcher for the rest of the string.','line_number':91,'multiline':False]
['text':' Is there a '?' wildcard?','line_number':96,'multiline':False]
['text':' Create a matcher for the wildcard.','line_number':101,'multiline':False]
['text':' Recursively create a matcher for the rest of the string.','line_number':109,'multiline':False]
['text':' Is there a '<n>' wildcard?','line_number':114,'multiline':False]
['text':' Find the index of the closing bracket again.','line_number':117,'multiline':False]
['text':' Retrieve the specified variable string matcher and','line_number':120,'multiline':False]
['text':' recursively create a matcher for the rest of the string.','line_number':121,'multiline':False]
['text':' Return a matcher for the fixed first part of the regular expression,','line_number':129,'multiline':False]
['text':' if any, and the remainder.','line_number':130,'multiline':False]
['text':' Small utility methods.','line_number':137,'multiline':False]
['text':'*
     * Parses a reference to a wildcard at the given index, if any.
     * Returns the 1-based index, or 0 otherwise.
     ','line_number':139,'multiline':True]
['text':'*
     * Adds the given variable string matcher to the list of string matchers.
     ','line_number':178,'multiline':True]
['text':'*
     * Retrieves the specified variable string matcher from the list of string
     * matchers.
     ','line_number':192,'multiline':True]
['text':'*
     * A main method for testing name matching.
     ','line_number':202,'multiline':True]
