['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This AttributeVisitor links 'new' instructions and their corresponding
 * initializers in the CodeAttribute objects that it visits.
 *
 * @author Eric Lafortune
 ','line_number':33,'multiline':True]
['text':'*','line_number':44,'multiline':False]
['text':'/
    private static       boolean DEBUG = System.getProperty("if") != null;
    //','line_number':46,'multiline':True]
['text':'*
     * Creates a new InitializationFinder.
     ','line_number':60,'multiline':True]
['text':'*
     * Creates a new InitializationFinder. This private constructor gets around
     * the constraint that it's not allowed to add statements before calling
     * 'this'.
     ','line_number':69,'multiline':True]
['text':'*
     * Creates a new InitializationFinder that will use the given partial
     * evaluator.
     * @param partialEvaluator    the evaluator to be used for the analysis.
     * @param runPartialEvaluator specifies whether to run this evaluator on
     *                            every code attribute that is visited.
     ','line_number':84,'multiline':True]
['text':'*
     * Returns whether the method is an instance initializer, in the
     * CodeAttribute that was visited most recently.
     ','line_number':99,'multiline':True]
['text':'*
     * Returns the instruction offset at which this initializer is calling
     * the "super" or "this" initializer method, or <code>NONE</code> if it is
     * not an initializer.
     ','line_number':109,'multiline':True]
['text':'    /**','line_number':120,'multiline':False]
['text':'     * Returns whether the instruction at the given offset is a 'new'','line_number':121,'multiline':False]
['text':'     * instruction.','line_number':122,'multiline':False]
['text':'     */','line_number':123,'multiline':False]
['text':'    public boolean isNew(int offset)','line_number':124,'multiline':False]
['text':'    {','line_number':125,'multiline':False]
['text':'        return initializationOffsets[offset] != NONE;','line_number':126,'multiline':False]
['text':'    }','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':'','line_number':129,'multiline':False]
['text':'    /**','line_number':130,'multiline':False]
['text':'     * Returns the instruction offset at which the object instance that is','line_number':131,'multiline':False]
['text':'     * created at the given 'new' instruction offset is initialized, or','line_number':132,'multiline':False]
['text':'     * <code>NONE</code> if it is not being created.','line_number':133,'multiline':False]
['text':'     */','line_number':134,'multiline':False]
['text':'    public int initializationOffset(int creationOffset)','line_number':135,'multiline':False]
['text':'    {','line_number':136,'multiline':False]
['text':'        return initializationOffsets[creationOffset];','line_number':137,'multiline':False]
['text':'    }','line_number':138,'multiline':False]
['text':'*
     * Returns the 'new' instruction offset at which the object instance is
     * created that is initialized at the given offset.
     ','line_number':141,'multiline':True]
['text':'*
     * Returns whether the specified stack entry is initialized.
     ','line_number':151,'multiline':True]
['text':'*
     * Returns whether the given creation offset is initialized before the given
     * offset.
     ','line_number':163,'multiline':True]
['text':'*
     * Returns whether the instruction at the given offset is the special
     * invocation of an instance initializer.
     ','line_number':174,'multiline':True]
['text':' Implementations for AttributeVisitor.','line_number':184,'multiline':False]
['text':'        DEBUG =','line_number':191,'multiline':False]
['text':'            clazz.getName().equals("abc/Def") &&','line_number':192,'multiline':False]
['text':'            method.getName(clazz).equals("abc");','line_number':193,'multiline':False]
['text':' Make sure the global arrays are sufficiently large.','line_number':199,'multiline':False]
['text':' Evaluate the method.','line_number':203,'multiline':False]
['text':' Loop over all instructions. This is sufficient, because the JVM','line_number':209,'multiline':False]
['text':' specifications don't allow uninitialized instances on the stack or','line_number':210,'multiline':False]
['text':' in variables when branching backward. JVMs without preverification','line_number':211,'multiline':False]
['text':' and the Dalvik VM do allow it in practice.','line_number':212,'multiline':False]
['text':' Exception handlers start without uninitialized instances','line_number':221,'multiline':False]
['text':' (on the stack or in variables).','line_number':222,'multiline':False]
['text':' Check if the uninitialized creation offsets have been set','line_number':228,'multiline':False]
['text':' before (because of a forward branch).','line_number':229,'multiline':False]
['text':' Continue using them.','line_number':232,'multiline':False]
['text':' Is it a 'new' instruction?','line_number':240,'multiline':False]
['text':' Add its offset to the current list.','line_number':243,'multiline':False]
['text':' Is it an instance initialization?','line_number':247,'multiline':False]
['text':' Remove its creation offset from the current list.','line_number':250,'multiline':False]
['text':' Remember the super initialization offset of the','line_number':259,'multiline':False]
['text':' initializer method.','line_number':260,'multiline':False]
['text':' Remember the instance initialization for the 'new'','line_number':265,'multiline':False]
['text':' instruction.','line_number':266,'multiline':False]
['text':' Propagate the uninitialized creation offsets to the forward','line_number':274,'multiline':False]
['text':' branch targets, if any.','line_number':275,'multiline':False]
['text':' Small utility methods.','line_number':315,'multiline':False]
['text':'*
     * Returns the 'new' instruction offset value (or method parameter) at
     * which the object instance is created that is initialized at the given
     * offset.
     ','line_number':317,'multiline':True]
['text':'*
     * Returns the 'new' instruction offset value (or method parameter) of
     * the specified stack entry.
     ','line_number':331,'multiline':True]
['text':' Get the reference value of the new instance.','line_number':338,'multiline':False]
['text':' It's a traced reference.','line_number':342,'multiline':False]
['text':' Get the trace value.','line_number':346,'multiline':False]
