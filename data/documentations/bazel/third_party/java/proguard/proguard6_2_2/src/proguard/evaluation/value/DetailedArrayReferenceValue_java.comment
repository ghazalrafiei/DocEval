['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This IdentifiedArrayReferenceValue represents an identified array reference
 * value with its elements.
 *
 * @author Eric Lafortune
 ','line_number':27,'multiline':True]
['text':'*
     * Creates a new array reference value with the given ID.
     ','line_number':41,'multiline':True]
['text':' Is the array short enough to analyze?','line_number':53,'multiline':False]
['text':' Initialize the values of the array.','line_number':58,'multiline':False]
['text':' Just ignore the values of the array.','line_number':75,'multiline':False]
['text':' Implementations for ReferenceValue.','line_number':81,'multiline':False]
['text':'*
     * Returns the specified untyped value from the given array, or null if it
     * is unknown.
     ','line_number':128,'multiline':True]
['text':' Implementations of binary methods of ReferenceValue.','line_number':173,'multiline':False]
['text':'    // Implementations of binary ReferenceValue methods with','line_number':187,'multiline':False]
['text':'    // UnknownReferenceValue arguments.','line_number':188,'multiline':False]
['text':'','line_number':189,'multiline':False]
['text':'    public ReferenceValue generalize(UnknownReferenceValue other)','line_number':190,'multiline':False]
['text':'    {','line_number':191,'multiline':False]
['text':'        return other;','line_number':192,'multiline':False]
['text':'    }','line_number':193,'multiline':False]
['text':'','line_number':194,'multiline':False]
['text':'','line_number':195,'multiline':False]
['text':'    public int equal(UnknownReferenceValue other)','line_number':196,'multiline':False]
['text':'    {','line_number':197,'multiline':False]
['text':'        return MAYBE;','line_number':198,'multiline':False]
['text':'    }','line_number':199,'multiline':False]
['text':'','line_number':200,'multiline':False]
['text':'','line_number':201,'multiline':False]
['text':'    // Implementations of binary ReferenceValue methods with','line_number':202,'multiline':False]
['text':'    // TypedReferenceValue arguments.','line_number':203,'multiline':False]
['text':'','line_number':204,'multiline':False]
['text':'    public ReferenceValue generalize(TypedReferenceValue other)','line_number':205,'multiline':False]
['text':'    {','line_number':206,'multiline':False]
['text':'    }','line_number':207,'multiline':False]
['text':'','line_number':208,'multiline':False]
['text':'','line_number':209,'multiline':False]
['text':'    public int equal(TypedReferenceValue other)','line_number':210,'multiline':False]
['text':'    {','line_number':211,'multiline':False]
['text':'    }','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':'','line_number':214,'multiline':False]
['text':'    // Implementations of binary ReferenceValue methods with','line_number':215,'multiline':False]
['text':'    // IdentifiedReferenceValue arguments.','line_number':216,'multiline':False]
['text':'','line_number':217,'multiline':False]
['text':'    public ReferenceValue generalize(IdentifiedReferenceValue other)','line_number':218,'multiline':False]
['text':'    {','line_number':219,'multiline':False]
['text':'        return generalize((TypedReferenceValue)other);','line_number':220,'multiline':False]
['text':'    }','line_number':221,'multiline':False]
['text':'','line_number':222,'multiline':False]
['text':'','line_number':223,'multiline':False]
['text':'    public int equal(IdentifiedReferenceValue other)','line_number':224,'multiline':False]
['text':'    {','line_number':225,'multiline':False]
['text':'        return equal((TypedReferenceValue)other);','line_number':226,'multiline':False]
['text':'    }','line_number':227,'multiline':False]
['text':'','line_number':228,'multiline':False]
['text':'','line_number':229,'multiline':False]
['text':'    // Implementations of binary ReferenceValue methods with','line_number':230,'multiline':False]
['text':'    // ArrayReferenceValue arguments.','line_number':231,'multiline':False]
['text':'','line_number':232,'multiline':False]
['text':'    public ReferenceValue generalize(ArrayReferenceValue other)','line_number':233,'multiline':False]
['text':'    {','line_number':234,'multiline':False]
['text':'        return generalize((TypedReferenceValue)other);','line_number':235,'multiline':False]
['text':'    }','line_number':236,'multiline':False]
['text':'','line_number':237,'multiline':False]
['text':'','line_number':238,'multiline':False]
['text':'    public int equal(ArrayReferenceValue other)','line_number':239,'multiline':False]
['text':'    {','line_number':240,'multiline':False]
['text':'        return equal((TypedReferenceValue)other);','line_number':241,'multiline':False]
['text':'    }','line_number':242,'multiline':False]
['text':'','line_number':243,'multiline':False]
['text':'','line_number':244,'multiline':False]
['text':'    // Implementations of binary ReferenceValue methods with','line_number':245,'multiline':False]
['text':'    // IdentifiedArrayReferenceValue arguments.','line_number':246,'multiline':False]
['text':'','line_number':247,'multiline':False]
['text':'    public ReferenceValue generalize(IdentifiedArrayReferenceValue other)','line_number':248,'multiline':False]
['text':'    {','line_number':249,'multiline':False]
['text':'        return generalize((ArrayReferenceValue)other);','line_number':250,'multiline':False]
['text':'    }','line_number':251,'multiline':False]
['text':'','line_number':252,'multiline':False]
['text':'','line_number':253,'multiline':False]
['text':'    public int equal(IdentifiedArrayReferenceValue other)','line_number':254,'multiline':False]
['text':'    {','line_number':255,'multiline':False]
['text':'        return equal((ArrayReferenceValue)other);','line_number':256,'multiline':False]
['text':'    }','line_number':257,'multiline':False]
['text':'','line_number':258,'multiline':False]
['text':'','line_number':259,'multiline':False]
['text':'    // Implementations of binary ReferenceValue methods with','line_number':260,'multiline':False]
['text':'    // DetailedArrayReferenceValue arguments.','line_number':261,'multiline':False]
['text':'','line_number':262,'multiline':False]
['text':'    public ReferenceValue generalize(DetailedArrayReferenceValue other)','line_number':263,'multiline':False]
['text':'    {','line_number':264,'multiline':False]
['text':'        return generalize((IdentifiedArrayReferenceValue)other);','line_number':265,'multiline':False]
['text':'    }','line_number':266,'multiline':False]
['text':'','line_number':267,'multiline':False]
['text':'','line_number':268,'multiline':False]
['text':'    public int equal(DetailedArrayReferenceValue other)','line_number':269,'multiline':False]
['text':'    {','line_number':270,'multiline':False]
['text':'        return equal((IdentifiedArrayReferenceValue)other);','line_number':271,'multiline':False]
['text':'    }','line_number':272,'multiline':False]
['text':'','line_number':273,'multiline':False]
['text':'','line_number':274,'multiline':False]
['text':'    // Implementations of binary ReferenceValue methods with','line_number':275,'multiline':False]
['text':'    // TracedReferenceValue arguments.','line_number':276,'multiline':False]
['text':'','line_number':277,'multiline':False]
['text':'    public ReferenceValue generalize(TracedReferenceValue other)','line_number':278,'multiline':False]
['text':'    {','line_number':279,'multiline':False]
['text':'        return other.generalize(this);','line_number':280,'multiline':False]
['text':'    }','line_number':281,'multiline':False]
['text':'','line_number':282,'multiline':False]
['text':'','line_number':283,'multiline':False]
['text':'    public int equal(TracedReferenceValue other)','line_number':284,'multiline':False]
['text':'    {','line_number':285,'multiline':False]
['text':'        return other.equal(this);','line_number':286,'multiline':False]
['text':'    }','line_number':287,'multiline':False]
['text':' Implementations for Value.','line_number':290,'multiline':False]
['text':' Implementations for Object.','line_number':311,'multiline':False]
