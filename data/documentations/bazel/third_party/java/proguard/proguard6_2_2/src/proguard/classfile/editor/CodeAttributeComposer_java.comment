['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This AttributeVisitor accumulates instructions and exceptions, and then
 * copies them into code attributes that it visits.
 *
 * @author Eric Lafortune
 ','line_number':40,'multiline':True]
['text':'*','line_number':60,'multiline':False]
['text':'/
    public  static       boolean DEBUG = false;
    //','line_number':62,'multiline':True]
['text':'*
     * Creates a new CodeAttributeComposer that doesn't allow external branch
     * targets or exception handlers and that automatically shrinks
     * instructions.
     ','line_number':98,'multiline':True]
['text':'*
     * Creates a new CodeAttributeComposer.
     * @param allowExternalBranchTargets     specifies whether branch targets
     *                                       can lie outside the code fragment
     *                                       of the branch instructions.
     * @param allowExternalExceptionHandlers specifies whether exception
     *                                       handlers can lie outside the code
     *                                       fragment in which exceptions are
     *                                       defined.
     * @param shrinkInstructions             specifies whether instructions
     *                                       should automatically be shrunk
     *                                       before being written.
     ','line_number':109,'multiline':True]
['text':'*
     * Starts a new code definition.
     ','line_number':132,'multiline':True]
['text':' Make sure the instruction writer has at least the same buffer size','line_number':143,'multiline':False]
['text':' as the local arrays.','line_number':144,'multiline':False]
['text':'*
     * Starts a new code fragment. Branch instructions that are added are
     * assumed to be relative within such code fragments.
     * @param maximumCodeFragmentLength the maximum length of the code that will
     *                                  be added as part of this fragment (more
     *                                  precisely, the maximum old instruction
     *                                  offset or label that is specified, plus
     *                                  one).
     ','line_number':149,'multiline':True]
['text':' Make sure there is sufficient space for adding the code fragment.','line_number':167,'multiline':False]
['text':' It's only a rough initial estimate for the code length, not even','line_number':168,'multiline':False]
['text':' necessarily a length expressed in bytes.','line_number':169,'multiline':False]
['text':' Try to reuse the previous array for this code fragment.','line_number':174,'multiline':False]
['text':' Initialize the offset map.','line_number':180,'multiline':False]
['text':' Remember the location of the code fragment.','line_number':186,'multiline':False]
['text':'*
     * Appends the given instruction with the given old offset.
     * Branch instructions must fit, for instance by enabling automatic
     * shrinking of instructions.
     * @param oldInstructionOffset the old offset of the instruction, to which
     *                             branches and other references in the current
     *                             code fragment are pointing.
     * @param instruction          the instruction to be appended.
     ','line_number':192,'multiline':True]
['text':' Make sure the code and offset arrays are large enough.','line_number':214,'multiline':False]
['text':' Remember the old offset of the appended instruction.','line_number':219,'multiline':False]
['text':' Fill out the new offset of the appended instruction.','line_number':222,'multiline':False]
['text':' Write the instruction. The instruction writer may widen it later on,','line_number':225,'multiline':False]
['text':' if necessary.','line_number':226,'multiline':False]
['text':'instruction.write(code, codeLength);','line_number':232,'multiline':False]
['text':' Continue appending at the next instruction offset.','line_number':234,'multiline':False]
['text':'*
     * Appends the given label with the given old offset.
     * @param oldInstructionOffset the old offset of the label, to which
     *                             branches and other references in the current
     *                             code fragment are pointing.
     ','line_number':239,'multiline':True]
['text':' Make sure the code and offset arrays are large enough.','line_number':252,'multiline':False]
['text':' Remember the old offset of the following instruction.','line_number':255,'multiline':False]
['text':' Fill out the new offset of the following instruction.','line_number':258,'multiline':False]
['text':'*
     * Appends the given instruction without defined offsets.
     * @param instructions the instructions to be appended.
     ','line_number':263,'multiline':True]
['text':'*
     * Appends the given instruction without a defined offset.
     * Branch instructions should have a label, to allow computing the
     * new relative offset.
     * Branch instructions must fit, for instance by enabling automatic
     * shrinking of instructions.
     * @param instruction the instruction to be appended.
     ','line_number':276,'multiline':True]
['text':' Make sure the code array is large enough.','line_number':296,'multiline':False]
['text':' Write the instruction. The instruction writer may widen it later on,','line_number':301,'multiline':False]
['text':' if necessary.','line_number':302,'multiline':False]
['text':'instruction.write(code, codeLength);','line_number':308,'multiline':False]
['text':' Continue appending at the next instruction offset.','line_number':310,'multiline':False]
['text':'*
     * Appends the given exception to the exception table.
     * @param exceptionInfo the exception to be appended.
     ','line_number':315,'multiline':True]
['text':' Remap the exception right away.','line_number':326,'multiline':False]
['text':' Don't add the exception if its instruction range is empty.','line_number':334,'multiline':False]
['text':' Add the exception.','line_number':345,'multiline':False]
['text':'*
     * Inserts the given line number at the appropriate position in the line
     * number table.
     * @param lineNumberInfo the line number to be inserted.
     * @return the index where the line number was actually inserted.
     ','line_number':353,'multiline':True]
['text':'*
     * Inserts the given line number at the appropriate position in the line
     * number table.
     * @param minimumIndex   the minimum index where the line number may be
     *                       inserted.
     * @param lineNumberInfo the line number to be inserted.
     * @return the index where the line number was inserted.
     ','line_number':365,'multiline':True]
['text':' Remap the line number right away.','line_number':380,'multiline':False]
['text':' Find the insertion index, starting from the end.','line_number':392,'multiline':False]
['text':' Don't insert before a negative line number, in case of a tie.','line_number':393,'multiline':False]
['text':'*
     * Appends the given line number to the line number table.
     * @param lineNumberInfo the line number to be appended.
     ','line_number':409,'multiline':True]
['text':' Remap the line number right away.','line_number':420,'multiline':False]
['text':' Add the line number.','line_number':428,'multiline':False]
['text':'*
     * Wraps up the current code fragment, continuing with the previous one on
     * the stack.
     ','line_number':436,'multiline':True]
['text':' Remap the instructions of the code fragment.','line_number':447,'multiline':False]
['text':' Get the next instruction.','line_number':451,'multiline':False]
['text':' Does this instruction still have to be remapped?','line_number':454,'multiline':False]
['text':' Adapt the instruction for its new offset.','line_number':457,'multiline':False]
['text':' Write the instruction back. The instruction writer may still','line_number':460,'multiline':False]
['text':' widen it later on, if necessary.','line_number':461,'multiline':False]
['text':'instruction.write(code, codeLength);','line_number':467,'multiline':False]
['text':' Continue remapping at the next instruction offset.','line_number':470,'multiline':False]
['text':' Correct the estimated maximum code length, now that we know the','line_number':474,'multiline':False]
['text':' actual length of this code fragment.','line_number':475,'multiline':False]
['text':' Try to remap the exception handlers that couldn't be remapped before.','line_number':479,'multiline':False]
['text':' Unmapped exception handlers are still negated.','line_number':486,'multiline':False]
['text':' Implementations for AttributeVisitor.','line_number':506,'multiline':False]
['text':' Make sure the code attribute has sufficient space for the composed','line_number':525,'multiline':False]
['text':' code.','line_number':526,'multiline':False]
['text':' Copy the composed code over into the code attribute.','line_number':532,'multiline':False]
['text':' Remove exceptions with empty code blocks (done before).','line_number':536,'multiline':False]
['text':'exceptionTableLength =','line_number':537,'multiline':False]
['text':'    removeEmptyExceptions(exceptionTable, exceptionTableLength);','line_number':538,'multiline':False]
['text':' Make sure the exception table has sufficient space for the composed','line_number':540,'multiline':False]
['text':' exceptions.','line_number':541,'multiline':False]
['text':' Copy the exception table.','line_number':547,'multiline':False]
['text':' Update the maximum stack size and local variable frame size.','line_number':551,'multiline':False]
['text':' Add a new line number table for the line numbers, if necessary.','line_number':555,'multiline':False]
['text':' Copy the line number table and the local variable table.','line_number':567,'multiline':False]
['text':' Remap the exception table (done before).','line_number':570,'multiline':False]
['text':'codeAttribute.exceptionsAccept(clazz, method, this);','line_number':571,'multiline':False]
['text':' Remove exceptions with empty code blocks (done before).','line_number':573,'multiline':False]
['text':'codeAttribute.u2exceptionTableLength =','line_number':574,'multiline':False]
['text':'    removeEmptyExceptions(codeAttribute.exceptionTable,','line_number':575,'multiline':False]
['text':'                          codeAttribute.u2exceptionTableLength);','line_number':576,'multiline':False]
['text':' Make sure instructions are widened if necessary.','line_number':578,'multiline':False]
['text':' Remap all stack map entries.','line_number':592,'multiline':False]
['text':' Remap all stack map table entries.','line_number':600,'multiline':False]
['text':' Didn't we get line number new definitions?','line_number':608,'multiline':False]
['text':' Remap all line number table entries of the existing table.','line_number':611,'multiline':False]
['text':' Remove line numbers with empty code blocks.','line_number':616,'multiline':False]
['text':' Actually, we'll do this elsewhere, to allow processing the','line_number':617,'multiline':False]
['text':' line numbers of inlined methods.','line_number':618,'multiline':False]
['text':'lineNumberTableLength =','line_number':619,'multiline':False]
['text':'    removeEmptyLineNumbers(lineNumberTable,','line_number':620,'multiline':False]
['text':'                           lineNumberTableLength,','line_number':621,'multiline':False]
['text':'                           codeAttribute.u4codeLength);','line_number':622,'multiline':False]
['text':' Copy the line number table.','line_number':624,'multiline':False]
['text':' Remap all local variable table entries.','line_number':633,'multiline':False]
['text':' Remove local variables with empty code blocks.','line_number':636,'multiline':False]
['text':' Remap all local variable table entries.','line_number':646,'multiline':False]
['text':' Remove local variables with empty code blocks.','line_number':649,'multiline':False]
['text':' Implementations for InstructionVisitor.','line_number':663,'multiline':False]
['text':' Adjust the branch offset.','line_number':672,'multiline':False]
['text':' Don't remap this instruction again.','line_number':676,'multiline':False]
['text':' TODO: We're assuming we can adjust no offsets or all offsets at once.','line_number':693,'multiline':False]
['text':' Adjust the default jump offset.','line_number':694,'multiline':False]
['text':' Adjust the jump offsets.','line_number':698,'multiline':False]
['text':' Don't remap this instruction again.','line_number':702,'multiline':False]
['text':' Implementations for ExceptionInfoVisitor.','line_number':715,'multiline':False]
['text':' Remap the code offsets. Note that the instruction offset map also has','line_number':719,'multiline':False]
['text':' an entry for the first offset after the code, for u2endPC.','line_number':720,'multiline':False]
['text':' See if we can remap the handler right away. Unmapped exception','line_number':724,'multiline':False]
['text':' handlers are negated, in order to mark them as external.','line_number':725,'multiline':False]
['text':' Implementations for StackMapFrameVisitor.','line_number':735,'multiline':False]
['text':' Remap the stack map frame offset.','line_number':739,'multiline':False]
['text':' Compute the offset delta if the frame is part of a stack map frame','line_number':744,'multiline':False]
['text':' table (for JDK 6.0) instead of a stack map (for Java Micro Edition).','line_number':745,'multiline':False]
['text':' Remap the stack map frame offset.','line_number':759,'multiline':False]
['text':' Remap the verification type offset.','line_number':762,'multiline':False]
['text':' Remap the stack map frame offset.','line_number':769,'multiline':False]
['text':' Remap the verification type offsets.','line_number':772,'multiline':False]
['text':' Remap the stack map frame offset.','line_number':779,'multiline':False]
['text':' Remap the verification type offsets.','line_number':782,'multiline':False]
['text':' Implementations for VerificationTypeVisitor.','line_number':788,'multiline':False]
['text':' Remap the offset of the 'new' instruction.','line_number':795,'multiline':False]
['text':' Implementations for LineNumberInfoVisitor.','line_number':800,'multiline':False]
['text':' Remap the code offset.','line_number':804,'multiline':False]
['text':' Implementations for LocalVariableInfoVisitor.','line_number':809,'multiline':False]
['text':' Remap the code offset and length.','line_number':813,'multiline':False]
['text':' TODO: The local variable frame might not be strictly preserved.','line_number':814,'multiline':False]
['text':' Implementations for LocalVariableTypeInfoVisitor.','line_number':823,'multiline':False]
['text':' Remap the code offset and length.','line_number':827,'multiline':False]
['text':' TODO: The local variable frame might not be strictly preserved.','line_number':828,'multiline':False]
['text':' Implementations for TypeAnnotationVisitor.','line_number':838,'multiline':False]
['text':' Update all local variable targets.','line_number':842,'multiline':False]
['text':' Implementations for TargetInfoVisitor.','line_number':847,'multiline':False]
['text':' Update the offsets of the variables.','line_number':854,'multiline':False]
['text':' Update the offset.','line_number':861,'multiline':False]
['text':' Implementations for LocalVariableTargetElementVisitor.','line_number':866,'multiline':False]
['text':' Remap the code offset and length.','line_number':870,'multiline':False]
['text':' Small utility methods.','line_number':879,'multiline':False]
['text':'*
     * Make sure the code arrays have at least the given size.
     ','line_number':881,'multiline':True]
['text':' Add 20% to avoid extending the arrays too often.','line_number':888,'multiline':False]
['text':'*
     * Adjusts the given jump offsets for the instruction at the given offset.
     ','line_number':899,'multiline':True]
['text':'*
     * Computes the new branch offset for the instruction at the given new offset
     * with the given old branch offset.
     ','line_number':911,'multiline':True]
['text':' For ordinary branch instructions, we can compute the offset','line_number':925,'multiline':False]
['text':' relative to the instruction itself.','line_number':926,'multiline':False]
['text':'*
     * Computes the new instruction offset for the instruction at the given old
     * offset.
     ','line_number':932,'multiline':True]
['text':'*
     * Returns whether the given old exception handler can be remapped in the
     * current code fragment.
     ','line_number':954,'multiline':True]
['text':' Can we index in the array?','line_number':960,'multiline':False]
['text':' Do we have a valid new instruction offset, but not yet right after','line_number':966,'multiline':False]
['text':' the code? That offset is only labeled for mapping try blocks, not','line_number':967,'multiline':False]
['text':' for mapping handlers.','line_number':968,'multiline':False]
['text':'*
     * Returns the given list of exceptions, without the ones that have empty
     * code blocks.
     ','line_number':977,'multiline':True]
['text':' Overwrite all empty exceptions.','line_number':984,'multiline':False]
['text':' Clear the unused array entries.','line_number':995,'multiline':False]
['text':'*
     * Returns the given list of line numbers, without the ones that have empty
     * code blocks or that exceed the code size.
     ','line_number':1002,'multiline':True]
['text':' Overwrite all empty line number entries.','line_number':1010,'multiline':False]
['text':' Clear the unused array entries.','line_number':1023,'multiline':False]
['text':'*
     * Returns the given list of local variables, without the ones that have empty
     * code blocks or that exceed the actual number of local variables.
     ','line_number':1030,'multiline':True]
['text':' Overwrite all empty local variable entries.','line_number':1038,'multiline':False]
['text':' Clear the unused array entries.','line_number':1050,'multiline':False]
['text':'*
     * Returns the given list of local variable types, without the ones that
     * have empty code blocks or that exceed the actual number of local variables.
     ','line_number':1057,'multiline':True]
['text':' Overwrite all empty local variable type entries.','line_number':1065,'multiline':False]
['text':' Clear the unused array entries.','line_number':1077,'multiline':False]
