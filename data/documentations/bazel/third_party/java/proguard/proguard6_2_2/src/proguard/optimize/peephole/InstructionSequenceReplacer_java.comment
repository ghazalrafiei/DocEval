['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This InstructionVisitor replaces a given pattern instruction sequence by
 * another given replacement instruction sequence. The arguments of the
 * instruction sequences can be wildcards that are matched and replaced.
 *
 * The class also supports labels ({@link #label()}) and exception handlers
 * ({@link #catch_(int,int,int)}) in replacement sequences. They provide
 * local branch offsets inside the replacement sequences
 * ({@link Label#offset()}). For example, creating a replacement sequence
 * with the help of {@link InstructionSequenceBuilder}:
 * <code>
 *     final InstructionSequenceReplacer.Label TRY_START = InstructionSequenceReplacer.label();
 *     final InstructionSequenceReplacer.Label TRY_END   = InstructionSequenceReplacer.label();
 *     final InstructionSequenceReplacer.Label CATCH_END = InstructionSequenceReplacer.label();
 *
 *     final InstructionSequenceReplacer.Label CATCH_EXCEPTION =
 *         InstructionSequenceReplacer.catch_(TRY_START.offset(),
 *                                            TRY_END.offset(),
 *                                            constantPoolEditor.addClassConstant("java/lang/Exception", null));
 *
 *     Instructions[] replacementInstructions = builder
 *         .label(TRY_START)
 *         ......
 *         .label(TRY_END)
 *         .goto_(CATCH_END.offset())
 *         .catch_(CATCH_EXCEPTION)
 *         ......
 *         .athrow()
 *         .label(CATCH_END)
 *         ......
 *         .instructions();
 * </code>
 *
 * @see InstructionSequenceMatcher
 * @author Eric Lafortune
 ','line_number':32,'multiline':True]
['text':'*','line_number':73,'multiline':False]
['text':'/
    public  static       boolean DEBUG = System.getProperty("isr") != null;
    //','line_number':75,'multiline':True]
['text':' Replacement constants that are derived from matched variables.','line_number':112,'multiline':False]
['text':'*
     * Creates a new InstructionSequenceReplacer.
     * @param patternConstants        any constants referenced by the pattern
     *                                instructions.
     * @param patternInstructions     the pattern instruction sequence.
     * @param replacementConstants    any constants referenced by the
     *                                replacement instructions.
     * @param replacementInstructions the replacement instruction sequence.
     * @param branchTargetFinder      a branch target finder that has been
     *                                initialized to indicate branch targets
     *                                in the visited code.
     * @param codeAttributeEditor     a code editor that can be used for
     *                                accumulating changes to the code.
     ','line_number':142,'multiline':True]
['text':'*
     * Creates a new InstructionSequenceReplacer.
     * @param patternConstants        any constants referenced by the pattern
     *                                instructions.
     * @param patternInstructions     the pattern instruction sequence.
     * @param replacementConstants    any constants referenced by the
     *                                replacement instructions.
     * @param replacementInstructions the replacement instruction sequence.
     * @param branchTargetFinder      a branch target finder that has been
     *                                initialized to indicate branch targets
     *                                in the visited code.
     * @param codeAttributeEditor     a code editor that can be used for
     *                                accumulating changes to the code.
     * @param extraInstructionVisitor an optional extra visitor for all deleted
     *                                load instructions.
     ','line_number':173,'multiline':True]
['text':'*
     * Creates a new InstructionSequenceReplacer.
     * @param instructionSequenceMatcher a suitable instruction sequence matcher.
     * @param patternConstants           any constants referenced by the pattern
     *                                   instructions.
     * @param patternInstructions        the pattern instruction sequence.
     * @param replacementConstants       any constants referenced by the
     *                                   replacement instructions.
     * @param replacementInstructions    the replacement instruction sequence.
     * @param branchTargetFinder         a branch target finder that has been
     *                                   initialized to indicate branch targets
     *                                   in the visited code.
     * @param codeAttributeEditor        a code editor that can be used for
     *                                   accumulating changes to the code.
     * @param extraInstructionVisitor    an optional extra visitor for all deleted
     *                                   load instructions.
     ','line_number':209,'multiline':True]
['text':' Implementations for InstructionVisitor.','line_number':244,'multiline':False]
['text':' Reset the instruction sequence matcher if the instruction is a branch','line_number':248,'multiline':False]
['text':' target or if it has already been modified.','line_number':249,'multiline':False]
['text':' Try to match the instruction.','line_number':257,'multiline':False]
['text':' Did the instruction sequence match and is it still unmodified?','line_number':260,'multiline':False]
['text':' Is the replacement sequence shorter than the pattern sequence?','line_number':284,'multiline':False]
['text':' Replace the instruction sequence.','line_number':287,'multiline':False]
['text':' Delete any remaining instructions in the matched sequence.','line_number':294,'multiline':False]
['text':' Replace the instruction sequence.','line_number':302,'multiline':False]
['text':' Append the remaining instructions in the replacement','line_number':309,'multiline':False]
['text':' sequence.','line_number':310,'multiline':False]
['text':' Visit the instruction, if required.','line_number':321,'multiline':False]
['text':' Small utility methods.','line_number':334,'multiline':False]
['text':'*
     * Returns whether the matched pattern instructions haven't been modified
     * before.
     ','line_number':336,'multiline':True]
['text':'*
     * This class creates replacement instructions for matched sequences, with
     * any matched arguments filled out.
     ','line_number':354,'multiline':True]
['text':'*
         * Creates the replacement instruction for the given index in the
         * instruction sequence.
         ','line_number':364,'multiline':True]
['text':' Create the instruction.','line_number':378,'multiline':False]
['text':' Return it.','line_number':385,'multiline':False]
['text':' Implementations for InstructionVisitor.','line_number':390,'multiline':False]
['text':' Similar methods for pseudo-instructions.','line_number':449,'multiline':False]
['text':' Convert this pseudo-instruction into a corresponding','line_number':453,'multiline':False]
['text':' pseudo-instruction for the code attribute editor.','line_number':454,'multiline':False]
['text':' Then make sure we create a unique label, because','line_number':455,'multiline':False]
['text':' there may be other matching sequences.','line_number':456,'multiline':False]
['text':' Convert this pseudo-instruction into a corresponding','line_number':464,'multiline':False]
['text':' pseudo-instruction for the code attribute editor.','line_number':465,'multiline':False]
['text':' Then make sure we create and reference unique labels,','line_number':466,'multiline':False]
['text':' because there may be other matching sequences.','line_number':467,'multiline':False]
['text':'*
     * Returns the matched argument for the given pattern argument.
     ','line_number':478,'multiline':True]
['text':'*
     * Returns the matched argument for the given pattern argument.
     ','line_number':487,'multiline':True]
['text':' Special case: do we have to compute the string length?','line_number':492,'multiline':False]
['text':' Return the string length.','line_number':495,'multiline':False]
['text':' Otherwise, just return the matched argument.','line_number':499,'multiline':False]
['text':'*
     * Returns the matched or newly created constant index for the given
     * pattern constant index.
     ','line_number':504,'multiline':True]
['text':' Special case: do we have to create a concatenated string?','line_number':510,'multiline':False]
['text':' Create a new string constant and return its index.','line_number':514,'multiline':False]
['text':' Do we have a matched constant index?','line_number':525,'multiline':False]
['text':' Return its index.','line_number':528,'multiline':False]
['text':' Otherwise, we still have to create a new constant.','line_number':532,'multiline':False]
['text':' This currently only works for constants without any wildcards.','line_number':533,'multiline':False]
['text':'*
     * Returns the value of the specified matched branch offset.
     ','line_number':541,'multiline':True]
['text':' Special case: is it a label?','line_number':546,'multiline':False]
['text':' Then make sure we reference a unique label, because','line_number':549,'multiline':False]
['text':' there may be other matching sequences.','line_number':550,'multiline':False]
['text':' Otherwise, just return the matched branch offset.','line_number':554,'multiline':False]
['text':'*
     * Returns the values of the specified matched jump offsets.
     ','line_number':559,'multiline':True]
['text':' Special cases: are there any labels?','line_number':564,'multiline':False]
['text':' Then make sure we reference a unique label, because','line_number':569,'multiline':False]
['text':' there may be other matching sequences.','line_number':570,'multiline':False]
['text':' Match any other jump offsets.','line_number':575,'multiline':False]
['text':'*
     * Makes the given label identifier or offset unique for the current
     * matching instruction sequence.
     ','line_number':651,'multiline':True]
['text':' For convenience, we also define two pseudo-instructions, to conveniently','line_number':662,'multiline':False]
['text':' mark local labels and create new exceptions handlers.','line_number':663,'multiline':False]
['text':'*
     * Creates a new label that can be used as a pseudo-instruction to mark
     * a local offset. Its offset can be used as a branch target in
     * replacement instructions ({@link Label#offset()}).
     ','line_number':665,'multiline':True]
['text':'*
     * Creates a new catch instance that can be used as a pseudo-instruction
     * to mark the start of an exception handler. Its offset can be used as
     * a branch target in replacement instructions ({@link Label#offset()}).
     ','line_number':676,'multiline':True]
['text':'*
     * Returns whether the given instruction offset actually represents a
     * label (which contains the actual offset).
     ','line_number':692,'multiline':True]
['text':'*
     * This pseudo-instruction represents a label that marks an instruction
     * offset, for use in the context of the sequence replacer only.
     ','line_number':702,'multiline':True]
['text':'*
         * Creates a new Label.
         * @param identifier an identifier that can be chosen freely.
         ','line_number':712,'multiline':True]
['text':'*
         * Returns the offset that can then be used as a branch target in
         * other replacement instructions.
         ','line_number':722,'multiline':True]
['text':' Implementations for Instruction.','line_number':732,'multiline':False]
['text':' Since this is not a standard instruction, it only works with','line_number':765,'multiline':False]
['text':' our own instruction visitor.','line_number':766,'multiline':False]
['text':' Implementations for Object.','line_number':778,'multiline':False]
['text':'*
     * This pseudo-instruction represents an exception handler,
     * for use in the context of the sequence replacer only.
     ','line_number':787,'multiline':True]
['text':'*
         * Creates a new Catch instance.
         * @param identifier  an identifier that can be chosen freely.
         * @param startOffset the start offset of the catch block.
         * @param endOffset   the end offset of the catch block.
         * @param catchType   the index of the catch type in the constant pool.
         ','line_number':799,'multiline':True]
['text':' Implementations for Instruction.','line_number':819,'multiline':False]
['text':' Since this is not a standard instruction, it only works with','line_number':852,'multiline':False]
['text':' our own instruction visitor.','line_number':853,'multiline':False]
['text':' Implementations for Object.','line_number':865,'multiline':False]
