['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This class can tell whether an instruction might throw exceptions.
 *
 * @author Eric Lafortune
 ','line_number':29,'multiline':True]
['text':'             ConstantVisitor,','line_number':37,'multiline':False]
['text':'             MemberVisitor','line_number':38,'multiline':False]
['text':'*','line_number':40,'multiline':False]
['text':'/
    public  static       boolean DEBUG = System.getProperty("eic") != null;
    //','line_number':42,'multiline':True]
['text':' A return value for the visitor methods.','line_number':47,'multiline':False]
['text':'*
     * Returns whether the specified method may throw exceptions.
     ','line_number':51,'multiline':True]
['text':'*
     * Returns whether the specified block of code may throw exceptions.
     ','line_number':66,'multiline':True]
['text':'*
     * Returns the offset of the first instruction in the specified block of
     * code that may throw exceptions, or the end offset if there is none.
     ','line_number':88,'multiline':True]
['text':' Go over all instructions.','line_number':105,'multiline':False]
['text':' Get the current instruction.','line_number':109,'multiline':False]
['text':' Check if it may be throwing exceptions.','line_number':112,'multiline':False]
['text':' Go to the next instruction.','line_number':127,'multiline':False]
['text':'*
     * Returns the offset after the last instruction in the specified block of
     * code that may throw exceptions, or the start offset if there is none.
     ','line_number':135,'multiline':True]
['text':' Go over all instructions.','line_number':154,'multiline':False]
['text':' Get the current instruction.','line_number':158,'multiline':False]
['text':' Check if it may be throwing exceptions.','line_number':161,'multiline':False]
['text':' Go to the next instruction.','line_number':173,'multiline':False]
['text':' Go to the next instruction.','line_number':180,'multiline':False]
['text':'*
     * Returns whether the specified instruction may throw exceptions.
     ','line_number':189,'multiline':True]
['text':'*
     * Returns whether the given instruction may throw exceptions.
     ','line_number':207,'multiline':True]
['text':'        mayThrowExceptions = false;','line_number':218,'multiline':False]
['text':'','line_number':219,'multiline':False]
['text':'        instruction.accept(clazz, method,  codeAttribute, offset, this);','line_number':220,'multiline':False]
['text':'','line_number':221,'multiline':False]
['text':'        return mayThrowExceptions;','line_number':222,'multiline':False]
['text':' Implementations for InstructionVisitor.','line_number':226,'multiline':False]
['text':' Check for instructions that may throw exceptions.','line_number':233,'multiline':False]
['text':' Note that monitorexit can not sensibly throw exceptions, except the','line_number':234,'multiline':False]
['text':' broken and deprecated asynchronous ThreadDeath. Removing the','line_number':235,'multiline':False]
['text':' artificial infinite looping exception blocks that recent compilers','line_number':236,'multiline':False]
['text':' add does not strictly follow the JVM specs, but it does have the','line_number':237,'multiline':False]
['text':' additional benefit of avoiding a bug in the JVM in JDK 1.1.','line_number':238,'multiline':False]
['text':' These instructions may throw exceptions.','line_number':265,'multiline':False]
['text':' Check for instructions that may throw exceptions.','line_number':273,'multiline':False]
['text':' These instructions may throw exceptions.','line_number':290,'multiline':False]
['text':'          case InstructionConstants.OP_INVOKEVIRTUAL:','line_number':293,'multiline':False]
['text':'          case InstructionConstants.OP_INVOKESPECIAL:','line_number':294,'multiline':False]
['text':'          case InstructionConstants.OP_INVOKESTATIC:','line_number':295,'multiline':False]
['text':'          case InstructionConstants.OP_INVOKEINTERFACE:','line_number':296,'multiline':False]
['text':'            // Check if the invoking the method may throw an exception.','line_number':297,'multiline':False]
['text':'            clazz.constantPoolEntryAccept(constantInstruction.constantIndex, this);','line_number':298,'multiline':False]
['text':'    // Implementations for ConstantVisitor.','line_number':303,'multiline':False]
['text':'','line_number':304,'multiline':False]
['text':'    public void visitAnyMethodrefConstant(Clazz clazz, RefConstant refConstant)','line_number':305,'multiline':False]
['text':'    {','line_number':306,'multiline':False]
['text':'        Member referencedMember = refConstant.referencedMember;','line_number':307,'multiline':False]
['text':'','line_number':308,'multiline':False]
['text':'        // Do we have a reference to the method?','line_number':309,'multiline':False]
['text':'        if (referencedMember == null)','line_number':310,'multiline':False]
['text':'        {','line_number':311,'multiline':False]
['text':'            // We'll have to assume invoking the unknown method may throw an','line_number':312,'multiline':False]
['text':'            // an exception.','line_number':313,'multiline':False]
['text':'            mayThrowExceptions = true;','line_number':314,'multiline':False]
['text':'        }','line_number':315,'multiline':False]
['text':'        else','line_number':316,'multiline':False]
['text':'        {','line_number':317,'multiline':False]
['text':'            // First check the referenced method itself.','line_number':318,'multiline':False]
['text':'            refConstant.referencedMemberAccept(this);','line_number':319,'multiline':False]
['text':'','line_number':320,'multiline':False]
['text':'            // If the result isn't conclusive, check down the hierarchy.','line_number':321,'multiline':False]
['text':'            if (!mayThrowExceptions)','line_number':322,'multiline':False]
['text':'            {','line_number':323,'multiline':False]
['text':'                Clazz  referencedClass  = refConstant.referencedClass;','line_number':324,'multiline':False]
['text':'                Method referencedMethod = (Method)referencedMember;','line_number':325,'multiline':False]
['text':'','line_number':326,'multiline':False]
['text':'                // Check all other implementations of the method in the class','line_number':327,'multiline':False]
['text':'                // hierarchy.','line_number':328,'multiline':False]
['text':'                referencedClass.methodImplementationsAccept(referencedMethod,','line_number':329,'multiline':False]
['text':'                                                            false,','line_number':330,'multiline':False]
['text':'                                                            false,','line_number':331,'multiline':False]
['text':'                                                            true,','line_number':332,'multiline':False]
['text':'                                                            true,','line_number':333,'multiline':False]
['text':'                                                            this);','line_number':334,'multiline':False]
['text':'            }','line_number':335,'multiline':False]
['text':'        }','line_number':336,'multiline':False]
['text':'    }','line_number':337,'multiline':False]
['text':'','line_number':338,'multiline':False]
['text':'','line_number':339,'multiline':False]
['text':'    // Implementations for MemberVisitor.','line_number':340,'multiline':False]
['text':'','line_number':341,'multiline':False]
['text':'    public void visitProgramMethod(ProgramClass programClass, ProgramMethod programMethod)','line_number':342,'multiline':False]
['text':'    {','line_number':343,'multiline':False]
['text':'        mayThrowExceptions = mayThrowExceptions ||','line_number':344,'multiline':False]
['text':'                             ExceptionMethodMarker.mayThrowExceptions(programMethod);','line_number':345,'multiline':False]
['text':'    }','line_number':346,'multiline':False]
['text':'','line_number':347,'multiline':False]
['text':'','line_number':348,'multiline':False]
['text':'    public void visitLibraryMethod(LibraryClass libraryClass, LibraryMethod libraryMethod)','line_number':349,'multiline':False]
['text':'    {','line_number':350,'multiline':False]
['text':'        mayThrowExceptions = mayThrowExceptions ||','line_number':351,'multiline':False]
['text':'                             !NoExceptionMethodMarker.doesntThrowExceptions(libraryMethod);','line_number':352,'multiline':False]
['text':'    }','line_number':353,'multiline':False]
