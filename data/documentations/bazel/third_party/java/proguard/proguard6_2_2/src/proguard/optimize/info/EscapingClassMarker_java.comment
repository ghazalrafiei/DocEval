['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This AttributeVisitor marks the classes that are escaping from the visited
 * code attributes.
 *
 * @see ReferenceEscapeChecker
 * @author Eric Lafortune
 ','line_number':34,'multiline':True]
['text':'*','line_number':47,'multiline':False]
['text':'/
    private static       boolean DEBUG = System.getProperty("ecm") != null;
    //','line_number':49,'multiline':True]
['text':'*
     * Creates a new EscapingClassMarker.
     ','line_number':60,'multiline':True]
['text':' We need typed references.','line_number':65,'multiline':False]
['text':'*
     * Creates a new EscapingClassMarker.
     ','line_number':70,'multiline':True]
['text':'*
     * Creates a new EscapingClassMarker.
     ','line_number':80,'multiline':True]
['text':'*
     * Creates a new EscapingClassMarker.
     ','line_number':94,'multiline':True]
['text':'*
     * Creates a new EscapingClassMarker.
     ','line_number':107,'multiline':True]
['text':' Implementations for AttributeVisitor.','line_number':122,'multiline':False]
['text':' Evaluate the code.','line_number':129,'multiline':False]
['text':' Mark all escaping classes.','line_number':140,'multiline':False]
['text':' Implementations for InstructionVisitor.','line_number':147,'multiline':False]
['text':' Does the instruction push a value that escapes?','line_number':151,'multiline':False]
['text':' We'll also count values that are returned, since they may be','line_number':152,'multiline':False]
['text':' downcast and the downcast type may escape in some calling','line_number':153,'multiline':False]
['text':' method.','line_number':154,'multiline':False]
['text':' TODO: Refine check: is a value is downcast to an escaping class, while it is being returned?','line_number':155,'multiline':False]
['text':' Is it really a reference type?','line_number':163,'multiline':False]
['text':' Is it a plain class reference type?','line_number':166,'multiline':False]
['text':' Do we know the class?','line_number':171,'multiline':False]
['text':' Mark it, along with its superclasses.','line_number':180,'multiline':False]
['text':' Implementations for ClassVisitor.','line_number':190,'multiline':False]
['text':' Small utility methods.','line_number':200,'multiline':False]
['text':'*
     * Marks the given class as escaping.
     ','line_number':202,'multiline':True]
['text':'*
     * Returns whether the given class is escaping.
     ','line_number':215,'multiline':True]
