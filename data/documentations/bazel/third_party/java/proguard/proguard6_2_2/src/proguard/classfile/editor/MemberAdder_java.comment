['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This MemberVisitor copies all class members that it visits to the given
 * target class. Their visitor info is set to the class members from which they
 * were copied.
 *
 * @author Eric Lafortune
 ','line_number':33,'multiline':True]
['text':'*','line_number':44,'multiline':False]
['text':'/
    private static       boolean DEBUG = true;
    //','line_number':46,'multiline':True]
['text':'*
     * Creates a new MemberAdder that will copy methods into the given target
     * class.
     * @param targetClass the class to which all visited class members will be
     *                    added.
     ','line_number':62,'multiline':True]
['text':'*
     * Creates a new MemberAdder that will copy methods into the given target
     * class.
     * @param targetClass        the class to which all visited class members
     *                           will be added.
     * @param extraMemberVisitor an optional member visitor that visits each
     *                           new member right after it has been added. This
     *                           allows changing the visitor info, for instance.
     ','line_number':74,'multiline':True]
['text':'*
     * Creates a new MemberAdder that will copy methods into the given target
     * class.
     * @param targetClass        the class to which all visited class members
     *                           will be added.
     * @param nameTransformer    the transformer to be applied to each member's
     *                           name before copying. If null, the original
     *                           name will be used.
     * @param extraMemberVisitor an optional member visitor that visits each
     *                           new member right after it has been added. This
     *                           allows changing the visitor info, for instance.
     ','line_number':89,'multiline':True]
['text':' Implementations for MemberVisitor.','line_number':114,'multiline':False]
['text':' TODO: Handle field with the same name and descriptor in the target class.','line_number':127,'multiline':False]
['text':' We currently avoid this case, since renaming the identical field','line_number':128,'multiline':False]
['text':' still causes confused field references.','line_number':129,'multiline':False]
['text':'// Does the target class already have such a field?','line_number':130,'multiline':False]
['text':'ProgramField targetField = (ProgramField)targetClass.findField(name, descriptor);','line_number':131,'multiline':False]
['text':'if (targetField != null)','line_number':132,'multiline':False]
['text':'{','line_number':133,'multiline':False]
['text':'    // Is the field private or static?','line_number':134,'multiline':False]
['text':'    int targetAccessFlags = targetField.getAccessFlags();','line_number':135,'multiline':False]
['text':'    if ((targetAccessFlags &','line_number':136,'multiline':False]
['text':'         (ClassConstants.ACC_PRIVATE |','line_number':137,'multiline':False]
['text':'          ClassConstants.ACC_STATIC)) != 0)','line_number':138,'multiline':False]
['text':'    {','line_number':139,'multiline':False]
['text':'        // Rename the private or static field.','line_number':140,'multiline':False]
['text':'        String newName = newUniqueMemberName(name, targetClass.getName());','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':'        if (DEBUG)','line_number':143,'multiline':False]
['text':'        {','line_number':144,'multiline':False]
['text':'            System.out.println("MemberAdder: renaming field ["+targetClass.getName()+"."+name+" "+descriptor+"] to ["+newName+"]");','line_number':145,'multiline':False]
['text':'        }','line_number':146,'multiline':False]
['text':'','line_number':147,'multiline':False]
['text':'        targetField.u2nameIndex = constantPoolEditor.addUtf8Constant(newName);','line_number':148,'multiline':False]
['text':'    }','line_number':149,'multiline':False]
['text':'    else','line_number':150,'multiline':False]
['text':'    {','line_number':151,'multiline':False]
['text':'        // Keep the non-private and non-static field, but update its','line_number':152,'multiline':False]
['text':'        // contents, in order to keep any references to it valid.','line_number':153,'multiline':False]
['text':'        if (DEBUG)','line_number':154,'multiline':False]
['text':'        {','line_number':155,'multiline':False]
['text':'            System.out.println("MemberAdder: updating field ["+programClass+"."+programField.getName(programClass)+" "+programField.getDescriptor(programClass)+"] into ["+targetClass.getName()+"]");','line_number':156,'multiline':False]
['text':'        }','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':'        // Combine the access flags.','line_number':159,'multiline':False]
['text':'        targetField.u2accessFlags = accessFlags | targetAccessFlags;','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':'        // Add and replace any attributes.','line_number':162,'multiline':False]
['text':'        programField.attributesAccept(programClass,','line_number':163,'multiline':False]
['text':'                                      new AttributeAdder(targetClass,','line_number':164,'multiline':False]
['text':'                                                         targetField,','line_number':165,'multiline':False]
['text':'                                                         true));','line_number':166,'multiline':False]
['text':'','line_number':167,'multiline':False]
['text':'        // Don't add a new field.','line_number':168,'multiline':False]
['text':'        return;','line_number':169,'multiline':False]
['text':'    }','line_number':170,'multiline':False]
['text':'}','line_number':171,'multiline':False]
['text':' Create a copy of the field.','line_number':178,'multiline':False]
['text':' Link to its visitor info.','line_number':189,'multiline':False]
['text':' Copy its attributes.','line_number':192,'multiline':False]
['text':' Add the completed field.','line_number':198,'multiline':False]
['text':' Visit the newly added field, if necessary.','line_number':201,'multiline':False]
['text':' Does the target class already have such a method?','line_number':220,'multiline':False]
['text':' is this source method abstract?','line_number':224,'multiline':False]
['text':' Keep the target method.','line_number':227,'multiline':False]
['text':' Don't add a new method.','line_number':233,'multiline':False]
['text':' Is the target method abstract?','line_number':237,'multiline':False]
['text':' Keep the abstract method, but update its contents, in order','line_number':241,'multiline':False]
['text':' to keep any references to it valid.','line_number':242,'multiline':False]
['text':' Replace the access flags.','line_number':248,'multiline':False]
['text':' Add and replace the attributes.','line_number':252,'multiline':False]
['text':' Don't add a new method.','line_number':258,'multiline':False]
['text':' TODO: Handle non-abstract method with the same name and descriptor in the target class.','line_number':267,'multiline':False]
['text':' We currently avoid this case, since renaming the identical method','line_number':268,'multiline':False]
['text':' still causes confused method references.','line_number':269,'multiline':False]
['text':'// Rename the private (non-abstract) or static method.','line_number':270,'multiline':False]
['text':'targetMethod.u2nameIndex =','line_number':271,'multiline':False]
['text':'    constantPoolEditor.addUtf8Constant(newUniqueMemberName(name, descriptor));','line_number':272,'multiline':False]
['text':' Create a copy of the method.','line_number':280,'multiline':False]
['text':' Link to its visitor info.','line_number':291,'multiline':False]
['text':' Copy its attributes.','line_number':294,'multiline':False]
['text':' Add the completed method.','line_number':300,'multiline':False]
['text':' Visit the newly added method, if necessary.','line_number':303,'multiline':False]
['text':' Small utility methods.','line_number':311,'multiline':False]
['text':'*
     * Returns a unique class member name, based on the given name and descriptor.
     ','line_number':313,'multiline':True]
['text':'*
     * This main method illustrates and tests the class, by reading an input
     * class file and copying its class members into a new class that it
     * writes to an output class file.
     ','line_number':324,'multiline':True]
['text':' Read the input class.','line_number':342,'multiline':False]
['text':' Create an empty output class.','line_number':349,'multiline':False]
['text':' Copy over the class members.','line_number':367,'multiline':False]
['text':'outputProgramClass.accept(new ClassPrinter());','line_number':374,'multiline':False]
['text':' Write out the output class.','line_number':376,'multiline':False]
