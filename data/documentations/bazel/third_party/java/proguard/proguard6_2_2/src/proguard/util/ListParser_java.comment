['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This StringParser can create StringMatcher instances for regular expressions.
 * The regular expressions are either presented as a list, or they are
 * interpreted as comma-separated lists, optionally prefixed with '!' negators.
 * If an entry with a negator matches, a negative match is returned, without
 * considering any subsequent entries in the list. The creation of StringMatcher
 * instances  for the entries is delegated to the given StringParser.
 *
 * @author Eric Lafortune
 ','line_number':25,'multiline':True]
['text':'*
     * Creates a new ListParser that parses individual elements in the
     * comma-separated list with the given StringParser.
     ','line_number':40,'multiline':True]
['text':' Implementations for StringParser.','line_number':50,'multiline':False]
['text':' Does the regular expression contain a ',' list separator?','line_number':54,'multiline':False]
['text':'*
     * Creates a StringMatcher for the given regular expression, which can
     * be a list of optionally negated simple entries.
     * <p>
     * An empty list results in a StringMatcher that matches any string.
     ','line_number':59,'multiline':True]
['text':' Loop over all simple regular expressions, backward, creating a','line_number':69,'multiline':False]
['text':' linked list of matchers.','line_number':70,'multiline':False]
['text':' Prepend the entry matcher.','line_number':77,'multiline':False]
['text':' Small utility methods.','line_number':90,'multiline':False]
['text':'*
     * Creates a StringMatcher for the given regular expression, which is a
     * an optionally negated simple expression.
     ','line_number':92,'multiline':True]
['text':' Wrap the matcher if the regular expression starts with a '!' negator.','line_number':98,'multiline':False]
['text':'*
     * Returns whether the given simple regular expression is negated.
     ','line_number':105,'multiline':True]
['text':'*
     * A main method for testing name matching.
     ','line_number':115,'multiline':True]
