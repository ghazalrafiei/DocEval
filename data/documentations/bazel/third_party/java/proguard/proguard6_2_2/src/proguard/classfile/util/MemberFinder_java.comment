['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This utility class provides methods to find class members in a given class
 * or in its hierarchy.
 *
 * @author Eric Lafortune
 ','line_number':26,'multiline':True]
['text':'*
     * Creates a new MemberFinder that looks in the class hierarchy.
     ','line_number':45,'multiline':True]
['text':'*
     * Creates a new MemberFinder that looks in the class hierarchy if
     * specified.
     ','line_number':54,'multiline':True]
['text':'*
     * Finds the field with the given name and descriptor in the given
     * class or its hierarchy. The name and descriptor may contain wildcards.
     ','line_number':64,'multiline':True]
['text':'*
     * Finds the field with the given name and descriptor in the given
     * class or its hierarchy. The name and descriptor may contain wildcards.
     ','line_number':76,'multiline':True]
['text':'*
     * Finds the method with the given name and descriptor in the given
     * class or its hierarchy. The name and descriptor may contain wildcards.
     ','line_number':89,'multiline':True]
['text':'*
     * Finds the method with the given name and descriptor in the given
     * class or its hierarchy. The name and descriptor may contain wildcards.
     ','line_number':101,'multiline':True]
['text':'*
     * Finds the class member with the given name and descriptor in the given
     * class or its hierarchy. The name and descriptor may contain wildcards.
     ','line_number':114,'multiline':True]
['text':'*
     * Finds the class member with the given name and descriptor in the given
     * class or its hierarchy, referenced from the optional given class.
     * The name and descriptor may contain wildcards.
     ','line_number':127,'multiline':True]
['text':' The class member may be in a different class, as of Java 1.2.','line_number':147,'multiline':False]
['text':' The class member may be private in a nest member, as of Java 11.','line_number':148,'multiline':False]
['text':' Check the accessibility from the referencing class, if any','line_number':149,'multiline':False]
['text':' (non-dummy), taking into account access flags and nests.','line_number':150,'multiline':False]
['text':' We'll return with a MemberFoundException as soon as we've found','line_number':157,'multiline':False]
['text':' the class member.','line_number':158,'multiline':False]
['text':' We've found the member we were looking for.','line_number':183,'multiline':False]
['text':'*
     * Returns the corresponding class of the most recently found class
     * member.
     ','line_number':190,'multiline':True]
['text':'*
     * Returns whether the given method is overridden anywhere down the class
     * hierarchy.
     ','line_number':200,'multiline':True]
['text':' Go looking for the method down the class hierarchy.','line_number':210,'multiline':False]
['text':' We've found an overriding method.','line_number':222,'multiline':False]
['text':'*
     * Returns whether the given field is shadowed anywhere down the class
     * hierarchy.
     ','line_number':230,'multiline':True]
['text':' Go looking for the field down the class hierarchy.','line_number':240,'multiline':False]
['text':' We've found a shadowing field.','line_number':251,'multiline':False]
['text':'    // Implementations for ClassVisitor.','line_number':259,'multiline':False]
['text':'','line_number':260,'multiline':False]
['text':'    private void visitAnyClass(Clazz clazz)','line_number':261,'multiline':False]
['text':'    {','line_number':262,'multiline':False]
['text':'        if (member == null)','line_number':263,'multiline':False]
['text':'        {','line_number':264,'multiline':False]
['text':'            member = isField ?','line_number':265,'multiline':False]
['text':'                (Member)clazz.findField(name, descriptor) :','line_number':266,'multiline':False]
['text':'                (Member)clazz.findMethod(name, descriptor);','line_number':267,'multiline':False]
['text':'','line_number':268,'multiline':False]
['text':'            if (member != null)','line_number':269,'multiline':False]
['text':'            {','line_number':270,'multiline':False]
['text':'                this.clazz = clazz;','line_number':271,'multiline':False]
['text':'            }','line_number':272,'multiline':False]
['text':'        }','line_number':273,'multiline':False]
['text':'    }','line_number':274,'multiline':False]
['text':' Implementations for MemberVisitor.','line_number':277,'multiline':False]
