['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This InstructionVisitor initializes any constant <code>Class.forName</code> or
 * <code>.class</code> references of all classes it visits. More specifically,
 * it fills out the references of string constant pool entries that refer to a
 * class in the program class pool or in the library class pool.
 * <p>
 * It optionally prints notes if on usage of
 * <code>(SomeClass)Class.forName(variable).newInstance()</code>.
 * <p>
 * The class hierarchy must be initialized before using this visitor.
 *
 * @see ClassSuperHierarchyInitializer
 *
 * @author Eric Lafortune
 ','line_number':32,'multiline':True]
['text':' 0','line_number':65,'multiline':False]
['text':' 6','line_number':73,'multiline':False]
['text':' 10','line_number':79,'multiline':False]
['text':' Class.forName("SomeClass").','line_number':86,'multiline':False]
['text':' (SomeClass)Class.forName(someName).newInstance().','line_number':93,'multiline':False]
['text':'    private Constant[] DOT_CLASS_JAVAC_CONSTANTS = new Constant[]','line_number':102,'multiline':False]
['text':'    {','line_number':103,'multiline':False]
['text':'        new MethodrefConstant(A, 1, null, null),','line_number':104,'multiline':False]
['text':'        new NameAndTypeConstant(2, 3),','line_number':105,'multiline':False]
['text':'        new Utf8Constant(ClassConstants.METHOD_NAME_DOT_CLASS_JAVAC),','line_number':106,'multiline':False]
['text':'        new Utf8Constant(ClassConstants.METHOD_TYPE_DOT_CLASS_JAVAC),','line_number':107,'multiline':False]
['text':'    };','line_number':108,'multiline':False]
['text':' SomeClass.class = class$("SomeClass") (javac).','line_number':117,'multiline':False]
['text':'    private Constant[] DOT_CLASS_JIKES_CONSTANTS = new Constant[]','line_number':125,'multiline':False]
['text':'    {','line_number':126,'multiline':False]
['text':'        new MethodrefConstant(A, 1, null, null),','line_number':127,'multiline':False]
['text':'        new NameAndTypeConstant(2, 3),','line_number':128,'multiline':False]
['text':'        new Utf8Constant(ClassConstants.METHOD_NAME_DOT_CLASS_JIKES),','line_number':129,'multiline':False]
['text':'        new Utf8Constant(ClassConstants.METHOD_TYPE_DOT_CLASS_JIKES),','line_number':130,'multiline':False]
['text':'    };','line_number':131,'multiline':False]
['text':' SomeClass.class = class("SomeClass", false) (jikes).','line_number':140,'multiline':False]
['text':' return Class.forName(v0).','line_number':148,'multiline':False]
['text':' return Class.forName(v0), if (!v1) .getComponentType().','line_number':156,'multiline':False]
['text':' return Class.forName(v0).getComponentType().','line_number':167,'multiline':False]
['text':' A field acting as a return variable for the visitors.','line_number':214,'multiline':False]
['text':'*
     * Creates a new DynamicClassReferenceInitializer that optionally prints
     * warnings and notes, with optional class specifications for which never
     * to print notes.
     ','line_number':218,'multiline':True]
['text':' Implementations for InstructionVisitor.','line_number':239,'multiline':False]
['text':' Try to match the (SomeClass)Class.forName(someName).newInstance()','line_number':243,'multiline':False]
['text':' construct. Apply this matcher first, so the next matcher can still','line_number':244,'multiline':False]
['text':' reset it after the first instruction.','line_number':245,'multiline':False]
['text':' Did we find a match?','line_number':249,'multiline':False]
['text':' Print out a note about the construct.','line_number':252,'multiline':False]
['text':' Try to match the Class.forName("SomeClass") construct.','line_number':256,'multiline':False]
['text':' Did we find a match?','line_number':260,'multiline':False]
['text':' Fill out the matched string constant.','line_number':263,'multiline':False]
['text':' Don't look for the dynamic construct.','line_number':266,'multiline':False]
['text':' Try to match the javac .class construct.','line_number':270,'multiline':False]
['text':' Did we find a match?','line_number':274,'multiline':False]
['text':' Fill out the matched string constant.','line_number':278,'multiline':False]
['text':' Try to match the jikes .class construct.','line_number':282,'multiline':False]
['text':' Did we find a match?','line_number':286,'multiline':False]
['text':' Fill out the matched string constant.','line_number':290,'multiline':False]
['text':' Implementations for ConstantVisitor.','line_number':296,'multiline':False]
['text':'*
     * Fills out the link to the referenced class.
     ','line_number':298,'multiline':True]
['text':' Save a reference to the corresponding class.','line_number':303,'multiline':False]
['text':'*
     * Prints out a note about the class cast to this class, if applicable.
     ','line_number':312,'multiline':True]
['text':' Print out a note about the class cast.','line_number':317,'multiline':False]
['text':'*
     * Checks whether the referenced method is a .class method.
     ','line_number':332,'multiline':True]
['text':' Do the method's class and type match?','line_number':339,'multiline':False]
['text':' Does the method's name match one of the special names?','line_number':345,'multiline':False]
['text':' Note that we look for the class by name, since the referenced','line_number':357,'multiline':False]
['text':' class has not been initialized yet.','line_number':358,'multiline':False]
['text':' Check if the code of the referenced method is .class code.','line_number':362,'multiline':False]
['text':' Note that we look for the method by name and type, since the','line_number':363,'multiline':False]
['text':' referenced method has not been initialized yet.','line_number':364,'multiline':False]
['text':' Implementations for AttributeVisitor.','line_number':373,'multiline':False]
['text':' Check whether this is class$(String), as generated by javac, or','line_number':380,'multiline':False]
['text':' class(String, boolean), as generated by jikes, or an optimized','line_number':381,'multiline':False]
['text':' version.','line_number':382,'multiline':False]
['text':' Small utility methods.','line_number':393,'multiline':False]
['text':'*
     * Returns whether the given method reference corresponds to a .class
     * method, as generated by javac or by jikes.
     ','line_number':395,'multiline':True]
['text':' Check if the code of the referenced method is .class code.','line_number':403,'multiline':False]
['text':'*
     * Returns whether the first whether the first instructions of the
     * given code attribute match with the given instruction matcher.
     ','line_number':410,'multiline':True]
['text':' Check the minimum code length.','line_number':420,'multiline':False]
['text':' Check the actual instructions.','line_number':426,'multiline':False]
['text':'*
     * Returns the class with the given name, either for the program class pool
     * or from the library class pool, or <code>null</code> if it can't be found.
     ','line_number':433,'multiline':True]
['text':' Is it an array type?','line_number':439,'multiline':False]
['text':' Ignore any primitive array types.','line_number':442,'multiline':False]
['text':' Strip the array part.','line_number':448,'multiline':False]
['text':' First look for the class in the program class pool.','line_number':452,'multiline':False]
['text':' Otherwise look for the class in the library class pool.','line_number':455,'multiline':False]
['text':' We didn't find the superclass or interface. Print a note.','line_number':463,'multiline':False]
['text':' The superclass or interface was found in the program class pool.','line_number':474,'multiline':False]
['text':' Print a warning.','line_number':475,'multiline':False]
