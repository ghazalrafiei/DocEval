['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This <code>NameFactory</code> generates names that are read from a
 * specified input file.
 * Comments (everything starting with '#' on a single line) are ignored.
 *
 * @author Eric Lafortune
 ','line_number':27,'multiline':True]
['text':'*
     * Creates a new <code>DictionaryNameFactory</code>.
     * @param url         the URL from which the names can be read.
     * @param nameFactory the name factory from which names will be retrieved
     *                    if the list of read names has been exhausted.
     ','line_number':45,'multiline':True]
['text':'*
     * Creates a new <code>DictionaryNameFactory</code>.
     * @param url                  the URL from which the names can be read.
     * @param validJavaIdentifiers specifies whether the produced names should
     *                             be valid Java identifiers.
     * @param nameFactory          the name factory from which names will be
     *                             retrieved if the list of read names has been
     *                             exhausted.
     ','line_number':58,'multiline':True]
['text':'*
     * Creates a new <code>DictionaryNameFactory</code>.
     * @param file        the file from which the names can be read.
     * @param nameFactory the name factory from which names will be retrieved
     *                    if the list of read names has been exhausted.
     ','line_number':79,'multiline':True]
['text':'*
     * Creates a new <code>DictionaryNameFactory</code>.
     * @param file                 the file from which the names can be read.
     * @param validJavaIdentifiers specifies whether the produced names should
     *                             be valid Java identifiers.
     * @param nameFactory          the name factory from which names will be
     *                             retrieved if the list of read names has been
     *                             exhausted.
     ','line_number':92,'multiline':True]
['text':'*
     * Creates a new <code>DictionaryNameFactory</code>.
     * @param reader      the reader from which the names can be read. The
     *                    reader is closed at the end.
     * @param nameFactory the name factory from which names will be retrieved
     *                    if the list of read names has been exhausted.
     ','line_number':113,'multiline':True]
['text':'*
     * Creates a new <code>DictionaryNameFactory</code>.
     * @param reader               the reader from which the names can be read.
     *                             The reader is closed at the end.
     * @param validJavaIdentifiers specifies whether the produced names should
     *                             be valid Java identifiers.
     * @param nameFactory          the name factory from which names will be
     *                             retrieved if the list of read names has been
     *                             exhausted.
     ','line_number':127,'multiline':True]
['text':' Read the next character.','line_number':150,'multiline':False]
['text':' Is it a valid identifier character?','line_number':153,'multiline':False]
['text':' Append it to the current identifier.','line_number':163,'multiline':False]
['text':' Did we collect a new identifier?','line_number':168,'multiline':False]
['text':' Add the completed name to the list of names, if it's','line_number':171,'multiline':False]
['text':' not in it yet.','line_number':172,'multiline':False]
['text':' Clear the buffer.','line_number':179,'multiline':False]
['text':' Is this the beginning of a comment line?','line_number':183,'multiline':False]
['text':' Skip all characters till the end of the line.','line_number':186,'multiline':False]
['text':' Is this the end of the file?','line_number':196,'multiline':False]
['text':' Just return.','line_number':199,'multiline':False]
['text':'*
     * Creates a new <code>DictionaryNameFactory</code>.
     * @param dictionaryNameFactory the dictionary name factory whose dictionary
     *                              will be used.
     * @param nameFactory           the name factory from which names will be
     *                              retrieved if the list of read names has been
     *                              exhausted.
     ','line_number':212,'multiline':True]
['text':' Implementations for NameFactory.','line_number':228,'multiline':False]
['text':' Do we still have names?','line_number':242,'multiline':False]
['text':' Return the next name.','line_number':245,'multiline':False]
['text':' Return the next different name from the other name factory.','line_number':250,'multiline':False]
['text':' For debugging, we're always using UTF-8 instead of the default','line_number':269,'multiline':False]
['text':' character encoding, even for writing to the standard output.','line_number':270,'multiline':False]
