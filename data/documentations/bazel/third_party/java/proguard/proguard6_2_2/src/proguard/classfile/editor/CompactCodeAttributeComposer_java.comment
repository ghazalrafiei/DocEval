['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This AttributeVisitor accumulates instructions and exceptions, and then
 * copies them into code attributes that it visits.
 *
 * @see CodeAttributeComposer
 *
 * @author Eric Lafortune
 ','line_number':32,'multiline':True]
['text':'*
     * Creates a new CompactCodeAttributeComposer that doesn't allow external
     * branch targets or exception handlers and that automatically shrinks
     * instructions.
     ','line_number':48,'multiline':True]
['text':'*
     * Creates a new CompactCodeAttributeComposer.
     * @param allowExternalBranchTargets     specifies whether branch targets
     *                                       can lie outside the code fragment
     *                                       of the branch instructions.
     * @param allowExternalExceptionHandlers specifies whether exception
     *                                       handlers can lie outside the code
     *                                       fragment in which exceptions are
     *                                       defined.
     * @param shrinkInstructions             specifies whether instructions
     *                                       should automatically be shrunk
     *                                       before being written.
     ','line_number':59,'multiline':True]
['text':'*
     * Starts a new code definition.
     ','line_number':87,'multiline':True]
['text':'*
     * Starts a new code fragment. Branch instructions that are added are
     * assumed to be relative within such code fragments.
     * @param maximumCodeFragmentLength the maximum length of the code that will
     *                                  be added as part of this fragment (more
     *                                  precisely, the maximum old instruction
     *                                  offset or label that is specified, plus
     *                                  one).
     ','line_number':98,'multiline':True]
['text':'*
     * Appends the given instruction with the given old offset.
     * Branch instructions must fit, for instance by enabling automatic
     * shrinking of instructions.
     * @param oldInstructionOffset the old offset of the instruction, to which
     *                             branches and other references in the current
     *                             code fragment are pointing.
     * @param instruction          the instruction to be appended.
     ','line_number':115,'multiline':True]
['text':'*
     * Appends the given label with the given old offset.
     * @param oldInstructionOffset the old offset of the label, to which
     *                             branches and other references in the current
     *                             code fragment are pointing.
     ','line_number':133,'multiline':True]
['text':'*
     * Appends the given instruction without defined offsets.
     * @param instructions the instructions to be appended.
     ','line_number':147,'multiline':True]
['text':'*
     * Appends the given instruction without a defined offset.
     * Branch instructions should have a label, to allow computing the
     * new relative offset.
     * Branch instructions must fit, for instance by enabling automatic
     * shrinking of instructions.
     * @param instruction the instruction to be appended.
     ','line_number':159,'multiline':True]
['text':'*
     * Appends the given exception to the exception table.
     * @param exceptionInfo the exception to be appended.
     ','line_number':175,'multiline':True]
['text':'*
     * Inserts the given line number at the appropriate position in the line
     * number table.
     * @param lineNumberInfo the line number to be inserted.
     * @return the index where the line number was actually inserted.
     ','line_number':187,'multiline':True]
['text':'*
     * Inserts the given line number at the appropriate position in the line
     * number table.
     * @param minimumIndex   the minimum index where the line number may be
     *                       inserted.
     * @param lineNumberInfo the line number to be inserted.
     * @return the index where the line number was inserted.
     ','line_number':199,'multiline':True]
['text':'*
     * Appends the given line number to the line number table.
     * @param lineNumberInfo the line number to be appended.
     ','line_number':213,'multiline':True]
['text':'*
     * Wraps up the current code fragment, continuing with the previous one on
     * the stack.
     ','line_number':225,'multiline':True]
['text':' Methods corresponding to the bytecode opcodes.','line_number':237,'multiline':False]
['text':' Additional convenience methods.','line_number':1629,'multiline':False]
['text':'*
     * Pushes the given primitive value on the stack.
     *
     * Operand stack:
     * ... -> ..., value
     *
     * @param primitive the primitive value to be pushed - should never be null.
     * @param internalType      the internal type of the primitive ('Z','B','I',...)
     ','line_number':1631,'multiline':True]
['text':'*
     * Pushes the given primitive int on the stack in the most efficient way
     * (as an iconst, bipush, sipush, or ldc instruction).
     *
     * @param value the int value to be pushed.
     ','line_number':1658,'multiline':True]
['text':'*
     * Pushes the given primitive float on the stack in the most efficient way
     * (as an fconst or ldc instruction).
     *
     * @param value the int value to be pushed.
     ','line_number':1675,'multiline':True]
['text':'*
     * Pushes the given primitive long on the stack in the most efficient way
     * (as an lconst or ldc instruction).
     *
     * @param value the int value to be pushed.
     ','line_number':1690,'multiline':True]
['text':'*
     * Pushes the given primitive double on the stack in the most efficient way
     * (as a dconst or ldc instruction).
     *
     * @param value the int value to be pushed.
     ','line_number':1705,'multiline':True]
['text':'*
     * Pushes a new array on the stack.
     *
     * Operand stack:
     * ... -> ..., array
     *
     * @param elementTypeOrClassName the array element type (or class name in case of objects).
     * @param size                   the size of the array to be created.
     ','line_number':1720,'multiline':True]
['text':' Create new array.','line_number':1732,'multiline':False]
['text':'*
     * Loads the given variable onto the stack.
     *
     * Operand stack:
     * ... -> ..., value
     *
     * @param variableIndex the index of the variable to be loaded.
     * @param internalType  the type of the variable to be loaded.
     ','line_number':1741,'multiline':True]
['text':'*
     * Loads the given variable of primitive type onto the stack.
     *
     * Operand stack:
     * ... -> ..., value
     *
     * @param variableIndex the index of the variable to be loaded.
     * @param internalType  the primitive type of the variable to be loaded.
     ','line_number':1757,'multiline':True]
['text':'*
     * Stores the value on top of the stack in the variable with given index.
     *
     * Operand stsack:
     * ..., value -> ...
     *
     * @param variableIndex the index of the variable where to store the
     *                      value.
     * @param internalType  the type of the value to be stored.
     ','line_number':1784,'multiline':True]
['text':'*
     * Stores the primitve value on top of the stack in the variable with given
     * index.
     *
     * Operand stack:
     * ..., value -> ...
     *
     * @param variableIndex the index of the variable where to store the
     *                      value.
     * @param internalType  the primitive type of the value to be stored.
     ','line_number':1801,'multiline':True]
['text':'*
     * Stores an element to an array.
     *
     * Operand stack:
     * ..., array, index, value -> ...
     *
     * @param elementType the type of the value to be stored.
     ','line_number':1830,'multiline':True]
['text':'*
     * Appends the proper return statement for the given internal type.
     *
     * @param internalType the return type.
     ','line_number':1855,'multiline':True]
['text':'*
     * Appends instructions to print out the given message and the top int on
     * the stack.
     ','line_number':1878,'multiline':True]
['text':'*
     * Appends instructions to print out the given message and the top int on
     * the stack as a hexadecimal value.
     ','line_number':1889,'multiline':True]
['text':'*
     * Appends instructions to print out the given message and the top long on
     * the stack.
     ','line_number':1900,'multiline':True]
['text':'*
     * Appends instructions to print out the given message and the top String on
     * the stack.
     ','line_number':1911,'multiline':True]
['text':'*
     * Appends instructions to print out the given message and the top Object on
     * the stack.
     ','line_number':1922,'multiline':True]
['text':'*
     * Appends instructions to print out the given message and the stack trace
     * of the top Throwable on the stack.
     ','line_number':1933,'multiline':True]
['text':'*
     * Appends instructions to print out the given message.
     ','line_number':1944,'multiline':True]
['text':'*
     * Appends instructions to print out the top int on the stack.
     ','line_number':1955,'multiline':True]
['text':'*
     * Appends instructions to print out the top integer on the stack as a
     * hexadecimal value.
     ','line_number':1967,'multiline':True]
['text':'*
     * Appends instructions to print out the top long on the stack.
     ','line_number':1981,'multiline':True]
['text':'*
     * Appends instructions to print out the top String on the stack.
     ','line_number':1994,'multiline':True]
['text':'*
     * Appends instructions to print out the top Object on the stack.
     ','line_number':2006,'multiline':True]
['text':'*
     * Appends instructions to print out the stack trace of the top Throwable
     * on the stack.
     ','line_number':2018,'multiline':True]
['text':' Implementations for AttributeVisitor.','line_number':2030,'multiline':False]
['text':' Small utility methods.','line_number':2041,'multiline':False]
['text':'*
     * Adds the given instruction, shrinking it if necessary.
     ','line_number':2043,'multiline':True]
