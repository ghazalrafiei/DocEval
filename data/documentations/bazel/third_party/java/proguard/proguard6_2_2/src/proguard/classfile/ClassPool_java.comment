['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This is a set of representations of classes. They can be enumerated or
 * retrieved by name. They can also be accessed by means of class visitors.
 *
 * @author Eric Lafortune
 ','line_number':28,'multiline':True]
['text':' We're using a sorted tree map instead of a hash map to store the classes,','line_number':36,'multiline':False]
['text':' in order to make the processing more deterministic.','line_number':37,'multiline':False]
['text':'*
     * Clears the class pool.
     ','line_number':41,'multiline':True]
['text':'*
     * Adds the given Clazz to the class pool.
     ','line_number':50,'multiline':True]
['text':'*
     * Removes the given Clazz from the class pool.
     ','line_number':59,'multiline':True]
['text':'*
     * Removes the specified Clazz from the class pool.
     ','line_number':68,'multiline':True]
['text':'*
     * Returns a Clazz from the class pool based on its name. Returns
     * <code>null</code> if the class with the given name is not in the class
     * pool.
     ','line_number':77,'multiline':True]
['text':'*
     * Returns an Iterator of all class names in the class pool.
     ','line_number':88,'multiline':True]
['text':'*
     * Returns the number of classes in the class pool.
     ','line_number':97,'multiline':True]
['text':'*
     * Applies the given ClassPoolVisitor to the class pool.
     ','line_number':106,'multiline':True]
['text':'*
     * Applies the given ClassVisitor to all classes in the class pool,
     * in random order.
     ','line_number':115,'multiline':True]
['text':'*
     * Applies the given ClassVisitor to all classes in the class pool,
     * in sorted order.
     ','line_number':130,'multiline':True]
['text':' We're already using a tree map.','line_number':136,'multiline':False]
['text':'TreeMap sortedClasses = new TreeMap(classes);','line_number':137,'multiline':False]
['text':'Iterator iterator = sortedClasses.values().iterator();','line_number':138,'multiline':False]
['text':'*
     * Applies the given ClassVisitor to all matching classes in the class pool.
     ','line_number':149,'multiline':True]
['text':'*
     * Applies the given ClassVisitor to all matching classes in the class pool.
     ','line_number':160,'multiline':True]
['text':'*
     * Applies the given ClassVisitor to all matching classes in the class pool.
     ','line_number':171,'multiline':True]
['text':'*
     * Applies the given ClassVisitor to the class with the given name,
     * if it is present in the class pool.
     ','line_number':192,'multiline':True]
