['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This editor allows to build and/or edit classes (ProgramClass instances).
 * It provides methods to easily add fields and methods to classes.
 *
 * @author Johan Leys
 ','line_number':36,'multiline':True]
['text':' Implementation interfaces.','line_number':45,'multiline':False]
['text':'*
     * Creates a new SimplifiedClassEditor for the Java class with the given
     * name.
     *
     * @param u2accessFlags access flags for the new class.
     * @param className     the fully qualified name of the new class.
     *
     * @see ClassConstants
     ','line_number':62,'multiline':True]
['text':'*
     * Creates a new SimplifiedClassEditor for the Java class with the given
     * name and super class.
     *
     * @param u2accessFlags  access flags for the new class.
     * @param className      the fully qualified name of the new class.
     * @param superclassName the fully qualified name of the super class.
     *
     * @see ClassConstants
     ','line_number':77,'multiline':True]
['text':'*
     * Creates a new SimplifiedClassEditor for the given class.
     *
     * @param programClass the class to be edited.
     ','line_number':110,'multiline':True]
['text':'*
     * Finalizes the editing of the class. This method does not initialize
     * references to/from related classes.
     * At least one of the finishEditing methods should be called before
     * calling {@link #getProgramClass}.
     *
     * @see #finishEditing(ClassPool, ClassPool)
     ','line_number':124,'multiline':True]
['text':'*
     * Finalizes the editing of the class, and initializes all references
     * of the edited class w.r.t. the given program and library class pool.
     * At least one of the finishEditing methods should be called before
     * calling {@link #getProgramClass}.
     *
     * @param programClassPool the program class pool
     * @param libraryClassPool the library class pool
     ','line_number':138,'multiline':True]
['text':' Initialize all references to/from the edited class.','line_number':153,'multiline':False]
['text':'*
     * Returns the edited ProgramClass instance.
     * Make sure to call one of the finishEditing methods after finishing editing,
     * before calling this method.
     *
     * @return the edited ProgramClass instance.
     *
     * @see #finishEditing()
     * @see #finishEditing(ClassPool, ClassPool)
     ','line_number':162,'multiline':True]
['text':'*
     * Adds the given class constant to the edited class.
     *
     * @param name            the class name to be added.
     * @param referencedClass the corresponding referenced class.
     *
     * @return the constant pool index of the ClassConstant.
     ','line_number':178,'multiline':True]
['text':'*
     * Adds a new field to the edited class.
     *
     * @param u2accessFlags    acces flags for the new field.
     * @param fieldName        name of the new field.
     * @param fieldDescriptor  descriptor of the new field.
     *
     * @return this SimpleClassEditor.
     ','line_number':191,'multiline':True]
['text':'*
     * Adds a new method to the edited class. The returned composer can be used
     * to attach code to the method.
     *
     * @param u2accessFlags         acces flags for the new method.
     * @param methodName            name of the new method.
     * @param methodDescriptor      descriptor of the new method.
     * @param maxCodeFragmentLength maximum length for the code fragment of the
     *                              new method.
     *
     * @return the composer for adding code to the created method.
     ','line_number':213,'multiline':True]
['text':'*
     * Adds a new method to the edited class. The returned composer can be used
     * to attach code to the method.
     *
     * @param u2accessFlags         acces flags for the new method.
     * @param methodName            name of the new method.
     * @param methodDescriptor      descriptor of the new method.
     * @param referencedClasses     the classes referenced by the method descriptor.
     * @param maxCodeFragmentLength maximum length for the code fragment of the
     *                              new method.
     *
     * @return the composer for adding code to the created method.
     ','line_number':233,'multiline':True]
['text':'*
     * Adds a new method to the edited class, with the given instructions array.
     *
     * @param u2accessFlags         acces flags for the new method.
     * @param methodName            name of the new method.
     * @param methodDescriptor      descriptor of the new method.
     * @param instructions          the instructions of the new method.
     ','line_number':262,'multiline':True]
['text':'*
     * Adds the given static initializer instructions to the edited class.
     * If the class already contains a static initializer, the new instructions
     * will be appended to the existing initializer.
     *
     * @param instructions                 the instructions to be added.
     * @param mergeIntoExistingInitializer indicates whether the instructions should
     *                                     be added to the existing static initializer
     *                                     (if it exists), or if a new method should
     *                                     be created, which is then called from the
     *                                     existing initializer.
     ','line_number':279,'multiline':True]
['text':' Create a new static initializer.','line_number':304,'multiline':False]
['text':' Call the new initializer from the existing one.','line_number':312,'multiline':False]
['text':'*
     * Adds the given initialization instructions to the edited class.
     *
     * - If the class doesn't contain a constructor yet, it will be created,
     *   and the instructions will be added to this constructor.
     * - If there is a single super-calling constructor, the instructions will
     *   be added at the beginning of it's code attribute.
     * - If there are multiple super-calling constructors, a new private
     *   parameterless helper method will be created, to which the instructions
     *   will be added. An invocation to this new method will be added at the
     *   beginning of the code attribute of all super-calling constructors.
     *
     * @param instructions the instructions to be added.
     ','line_number':330,'multiline':True]
['text':' First call the super constructor.','line_number':349,'multiline':False]
['text':' End by calling return.','line_number':357,'multiline':False]
['text':' Find all super-calling constructors.','line_number':367,'multiline':False]
['text':' There is only one supper-calling constructor.','line_number':375,'multiline':False]
['text':' Add the code to this constructor.','line_number':376,'multiline':False]
['text':' There are multiple super-calling constructors. Add the','line_number':384,'multiline':False]
['text':' instructions to a separate, parameterless initialization','line_number':385,'multiline':False]
['text':' method, and invoke this method from all super-calling','line_number':386,'multiline':False]
['text':' constructors.','line_number':387,'multiline':False]
['text':' There is no init$ method yet. Create it now, and add the','line_number':392,'multiline':False]
['text':' given instructions to it.','line_number':393,'multiline':False]
['text':' Insert a call to the new init$ method in all super-calling constructors.','line_number':401,'multiline':False]
['text':' There is already an init$ method. Add the instructions to this method.','line_number':416,'multiline':False]
['text':'*
     * Adds a new method to the edited class, with the given instructions array.
     *
     * @param u2accessFlags         acces flags for the new method.
     * @param methodName            name of the new method.
     * @param methodDescriptor      descriptor of the new method.
     * @param instructions          the instructions of the new method.
     * @param firstInstructions     extra instructions to add in front of the
     *                              new method.
     * @param lastInstruction       extra instruction to add at the end of the
     *                              new method.
     ','line_number':427,'multiline':True]
['text':' Implementations for AttributeVisitor.','line_number':477,'multiline':False]
