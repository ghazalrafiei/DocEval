['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This MemberVisitor, AttributeVisitor, and InstructionVisitor marks the
 * reference parameters that are escaping, that are modified, or that are
 * returned.
 *
 * It also marks methods that may modify anything on the heap.
 *
 * The class must be called as a MemberVisitor on all members (to mark the
 * parameters of native methods, without code attributes), then as an
 * AttributeVisitor on their code attributes (so it can run its PartialEvaluator
 * and ReferenceEscapeChecker), and finally as an InstructionVisitor on its
 * instructions (to actually mark the parameters).
 *
 * @see SideEffectClassChecker
 * @see SideEffectClassMarker
 * @author Eric Lafortune
 ','line_number':36,'multiline':True]
['text':'*','line_number':61,'multiline':False]
['text':'/
    private static       boolean DEBUG = System.getProperty("pem") != null;
    //','line_number':63,'multiline':True]
['text':' Parameters and values for visitor methods.','line_number':76,'multiline':False]
['text':'*
     * Creates a new ParameterEscapeMarker.
     ','line_number':84,'multiline':True]
['text':'*
     * Creates a new ParameterEscapeMarker.
     ','line_number':94,'multiline':True]
['text':'*
     * Creates a new ParameterEscapeMarker.
     ','line_number':106,'multiline':True]
['text':'*
     * Creates a new ParameterEscapeMarker.
     ','line_number':122,'multiline':True]
['text':'*
     * Creates a new ParameterEscapeMarker.
     ','line_number':137,'multiline':True]
['text':' Implementations for MemberVisitor.','line_number':154,'multiline':False]
['text':' Is it a native method?','line_number':160,'multiline':False]
['text':' Mark all parameters.','line_number':163,'multiline':False]
['text':' Implementations for AttributeVisitor.','line_number':172,'multiline':False]
['text':' Evaluate the code.','line_number':179,'multiline':False]
['text':' These results are not complete yet, since this class must still','line_number':192,'multiline':False]
['text':' be called as an InstructionVisitor.','line_number':193,'multiline':False]
['text':'                                   (hasParameterEscaped(method, index) ? 'e' : '.') +','line_number':203,'multiline':False]
['text':' Implementations for InstructionVisitor.','line_number':217,'multiline':False]
['text':' Mark array parameters whose element is modified.','line_number':227,'multiline':False]
['text':' Mark reference values that are put in the array.','line_number':232,'multiline':False]
['text':' Mark array parameters whose element is modified.','line_number':243,'multiline':False]
['text':' Mark returned reference values.','line_number':250,'multiline':False]
['text':' Mark the escaping reference values.','line_number':255,'multiline':False]
['text':' Mark possible modifications due to initializers.','line_number':272,'multiline':False]
['text':' Mark some global modification.','line_number':279,'multiline':False]
['text':' Mark reference values that are put in the field.','line_number':282,'multiline':False]
['text':' Mark the owner of the field. The owner sort of escapes when','line_number':287,'multiline':False]
['text':' the field is retrieved. [DGD-1279] (test2181)','line_number':288,'multiline':False]
['text':' Mark reference parameters whose field is modified.','line_number':293,'multiline':False]
['text':' Mark reference values that are put in the field.','line_number':298,'multiline':False]
['text':' Mark reference parameters that are modified as parameters','line_number':307,'multiline':False]
['text':' of the invoked method.','line_number':308,'multiline':False]
['text':' Mark reference values that are escaping as parameters','line_number':309,'multiline':False]
['text':' of the invoked method.','line_number':310,'multiline':False]
['text':' Mark escaped reference parameters in the invoked method.','line_number':311,'multiline':False]
['text':' Implementations for ConstantVisitor.','line_number':321,'multiline':False]
['text':' If a static initializer may modify anything, so does the referencing','line_number':330,'multiline':False]
['text':' method.','line_number':331,'multiline':False]
['text':' If a static initializer may modify anything, so does the referencing','line_number':345,'multiline':False]
['text':' method.','line_number':346,'multiline':False]
['text':' If the referenced method or a static initializer may modify anything,','line_number':372,'multiline':False]
['text':' so does the referencing method.','line_number':373,'multiline':False]
['text':' Do we know the invoked method?','line_number':383,'multiline':False]
['text':' Mark all parameters of the invoking method that are passed to','line_number':386,'multiline':False]
['text':' the invoked method, since they may escape or or be modified','line_number':387,'multiline':False]
['text':' there.','line_number':388,'multiline':False]
['text':' Remember whether the return value of the method is escaping or','line_number':404,'multiline':False]
['text':' modified later on.','line_number':405,'multiline':False]
['text':' Mark parameters of the invoking method that are passed to the','line_number':412,'multiline':False]
['text':' invoked method and escaping or modified there.','line_number':413,'multiline':False]
['text':' Implementations for ParameterVisitor.','line_number':419,'multiline':False]
['text':' Is the parameter escaping from the method,','line_number':427,'multiline':False]
['text':' or is it returned and then escaping?','line_number':428,'multiline':False]
['text':' Is the parameter being modified in the method.','line_number':438,'multiline':False]
['text':' or is it returned and then modified?','line_number':439,'multiline':False]
['text':' Small utility methods.','line_number':452,'multiline':False]
['text':'*
     * Marks the producing reference parameters (and the classes) of the
     * specified stack entry at the given instruction offset.
     ','line_number':454,'multiline':True]
['text':' The null reference value may not have a trace value.','line_number':469,'multiline':False]
['text':'*
     * Marks the producing parameters (and the classes) of the given
     * reference value.
     ','line_number':478,'multiline':True]
['text':' We know exactly which parameter is escaping.','line_number':493,'multiline':False]
['text':'*
     * Marks the given parameter as escaping from the given method.
     ','line_number':500,'multiline':True]
['text':' Trigger the repeater if the setter has changed the value.','line_number':513,'multiline':False]
['text':'*
     * Marks the given parameters as escaping from the given method.
     ','line_number':522,'multiline':True]
['text':' Trigger the repeater if the setter has changed the value.','line_number':538,'multiline':False]
['text':'*
     * Returns whether the given parameter is escaping from the given method.
     ','line_number':547,'multiline':True]
['text':'*
     * Returns which parameters are escaping from the given method.
     ','line_number':556,'multiline':True]
['text':'*
     * Marks the method and the returned reference parameters of the specified
     * stack entry at the given instruction offset.
     ','line_number':565,'multiline':True]
['text':' The null reference value may not have a trace value.','line_number':581,'multiline':False]
['text':'*
     * Marks the method and the producing parameters of the given reference
     * value.
     ','line_number':591,'multiline':True]
['text':' We know exactly which parameter is returned.','line_number':606,'multiline':False]
['text':'*
     * Marks the given parameter as returned from the given method.
     ','line_number':622,'multiline':True]
['text':' Trigger the repeater if the setter has changed the value.','line_number':635,'multiline':False]
['text':'*
     * Marks the given parameters as returned from the given method.
     ','line_number':644,'multiline':True]
['text':' Trigger the repeater if the setter has changed the value.','line_number':660,'multiline':False]
['text':'*
     * Returns whether the given parameter is returned from the given method.
     ','line_number':669,'multiline':True]
['text':'*
     * Returns which parameters are returned from the given method.
     ','line_number':678,'multiline':True]
['text':'*
     * Marks that the given method returns new instances (created inside the
     * method).
     ','line_number':687,'multiline':True]
['text':' Trigger the repeater if the setter has changed the value.','line_number':701,'multiline':False]
['text':'*
     * Returns whether the given method returns new instances (created inside
     * the method).
     ','line_number':710,'multiline':True]
['text':'*
     * Marks that the given method returns external reference values (not
     * parameter or new instance).
     ','line_number':720,'multiline':True]
['text':' Trigger the repeater if the setter has changed the value.','line_number':734,'multiline':False]
['text':'*
     * Returns whether the given method returns external reference values
     * (not parameter or new instance).
     ','line_number':743,'multiline':True]
['text':'*
     * Returns whether the given method may return the given type of reference
     * value
     ','line_number':753,'multiline':True]
['text':'*
     * Marks the producing reference parameters of the specified stack entry at
     * the given instruction offset.
     ','line_number':778,'multiline':True]
['text':' The null reference value may not have a trace value.','line_number':793,'multiline':False]
['text':'*
     * Marks the producing parameters of the given reference value.
     ','line_number':802,'multiline':True]
['text':' We know exactly which parameter is being modified.','line_number':816,'multiline':False]
['text':' If some unknown instance is modified, any escaping parameters','line_number':822,'multiline':False]
['text':' may be modified.','line_number':823,'multiline':False]
['text':'*
     * Marks the given parameter as modified by the given method.
     ','line_number':831,'multiline':True]
['text':' Trigger the repeater if the setter has changed the value.','line_number':844,'multiline':False]
['text':'*
     * Marks the given parameters as modified by the given method.
     ','line_number':853,'multiline':True]
['text':' Trigger the repeater if the setter has changed the value.','line_number':869,'multiline':False]
['text':'*
     * Returns whether the given parameter is modified by the given method.
     ','line_number':878,'multiline':True]
['text':'*
     * Returns which parameters are modified by the given method.
     ','line_number':887,'multiline':True]
['text':'*
     * Marks that anything may be modified by the given method.
     ','line_number':896,'multiline':True]
['text':' Trigger the repeater if the setter has changed the value.','line_number':909,'multiline':False]
['text':'*
     * Returns whether anything may be modified by the given method. This takes
     * into account the side effects of static initializers, except the static
     * initializer of the invoked method (because it is better checked
     * explicitly as a function of the referencing class).
     *
     * @see SideEffectClassChecker#mayHaveSideEffects(Clazz, Clazz, Member)
     ','line_number':918,'multiline':True]
