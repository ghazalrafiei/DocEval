['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This AttributeVisitor finds all instruction offsets, branch targets, and
 * exception targets in the CodeAttribute objects that it visits.
 *
 * @author Eric Lafortune
 ','line_number':32,'multiline':True]
['text':'*
     * Returns whether the instruction at the given offset is reachable in
     * the CodeAttribute that was visited most recently.
     ','line_number':50,'multiline':True]
['text':'*
     * Returns whether any of the instructions at the given offsets are
     * reachable in the CodeAttribute that was visited most recently.
     ','line_number':60,'multiline':True]
['text':' Check if any of the instructions is reachable.','line_number':66,'multiline':False]
['text':' Implementations for AttributeVisitor.','line_number':79,'multiline':False]
['text':' Make sure there is a sufficiently large array.','line_number':86,'multiline':False]
['text':' Create a new array.','line_number':90,'multiline':False]
['text':' Reset the array.','line_number':95,'multiline':False]
['text':' Mark the code, starting at the entry point.','line_number':99,'multiline':False]
['text':' Mark the exception handlers, iterating as long as necessary.','line_number':102,'multiline':False]
['text':' Implementations for InstructionVisitor.','line_number':113,'multiline':False]
['text':' Mark the branch target.','line_number':147,'multiline':False]
['text':' Mark the branch targets of the default jump offset.','line_number':164,'multiline':False]
['text':' Mark the branch targets of the jump offsets.','line_number':170,'multiline':False]
['text':' Implementations for ExceptionInfoVisitor.','line_number':181,'multiline':False]
['text':' Mark the exception handler if it's relevant.','line_number':185,'multiline':False]
['text':' Small utility methods.','line_number':196,'multiline':False]
['text':'*
     * Marks the branch targets of the given jump offsets for the instruction
     * at the given offset.
     ','line_number':198,'multiline':True]
['text':'*
     * Marks the branch target at the given offset.
     ','line_number':211,'multiline':True]
['text':'*
     * Marks the code starting at the given offset.
     ','line_number':224,'multiline':True]
['text':' Continue with the current instruction as long as we haven't marked it','line_number':233,'multiline':False]
['text':' yet.','line_number':234,'multiline':False]
['text':' Get the current instruction.','line_number':237,'multiline':False]
['text':' Mark it as reachable.','line_number':240,'multiline':False]
['text':' By default, we'll assume we can continue with the next','line_number':243,'multiline':False]
['text':' instruction in a moment.','line_number':244,'multiline':False]
['text':' Mark the branch targets, if any.','line_number':247,'multiline':False]
['text':' Can we really continue with the next instruction?','line_number':250,'multiline':False]
['text':' Go to the next instruction.','line_number':256,'multiline':False]
