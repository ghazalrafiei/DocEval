['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]
['text':'*
 * This StringParser can create StringMatcher instances for regular expressions
 * matching internal class names (or descriptors containing class names).
 * The regular expressions can contain the following wildcards:
 * '%'     for a single internal primitive type character (V, Z, B, C, S, I, F,
 *         J, or D),
 * '?'     for a single regular class name character,
 * '*'     for any number of regular class name characters,
 * '**'    for any number of regular class name characters or package separator
 *         characters ('/'),
 * 'L***;' for a single internal type (class name or primitive type,
 *         array or non-array),
 * 'L///;' for any number of internal types (class names and primitive
 *         types), and
 * '<n>'   for a reference to an earlier wildcard (n = 1, 2, ...)
 *
 * @author Eric Lafortune
 ','line_number':27,'multiline':True]
['text':'*
     * Creates a new ClassNameParser.
     ','line_number':64,'multiline':True]
['text':'*
     * Creates a new ClassNameParser that supports references to earlier
     * wildcards.
     *
     * @param variableStringMatchers an optional mutable list of
     *                               VariableStringMatcher instances that match
     *                               the wildcards.
     ','line_number':73,'multiline':True]
['text':' Implementations for StringParser.','line_number':87,'multiline':False]
['text':' Look for wildcards.','line_number':94,'multiline':False]
['text':' Is there an 'L///;' wildcard?','line_number':99,'multiline':False]
['text':' Create a matcher for the wildcard.','line_number':104,'multiline':False]
['text':' Is there an 'L***;' wildcard?','line_number':116,'multiline':False]
['text':' Create a matcher for the wildcard.','line_number':121,'multiline':False]
['text':' TODO: The returned variable matcher is actually a composite that doesn't return the entire matched string.','line_number':122,'multiline':False]
['text':' Recursively create a matcher for the rest of the string.','line_number':126,'multiline':False]
['text':' Is there a '**' wildcard?','line_number':131,'multiline':False]
['text':' Handle the end of the regular expression more efficiently,','line_number':134,'multiline':False]
['text':' without any next matcher for the variable string matcher.','line_number':135,'multiline':False]
['text':' Create a matcher for the wildcard.','line_number':140,'multiline':False]
['text':' Recursively create a matcher for the rest of the string.','line_number':148,'multiline':False]
['text':' Is there a '*' wildcard?','line_number':156,'multiline':False]
['text':' Create a matcher for the wildcard.','line_number':161,'multiline':False]
['text':' Recursively create a matcher for the rest of the string.','line_number':169,'multiline':False]
['text':' Is there a '?' wildcard?','line_number':174,'multiline':False]
['text':' Create a matcher for the wildcard.','line_number':179,'multiline':False]
['text':' Recursively create a matcher for the rest of the string.','line_number':187,'multiline':False]
['text':' Is there a '%' wildcard?','line_number':192,'multiline':False]
['text':' Create a matcher for the wildcard.','line_number':197,'multiline':False]
['text':' Recursively create a matcher for the rest of the string.','line_number':205,'multiline':False]
['text':' Is there a '<n>' wildcard?','line_number':210,'multiline':False]
['text':' Find the index of the closing bracket again.','line_number':213,'multiline':False]
['text':' Retrieve the specified variable string matcher and','line_number':216,'multiline':False]
['text':' recursively create a matcher for the rest of the string.','line_number':217,'multiline':False]
['text':' Return a matcher for the fixed first part of the regular expression,','line_number':225,'multiline':False]
['text':' if any, and the remainder.','line_number':226,'multiline':False]
['text':' Small utility methods.','line_number':233,'multiline':False]
['text':'*
     * Creates a StringMatcher that matches any type (class or primitive type,
     * array or non-array) and then the given matcher.
     ','line_number':235,'multiline':True]
['text':' Any number of '['.','line_number':242,'multiline':False]
['text':' Followed by:','line_number':247,'multiline':False]
['text':' A primitive type.','line_number':249,'multiline':False]
['text':' Or a class type.','line_number':256,'multiline':False]
['text':'*
     * Adds the given variable string matcher to the list of string matchers.
     ','line_number':273,'multiline':True]
['text':'*
     * Retrieves the specified variable string matcher from the list of string
     * matchers.
     ','line_number':287,'multiline':True]
['text':'*
     * Parses a reference to a wildcard at the given index, if any.
     * Returns the 1-based index, or 0 otherwise.
     ','line_number':297,'multiline':True]
['text':'*
     * A main method for testing class name matching.
     ','line_number':340,'multiline':True]
