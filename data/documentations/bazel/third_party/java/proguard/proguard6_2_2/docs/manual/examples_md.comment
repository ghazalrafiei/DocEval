['text':'developer.android.com/guide/developing/tools/proguard.html) in','line_number':221,'multiline':False]
['text':'docs.oracle.com/javase/8/docs/platform/serialization/spec/class.html#a4100)','line_number':737,'multiline':False]
['text':'docs.oracle.com/javase/8/docs/platform/serialization/spec/serialTOC.html).','line_number':739,'multiline':False]
['text':'*)
    -outjars out.jar

This configuration removes any files in the `images` directory and its
subdirectories.

Such filters can be convenient for avoiding warnings about duplicate files in
the output. For example, only keeping the manifest file from a first input
jar:

    -injars  in1.jar
    -injars  in2.jar(!META-INF/MANIFEST.MF)
    -injars  in3.jar(!META-INF/MANIFEST.MF)
    -outjars out.jar

Another useful application is ignoring unwanted files from the runtime library
module:

    -libraryjars <java.home>/jmods/java.base.jmod(!**.jar;!module-info.class)

The filter makes ProGuard disregard redundant jars inside the module, and
module info classes that would only cause conflicts with duplicate names.

It is also possible to filter the jars (and/or apks, aabs, aars, wars, ears,
jmods, zips) themselves, based on their names. For example:

    -injars  in(*','line_number':1359,'multiline':True]
