['text':'','line_number':1,'multiline':False]
['text':' This Gradle build file illustrates how to process ProGuard','line_number':2,'multiline':False]
['text':' (including its main application, its GUI, its Ant task, and its WTK plugin),','line_number':3,'multiline':False]
['text':' and the ReTrace tool, all in one go.','line_number':4,'multiline':False]
['text':' Configuration files for typical applications will be very similar.','line_number':5,'multiline':False]
['text':' Usage:','line_number':6,'multiline':False]
['text':'     gradle -b proguardall.gradle proguard','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Tell Gradle where to find the ProGuard task.','line_number':10,'multiline':False]
['text':' Define a ProGuard task.','line_number':21,'multiline':False]
['text':' You should probably import a more compact ProGuard-style configuration','line_number':25,'multiline':False]
['text':' file for all static settings, but we're specifying them all here, for','line_number':26,'multiline':False]
['text':' the sake of the example.','line_number':27,'multiline':False]
['text':'configuration 'configuration.pro'','line_number':28,'multiline':False]
['text':' Specify the input jars, output jars, and library jars.','line_number':32,'multiline':False]
['text':' We'll read all jars from the lib directory, process them, and write the','line_number':33,'multiline':False]
['text':' processed jars to a new out directory.','line_number':34,'multiline':False]
['text':' You may have to adapt the paths below.','line_number':39,'multiline':False]
['text':' Automatically handle the Java version of this build.','line_number':41,'multiline':False]
['text':' Before Java 9, the runtime classes were packaged in a single jar file.','line_number':43,'multiline':False]
['text':' As of Java 9, the runtime classes are packaged in modular jmod files.','line_number':46,'multiline':False]
['text':' Don't print notes about reflection in injected code.','line_number':69,'multiline':False]
['text':' Don't print warnings about GSON dependencies.','line_number':73,'multiline':False]
['text':' Preserve injected GSON utility classes and their members.','line_number':77,'multiline':False]
['text':' Obfuscate class strings of injected GSON utility classes.','line_number':84,'multiline':False]
['text':' Allow methods with the same signature, except for the return type,','line_number':88,'multiline':False]
['text':' to get the same obfuscation name.','line_number':89,'multiline':False]
['text':' Put all obfuscated classes into the nameless root package.','line_number':93,'multiline':False]
['text':' Adapt the names and contents of the resource files.','line_number':97,'multiline':False]
['text':' The main entry points.','line_number':102,'multiline':False]
['text':' If we have ant.jar, we can properly process the Ant task.','line_number':116,'multiline':False]
['text':' If we have the Gradle jars, we can properly process the Gradle task.','line_number':125,'multiline':False]
['text':' If we have kenv.zip, we can process the J2ME WTK plugin.','line_number':131,'multiline':False]
