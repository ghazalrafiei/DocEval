['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'#region file service & providers','line_number':24,'multiline':False]
['text':'*
	 * An event that is fired when a file system provider is added or removed
	 ','line_number':32,'multiline':True]
['text':'*
	 * An event that is fired when a registered file system provider changes its capabilities.
	 ','line_number':37,'multiline':True]
['text':'*
	 * An event that is fired when a file system provider is about to be activated. Listeners
	 * can join this event with a long running promise to help in the activation process.
	 ','line_number':42,'multiline':True]
['text':'*
	 * Registers a file system provider for a certain scheme.
	 ','line_number':48,'multiline':True]
['text':'*
	 * Returns a file system provider for a certain scheme.
	 ','line_number':53,'multiline':True]
['text':'*
	 * Tries to activate a provider with the given scheme.
	 ','line_number':58,'multiline':True]
['text':'*
	 * Checks if this file service can handle the given resource by
	 * first activating any extension that wants to be activated
	 * on the provided resource scheme to include extensions that
	 * contribute file system providers for the given resource.
	 ','line_number':63,'multiline':True]
['text':'*
	 * Checks if the file service has a registered provider for the
	 * provided resource.
	 *
	 * Note: this does NOT account for contributed providers from
	 * extensions that have not been activated yet. To include those,
	 * consider to call `await fileService.canHandleResource(resource)`.
	 ','line_number':71,'multiline':True]
['text':'*
	 * Checks if the provider for the provided resource has the provided file system capability.
	 ','line_number':81,'multiline':True]
['text':'*
	 * List the schemes and capabilities for registered file system providers
	 ','line_number':86,'multiline':True]
['text':'*
	 * Allows to listen for file changes. The event will fire for every file within the opened workspace
	 * (if any) as well as all files that have been watched explicitly using the #watch() API.
	 ','line_number':91,'multiline':True]
['text':'*
	 * An event that is fired upon successful completion of a certain file operation.
	 ','line_number':97,'multiline':True]
['text':'*
	 * Resolve the properties of a file/folder identified by the resource. For a folder, children
	 * information is resolved as well depending on the provided options. Use `stat()` method if
	 * you do not need children information.
	 *
	 * If the optional parameter "resolveTo" is specified in options, the stat service is asked
	 * to provide a stat object that should contain the full graph of folders up to all of the
	 * target resources.
	 *
	 * If the optional parameter "resolveSingleChildDescendants" is specified in options,
	 * the stat service is asked to automatically resolve child folders that only
	 * contain a single element.
	 *
	 * If the optional parameter "resolveMetadata" is specified in options,
	 * the stat will contain metadata information such as size, mtime and etag.
	 ','line_number':102,'multiline':True]
['text':'*
	 * Same as `resolve()` but supports resolving multiple resources in parallel.
	 *
	 * If one of the resolve targets fails to resolve returns a fake `IFileStat` instead of
	 * making the whole call fail.
	 ','line_number':121,'multiline':True]
['text':'*
	 * Same as `resolve()` but without resolving the children of a folder if the
	 * resource is pointing to a folder.
	 ','line_number':130,'multiline':True]
['text':'*
	 * Finds out if a file/folder identified by the resource exists.
	 ','line_number':136,'multiline':True]
['text':'*
	 * Read the contents of the provided resource unbuffered.
	 ','line_number':141,'multiline':True]
['text':'*
	 * Read the contents of the provided resource buffered as stream.
	 ','line_number':146,'multiline':True]
['text':'*
	 * Updates the content replacing its previous value.
	 *
	 * Emits a `FileOperation.WRITE` file operation event when successful.
	 ','line_number':151,'multiline':True]
['text':'*
	 * Moves the file/folder to a new path identified by the resource.
	 *
	 * The optional parameter overwrite can be set to replace an existing file at the location.
	 *
	 * Emits a `FileOperation.MOVE` file operation event when successful.
	 ','line_number':158,'multiline':True]
['text':'*
	 * Find out if a move operation is possible given the arguments. No changes on disk will
	 * be performed. Returns an Error if the operation cannot be done.
	 ','line_number':167,'multiline':True]
['text':'*
	 * Copies the file/folder to a path identified by the resource. A folder is copied
	 * recursively.
	 *
	 * Emits a `FileOperation.COPY` file operation event when successful.
	 ','line_number':173,'multiline':True]
['text':'*
	 * Find out if a copy operation is possible given the arguments. No changes on disk will
	 * be performed. Returns an Error if the operation cannot be done.
	 ','line_number':181,'multiline':True]
['text':'*
	 * Clones a file to a path identified by the resource. Folders are not supported.
	 *
	 * If the target path exists, it will be overwritten.
	 ','line_number':187,'multiline':True]
['text':'*
	 * Creates a new file with the given path and optional contents. The returned promise
	 * will have the stat model object as a result.
	 *
	 * The optional parameter content can be used as value to fill into the new file.
	 *
	 * Emits a `FileOperation.CREATE` file operation event when successful.
	 ','line_number':194,'multiline':True]
['text':'*
	 * Find out if a file create operation is possible given the arguments. No changes on disk will
	 * be performed. Returns an Error if the operation cannot be done.
	 ','line_number':204,'multiline':True]
['text':'*
	 * Creates a new folder with the given path. The returned promise
	 * will have the stat model object as a result.
	 *
	 * Emits a `FileOperation.CREATE` file operation event when successful.
	 ','line_number':210,'multiline':True]
['text':'*
	 * Deletes the provided file. The optional useTrash parameter allows to
	 * move the file to trash. The optional recursive parameter allows to delete
	 * non-empty folders recursively.
	 *
	 * Emits a `FileOperation.DELETE` file operation event when successful.
	 ','line_number':218,'multiline':True]
['text':'*
	 * Find out if a delete operation is possible given the arguments. No changes on disk will
	 * be performed. Returns an Error if the operation cannot be done.
	 ','line_number':227,'multiline':True]
['text':'*
	 * An event that signals an error when watching for file changes.
	 ','line_number':233,'multiline':True]
['text':'*
	 * Allows to start a watcher that reports file/folder change events on the provided resource.
	 *
	 * The watcher runs correlated and thus, file events will be reported on the returned
	 * `IFileSystemWatcher` and not on the generic `IFileService.onDidFilesChange` event.
	 ','line_number':238,'multiline':True]
['text':'*
	 * Allows to start a watcher that reports file/folder change events on the provided resource.
	 *
	 * The watcher runs correlated and thus, file events will be reported on the returned
	 * `IFileSystemWatcher` and not on the generic `IFileService.onDidFilesChange` event.
	 ','line_number':246,'multiline':True]
['text':'*
	 * Allows to start a watcher that reports file/folder change events on the provided resource.
	 *
	 * The watcher runs uncorrelated and thus will report all events from `IFileService.onDidFilesChange`.
	 * This means, most listeners in the application will receive your events. It is encouraged to
	 * use correlated watchers (via `IWatchOptionsWithCorrelation`) to limit events to your listener.
	','line_number':254,'multiline':True]
['text':'*
	 * Frees up any resources occupied by this service.
	 ','line_number':263,'multiline':True]
['text':'*
	 * Set to `true` to overwrite a file if it exists. Will
	 * throw an error otherwise if the file does exist.
	 ','line_number':271,'multiline':True]
['text':'*
	 * Set to `true` to try to remove any write locks the file might
	 * have. A file that is write locked will throw an error for any
	 * attempt to write to unless `unlock: true` is provided.
	 ','line_number':280,'multiline':True]
['text':'*
	 * The optional `atomic` flag can be used to make sure
	 * the `readFile` method is not running in parallel with
	 * any `write` operations in the same process.
	 *
	 * Typically you should not need to use this flag but if
	 * for example you are quickly reading a file right after
	 * a file event occurred and the file changes a lot, there
	 * is a chance that a read returns an empty or partial file
	 * because a pending write has not finished yet.
	 *
	 * Note: this does not prevent the file from being written
	 * to from a different process. If you need such atomic
	 * operations, you better use a real database as storage.
	 ','line_number':290,'multiline':True]
['text':'*
	 * The postfix is used to create a temporary file based
	 * on the original resource. The resulting temporary
	 * file will be in the same folder as the resource and
	 * have `postfix` appended to the resource name.
	 *
	 * Example: given a file resource `file:///some/path/foo.txt`
	 * and a postfix `.vsctmp`, the temporary file will be
	 * created as `file:///some/path/foo.txt.vsctmp`.
	 ','line_number':310,'multiline':True]
['text':'*
	 * The optional `atomic` flag can be used to make sure
	 * the `writeFile` method updates the target file atomically
	 * by first writing to a temporary file in the same folder
	 * and then renaming it over the target.
	 ','line_number':325,'multiline':True]
['text':'*
	 * The optional `atomic` flag can be used to make sure
	 * the `delete` method deletes the target atomically by
	 * first renaming it to a temporary resource in the same
	 * folder and then deleting it.
	 ','line_number':336,'multiline':True]
['text':'*
	 * If the file exceeds the given size, an error of kind
	 * `FILE_TOO_LARGE` will be thrown.
	 ','line_number':347,'multiline':True]
['text':'*
	 * Is an integer specifying where to begin reading from in the file. If position is undefined,
	 * data will be read from the current file position.
	 ','line_number':356,'multiline':True]
['text':'*
	 * Is an integer specifying how many bytes to read from the file. By default, all bytes
	 * will be read.
	 ','line_number':362,'multiline':True]
['text':'*
	 * If provided, the size of the file will be checked against the limits
	 * and an error will be thrown if any limit is exceeded.
	 ','line_number':368,'multiline':True]
['text':'*
	 * Set to `true` to create a file when it does not exist. Will
	 * throw an error otherwise if the file does not exist.
	 ','line_number':377,'multiline':True]
['text':'*
	 * A hint that the file should be opened for reading only.
	 ','line_number':392,'multiline':True]
['text':'*
	 * A hint that the file should be opened for reading and writing.
	 ','line_number':400,'multiline':True]
['text':'*
	 * Set to `true` to recursively delete any children of the file. This
	 * only applies to folders and can lead to an error unless provided
	 * if the folder is not empty.
	 ','line_number':408,'multiline':True]
['text':'*
	 * Set to `true` to attempt to move the file to trash
	 * instead of deleting it permanently from disk.
	 *
	 * This option maybe not be supported on all providers.
	 ','line_number':415,'multiline':True]
['text':'*
	 * The optional `atomic` flag can be used to make sure
	 * the `delete` method deletes the target atomically by
	 * first renaming it to a temporary resource in the same
	 * folder and then deleting it.
	 *
	 * This option maybe not be supported on all providers.
	 ','line_number':423,'multiline':True]
['text':'*
	 * File is unknown (neither file, directory nor symbolic link).
	 ','line_number':436,'multiline':True]
['text':'*
	 * File is a normal file.
	 ','line_number':441,'multiline':True]
['text':'*
	 * File is a directory.
	 ','line_number':446,'multiline':True]
['text':'*
	 * File is a symbolic link.
	 *
	 * Note: even when the file is a symbolic link, you can test for
	 * `FileType.File` and `FileType.Directory` to know the type of
	 * the target the link points to.
	 ','line_number':451,'multiline':True]
['text':'*
	 * File is readonly. Components like editors should not
	 * offer to edit the contents.
	 ','line_number':463,'multiline':True]
['text':'*
	 * File is locked. Components like editors should offer
	 * to edit the contents and ask the user upon saving to
	 * remove the lock.
	 ','line_number':469,'multiline':True]
['text':'*
	 * The file type.
	 ','line_number':479,'multiline':True]
['text':'*
	 * The last modification date represented as millis from unix epoch.
	 ','line_number':484,'multiline':True]
['text':'*
	 * The creation date represented as millis from unix epoch.
	 ','line_number':489,'multiline':True]
['text':'*
	 * The size of the file in bytes.
	 ','line_number':494,'multiline':True]
['text':'*
	 * The file permissions.
	 ','line_number':499,'multiline':True]
['text':'*
	 * Set to `true` to watch for changes recursively in a folder
	 * and all of its children.
	 ','line_number':507,'multiline':True]
['text':'*
	 * A set of glob patterns or paths to exclude from watching.
	 * Paths can be relative or absolute and when relative are
	 * resolved against the watched folder. Glob patterns are
	 * always matched relative to the watched folder.
	 ','line_number':513,'multiline':True]
['text':'*
	 * An optional set of glob patterns or paths to include for
	 * watching. If not provided, all paths are considered for
	 * events.
	 * Paths can be relative or absolute and when relative are
	 * resolved against the watched folder. Glob patterns are
	 * always matched relative to the watched folder.
	 ','line_number':521,'multiline':True]
['text':'*
	 * If provided, file change events from the watcher that
	 * are a result of this watch request will carry the same
	 * id.
	 ','line_number':534,'multiline':True]
['text':'*
	 * An event which fires on file/folder change only for changes
	 * that correlate to the watch request with matching correlation
	 * identifier.
	 ','line_number':548,'multiline':True]
['text':'*
	 * No capabilities.
	 ','line_number':564,'multiline':True]
['text':'*
	 * Provider supports unbuffered read/write.
	 ','line_number':569,'multiline':True]
['text':'*
	 * Provider supports open/read/write/close low level file operations.
	 ','line_number':574,'multiline':True]
['text':'*
	 * Provider supports stream based reading.
	 ','line_number':579,'multiline':True]
['text':'*
	 * Provider supports copy operation.
	 ','line_number':584,'multiline':True]
['text':'*
	 * Provider is path case sensitive.
	 ','line_number':589,'multiline':True]
['text':'*
	 * All files of the provider are readonly.
	 ','line_number':594,'multiline':True]
['text':'*
	 * Provider supports to delete via trash.
	 ','line_number':599,'multiline':True]
['text':'*
	 * Provider support to unlock files for writing.
	 ','line_number':604,'multiline':True]
['text':'*
	 * Provider support to read files atomically. This implies the
	 * provider provides the `FileReadWrite` capability too.
	 ','line_number':609,'multiline':True]
['text':'*
	 * Provider support to write files atomically. This implies the
	 * provider provides the `FileReadWrite` capability too.
	 ','line_number':615,'multiline':True]
['text':'*
	 * Provider support to delete atomically.
	 ','line_number':621,'multiline':True]
['text':'*
	 * Provider support to clone files atomically.
	 ','line_number':626,'multiline':True]
['text':' we require the `FileReadWrite` capability too','line_number':713,'multiline':False]
['text':' we require the `FileReadWrite` capability too','line_number':726,'multiline':False]
['text':'*
	 * An optional message to show in the UI to explain why the file system is readonly.
	 ','line_number':745,'multiline':True]
['text':' https://github.com/microsoft/vscode/issues/72798','line_number':793,'multiline':False]
['text':' Guard against abuse','line_number':807,'multiline':False]
['text':' FileSystemProviderError comes with the code','line_number':812,'multiline':False]
['text':' Any other error, check for name match by assuming that the error','line_number':817,'multiline':False]
['text':' went through the markAsFileSystemProviderError() method','line_number':818,'multiline':False]
['text':' FileSystemProviderError comes with the result already','line_number':840,'multiline':False]
['text':' Otherwise try to find from code','line_number':845,'multiline':False]
['text':'*
 * Possible changes that can occur to a file.
 ','line_number':916,'multiline':True]
['text':'*
 * Identifies a single change in a file.
 ','line_number':925,'multiline':True]
['text':'*
	 * The type of change that occurred to the file.
	 ','line_number':930,'multiline':True]
['text':'*
	 * The unified resource identifier of the file that changed.
	 ','line_number':935,'multiline':True]
['text':'*
	 * If provided when starting the file watcher, the correlation
	 * identifier will match the original file watching request as
	 * a way to identify the original component that is interested
	 * in the change.
	 ','line_number':940,'multiline':True]
['text':' Split by type','line_number':958,'multiline':False]
['text':' Figure out events correlation','line_number':971,'multiline':False]
['text':' correlation not yet set, just take it','line_number':975,'multiline':False]
['text':' correlation mismatch, we have mixed correlation','line_number':977,'multiline':False]
['text':' correlation mismatch, we have mixed correlation','line_number':981,'multiline':False]
['text':'*
	 * Find out if the file change events match the provided resource.
	 *
	 * Note: when passing `FileChangeType.DELETED`, we consider a match
	 * also when the parent of the resource got deleted.
	 ','line_number':1009,'multiline':True]
['text':'*
	 * Find out if the file change events either match the provided
	 * resource, or contain a child of this resource.
	 ','line_number':1019,'multiline':True]
['text':' Added','line_number':1034,'multiline':False]
['text':' Updated','line_number':1045,'multiline':False]
['text':' Deleted','line_number':1056,'multiline':False]
['text':' deleted also considers parent folders ','line_number':1058,'multiline':True]
['text':'*
	 * Returns if this event contains added files.
	 ','line_number':1070,'multiline':True]
['text':'*
	 * Returns if this event contains deleted files.
	 ','line_number':1077,'multiline':True]
['text':'*
	 * Returns if this event contains updated files.
	 ','line_number':1084,'multiline':True]
['text':'*
	 * Returns if this event contains changes that correlate to the
	 * provided `correlationId`.
	 *
	 * File change event correlation is an advanced watch feature that
	 * allows to  identify from which watch request the events originate
	 * from. This correlation allows to route events specifically
	 * only to the requestor and not emit them to all listeners.
	 ','line_number':1091,'multiline':True]
['text':'*
	 * Figure out if the event contains changes that correlate to one
	 * correlation identifier.
	 *
	 * File change event correlation is an advanced watch feature that
	 * allows to  identify from which watch request the events originate
	 * from. This correlation allows to route events specifically
	 * only to the requestor and not emit them to all listeners.
	 ','line_number':1104,'multiline':True]
['text':'*
	 * @deprecated use the `contains` or `affects` method to efficiently find
	 * out if the event relates to a given resource. these methods ensure:
	 * - that there is no expensive lookup needed (by using a `TernarySearchTree`)
	 * - correctly handles `FileChangeType.DELETED` events
	 ','line_number':1117,'multiline':True]
['text':'*
	* @deprecated use the `contains` or `affects` method to efficiently find
	* out if the event relates to a given resource. these methods ensure:
	* - that there is no expensive lookup needed (by using a `TernarySearchTree`)
	* - correctly handles `FileChangeType.DELETED` events
	','line_number':1125,'multiline':True]
['text':'*
	* @deprecated use the `contains` or `affects` method to efficiently find
	* out if the event relates to a given resource. these methods ensure:
	* - that there is no expensive lookup needed (by using a `TernarySearchTree`)
	* - correctly handles `FileChangeType.DELETED` events
	','line_number':1133,'multiline':True]
['text':'*
	 * The unified resource identifier of this file or folder.
	 ','line_number':1164,'multiline':True]
['text':'*
	 * The name which is the last segment
	 * of the {{path}}.
	 ','line_number':1169,'multiline':True]
['text':'*
	 * The size of the file.
	 *
	 * The value may or may not be resolved as
	 * it is optional.
	 ','line_number':1175,'multiline':True]
['text':'*
	 * The last modification date represented as millis from unix epoch.
	 *
	 * The value may or may not be resolved as
	 * it is optional.
	 ','line_number':1183,'multiline':True]
['text':'*
	 * The creation date represented as millis from unix epoch.
	 *
	 * The value may or may not be resolved as
	 * it is optional.
	 ','line_number':1191,'multiline':True]
['text':'*
	 * A unique identifier that represents the
	 * current state of the file or directory.
	 *
	 * The value may or may not be resolved as
	 * it is optional.
	 ','line_number':1199,'multiline':True]
['text':'*
	 * File is readonly. Components like editors should not
	 * offer to edit the contents.
	 ','line_number':1208,'multiline':True]
['text':'*
	 * File is locked. Components like editors should offer
	 * to edit the contents and ask the user upon saving to
	 * remove the lock.
	 ','line_number':1214,'multiline':True]
['text':'*
 * A file resource with meta information and resolved children if any.
 ','line_number':1224,'multiline':True]
['text':'*
	 * The resource is a file.
	 ','line_number':1229,'multiline':True]
['text':'*
	 * The resource is a directory.
	 ','line_number':1234,'multiline':True]
['text':'*
	 * The resource is a symbolic link. Note: even when the
	 * file is a symbolic link, you can test for `FileType.File`
	 * and `FileType.Directory` to know the type of the target
	 * the link points to.
	 ','line_number':1239,'multiline':True]
['text':'*
	 * The children of the file stat or undefined if none.
	 ','line_number':1247,'multiline':True]
['text':'*
	 * The content of a file as buffer.
	 ','line_number':1276,'multiline':True]
['text':'*
	 * The content of a file as stream.
	 ','line_number':1284,'multiline':True]
['text':'*
	 * The optional etag parameter allows to return early from resolving the resource if
	 * the contents on disk match the etag. This prevents accumulated reading of resources
	 * that have been read already with the same etag.
	 * It is the task of the caller to makes sure to handle this error case from the promise.
	 ','line_number':1292,'multiline':True]
['text':'*
	 * The optional `atomic` flag can be used to make sure
	 * the `readFile` method is not running in parallel with
	 * any `write` operations in the same process.
	 *
	 * Typically you should not need to use this flag but if
	 * for example you are quickly reading a file right after
	 * a file event occurred and the file changes a lot, there
	 * is a chance that a read returns an empty or partial file
	 * because a pending write has not finished yet.
	 *
	 * Note: this does not prevent the file from being written
	 * to from a different process. If you need such atomic
	 * operations, you better use a real database as storage.
	 ','line_number':1305,'multiline':True]
['text':'*
	 * The last known modification time of the file. This can be used to prevent dirty writes.
	 ','line_number':1325,'multiline':True]
['text':'*
	 * The etag of the file. This can be used to prevent dirty writes.
	 ','line_number':1330,'multiline':True]
['text':'*
	 * Whether to attempt to unlock a file before writing.
	 ','line_number':1335,'multiline':True]
['text':'*
	 * The optional `atomic` flag can be used to make sure
	 * the `writeFile` method updates the target file atomically
	 * by first writing to a temporary file in the same folder
	 * and then renaming it over the target.
	 ','line_number':1340,'multiline':True]
['text':'*
	 * Automatically continue resolving children of a directory until the provided resources
	 * are found.
	 ','line_number':1351,'multiline':True]
['text':'*
	 * Automatically continue resolving children of a directory if the number of children is 1.
	 ','line_number':1357,'multiline':True]
['text':'*
	 * Will resolve mtime, ctime, size and etag of files if enabled. This can have a negative impact
	 * on performance and thus should only be used when these values are required.
	 ','line_number':1362,'multiline':True]
['text':'*
	 * Overwrite the file to create if it already exists on disk. Otherwise
	 * an error will be thrown (FILE_MODIFIED_SINCE).
	 ','line_number':1375,'multiline':True]
['text':'#endregion','line_number':1428,'multiline':False]
['text':'#region Settings','line_number':1430,'multiline':False]
['text':'#endregion','line_number':1481,'multiline':False]
['text':'#region Utilities','line_number':1483,'multiline':False]
['text':'*
 * A hint to disable etag checking for reading/writing.
 ','line_number':1491,'multiline':True]
['text':'*
 * Helper to format a raw byte size into a human readable label.
 ','line_number':1521,'multiline':True]
['text':' File limits','line_number':1556,'multiline':False]
['text':' Local almost has no limit in file size','line_number':1565,'multiline':False]
['text':' With a remote, pick a low limit to avoid','line_number':1570,'multiline':False]
['text':' potentially costly file transfers','line_number':1571,'multiline':False]
['text':' Web: we cannot know for sure if a cost','line_number':1576,'multiline':False]
['text':' is associated with the file transfer','line_number':1577,'multiline':False]
['text':' so we pick a reasonably small limit','line_number':1578,'multiline':False]
['text':' Local desktop: almost no limit in file size','line_number':1582,'multiline':False]
['text':'#endregion','line_number':1586,'multiline':False]
