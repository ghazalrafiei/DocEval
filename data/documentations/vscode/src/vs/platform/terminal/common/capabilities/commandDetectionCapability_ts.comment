['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' Importing types is safe in any layer','line_number':14,'multiline':False]
['text':' eslint-disable-next-line local/code-import-patterns','line_number':15,'multiline':False]
['text':' TODO: as is unsafe here and it duplicates behavor of executingCommand','line_number':42,'multiline':False]
['text':' Set up platform-specific behaviors','line_number':90,'multiline':False]
['text':' Early versions of conpty do not have real support for an alt buffer, in addition certain','line_number':124,'multiline':False]
['text':' commands such as tsc watch will write to the top of the normal buffer. The following','line_number':125,'multiline':False]
['text':' checks when the cursor has moved while the normal buffer is empty and if it is above the','line_number':126,'multiline':False]
['text':' current command, all decorations within the viewport will be invalidated.','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':' This function is debounced so that the cursor is only checked when it is stable so','line_number':129,'multiline':False]
['text':' conpty's screen reprinting will not trigger decoration clearing.','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':' This is mostly a workaround for Windows but applies to all OS' because of the tsc watch','line_number':132,'multiline':False]
['text':' case.','line_number':133,'multiline':False]
['text':' Find the number of commands on the tail end of the array that are within the viewport','line_number':144,'multiline':False]
['text':' Remove them','line_number':153,'multiline':False]
['text':' Handle the current partial command first, anything below it's prompt is considered part','line_number':195,'multiline':False]
['text':' of the current command','line_number':196,'multiline':False]
['text':' No commands','line_number':201,'multiline':False]
['text':' Line is before any registered commands','line_number':206,'multiline':False]
['text':' Iterate backwards through commands to find the right one','line_number':211,'multiline':False]
['text':' Handle the current partial command first, anything below it's prompt is considered part','line_number':222,'multiline':False]
['text':' of the current command','line_number':223,'multiline':False]
['text':' Adjust the last command's finished marker when needed. The standard position for the','line_number':237,'multiline':False]
['text':' finished marker `D` to appear is at the same position as the following prompt started','line_number':238,'multiline':False]
['text':' `A`.','line_number':239,'multiline':False]
['text':' Only update the column if the line has already been set','line_number':284,'multiline':False]
['text':' HACK: Handle a special case on some versions of bash where identical commands get merged','line_number':313,'multiline':False]
['text':' in the output of `history`, this detects that case and sets the exit code to the the last','line_number':314,'multiline':False]
['text':' command's exit code. This covered the majority of cases but will fail if the same command','line_number':315,'multiline':False]
['text':' runs with a different exit code, that will need a more robust fix where we send the','line_number':316,'multiline':False]
['text':' command ID and exit code over to the capability to adjust there.','line_number':317,'multiline':False]
['text':' Partial command','line_number':374,'multiline':False]
['text':' Check for invalid command','line_number':376,'multiline':False]
['text':' Full command','line_number':389,'multiline':False]
['text':'*
 * Additional hooks to private methods on {@link CommandDetectionCapability} that are needed by the
 * heuristics objects.
 ','line_number':402,'multiline':True]
['text':' All optional methods','line_number':420,'multiline':False]
['text':' All common methods','line_number':422,'multiline':False]
['text':'*
 * Non-Windows-specific behavior.
 ','line_number':427,'multiline':True]
['text':' We don't want to override xterm.js' default behavior, just augment it','line_number':442,'multiline':False]
['text':' Clear executed as it must happen after command start','line_number':454,'multiline':False]
['text':' Sanity check optional props','line_number':473,'multiline':False]
['text':' Calculate the command','line_number':478,'multiline':False]
['text':'*
 * An object that integrated with and decorates the command detection capability to add heuristics
 * that adjust various markers to work better with Windows and ConPTY. This isn't depended upon the
 * frontend OS, or even the backend OS, but the `IsWindows` property which technically a non-Windows
 * client can emit (for example in tests).
 ','line_number':506,'multiline':True]
['text':' We don't want to override xterm.js' default behavior, just augment it','line_number':535,'multiline':False]
['text':' For older Windows backends we cannot listen to CSI J, instead we assume running clear','line_number':545,'multiline':False]
['text':' or cls will clear all commands in the viewport. This is not perfect but it's right','line_number':546,'multiline':False]
['text':' most of the time.','line_number':547,'multiline':False]
['text':' Resize behavior is different under conpty; instead of bringing parts of the scrollback','line_number':559,'multiline':False]
['text':' back into the viewport, new lines are inserted at the bottom (ie. the same behavior as if','line_number':560,'multiline':False]
['text':' there was no scrollback).','line_number':561,'multiline':False]
['text':'','line_number':562,'multiline':False]
['text':' On resize this workaround will wait for a conpty reprint to occur by waiting for the','line_number':563,'multiline':False]
['text':' cursor to move, it will then calculate the number of lines that the commands within the','line_number':564,'multiline':False]
['text':' viewport _may have_ shifted. After verifying the content of the current line is','line_number':565,'multiline':False]
['text':' incorrect, the line after shifting is checked and if that matches delete events are fired','line_number':566,'multiline':False]
['text':' on the xterm.js buffer to move the markers.','line_number':567,'multiline':False]
['text':'','line_number':568,'multiline':False]
['text':' While a bit hacky, this approach is quite safe and seems to work great at least for pwsh.','line_number':569,'multiline':False]
['text':' Only do when rows increase, do in the next frame as this needs to happen after','line_number':572,'multiline':False]
['text':' conpty reprints the screen','line_number':573,'multiline':False]
['text':' Calculate the number of lines the content may have shifted, this will max out at','line_number':576,'multiline':False]
['text':' scrollback count since the standard behavior will be used then','line_number':577,'multiline':False]
['text':' For each command within the viewport, assume commands are in the correct order','line_number':579,'multiline':False]
['text':' HACK: xterm.js doesn't expose this by design as it's an internal core','line_number':594,'multiline':False]
['text':' function an embedder could easily do damage with. Additionally, this','line_number':595,'multiline':False]
['text':' can't really be upstreamed since the event relies on shell integration to','line_number':596,'multiline':False]
['text':' verify the shifting is necessary.','line_number':597,'multiline':False]
['text':' On Windows track all cursor movements after the command start sequence','line_number':610,'multiline':False]
['text':' DEBUG: Add a decoration for the original unadjusted command start position','line_number':620,'multiline':False]
['text':' if ('registerDecoration' in this._terminal) {','line_number':621,'multiline':False]
['text':' 	const d = (this._terminal as any).registerDecoration({','line_number':622,'multiline':False]
['text':' 		marker: this._capability.currentCommand.commandStartMarker,','line_number':623,'multiline':False]
['text':' 		x: this._capability.currentCommand.commandStartX','line_number':624,'multiline':False]
['text':' 	});','line_number':625,'multiline':False]
['text':' 	d?.onRender((e: HTMLElement) => {','line_number':626,'multiline':False]
['text':' 		e.textContent = 'b';','line_number':627,'multiline':False]
['text':' 		e.classList.add('xterm-sequence-decoration', 'top', 'right');','line_number':628,'multiline':False]
['text':' 		e.title = 'Initial command start position';','line_number':629,'multiline':False]
['text':' 	});','line_number':630,'multiline':False]
['text':' }','line_number':631,'multiline':False]
['text':' The command started sequence may be printed before the actual prompt is, for example a','line_number':633,'multiline':False]
['text':' multi-line prompt will typically look like this where D, A and B signify the command','line_number':634,'multiline':False]
['text':' finished, prompt started and command started sequences respectively:','line_number':635,'multiline':False]
['text':'','line_number':636,'multiline':False]
['text':'     D/my/cwdB','line_number':637,'multiline':False]
['text':'     > C','line_number':638,'multiline':False]
['text':'','line_number':639,'multiline':False]
['text':' Due to this, it's likely that this will be called before the line has been parsed.','line_number':640,'multiline':False]
['text':' Unfortunately, it is also the case that the actual command start data may not be parsed','line_number':641,'multiline':False]
['text':' by the end of the task either, so a microtask cannot be used.','line_number':642,'multiline':False]
['text':'','line_number':643,'multiline':False]
['text':' The strategy used is to begin polling and scanning downwards for up to the next 5 lines.','line_number':644,'multiline':False]
['text':' If it looks like a prompt is found, the command started location is adjusted. If the','line_number':645,'multiline':False]
['text':' command executed sequences comes in before polling is done, polling is canceled and the','line_number':646,'multiline':False]
['text':' final polling task is executed synchronously.','line_number':647,'multiline':False]
['text':' TODO: Cache details about polling for the future - eg. if it always fails, stop bothering','line_number':653,'multiline':False]
['text':' Adjust the last command if it's not in the same position as the following','line_number':672,'multiline':False]
['text':' prompt start marker','line_number':673,'multiline':False]
['text':' use the regex to set the position as it's possible input has occurred','line_number':680,'multiline':False]
['text':' Perform final try adjust if necessary','line_number':702,'multiline':False]
['text':' Max out poll count to ensure it's the last run','line_number':704,'multiline':False]
['text':' Use the gathered cursor move markers to correct the command start and executed markers','line_number':737,'multiline':False]
['text':' This is done on command finished just in case command executed never happens (for example','line_number':749,'multiline':False]
['text':' PSReadLine tab completion)','line_number':750,'multiline':False]
['text':' If the command start timeout doesn't happen before command finished, just use the','line_number':752,'multiline':False]
['text':' current marker.','line_number':753,'multiline':False]
['text':' Scan downwards from the command start line and search for every character in the actual','line_number':777,'multiline':False]
['text':' command line. This may end up matching the wrong characters, but it shouldn't matter at','line_number':778,'multiline':False]
['text':' least in the typical case as the entire command will still get matched.','line_number':779,'multiline':False]
['text':' Skip whitespace in case it was not actually rendered or could be trimmed from the','line_number':789,'multiline':False]
['text':' end of the line','line_number':790,'multiline':False]
['text':' Character match','line_number':795,'multiline':False]
['text':' Full command match','line_number':800,'multiline':False]
['text':' It's ambiguous whether the command executed marker should ideally appear at','line_number':802,'multiline':False]
['text':' the end of the line or at the beginning of the next line. Since it's more','line_number':803,'multiline':False]
['text':' useful for extracting the command at the end of the current line we go with','line_number':804,'multiline':False]
['text':' that.','line_number':805,'multiline':False]
['text':' On Windows, use the gathered cursor move markers to correct the command start and','line_number':820,'multiline':False]
['text':' executed markers.','line_number':821,'multiline':False]
['text':' Fire this now to prevent issues like #197409','line_number':834,'multiline':False]
['text':' There is only a single command, so this check is unnecessary','line_number':841,'multiline':False]
['text':' If the cursor position is within the last command, we should poll.','line_number':847,'multiline':False]
['text':' TODO: fine tune prompt regex to accomodate for unique configurations.','line_number':877,'multiline':False]
['text':' PowerShell','line_number':883,'multiline':False]
['text':' Custom prompts like starship end in the common \u276f character','line_number':895,'multiline':False]
['text':' Command Prompt','line_number':904,'multiline':False]
['text':' Conpty may not 'render' the space at the end of the prompt','line_number':916,'multiline':False]
['text':' Cap the maximum number of lines generated to prevent potential performance problems. This is','line_number':969,'multiline':False]
['text':' more of a sanity check as the wrapped line should already be trimmed down at this point.','line_number':970,'multiline':False]
['text':' Make sure only 0 to cols are considered as resizing when windows mode is enabled will','line_number':975,'multiline':False]
['text':' retain buffer data outside of the terminal width as reflow is disabled.','line_number':976,'multiline':False]
