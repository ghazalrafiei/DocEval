['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' Debug settings that are hidden from user','line_number':124,'multiline':False]
['text':'* Simulated latency applied to all calls made to the pty host ','line_number':126,'multiline':True]
['text':'* Simulated startup delay of the pty host process ','line_number':128,'multiline':True]
['text':'* Shows the textarea element ','line_number':130,'multiline':True]
['text':'* From the API or the rename command that overrides any other type ','line_number':199,'multiline':True]
['text':'* From the process name property','line_number':201,'multiline':True]
['text':'* From the VT sequence ','line_number':203,'multiline':True]
['text':'* Config changed ','line_number':205,'multiline':True]
['text':'*
	 * Communicates between the renderer process and shared process.
	 ','line_number':213,'multiline':True]
['text':'*
	 * Communicates between the shared process and the pty host process.
	 ','line_number':217,'multiline':True]
['text':'*
	 * Communicates between the renderer process and the pty host process.
	 ','line_number':221,'multiline':True]
['text':'*
	 * Deals with logging from the pty host process.
	 ','line_number':225,'multiline':True]
['text':'*
	 * Enables the detection of unresponsive pty hosts.
	 ','line_number':229,'multiline':True]
['text':'*
	 * The fixed columns of the terminal.
	 ','line_number':267,'multiline':True]
['text':'*
	 * The fixed rows of the terminal.
	 ','line_number':272,'multiline':True]
['text':'*
 * A service that communicates with a pty host.
','line_number':278,'multiline':True]
['text':'*
	 * Lists all orphaned processes, ie. those without a connected frontend.
	 ','line_number':309,'multiline':True]
['text':'*
	 * Measures and returns the latency of the current and all other processes to the pty host.
	 ','line_number':314,'multiline':True]
['text':'* Confirm the process is _not_ an orphan. ','line_number':329,'multiline':True]
['text':'*
	 * Serializes and returns terminal state.
	 * @param ids The persistent terminal IDs to serialize.
	 ','line_number':347,'multiline':True]
['text':'*
	 * Revives a workspaces terminal processes, these can then be reconnected to using the normal
	 * flow for restoring terminals after reloading.
	 ','line_number':352,'multiline':True]
['text':' TODO: Make mandatory and remove impl from pty host service','line_number':360,'multiline':False]
['text':'*
 * A service that communicates with a pty host controller (eg. main or server
 * process) and is able to launch and forward requests to the pty host.
','line_number':377,'multiline':True]
['text':'*
 * Serialized terminal state matching the interface that can be used across versions, the version
 * should be verified before using the state payload.
 ','line_number':389,'multiline':True]
['text':'*
	 * The duration between heartbeats
	 ','line_number':421,'multiline':True]
['text':'*
	 * The duration of the first heartbeat while the pty host is starting up. This is much larger
	 * than the regular BeatInterval to accomodate slow machines, we still want to warn about the
	 * pty host's unresponsiveness eventually though.
	 ','line_number':425,'multiline':True]
['text':'*
	 * Defines a multiplier for BeatInterval for how long to wait before starting the second wait
	 * timer.
	 ','line_number':431,'multiline':True]
['text':'*
	 * Defines a multiplier for BeatInterval for how long to wait before telling the user about
	 * non-responsiveness. The second timer is to avoid informing the user incorrectly when waking
	 * the computer up from sleep
	 ','line_number':436,'multiline':True]
['text':'*
	 * How long to wait before telling the user about non-responsiveness when they try to create a
	 * process. This short circuits the standard wait timeouts to tell the user sooner and only
	 * create process is handled to avoid additional perf overhead.
	 ','line_number':442,'multiline':True]
['text':'*
	 * The name of the terminal, if this is not set the name of the process will be used.
	 ','line_number':456,'multiline':True]
['text':'*
	 * A string to follow the name of the terminal with, indicating the type of terminal
	 ','line_number':461,'multiline':True]
['text':'*
	 * The shell executable (bash, cmd, etc.).
	 ','line_number':466,'multiline':True]
['text':'*
	 * The CLI arguments to use with executable, a string[] is in argv format and will be escaped,
	 * a string is in "CommandLine" pre-escaped format and will be used as is. The string option is
	 * only supported on Windows and will throw an exception if used on macOS or Linux.
	 ','line_number':471,'multiline':True]
['text':'*
	 * The current working directory of the terminal, this overrides the `terminal.integrated.cwd`
	 * settings key.
	 ','line_number':478,'multiline':True]
['text':'*
	 * A custom environment for the terminal, if this is not set the environment will be inherited
	 * from the VS Code process.
	 ','line_number':484,'multiline':True]
['text':'*
	 * Whether to ignore a custom cwd from the `terminal.integrated.cwd` settings key (e.g. if the
	 * shell is being launched by an extension).
	 ','line_number':490,'multiline':True]
['text':'*
	 * The reconnection properties for this terminal
	 ','line_number':496,'multiline':True]
['text':'* Whether to wait for a key press before closing the terminal. ','line_number':501,'multiline':True]
['text':'*
	 * A string including ANSI escape sequences that will be written to the terminal emulator
	 * _before_ the terminal process has launched, when a string is specified, a trailing \n is
	 * added at the end. This allows for example the terminal instance to display a styled message
	 * as the first line of the terminal. Use \x1b over \033 or \e for the escape control character.
	 ','line_number':504,'multiline':True]
['text':'*
	 * Custom PTY/pseudoterminal process to use.
	 ','line_number':512,'multiline':True]
['text':'*
	 * A UUID generated by the extension host process for terminals created on the extension host process.
	 ','line_number':517,'multiline':True]
['text':'*
	 * This is a terminal that attaches to an already running terminal.
	 ','line_number':522,'multiline':True]
['text':'*
	 * Whether the terminal process environment should be exactly as provided in
	 * `TerminalOptions.env`. When this is false (default), the environment will be based on the
	 * window's environment and also apply configured platform settings like
	 * `terminal.integrated.env.windows` on top. When this is true, the complete environment must be
	 * provided as nothing will be inherited from the process or any configuration.
	 ','line_number':545,'multiline':True]
['text':'*
	 * Whether the terminal process environment will inherit VS Code's "shell environment" that may
	 * get sourced from running a login shell depnding on how the application was launched.
	 * Consumers that rely on development tools being present in the $PATH should set this to true.
	 * This will overwrite the value of the inheritEnv setting.
	 ','line_number':554,'multiline':True]
['text':'*
	 * When enabled the terminal will run the process as normal but not be surfaced to the user
	 * until `Terminal.show` is called. The typical usage for this is when you need to run
	 * something that may need interactivity but only want to tell the user about it when
	 * interaction is needed. Note that the terminals will still be exposed to all extensions
	 * as normal.
	 ','line_number':562,'multiline':True]
['text':'*
	 * Whether this terminal is not a terminal that the user directly created and uses, but rather
	 * a terminal used to drive some VS Code feature.
	 ','line_number':571,'multiline':True]
['text':'*
	 * Whether this terminal was created by an extension.
	 ','line_number':577,'multiline':True]
['text':'*
	 * The icon for the terminal, used primarily in the terminal tab.
	 ','line_number':582,'multiline':True]
['text':'*
	 * The color ID to use for this terminal. If not specified it will use the default fallback
	 ','line_number':587,'multiline':True]
['text':'*
	 * When a parent terminal is provided via API, the group needs
	 * to find the index in order to place the child
	 * directly to the right of its parent.
	 ','line_number':592,'multiline':True]
['text':'*
	 * The dimensions for the instance as set by the user
	 * or via Size to Content Width
	 ','line_number':599,'multiline':True]
['text':'*
	 * Opt-out of the default terminal persistence on restart and reload
	 ','line_number':605,'multiline':True]
['text':'*
	 * Create a terminal without shell integration even when it's enabled
	 ','line_number':610,'multiline':True]
['text':'*
 * A set of options for the terminal process. These differ from the shell launch config in that they
 * are set internally to the terminal component, not from the outside.
 ','line_number':650,'multiline':True]
['text':'*
	 * What pty emulation backend is being used.
	 ','line_number':681,'multiline':True]
['text':'*
	 * The Windows build version (eg. 19045)
	 ','line_number':685,'multiline':True]
['text':'*
 * An interface representing a raw terminal child process, this contains a subset of the
 * child_process.ChildProcess node.js interface.
 ','line_number':691,'multiline':True]
['text':'*
	 * A unique identifier for the terminal process. Note that the uniqueness only applies to a
	 * given pty service connection, IDs will be duplicated for remote and local terminals for
	 * example. The ID will be 0 if it does not support reconnection.
	 ','line_number':696,'multiline':True]
['text':'*
	 * Whether the process should be persisted across reloads.
	 ','line_number':703,'multiline':True]
['text':'*
	 * Starts the process.
	 *
	 * @returns undefined when the process was successfully started, otherwise an object containing
	 * information on what went wrong.
	 ','line_number':715,'multiline':True]
['text':'*
	 * Detach the process from the UI and await reconnect.
	 * @param forcePersist Whether to force the process to persist if it supports persistence.
	 ','line_number':723,'multiline':True]
['text':'*
	 * Frees the port and kills the process
	 ','line_number':729,'multiline':True]
['text':'*
	 * Shutdown the terminal process.
	 *
	 * @param immediate When true the process will be killed immediately, otherwise the process will
	 * be given some time to make sure no additional data comes through.
	 ','line_number':734,'multiline':True]
['text':'*
	 * Acknowledge a data event has been parsed by the terminal, this is used to implement flow
	 * control to ensure remote processes to not get too far ahead of the client and flood the
	 * connection.
	 * @param charCount The number of characters being acknowledged.
	 ','line_number':746,'multiline':True]
['text':'*
	 * Sets the unicode version for the process, this drives the size of some characters in the
	 * xterm-headless instance.
	 ','line_number':754,'multiline':True]
['text':'*
	 * If there is no reconnection within this time-frame, consider the connection permanently closed...
	','line_number':773,'multiline':True]
['text':' 60 seconds','line_number':776,'multiline':False]
['text':'*
	 * Maximal grace time between the first and the last reconnection...
	','line_number':777,'multiline':True]
['text':' 6 seconds','line_number':780,'multiline':False]
['text':'*
	 * The number of _unacknowledged_ chars to have been sent before the pty is paused in order for
	 * the client to catch up.
	 ','line_number':784,'multiline':True]
['text':'*
	 * After flow control pauses the pty for the client the catch up, this is the number of
	 * _unacknowledged_ chars to have been caught up to on the client before resuming the pty again.
	 * This is used to attempt to prevent pauses in the flowing data; ideally while the pty is
	 * paused the number of unacknowledged chars would always be greater than 0 or the client will
	 * appear to stutter. In reality this balance is hard to accomplish though so heavy commands
	 * will likely pause as latency grows, not flooding the connection is the important thing as
	 * it's shared with other core functionality.
	 ','line_number':789,'multiline':True]
['text':'*
	 * The number characters that are accumulated on the client side before sending an ack event.
	 * This must be less than or equal to LowWatermarkChars or the terminal max never unpause.
	 ','line_number':799,'multiline':True]
['text':'*
	 * When trackCommit is set, this will be set to a promise that resolves when the data is parsed.
	 ','line_number':809,'multiline':True]
['text':'*
	 * The columns of the terminal.
	 ','line_number':816,'multiline':True]
['text':'*
	 * The rows of the terminal.
	 ','line_number':821,'multiline':True]
['text':'*
	 * Whether the terminal profile contains a potentially unsafe {@link path}. For example, the path
	 * `C:\Cygwin` is the default install for Cygwin on Windows, but it could be created by any
	 * user in a multi-user environment. As such, we don't want to blindly present it as a profile
	 * without a warning.
	 ','line_number':831,'multiline':True]
['text':'*
	 * An additional unsafe path that must exist, for example a script that appears in {@link args}.
	 ','line_number':838,'multiline':True]
['text':'*
	 * Whether the profile path was found on the `$PATH` environment variable, if so it will be
	 * cleaner to display this profile in the UI using only `basename(path)`.
	 ','line_number':843,'multiline':True]
['text':'*
	 * indicate that xterm must receive these exact dimensions, even if they overflow the ui!
	 ','line_number':856,'multiline':True]
['text':'* No shell integration sequences have been encountered. ','line_number':919,'multiline':True]
['text':'* Final term shell integration sequences have been encountered. ','line_number':921,'multiline':True]
['text':'* VS Code shell integration sequences have been encountered. Supercedes FinalTerm. ','line_number':923,'multiline':True]
['text':'*
 * A matcher that runs on a sub-section of a terminal command's output
 ','line_number':940,'multiline':True]
['text':'*
	 * A string or regex to match against the unwrapped line. If this is a regex with the multiline
	 * flag, it will scan an amount of lines equal to `\n` instances in the regex + 1.
	 ','line_number':944,'multiline':True]
['text':'*
	 * Which side of the output to anchor the {@link offset} and {@link length} against.
	 ','line_number':949,'multiline':True]
['text':'*
	 * The number of rows above or below the {@link anchor} to start matching against.
	 ','line_number':953,'multiline':True]
['text':'*
	 * The number of rows to match against, this should be as small as possible for performance
	 * reasons. This is capped at 40.
	 ','line_number':957,'multiline':True]
['text':'*
	 * If multiple matches are expected - this will result in {@link outputLines} being returned
	 * when there's a {@link regexMatch} from {@link offset} to {@link length}
	 ','line_number':963,'multiline':True]
['text':'*
	 * A promise that resolves when the backend is ready to be used, ie. after terminal persistence
	 * has been actioned.
	 ','line_number':984,'multiline':True]
['text':'*
	 * Signal to the backend that persistence has been actioned and is ready for use.
	 ','line_number':989,'multiline':True]
['text':'*
	 * Fired when the ptyHost process becomes non-responsive, this should disable stdin for all
	 * terminals using this pty host connection and mark them as disconnected.
	 ','line_number':994,'multiline':True]
['text':'*
	 * Fired when the ptyHost process becomes responsive after being non-responsive. Allowing
	 * previously disconnected terminals to reconnect.
	 ','line_number':999,'multiline':True]
['text':'*
	 * Fired when the ptyHost has been restarted, this is used as a signal for listening terminals
	 * that its pty has been lost and will remain disconnected.
	 ','line_number':1004,'multiline':True]
['text':'*
	 * Gets all backends in the registry.
	 ','line_number':1050,'multiline':True]
['text':'*
	 * Registers a terminal backend for a remote authority.
	 ','line_number':1055,'multiline':True]
['text':'*
	 * Returns the registered terminal backend for a remote authority.
	 ','line_number':1060,'multiline':True]
['text':' Normalize the key to lowercase as the authority is case-insensitive','line_number':1084,'multiline':False]
['text':'*
 * A service responsible for communicating with the pty host process on Electron.
 *
 * **This service should only be used within the terminal component.**
 ','line_number':1092,'multiline':True]
['text':'*
	 * Similar to _serviceBrand but used to differentiate this service at compile time from
	 * ILogService; ITerminalLogService is an ILogService, but ILogService is not an
	 * ITerminalLogService.
	 ','line_number':1101,'multiline':True]
