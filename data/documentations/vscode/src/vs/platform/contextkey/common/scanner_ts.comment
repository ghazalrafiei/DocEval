['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * Example:
 * `foo == bar'` - note how single quote doesn't have a corresponding closing quote,
 * so it's reported as unexpected
 ','line_number':75,'multiline':True]
['text':'* note that this doesn't take into account escape characters from the original encoding of the string, e.g., within an extension manifest file's JSON encoding  ','line_number':81,'multiline':True]
['text':' we just don't expect that many','line_number':94,'multiline':False]
['text':'*
 * A simple scanner for context keys.
 *
 * Example:
 *
 * ```ts
 * const scanner = new Scanner().reset('resourceFileName =~ /docker/ && !config.docker.enabled');
 * const tokens = [...scanner];
 * if (scanner.errorTokens.length > 0) {
 *     scanner.errorTokens.forEach(err => console.error(`Unexpected token at ${err.offset}: ${err.lexeme}\nHint: ${err.additional}`));
 * } else {
 *     // process tokens
 * }
 * ```
 ','line_number':102,'multiline':True]
['text':' eat last `=` if `!==`','line_number':210,'multiline':False]
['text':' support `==`','line_number':221,'multiline':False]
['text':' eat last `=` if `===`','line_number':222,'multiline':False]
['text':' TODO@ulugbekna: 1) rewrite using a regex 2) reconsider what characters are considered whitespace, including unicode, nbsp, etc.','line_number':251,'multiline':False]
['text':' &nbsp','line_number':256,'multiline':False]
['text':' u - unicode, y - sticky // TODO@ulugbekna: we accept double quotes as part of the string rather than as a delimiter (to preserve old parser's behavior)','line_number':301,'multiline':False]
