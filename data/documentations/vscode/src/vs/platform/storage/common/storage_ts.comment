['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
	 * No specific reason to save state.
	 ','line_number':23,'multiline':True]
['text':'*
	 * A hint that the workbench is about to shutdown.
	 ','line_number':28,'multiline':True]
['text':'*
	 * Emitted whenever data is updated or deleted on the given
	 * scope and optional key.
	 *
	 * @param scope the `StorageScope` to listen to changes
	 * @param key the optional key to filter for or all keys of
	 * the scope if `undefined`
	 ','line_number':61,'multiline':True]
['text':'*
	 * Emitted whenever target of a storage entry changes.
	 ','line_number':74,'multiline':True]
['text':'*
	 * Emitted when the storage is about to persist. This is the right time
	 * to persist data to ensure it is stored before the application shuts
	 * down.
	 *
	 * The will save state event allows to optionally ask for the reason of
	 * saving the state, e.g. to find out if the state is saved due to a
	 * shutdown.
	 *
	 * Note: this event may be fired many times, not only on shutdown to prevent
	 * loss of state in situations where the shutdown is not sufficient to
	 * persist the data properly.
	 ','line_number':79,'multiline':True]
['text':'*
	 * Retrieve an element stored with the given key from storage. Use
	 * the provided `defaultValue` if the element is `null` or `undefined`.
	 *
	 * @param scope allows to define the scope of the storage operation
	 * to either the current workspace only, all workspaces or all profiles.
	 ','line_number':94,'multiline':True]
['text':'*
	 * Retrieve an element stored with the given key from storage. Use
	 * the provided `defaultValue` if the element is `null` or `undefined`.
	 * The element will be converted to a `boolean`.
	 *
	 * @param scope allows to define the scope of the storage operation
	 * to either the current workspace only, all workspaces or all profiles.
	 ','line_number':104,'multiline':True]
['text':'*
	 * Retrieve an element stored with the given key from storage. Use
	 * the provided `defaultValue` if the element is `null` or `undefined`.
	 * The element will be converted to a `number` using `parseInt` with a
	 * base of `10`.
	 *
	 * @param scope allows to define the scope of the storage operation
	 * to either the current workspace only, all workspaces or all profiles.
	 ','line_number':115,'multiline':True]
['text':'*
	 * Retrieve an element stored with the given key from storage. Use
	 * the provided `defaultValue` if the element is `null` or `undefined`.
	 * The element will be converted to a `object` using `JSON.parse`.
	 *
	 * @param scope allows to define the scope of the storage operation
	 * to either the current workspace only, all workspaces or all profiles.
	 ','line_number':127,'multiline':True]
['text':'*
	 * Store a value under the given key to storage. The value will be
	 * converted to a `string`. Storing either `undefined` or `null` will
	 * remove the entry under the key.
	 *
	 * @param scope allows to define the scope of the storage operation
	 * to either the current workspace only, all workspaces or all profiles.
	 *
	 * @param target allows to define the target of the storage operation
	 * to either the current machine or user.
	 ','line_number':138,'multiline':True]
['text':'*
	 * Allows to store multiple values in a bulk operation. Events will only
	 * be emitted when all values have been stored.
	 *
	 * @param external a hint to indicate the source of the operation is external,
	 * such as settings sync or profile changes.
	 ','line_number':151,'multiline':True]
['text':'*
	 * Delete an element stored under the provided key from storage.
	 *
	 * The scope argument allows to define the scope of the storage
	 * operation to either the current workspace only, all workspaces
	 * or all profiles.
	 ','line_number':160,'multiline':True]
['text':'*
	 * Returns all the keys used in the storage for the provided `scope`
	 * and `target`.
	 *
	 * Note: this will NOT return all keys stored in the storage layer.
	 * Some keys may not have an associated `StorageTarget` and thus
	 * will be excluded from the results.
	 *
	 * @param scope allows to define the scope for the keys
	 * to either the current workspace only, all workspaces or all profiles.
	 *
	 * @param target allows to define the target for the keys
	 * to either the current machine or user.
	 ','line_number':169,'multiline':True]
['text':'*
	 * Log the contents of the storage to the console.
	 ','line_number':185,'multiline':True]
['text':'*
	 * Returns true if the storage service handles the provided scope.
	 ','line_number':190,'multiline':True]
['text':'*
	 * Switch storage to another workspace or profile. Optionally preserve the
	 * current data to the new storage.
	 ','line_number':195,'multiline':True]
['text':'*
	 * Whether the storage for the given scope was created during this session or
	 * existed before.
	 ','line_number':201,'multiline':True]
['text':'*
	 * Attempts to reduce the DB size via optimization commands if supported.
	 ','line_number':207,'multiline':True]
['text':'*
	 * Allows to flush state, e.g. in cases where a shutdown is
	 * imminent. This will send out the `onWillSaveState` to ask
	 * everyone for latest state.
	 *
	 * @returns a `Promise` that can be awaited on when all updates
	 * to the underlying storage have been flushed.
	 ','line_number':212,'multiline':True]
['text':'*
	 * The stored data will be scoped to all workspaces across all profiles.
	 ','line_number':225,'multiline':True]
['text':'*
	 * The stored data will be scoped to all workspaces of the same profile.
	 ','line_number':230,'multiline':True]
['text':'*
	 * The stored data will be scoped to the current workspace.
	 ','line_number':235,'multiline':True]
['text':'*
	 * The stored data is user specific and applies across machines.
	 ','line_number':243,'multiline':True]
['text':'*
	 * The stored data is machine specific.
	 ','line_number':248,'multiline':True]
['text':'*
	 * The scope for the storage entry that changed
	 * or was removed.
	 ','line_number':256,'multiline':True]
['text':'*
	 * The `key` of the storage entry that was changed
	 * or was removed.
	 ','line_number':262,'multiline':True]
['text':'*
	 * The `target` can be `undefined` if a key is being
	 * removed.
	 ','line_number':268,'multiline':True]
['text':'*
	 * A hint how the storage change event was triggered. If
	 * `true`, the storage change was triggered by an external
	 * source, such as:
	 * - another process (for example another window)
	 * - operations such as settings sync or profiles change
	 ','line_number':274,'multiline':True]
['text':'*
	 * The scope for the target that changed. Listeners
	 * should use `keys(scope, target)` to get an updated
	 * list of keys for the given `scope` and `target`.
	 ','line_number':286,'multiline':True]
['text':' Fail gracefully','line_number':308,'multiline':False]
['text':' every minute','line_number':319,'multiline':False]
['text':' repeat','line_number':351,'multiline':False]
['text':' Init all storage locations','line_number':368,'multiline':False]
['text':' Ask subclasses to initialize storage','line_number':371,'multiline':False]
['text':' On some OS we do not get enough time to persist state on shutdown (e.g. when','line_number':376,'multiline':False]
['text':' Windows restarts after applying updates). In other cases, VSCode might crash,','line_number':377,'multiline':False]
['text':' so we periodically save state to reduce the chance of loosing any state.','line_number':378,'multiline':False]
['text':' In the browser we do not have support for long running unload sequences. As such,','line_number':379,'multiline':False]
['text':' we cannot ask for saving state in that moment, because that would result in a','line_number':380,'multiline':False]
['text':' long running operation.','line_number':381,'multiline':False]
['text':' Instead, periodically ask customers to save save. The library will be clever enough','line_number':382,'multiline':False]
['text':' to only save state that has actually changed.','line_number':383,'multiline':False]
['text':' Specially handle `TARGET_KEY`','line_number':394,'multiline':False]
['text':' Clear our cached version which is now out of date','line_number':397,'multiline':False]
['text':' Emit as `didChangeTarget` event','line_number':410,'multiline':False]
['text':' Emit any other key to outside','line_number':414,'multiline':False]
['text':' We remove the key for undefined/null values','line_number':458,'multiline':False]
['text':' Update our datastructures but send events only after','line_number':464,'multiline':False]
['text':' Update key-target map','line_number':467,'multiline':False]
['text':' Store actual value','line_number':470,'multiline':False]
['text':' Update our datastructures but send events only after','line_number':477,'multiline':False]
['text':' Update key-target map','line_number':480,'multiline':False]
['text':' Remove actual key','line_number':483,'multiline':False]
['text':' Pause emitters','line_number':490,'multiline':False]
['text':' Resume emitters','line_number':498,'multiline':False]
['text':' Add','line_number':520,'multiline':False]
['text':' Remove','line_number':529,'multiline':False]
['text':' Signal event to collect changes','line_number':588,'multiline':False]
['text':' Unspecific reason: just wait when data is flushed','line_number':597,'multiline':False]
['text':' Shutdown: we want to flush as soon as possible','line_number':606,'multiline':False]
['text':' and not hit any delays that might be there','line_number':607,'multiline':False]
['text':' Await pending data to be flushed to the DB','line_number':635,'multiline':False]
['text':' before attempting to optimize the DB','line_number':636,'multiline':False]
['text':' Signal as event so that clients can store data before we switch','line_number':644,'multiline':False]
['text':' both profiles are same','line_number':656,'multiline':False]
['text':' both profiles are using default','line_number':660,'multiline':False]
['text':' Signal storage keys that have changed','line_number':668,'multiline':False]
['text':' --- abstract','line_number':687,'multiline':False]
['text':' no-op when in-memory','line_number':744,'multiline':False]
['text':' no-op when in-memory','line_number':748,'multiline':False]
