['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * A terminal contribution that gets created whenever a terminal is created. A contribution has
 * access to the process manager through the constructor and provides a method for when xterm.js has
 * been initialized.
 ','line_number':35,'multiline':True]
['text':'*
 * A service used to create instances or fetch backends, this services allows services that
 * ITerminalService depends on to also create instances.
 *
 * **This service is intended to only be used within the terminal contrib.**
 ','line_number':46,'multiline':True]
['text':'*
	 * An event that's fired when a terminal instance is created.
	 ','line_number':55,'multiline':True]
['text':'*
	 * Helper function to convert a shell launch config, a profile or undefined into its equivalent
	 * shell launch config.
	 * @param shellLaunchConfigOrProfile A shell launch config, a profile or undefined
	 * @param cwd A cwd to override.
	 ','line_number':60,'multiline':True]
['text':'*
	 * Create a new terminal instance.
	 * @param launchConfig The shell launch config.
	 * @param target The target of the terminal.
	 ','line_number':68,'multiline':True]
['text':'*
	 * Gets the registered backend for a remote authority (undefined = local). This is a convenience
	 * method to avoid using the more verbose fetching from the registry.
	 * @param remoteAuthority The remote authority of the backend.
	 ','line_number':75,'multiline':True]
['text':'*
 * A generic interface implemented in both the {@link ITerminalInstance} (an
 * interface used for terminals attached to the terminal panel or editor) and
 * {@link IDetachedTerminalInstance} (a terminal used elsewhere in VS Code UI).
 ','line_number':163,'multiline':True]
['text':'*
	 * DOM element the terminal is mounted in.
	 ','line_number':171,'multiline':True]
['text':'*
	 * Current selection in the terminal.
	 ','line_number':176,'multiline':True]
['text':'*
	 * Check if anything is selected in terminal.
	 ','line_number':181,'multiline':True]
['text':'*
	 * Clear current selection.
	 ','line_number':186,'multiline':True]
['text':'*
	 * Focuses the terminal instance if it's able to (the xterm.js instance must exist).
	 *
	 * @param force Force focus even if there is a selection.
	 ','line_number':191,'multiline':True]
['text':'*
	 * Force the scroll bar to be visible until {@link resetScrollbarVisibility} is called.
	 ','line_number':198,'multiline':True]
['text':'*
	 * Resets the scroll bar to only be visible when needed, this does nothing unless
	 * {@link forceScrollbarVisibility} was called.
	 ','line_number':203,'multiline':True]
['text':'*
	 * Gets a terminal contribution by its ID.
	 ','line_number':209,'multiline':True]
['text':'*
 * A {@link ITerminalInstance}-like object that emulates a subset of
 * capabilities. This instance is returned from {@link ITerminalService.createDetachedTerminal}
 * to represent terminals that appear in other parts of the VS Code UI outside
 * of the "Terminal" view or editors.
 ','line_number':215,'multiline':True]
['text':'*
	 * Attached the terminal to the given element. This should be preferred over
	 * calling {@link IXtermTerminal.attachToElement} so that extra DOM elements
	 * for contributions are initialized.
	 *
	 * @param container Container the terminal will be rendered in
	 * @param options Additional options for mounting the terminal in an element
	 ','line_number':224,'multiline':True]
['text':'* Gets all terminal instances, including editor and terminal view (group) instances. ','line_number':240,'multiline':True]
['text':'* Gets detached terminal instances created via {@link createDetachedXterm}. ','line_number':242,'multiline':True]
['text':'* The number of restored terminal groups on startup. ','line_number':250,'multiline':True]
['text':' Group events','line_number':259,'multiline':False]
['text':' Multiplexed events','line_number':262,'multiline':False]
['text':'*
	 * Creates a terminal.
	 * @param options The options to create the terminal with, when not specified the default
	 * profile will be used at the default target.
	 ','line_number':271,'multiline':True]
['text':'*
	 * Creates a detached xterm instance which is not attached to the DOM or
	 * tracked as a terminal instance.
	 * @params options The options to create the terminal with
	 ','line_number':278,'multiline':True]
['text':'*
	 * Creates a raw terminal instance, this should not be used outside of the terminal part.
	 ','line_number':285,'multiline':True]
['text':'*
	 * An owner of terminals might be created after reconnection has occurred,
	 * so store them to be requested/adopted later
	 ','line_number':291,'multiline':True]
['text':'*
	 * Fire the onActiveTabChanged event, this will trigger the terminal dropdown to be updated,
	 * among other things.
	 ','line_number':303,'multiline':True]
['text':'*
	 * Creates an instance event listener that listens to all instances, dynamically adding new
	 * instances and removing old instances as needed.
	 * @param getEvent Maps the instance to the event.
	 ','line_number':331,'multiline':True]
['text':'*
	 * Creates a capability event listener that listens to capabilities on all instances,
	 * dynamically adding and removing instances and capabilities as needed.
	 * @param capabilityId The capability type to listen to an event on.
	 * @param getEvent Maps the capability to the event.
	 ','line_number':338,'multiline':True]
['text':'*
 * This service is responsible for integrating with the editor service and managing terminal
 * editors.
 ','line_number':353,'multiline':True]
['text':'* Gets all _terminal editor_ instances. ','line_number':360,'multiline':True]
['text':'*
	 * The shell launch config or profile to launch with, when not specified the default terminal
	 * profile will be used.
	 ','line_number':399,'multiline':True]
['text':'*
	 * The current working directory to start with, this will override IShellLaunchConfig.cwd if
	 * specified.
	 ','line_number':404,'multiline':True]
['text':'*
	 * The terminal's resource, passed when the terminal has moved windows.
	 ','line_number':409,'multiline':True]
['text':'*
	 * The terminal's location (editor or panel), it's terminal parent (split to the right), or editor group
	 ','line_number':414,'multiline':True]
['text':'*
 * This service is responsible for managing terminal groups, that is the terminals that are hosted
 * within the terminal panel, not in an editor.
 ','line_number':425,'multiline':True]
['text':'* Gets all _terminal view_ instances, ie. instances contained within terminal groups. ','line_number':432,'multiline':True]
['text':'*
	 * Gets or sets the last accessed menu, this is used to select the instance(s) for menu actions.
	 ','line_number':437,'multiline':True]
['text':'* Fires when a group is created, disposed of, or shown (in the case of a background group). ','line_number':444,'multiline':True]
['text':'* Fires when the panel has been shown and expanded, so has non-zero dimensions. ','line_number':446,'multiline':True]
['text':'*
	 * Moves a terminal instance's group to the target instance group's position.
	 * @param source The source instance to move.
	 * @param target The target instance to move the source instance to.
	 ','line_number':454,'multiline':True]
['text':'*
 * An interface that indicates the implementer hosts terminal instances, exposing a common set of
 * properties and events.
 ','line_number':483,'multiline':True]
['text':'*
	 * Reveal and focus the active instance, regardless of its location.
	 ','line_number':498,'multiline':True]
['text':'*
	 * Gets an instance from a resource if it exists. This MUST be used instead of getInstanceFromId
	 * when you only know about a terminal's URI. (a URI's instance ID may not be this window's instance ID)
	 ','line_number':502,'multiline':True]
['text':'*
 * Similar to xterm.js' ILinkProvider but using promises and hides xterm.js internals (like buffer
 * positions, decorations, etc.) from the rest of vscode. This is the interface to use for
 * workbench integrations.
 ','line_number':509,'multiline':True]
['text':'* The startIndex of the link in the line. ','line_number':519,'multiline':True]
['text':'* The length of the link in the line. ','line_number':521,'multiline':True]
['text':'* The descriptive label for what the link does when activated. ','line_number':523,'multiline':True]
['text':'*
	 * Activates the link.
	 * @param text The text of the link.
	 ','line_number':525,'multiline':True]
['text':'* Whether the find should be done as a regex. ','line_number':533,'multiline':True]
['text':'* Whether only whole words should match. ','line_number':535,'multiline':True]
['text':'* Whether find should pay attention to case. ','line_number':537,'multiline':True]
['text':'* Whether the search should start at the current search position (not the next row). ','line_number':539,'multiline':True]
['text':'*
	 * The ID of the terminal instance, this is an arbitrary number only used to uniquely identify
	 * terminal instances within a window.
	 ','line_number':544,'multiline':True]
['text':'*
	 * A unique URI for this terminal instance with the following encoding:
	 * path: /<workspace ID>/<instance ID>
	 * fragment: Title
	 * Note that when dragging terminals across windows, this will retain the original workspace ID /instance ID
	 * from the other window.
	 ','line_number':549,'multiline':True]
['text':'*
	 * The underlying disposable store, allowing objects who share the same lifecycle as the
	 * terminal instance but are created externally to be managed by the instance.
	 ','line_number':579,'multiline':True]
['text':'*
	 * The process ID of the shell process, this is undefined when there is no process associated
	 * with this terminal.
	 ','line_number':587,'multiline':True]
['text':'*
	 * The position of the terminal.
	 ','line_number':593,'multiline':True]
['text':'*
	 * The id of a persistent process. This is defined if this is a terminal created by a pty host
	 * that supports reconnection.
	 ','line_number':598,'multiline':True]
['text':'*
	 * Whether the process should be persisted across reloads.
	 ','line_number':604,'multiline':True]
['text':'
	 * Whether this terminal has been disposed of
	 ','line_number':609,'multiline':True]
['text':'*
	 * Whether the terminal's pty is hosted on a remote.
	 ','line_number':614,'multiline':True]
['text':'*
	 * The remote authority of the terminal's pty.
	 ','line_number':619,'multiline':True]
['text':'*
	 * Whether an element within this terminal is focused.
	 ','line_number':624,'multiline':True]
['text':'*
	 * Get or set the behavior of the terminal when it closes. This was indented only to be called
	 * after reconnecting to a terminal.
	 ','line_number':629,'multiline':True]
['text':'*
	 * An event that fires when the terminal instance's title changes.
	 ','line_number':635,'multiline':True]
['text':'*
	 * An event that fires when the terminal instance's icon changes.
	 ','line_number':640,'multiline':True]
['text':'*
	 * An event that fires when the terminal instance is disposed.
	 ','line_number':645,'multiline':True]
['text':'*
	 * An event that fires when a terminal is dropped on this instance via drag and drop.
	 ','line_number':666,'multiline':True]
['text':'*
	 * Attach a listener to the raw data stream coming from the pty, including ANSI escape
	 * sequences.
	 ','line_number':671,'multiline':True]
['text':'*
	 * Attach a listener to the binary data stream coming from xterm and going to pty
	 ','line_number':677,'multiline':True]
['text':'*
	 * Attach a listener to listen for new lines added to this terminal instance.
	 *
	 * @param listener The listener function which takes new line strings added to the terminal,
	 * excluding ANSI escape sequences. The line event will fire when an LF character is added to
	 * the terminal (ie. the line is not wrapped). Note that this means that the line data will
	 * not fire for the last line, until either the line is ended with a LF character of the process
	 * is exited. The lineData string will contain the fully wrapped line, not containing any LF/CR
	 * characters.
	 ','line_number':682,'multiline':True]
['text':'*
	 * Attach a listener that fires when the terminal's pty process exits. The number in the event
	 * is the processes' exit code, an exit code of undefined means the process was killed as a result of
	 * the ITerminalInstance being disposed.
	 ','line_number':694,'multiline':True]
['text':'*
	 * The exit code or undefined when the terminal process hasn't yet exited or
	 * the process exit code could not be determined. Use {@link exitReason} to see
	 * why the process has exited.
	 ','line_number':701,'multiline':True]
['text':'*
	 * The reason the terminal process exited, this will be undefined if the process is still
	 * running.
	 ','line_number':708,'multiline':True]
['text':'*
	 * The xterm.js instance for this terminal.
	 ','line_number':714,'multiline':True]
['text':'*
	 * Returns an array of data events that have fired within the first 10 seconds. If this is
	 * called 10 seconds after the terminal has existed the result will be undefined. This is useful
	 * when objects that depend on the data events have delayed initialization, like extension
	 * hosts.
	 ','line_number':719,'multiline':True]
['text':'* A promise that resolves when the terminal's pty/process have been created. ','line_number':727,'multiline':True]
['text':'* Whether the terminal's process has child processes (ie. is dirty/busy). ','line_number':730,'multiline':True]
['text':'*
	 * The title of the terminal. This is either title or the process currently running or an
	 * explicit name given to the terminal instance through the extension API.
	 ','line_number':733,'multiline':True]
['text':'*
	 * How the current title was set.
	 ','line_number':739,'multiline':True]
['text':'*
	 * The shell type of the terminal.
	 ','line_number':744,'multiline':True]
['text':'*
	 * The focus state of the terminal before exiting.
	 ','line_number':749,'multiline':True]
['text':'*
	 * False when the title is set by an API or the user. We check this to make sure we
	 * do not override the title when the process title changes in the terminal.
	 ','line_number':754,'multiline':True]
['text':'*
	 * The shell launch config used to launch the shell.
	 ','line_number':760,'multiline':True]
['text':'*
	 * Whether to disable layout for the terminal. This is useful when the size of the terminal is
	 * being manipulating (e.g. adding a split pane) and we want the terminal to ignore particular
	 * resize events.
	 ','line_number':765,'multiline':True]
['text':'*
	 * The description of the terminal, this is typically displayed next to {@link title}.
	 ','line_number':772,'multiline':True]
['text':'*
	 * The remote-aware $HOME directory (or Windows equivalent) of the terminal.
	 ','line_number':777,'multiline':True]
['text':'*
	 * The nonce used to verify commands coming from shell integration.
	 ','line_number':782,'multiline':True]
['text':'*
	 * Registers and returns a marker
	 ','line_number':787,'multiline':True]
['text':'*
	 * Adds a marker to the buffer, mapping it to an ID if provided.
	 ','line_number':792,'multiline':True]
['text':'*
	 *
	 * @param startMarkId The ID for the start marker
	 * @param endMarkId The ID for the end marker
	 * @param highlight Whether the buffer from startMarker to endMarker
	 * should be highlighted
	 ','line_number':797,'multiline':True]
['text':'*
	 * Dispose the terminal instance, removing it from the panel/service and freeing up resources.
	 *
	 * @param reason The reason why the terminal is being disposed
	 ','line_number':806,'multiline':True]
['text':'*
	 * Informs the process that the terminal is now detached and
	 * then disposes the terminal.
	 *
	 * @param reason The reason why the terminal is being disposed
	 ','line_number':813,'multiline':True]
['text':'*
	 * Copies the terminal selection to the clipboard.
	 ','line_number':821,'multiline':True]
['text':'*
	 * When the panel is hidden or a terminal in the editor area becomes inactive, reset the focus context key
	 * to avoid issues like #147180.
	 ','line_number':826,'multiline':True]
['text':'*
	 * Focuses the terminal instance when it's ready (the xterm.js instance much exist). This is the
	 * best focus call when the terminal is being shown for example.
	 * when the terminal is being shown.
	 *
	 * @param force Force focus even if there is a selection.
	 ','line_number':832,'multiline':True]
['text':'*
	 * Focuses and pastes the contents of the clipboard into the terminal instance.
	 ','line_number':841,'multiline':True]
['text':'*
	 * Focuses and pastes the contents of the selection clipboard into the terminal instance.
	 ','line_number':846,'multiline':True]
['text':'*
	 * Override the copy on selection feature with a custom value.
	 * @param value Whether to enable copySelection.
	 ','line_number':851,'multiline':True]
['text':'*
	 * Send text to the terminal instance. The text is written to the stdin of the underlying pty
	 * process (shell) of the terminal instance.
	 *
	 * @param text The text to send.
	 * @param shouldExecute Indicates that the text being sent should be executed rather than just inserted in the terminal.
	 * The character(s) added are \n or \r\n, depending on the platform. This defaults to `true`.
	 * @param bracketedPasteMode Whether to wrap the text in the bracketed paste mode sequence when
	 * it's enabled. When true, the shell will treat the text as if it were pasted into the shell,
	 * this may for example select the text and it will also ensure that the text will not be
	 * interpreted as a shell keybinding.
	 ','line_number':857,'multiline':True]
['text':'*
	 * Sends a path to the terminal instance, preparing it as needed based on the detected shell
	 * running within the terminal. The text is written to the stdin of the underlying pty process
	 * (shell) of the terminal instance.
	 *
	 * @param originalPath The path to send.
	 * @param shouldExecute Indicates that the text being sent should be executed rather than just inserted in the terminal.
	 * The character(s) added are \n or \r\n, depending on the platform. This defaults to `true`.
	 ','line_number':871,'multiline':True]
['text':'*
	 * Takes a path and returns the properly escaped path to send to a given shell. On Windows, this
	 * includes trying to prepare the path for WSL if needed.
	 *
	 * @param originalPath The path to be escaped and formatted.
	 ','line_number':884,'multiline':True]
['text':'* Scroll the terminal buffer down 1 line. ','line_number':892,'multiline':True]
['text':'* Scroll the terminal buffer down 1 page. ','line_number':893,'multiline':True]
['text':'* Scroll the terminal buffer to the bottom. ','line_number':894,'multiline':True]
['text':'* Scroll the terminal buffer up 1 line. ','line_number':895,'multiline':True]
['text':'* Scroll the terminal buffer up 1 page. ','line_number':896,'multiline':True]
['text':'* Scroll the terminal buffer to the top. ','line_number':897,'multiline':True]
['text':'*
	 * Clears the terminal buffer, leaving only the prompt line and moving it to the top of the
	 * viewport.
	 ','line_number':899,'multiline':True]
['text':'*
	 * Attaches the terminal instance to an element on the DOM, before this is called the terminal
	 * instance process may run in the background but cannot be displayed on the UI.
	 *
	 * @param container The element to attach the terminal instance to.
	 ','line_number':905,'multiline':True]
['text':'*
	 * Detaches the terminal instance from the terminal editor DOM element.
	 ','line_number':913,'multiline':True]
['text':'*
	 * Layout the terminal instance.
	 *
	 * @param dimension The dimensions of the container.
	 ','line_number':918,'multiline':True]
['text':'*
	 * Sets whether the terminal instance's element is visible in the DOM.
	 *
	 * @param visible Whether the element is visible.
	 ','line_number':925,'multiline':True]
['text':'*
	 * Immediately kills the terminal's current pty process and launches a new one to replace it.
	 *
	 * @param shell The new launch configuration.
	 ','line_number':932,'multiline':True]
['text':'*
	 * Relaunches the terminal, killing it and reusing the launch config used initially. Any
	 * environment variable changes will be recalculated when this happens.
	 ','line_number':939,'multiline':True]
['text':'*
	 * Sets the terminal instance's dimensions to the values provided via the onDidOverrideDimensions event,
	 * which allows overriding the the regular dimensions (fit to the size of the panel).
	 ','line_number':945,'multiline':True]
['text':'*
	 * Sets the terminal instance's dimensions to the values provided via quick input.
	 ','line_number':951,'multiline':True]
['text':'*
	 * Toggles terminal line wrapping.
	 ','line_number':956,'multiline':True]
['text':'*
	 * Gets the initial current working directory, fetching it from the backend if required.
	 ','line_number':961,'multiline':True]
['text':'*
	 * Gets the current working directory from cwd detection capabilities if available, otherwise
	 * from the backend. This will return the initial cwd if cwd detection is not available (ie.
	 * on Windows when shell integration is disabled).
	 ','line_number':966,'multiline':True]
['text':'*
	 * Sets the title of the terminal to the provided string. If no title is provided, it will reset
	 * to the terminal's title if it was not explicitly set by the user or API.
	 * @param title The new title.
	 ','line_number':973,'multiline':True]
['text':'*
	 * Sets or triggers a quick pick to change the icon of this terminal.
	 ','line_number':980,'multiline':True]
['text':'*
	 * Sets or triggers a quick pick to change the color of the associated terminal tab icon.
	 ','line_number':985,'multiline':True]
['text':'*
	 * Triggers a quick pick that displays recent commands or cwds. Selecting one will
	 * rerun it in the active terminal.
	 ','line_number':990,'multiline':True]
['text':'*
	 * Attempts to detect and kill the process listening on specified port.
	 * If successful, places commandToRun on the command line
	 ','line_number':996,'multiline':True]
['text':'*
	 * Whether GPU rendering should be enabled for this element, defaults to true.
	 ','line_number':1008,'multiline':True]
['text':'*
	 * An object that tracks when commands are run and enables navigating and selecting between
	 * them.
	 ','line_number':1015,'multiline':True]
['text':'*
	 * Reports the status of shell integration and fires events relating to it.
	 ','line_number':1021,'multiline':True]
['text':'*
	 * Event fired when focus enters (fires with true) or leaves (false) the terminal.
	 ','line_number':1029,'multiline':True]
['text':'*
	 * Gets a view of the current texture atlas used by the renderers.
	 ','line_number':1034,'multiline':True]
['text':'*
	 * Whether the `disableStdin` option in xterm.js is set.
	 ','line_number':1039,'multiline':True]
['text':'*
	 * Whether the terminal is currently focused.
	 ','line_number':1044,'multiline':True]
['text':'*
	 * Whether a canvas-based renderer is being used.
	 ','line_number':1049,'multiline':True]
['text':'*
	 * Attached the terminal to the given element
	 * @param container Container the terminal will be rendered in
	 * @param options Additional options for mounting the terminal in an element
	 ','line_number':1054,'multiline':True]
['text':'*
	 * Find the next instance of the term
	','line_number':1063,'multiline':True]
['text':'*
	 * Find the previous instance of the term
	 ','line_number':1068,'multiline':True]
['text':'*
	 * Forces the terminal to redraw its viewport.
	 ','line_number':1073,'multiline':True]
['text':'*
	 * Gets the font metrics of this xterm.js instance.
	 ','line_number':1078,'multiline':True]
['text':'*
	 * Gets whether there's any terminal selection.
	 ','line_number':1083,'multiline':True]
['text':'*
	 * Clears any terminal selection.
	 ','line_number':1088,'multiline':True]
['text':'*
	 * Selects all terminal contents/
	 ','line_number':1093,'multiline':True]
['text':'*
	 * Selects the content between the two markers by their VS Code OSC `SetMarker`
	 * ID. It's a no-op if either of the two markers are not found.
	 *
	 * @param fromMarkerId Start marker ID
	 * @param toMarkerId End marker ID
	 * @param scrollIntoView Whether the terminal should scroll to the start of
	 * the range, defaults tof alse
	 ','line_number':1098,'multiline':True]
['text':'*
	 * Copies the terminal selection.
	 * @param {boolean} copyAsHtml Whether to copy selection as HTML, defaults to false.
	 ','line_number':1109,'multiline':True]
['text':'*
	 * Focuses the terminal. Warning: {@link ITerminalInstance.focus} should be
	 * preferred when dealing with terminal instances in order to get
	 * accessibility triggers.
	 ','line_number':1115,'multiline':True]
['text':'* Scroll the terminal buffer down 1 line.   ','line_number':1122,'multiline':True]
['text':'* Scroll the terminal buffer down 1 page.   ','line_number':1123,'multiline':True]
['text':'* Scroll the terminal buffer to the bottom. ','line_number':1124,'multiline':True]
['text':'* Scroll the terminal buffer up 1 line.     ','line_number':1125,'multiline':True]
['text':'* Scroll the terminal buffer up 1 page.     ','line_number':1126,'multiline':True]
['text':'* Scroll the terminal buffer to the top.    ','line_number':1127,'multiline':True]
['text':'* Scroll the terminal buffer to a set line  ','line_number':1128,'multiline':True]
['text':'*
	 * Clears the terminal buffer, leaving only the prompt line and moving it to the top of the
	 * viewport.
	 ','line_number':1130,'multiline':True]
['text':'*
	 * Clears the search result decorations
	 ','line_number':1136,'multiline':True]
['text':'*
	 * Clears the active search result decorations
	 ','line_number':1141,'multiline':True]
['text':'*
	 * Returns a reverse iterator of buffer lines as strings
	 ','line_number':1146,'multiline':True]
['text':'*
	 * Gets the buffer contents as HTML.
	 ','line_number':1151,'multiline':True]
['text':'*
	 * Refreshes the terminal after it has been moved.
	 ','line_number':1156,'multiline':True]
['text':'*
	 * Writes data to the terminal.
	 * @param data data to write
	 * @param callback Optional callback that fires when the data was processed
	 * by the parser.
	 ','line_number':1165,'multiline':True]
['text':'*
	 * Resizes the terminal.
	 ','line_number':1173,'multiline':True]
['text':'*
	 * Writes text directly to the terminal, bypassing the process.
	 *
	 * **WARNING:** This should never be used outside of the terminal component and only for
	 * developer purposed inside the terminal component.
	 ','line_number':1180,'multiline':True]
['text':' eslint-disable-line @typescript-eslint/naming-convention','line_number':1186,'multiline':False]
['text':'*
	 * Handle data written to the terminal outside of xterm.js which has no corresponding
	 * `Terminal.onData` event.
	 ','line_number':1215,'multiline':True]
