['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
	 * How long in milliseconds should an average frame take to render for a notification to appear
	 * which suggests the fallback DOM-based renderer.
	 ','line_number':49,'multiline':True]
['text':' DEBUG: This helper can be used to draw image data to the console, it's commented out as we don't','line_number':82,'multiline':False]
['text':'        want to ship it, but this is very useful for investigating texture atlas issues.','line_number':83,'multiline':False]
['text':' (console as any).image = (source: ImageData | HTMLCanvasElement, scale: number = 1) => {','line_number':84,'multiline':False]
['text':' 	function getBox(width: number, height: number) {','line_number':85,'multiline':False]
['text':' 		return {','line_number':86,'multiline':False]
['text':' 			string: '+',','line_number':87,'multiline':False]
['text':' 			style: 'font-size: 1px; padding: ' + Math.floor(height/2) + 'px ' + Math.floor(width/2) + 'px; line-height: ' + height + 'px;'','line_number':88,'multiline':False]
['text':' 		};','line_number':89,'multiline':False]
['text':' 	}','line_number':90,'multiline':False]
['text':' 	if (source instanceof HTMLCanvasElement) {','line_number':91,'multiline':False]
['text':' 		source = source.getContext('2d')?.getImageData(0, 0, source.width, source.height)!;','line_number':92,'multiline':False]
['text':' 	}','line_number':93,'multiline':False]
['text':' 	const canvas = document.createElement('canvas');','line_number':94,'multiline':False]
['text':' 	canvas.width = source.width;','line_number':95,'multiline':False]
['text':' 	canvas.height = source.height;','line_number':96,'multiline':False]
['text':' 	const ctx = canvas.getContext('2d')!;','line_number':97,'multiline':False]
['text':' 	ctx.putImageData(source, 0, 0);','line_number':98,'multiline':False]
['text':' 	const sw = source.width * scale;','line_number':100,'multiline':False]
['text':' 	const sh = source.height * scale;','line_number':101,'multiline':False]
['text':' 	const dim = getBox(sw, sh);','line_number':102,'multiline':False]
['text':' 	console.log(','line_number':103,'multiline':False]
['text':' 		`Image: ${source.width} x ${source.height}\n%c${dim.string}`,','line_number':104,'multiline':False]
['text':' 		`${dim.style}background: url(${canvas.toDataURL()}); background-size: ${sw}px ${sh}px; background-repeat: no-repeat; color: transparent;`','line_number':105,'multiline':False]
['text':' 	);','line_number':106,'multiline':False]
['text':' 	console.groupCollapsed('Zoomed');','line_number':107,'multiline':False]
['text':' 	console.log(','line_number':108,'multiline':False]
['text':' 		`%c${dim.string}`,','line_number':109,'multiline':False]
['text':' 		`${getBox(sw * 10, sh * 10).style}background: url(${canvas.toDataURL()}); background-size: ${sw * 10}px ${sh * 10}px; background-repeat: no-repeat; color: transparent; image-rendering: pixelated;-ms-interpolation-mode: nearest-neighbor;`','line_number':110,'multiline':False]
['text':' 	);','line_number':111,'multiline':False]
['text':' 	console.groupEnd();','line_number':112,'multiline':False]
['text':' };','line_number':113,'multiline':False]
['text':'*
 * Wraps the xterm object with additional functionality. Interaction with the backing process is out
 * of the scope of this class.
 ','line_number':115,'multiline':True]
['text':'* The raw xterm.js instance ','line_number':120,'multiline':True]
['text':' Always on addons','line_number':128,'multiline':False]
['text':' Optional addons','line_number':133,'multiline':False]
['text':'*
	 * @param xtermCtor The xterm.js constructor, this is passed in so it can be fetched lazily
	 * outside of this class such that {@link raw} is not nullable.
	 ','line_number':186,'multiline':True]
['text':' Refire events','line_number':267,'multiline':False]
['text':' Load addons','line_number':275,'multiline':False]
['text':' TODO: Move before open to the DOM renderer doesn't initialize','line_number':336,'multiline':False]
['text':' Track wheel events in mouse wheel classifier and update smoothScrolling when it changes','line_number':355,'multiline':False]
['text':' as it must be disabled when a trackpad is used','line_number':356,'multiline':False]
['text':' Screen must be created at this point as xterm.open is called','line_number':368,'multiline':False]
['text':' HACK: Force the renderer to unpause by simulating an IntersectionObserver event.','line_number':447,'multiline':False]
['text':' This is to fix an issue where dragging the windpow to the top of the screen to','line_number':448,'multiline':False]
['text':' maximize on Windows/Linux would fire an event saying that the terminal was not','line_number':449,'multiline':False]
['text':' visible.','line_number':450,'multiline':False]
['text':' HACK: Force a refresh of the screen to ensure links are refresh corrected.','line_number':453,'multiline':False]
['text':' This can probably be removed when the above hack is fixed in Chromium.','line_number':454,'multiline':False]
['text':' Theme color names align with monaco/vscode whereas xterm.js has some different naming.','line_number':471,'multiline':False]
['text':' The mapping is as follows:','line_number':472,'multiline':False]
['text':' - findMatch -> activeMatch','line_number':473,'multiline':False]
['text':' - findMatchHighlight -> match','line_number':474,'multiline':False]
['text':' decoration bgs don't support the alpha channel so blend it with the regular bg','line_number':486,'multiline':False]
['text':' line.length may exceed cols as it doesn't necessarily trim the backing array on resize','line_number':538,'multiline':False]
['text':' xterm.js does not clear the first prompt, so trigger these to simulate','line_number':583,'multiline':False]
['text':' the prompt being written','line_number':584,'multiline':False]
['text':' Check if the the WebGL renderer is compatible with xterm.js:','line_number':680,'multiline':False]
['text':' - https://github.com/microsoft/vscode/issues/190195','line_number':681,'multiline':False]
['text':' - https://github.com/xtermjs/xterm.js/issues/4665','line_number':682,'multiline':False]
['text':' - https://bugs.chromium.org/p/chromium/issues/detail?id=1476475','line_number':683,'multiline':False]
['text':' Uncomment to add the texture atlas to the DOM','line_number':709,'multiline':False]
['text':' setTimeout(() => {','line_number':710,'multiline':False]
['text':' 	if (this._webglAddon?.textureAtlas) {','line_number':711,'multiline':False]
['text':' 		document.body.appendChild(this._webglAddon?.textureAtlas);','line_number':712,'multiline':False]
['text':' 	}','line_number':713,'multiline':False]
['text':' }, 5000);','line_number':714,'multiline':False]
['text':' if it's already set to dom, no need to measure render time','line_number':718,'multiline':False]
['text':' if it's already set to dom, no need to measure render time','line_number':745,'multiline':False]
['text':' Only allow the image addon when a canvas is being used to avoid possible GPU issues','line_number':764,'multiline':False]
['text':' ignore','line_number':775,'multiline':False]
['text':' ignore','line_number':820,'multiline':False]
['text':' ignore','line_number':830,'multiline':False]
['text':' Discard first frame time as it's normal to take longer','line_number':844,'multiline':False]
['text':' Restore original function','line_number':883,'multiline':False]
['text':' eslint-disable-next-line @typescript-eslint/naming-convention','line_number':949,'multiline':False]
['text':' Because xterm.js converts from CSS pixels to actual pixels through','line_number':967,'multiline':False]
['text':' the use of canvas, window.devicePixelRatio needs to be used here in','line_number':968,'multiline':False]
['text':' order to be precise. font.charWidth/charHeight alone as insufficient','line_number':969,'multiline':False]
['text':' when window.devicePixelRatio changes.','line_number':970,'multiline':False]
['text':' 'line' is used instead of bar in VS Code to be consistent with editor.cursorStyle','line_number':1000,'multiline':False]
