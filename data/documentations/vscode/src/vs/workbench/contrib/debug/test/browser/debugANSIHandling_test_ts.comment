['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
	 * Instantiate services for use by the functions being tested.
	 ','line_number':31,'multiline':True]
['text':'*
	 * Apply an ANSI sequence to {@link #getSequenceOutput}.
	 *
	 * @param sequence The ANSI sequence to stylize.
	 * @returns An {@link HTMLSpanElement} that contains the stylized text.
	 ','line_number':87,'multiline':True]
['text':'*
	 * Assert that a given ANSI sequence maintains added content following the ANSI code, and that
	 * the provided {@param assertion} passes.
	 *
	 * @param sequence The ANSI sequence to verify. The provided sequence should contain ANSI codes
	 * only, and should not include actual text content as it is provided by this function.
	 * @param assertion The function used to verify the output.
	 ','line_number':104,'multiline':True]
['text':'*
	 * Assert that a given DOM element has the custom inline CSS style matching
	 * the color value provided.
	 * @param element The HTML span element to look at.
	 * @param colorType If `foreground`, will check the element's css `color`;
	 * if `background`, will check the element's css `backgroundColor`.
	 * if `underline`, will check the elements css `textDecorationColor`.
	 * @param color RGBA object to compare color to. If `undefined` or not provided,
	 * will assert that no value is set.
	 * @param message Optional custom message to pass to assertion.
	 * @param colorShouldMatch Optional flag (defaults TO true) which allows caller to indicate that the color SHOULD NOT MATCH
	 * (for testing changes to theme colors where we need color to have changed but we don't know exact color it should have
	 * changed to (but we do know the color it should NO LONGER BE))
	 ','line_number':118,'multiline':True]
['text':' Bold code','line_number':164,'multiline':False]
['text':' Italic code','line_number':169,'multiline':False]
['text':' Underline code','line_number':174,'multiline':False]
['text':' Foreground colour class','line_number':182,'multiline':False]
['text':' Cancellation code removes colour class','line_number':187,'multiline':False]
['text':' Foreground colour class','line_number':197,'multiline':False]
['text':' Cancellation code removes colour class','line_number':202,'multiline':False]
['text':' check all basic colors for underlines (full range is checked elsewhere, here we check cancelation)','line_number':209,'multiline':False]
['text':' Underline colour class','line_number':213,'multiline':False]
['text':' Cancellation underline color code removes colour class','line_number':218,'multiline':False]
['text':' Different codes do not cancel each other','line_number':225,'multiline':False]
['text':' Different codes do not ACCUMULATE more than one copy of each class','line_number':236,'multiline':False]
['text':' More Different codes do not cancel each other','line_number':256,'multiline':False]
['text':' New foreground codes don't remove old background codes and vice versa','line_number':271,'multiline':False]
['text':' Duplicate codes do not change output','line_number':279,'multiline':False]
['text':' Extra terminating semicolon does not change output','line_number':285,'multiline':False]
['text':' Cancellation code removes multiple codes','line_number':291,'multiline':False]
['text':' Basic and bright color codes specified with 8-bit color code format','line_number':301,'multiline':False]
['text':' As these are controlled by theme, difficult to check actual color value','line_number':303,'multiline':False]
['text':' Foreground codes should add standard classes','line_number':304,'multiline':False]
['text':' Background codes should add standard classes','line_number':309,'multiline':False]
['text':' 8-bit advanced colors','line_number':315,'multiline':False]
['text':' Foreground codes should add custom class and inline style','line_number':317,'multiline':False]
['text':' Background codes should add custom class and inline style','line_number':323,'multiline':False]
['text':' Color underline codes should add custom class and inline style','line_number':329,'multiline':False]
['text':' Bad (nonexistent) color should not render','line_number':336,'multiline':False]
['text':' Should ignore any codes after the ones needed to determine color','line_number':341,'multiline':False]
['text':' 24-bit advanced colors','line_number':350,'multiline':False]
['text':' Foreground codes should add class and inline style','line_number':355,'multiline':False]
['text':' Background codes should add class and inline style','line_number':361,'multiline':False]
['text':' Underline color codes should add class and inline style','line_number':367,'multiline':False]
['text':' Invalid color should not render','line_number':376,'multiline':False]
['text':' Bad (nonexistent) color should not render','line_number':382,'multiline':False]
['text':' Should ignore any codes after the ones needed to determine color','line_number':387,'multiline':False]
['text':'*
	 * Assert that a given ANSI sequence produces the expected number of {@link HTMLSpanElement} children. For
	 * each child, run the provided assertion.
	 *
	 * @param sequence The ANSI sequence to verify.
	 * @param assertions A set of assertions to run on the resulting children.
	 ','line_number':396,'multiline':True]
['text':' Multiple codes affect the same text','line_number':421,'multiline':False]
['text':' Consecutive codes do not affect previous ones','line_number':429,'multiline':False]
['text':' Consecutive codes with ENDING/OFF codes do not LEAVE affect previous ones','line_number':458,'multiline':False]
['text':' more Consecutive codes with ENDING/OFF codes do not LEAVE affect previous ones','line_number':490,'multiline':False]
['text':' more Consecutive codes with ENDING/OFF codes do not LEAVE affect previous ones','line_number':522,'multiline':False]
['text':' underline, double underline are mutually exclusive, test underline->double underline->off and double underline->underline->off','line_number':554,'multiline':False]
['text':' underline and strike-through and overline can exist at the same time and','line_number':582,'multiline':False]
['text':' in any combination','line_number':583,'multiline':False]
['text':' double underline and strike-through and overline can exist at the same time and','line_number':618,'multiline':False]
['text':' in any combination','line_number':619,'multiline':False]
['text':' superscript and subscript are mutually exclusive, test superscript->subscript->off and subscript->superscript->off','line_number':654,'multiline':False]
['text':' Consecutive font codes switch to new font class and remove previous and then final switch to default font removes class','line_number':682,'multiline':False]
['text':' More Consecutive font codes switch to new font class and remove previous and then final switch to default font removes class','line_number':713,'multiline':False]
['text':' Blackletter font codes can be turned off with other font codes or 23m','line_number':744,'multiline':False]
['text':' italic can be turned on/off with affecting font codes 1-9  (italic off will clear 'blackletter'(font 23) as per spec)','line_number':772,'multiline':False]
['text':' Reverse video reverses Foreground/Background colors WITH both SET and can called in sequence','line_number':803,'multiline':False]
['text':' Reverse video reverses Foreground/Background colors WITH ONLY foreground color SET','line_number':847,'multiline':False]
['text':' Reverse video reverses Foreground/Background colors WITH ONLY background color SET','line_number':868,'multiline':False]
['text':' Underline color Different types of color codes still cancel each other','line_number':889,'multiline':False]
['text':' changed to simple theme color, don't know exactly what it should be, but it should NO LONGER BE 101,102,103','line_number':899,'multiline':False]
['text':' changed to 8bit advanced color, don't know exactly what it should be, but it should NO LONGER BE 104,105,106','line_number':910,'multiline':False]
['text':' Different types of color codes still cancel each other','line_number':924,'multiline':False]
['text':'color is theme based, so we can't check what it should be but we know it should NOT BE 101,102,103 anymore','line_number':938,'multiline':False]
['text':' color should NO LONGER BE 104,105,106','line_number':949,'multiline':False]
['text':'*
	 * Assert that the provided ANSI sequence exactly matches the text content of the resulting
	 * {@link HTMLSpanElement}.
	 *
	 * @param sequence The ANSI sequence to verify.
	 ','line_number':956,'multiline':True]
['text':' Individual components of ANSI code start are printed','line_number':969,'multiline':False]
['text':' Unsupported sequence prints both characters','line_number':973,'multiline':False]
['text':' Random strings are displayed properly','line_number':976,'multiline':False]
['text':'*
	 * Assert that a given ANSI sequence maintains added content following the ANSI code, and that
	 * the expression itself is thrown away.
	 *
	 * @param sequence The ANSI sequence to verify. The provided sequence should contain ANSI codes
	 * only, and should not include actual text content as it is provided by this function.
	 ','line_number':984,'multiline':True]
['text':' No colour codes','line_number':1000,'multiline':False]
['text':' Check other possible ANSI terminators','line_number':1012,'multiline':False]
['text':' Invalid values','line_number':1022,'multiline':False]
['text':' Negative (below range), simple range, decimals','line_number':1023,'multiline':False]
['text':' In-range range decimals','line_number':1027,'multiline':False]
['text':' Above range','line_number':1031,'multiline':False]
['text':' All valid colors','line_number':1036,'multiline':False]
['text':' All grays','line_number':1048,'multiline':False]
