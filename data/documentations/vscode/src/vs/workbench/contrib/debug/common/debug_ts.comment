['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' raw','line_number':106,'multiline':False]
['text':' model','line_number':125,'multiline':False]
['text':'*
 * Union type of memory that can be returned from read(). Since a read request
 * could encompass multiple previously-read ranges, multiple of these types
 * are possible to return.
 ','line_number':262,'multiline':True]
['text':'*
 * An IMemoryRegion corresponds to a contiguous range of memory referred to
 * by a DAP `memoryReference`.
 ','line_number':271,'multiline':True]
['text':'*
	 * Event that fires when memory changes. Can be a result of memory events or
	 * `write` requests.
	 ','line_number':276,'multiline':True]
['text':'*
	 * Whether writes are supported on this memory region.
	 ','line_number':282,'multiline':True]
['text':'*
	 * Requests memory ranges from the debug adapter. It returns a list of memory
	 * ranges that overlap (but may exceed!) the given offset. Use the `offset`
	 * and `length` of each range for display.
	 ','line_number':287,'multiline':True]
['text':'*
	 * Writes memory to the debug adapter at the given offset.
	 ','line_number':294,'multiline':True]
['text':'* Data that can be inserted in {@link IDebugSession.appendToRepl} ','line_number':300,'multiline':True]
['text':'*
	 * Output string to display
	 ','line_number':302,'multiline':True]
['text':'*
	 * Expression data to display. Will result in the item being expandable in
	 * the REPL. Its value will be used if {@link output} is not provided.
	 ','line_number':307,'multiline':True]
['text':'*
	 * Output severity.
	 ','line_number':313,'multiline':True]
['text':'*
	 * Originating location.
	 ','line_number':318,'multiline':True]
['text':' session events','line_number':368,'multiline':False]
['text':' DA capabilities','line_number':373,'multiline':False]
['text':' DAP events','line_number':376,'multiline':False]
['text':' DAP request','line_number':385,'multiline':False]
['text':' false ','line_number':390,'multiline':True]
['text':' false ','line_number':391,'multiline':True]
['text':'*
	 * Process the thread belongs to
	 ','line_number':436,'multiline':True]
['text':'*
	 * Id of the thread generated by the debug adapter backend.
	 ','line_number':441,'multiline':True]
['text':'*
	 * Name of the thread.
	 ','line_number':446,'multiline':True]
['text':'*
	 * Information about the current thread stop event. Undefined if thread is not stopped.
	 ','line_number':451,'multiline':True]
['text':'*
	 * Information about the exception if an 'exception' stopped event raised and DA supports the 'exceptionInfo' request, otherwise undefined.
	 ','line_number':456,'multiline':True]
['text':'*
	 * Gets the callstack if it has already been received from the debug
	 * adapter.
	 ','line_number':463,'multiline':True]
['text':'*
	 * Gets the top stack frame that is not hidden if the callstack has already been received from the debug adapter
	 ','line_number':470,'multiline':True]
['text':'*
	 * Invalidates the callstack cache
	 ','line_number':475,'multiline':True]
['text':'*
	 * Indicates whether this thread is stopped. The callstack for stopped
	 * threads can be retrieved from the debug adapter.
	 ','line_number':480,'multiline':True]
['text':'* URI where the breakpoint was first set by the user. ','line_number':555,'multiline':True]
['text':'* URI where the breakpoint is currently shown; may be moved by debugger ','line_number':557,'multiline':True]
['text':'* Original instruction memory address; display purposes only ','line_number':587,'multiline':True]
['text':' model interfaces','line_number':599,'multiline':False]
['text':'*
	 * Returns the focused debug session or undefined if no session is stopped.
	 ','line_number':602,'multiline':True]
['text':'*
	 * Returns the focused thread or undefined if no thread is stopped.
	 ','line_number':607,'multiline':True]
['text':'*
	 * Returns the focused stack frame or undefined if there are no stack frames.
	 ','line_number':612,'multiline':True]
['text':'*
	 * Returns list of all exception breakpoints.
	 ','line_number':645,'multiline':True]
['text':'*
	 * Returns list of exception breakpoints for the given session
	 * @param sessionId Session id. If falsy, returns the breakpoints from the last set fallback session.
	 ','line_number':650,'multiline':True]
['text':'*
 * An event describing a change to the set of [breakpoints](#debug.Breakpoint).
 ','line_number':666,'multiline':True]
['text':' Debug configuration interfaces','line_number':676,'multiline':False]
['text':' boolean for back-compat','line_number':682,'multiline':False]
['text':' fundamental attributes','line_number':737,'multiline':False]
['text':' platform specifics','line_number':742,'multiline':False]
['text':' internals','line_number':747,'multiline':False]
['text':' TODO','line_number':752,'multiline':False]
['text':' internal','line_number':831,'multiline':False]
['text':' supported languages','line_number':834,'multiline':False]
['text':' debug configuration support','line_number':837,'multiline':False]
['text':'*
	 *	`DebugConfigurationProvider.provideDebugConfigurations` is called to provide the initial debug configurations for a newly created launch.json.
	 ','line_number':854,'multiline':True]
['text':'*
	 * `DebugConfigurationProvider.provideDebugConfigurations` is called to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the "Select and Start Debugging" command).
	 ','line_number':858,'multiline':True]
['text':'*
	 * Returns an object containing the selected launch configuration and the selected configuration name. Both these fields can be null (no folder workspace).
	 ','line_number':883,'multiline':True]
['text':' Potentially activates extensions','line_number':888,'multiline':False]
['text':' Type is used when matching dynamic configurations to their corresponding provider','line_number':891,'multiline':False]
['text':'*
	 * Allows to register on change of selected debug configuration.
	 ','line_number':903,'multiline':True]
['text':'*
	 * Resource pointing to the launch.json this object is wrapping.
	 ','line_number':947,'multiline':True]
['text':'*
	 * Name of the launch.
	 ','line_number':952,'multiline':True]
['text':'*
	 * Workspace of the launch. Can be undefined.
	 ','line_number':957,'multiline':True]
['text':'*
	 * Should this launch be shown in the debug dropdown.
	 ','line_number':962,'multiline':True]
['text':'*
	 * Returns a configuration with the specified name.
	 * Returns undefined if there is no configuration with the specified name.
	 ','line_number':967,'multiline':True]
['text':'*
	 * Returns a compound with the specified name.
	 * Returns undefined if there is no compound with the specified name.
	 ','line_number':973,'multiline':True]
['text':'*
	 * Returns the names of all configurations and compounds.
	 * Ignores configurations which are invalid.
	 ','line_number':979,'multiline':True]
['text':'*
	 * Opens the launch.json file. Creates if it does not exist.
	 ','line_number':985,'multiline':True]
['text':' Debug service interfaces','line_number':991,'multiline':False]
['text':'*
	 * Gets the current debug state.
	 ','line_number':998,'multiline':True]
['text':'*
	 * Allows to register on debug state changes.
	 ','line_number':1005,'multiline':True]
['text':'*
	 * Allows to register on sessions about to be created (not yet fully initialised).
	 * This is fired exactly one time for any given session.
	 ','line_number':1010,'multiline':True]
['text':'*
	 * Fired when a new debug session is started. This may fire multiple times
	 * for a single session due to restarts.
	 ','line_number':1016,'multiline':True]
['text':'*
	 * Allows to register on end session events.
	 *
	 * Contains a boolean indicating whether the session will restart. If restart
	 * is true, the session should not considered to be dead yet.
	 ','line_number':1022,'multiline':True]
['text':'*
	 * Gets the configuration manager.
	 ','line_number':1030,'multiline':True]
['text':'*
	 * Gets the adapter manager.
	 ','line_number':1035,'multiline':True]
['text':'*
	 * Sets the focused stack frame and evaluates all expressions against the newly focused stack frame,
	 ','line_number':1040,'multiline':True]
['text':'*
	 * Returns true if breakpoints can be set for a given editor model. Depends on mode.
	 ','line_number':1045,'multiline':True]
['text':'*
	 * Adds new breakpoints to the model for the file specified with the uri. Notifies debug adapter of breakpoint changes.
	 ','line_number':1050,'multiline':True]
['text':'*
	 * Updates the breakpoints.
	 ','line_number':1055,'multiline':True]
['text':'*
	 * Enables or disables all breakpoints. If breakpoint is passed only enables or disables the passed breakpoint.
	 * Notifies debug adapter of breakpoint changes.
	 ','line_number':1060,'multiline':True]
['text':'*
	 * Sets the global activated property for all breakpoints.
	 * Notifies debug adapter of breakpoint changes.
	 ','line_number':1066,'multiline':True]
['text':'*
	 * Removes all breakpoints. If id is passed only removes the breakpoint associated with that id.
	 * Notifies debug adapter of breakpoint changes.
	 ','line_number':1072,'multiline':True]
['text':'*
	 * Adds a new function breakpoint for the given name.
	 ','line_number':1078,'multiline':True]
['text':'*
	 * Updates an already existing function breakpoint.
	 * Notifies debug adapter of breakpoint changes.
	 ','line_number':1083,'multiline':True]
['text':'*
	 * Removes all function breakpoints. If id is passed only removes the function breakpoint with the passed id.
	 * Notifies debug adapter of breakpoint changes.
	 ','line_number':1089,'multiline':True]
['text':'*
	 * Adds a new data breakpoint.
	 ','line_number':1095,'multiline':True]
['text':'*
	 * Updates an already existing data breakpoint.
	 * Notifies debug adapter of breakpoint changes.
	 ','line_number':1100,'multiline':True]
['text':'*
	 * Removes all data breakpoints. If id is passed only removes the data breakpoint with the passed id.
	 * Notifies debug adapter of breakpoint changes.
	 ','line_number':1106,'multiline':True]
['text':'*
	 * Adds a new instruction breakpoint.
	 ','line_number':1112,'multiline':True]
['text':'*
	 * Removes all instruction breakpoints. If address is passed only removes the instruction breakpoint with the passed address.
	 * The address should be the address string supplied by the debugger from the "Disassemble" request.
	 * Notifies debug adapter of breakpoint changes.
	 ','line_number':1117,'multiline':True]
['text':'*
	 * Sends all breakpoints to the passed session.
	 * If session is not passed, sends all breakpoints to each session.
	 ','line_number':1128,'multiline':True]
['text':'*
	 * Adds a new watch expression and evaluates it against the debug adapter.
	 ','line_number':1134,'multiline':True]
['text':'*
	 * Renames a watch expression and evaluates it against the debug adapter.
	 ','line_number':1139,'multiline':True]
['text':'*
	 * Moves a watch expression to a new possition. Used for reordering watch expressions.
	 ','line_number':1144,'multiline':True]
['text':'*
	 * Removes all watch expressions. If id is passed only removes the watch expression with the passed id.
	 ','line_number':1149,'multiline':True]
['text':'*
	 * Starts debugging. If the configOrName is not passed uses the selected configuration in the debug dropdown.
	 * Also saves all files, manages if compounds are present in the configuration
	 * and resolveds configurations via DebugConfigurationProviders.
	 *
	 * Returns true if the start debugging was successful. For compound launches, all configurations have to start successfully for it to return success.
	 * On errors the startDebugging will throw an error, however some error and cancelations are handled and in that case will simply return false.
	 ','line_number':1154,'multiline':True]
['text':'*
	 * Restarts a session or creates a new one if there is no active session.
	 ','line_number':1164,'multiline':True]
['text':'*
	 * Stops the session. If no session is specified then all sessions are stopped.
	 ','line_number':1169,'multiline':True]
['text':'*
	 * Makes unavailable all sources with the passed uri. Source will appear as grayed out in callstack view.
	 ','line_number':1174,'multiline':True]
['text':'*
	 * Gets the current debug model.
	 ','line_number':1179,'multiline':True]
['text':'*
	 * Gets the current view model.
	 ','line_number':1184,'multiline':True]
['text':'*
	 * Resumes execution and pauses until the given position is reached.
	 ','line_number':1189,'multiline':True]
['text':' Editor interfaces','line_number':1195,'multiline':False]
