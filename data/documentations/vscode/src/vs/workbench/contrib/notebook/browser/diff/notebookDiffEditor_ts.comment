['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' throw new Error('Method not implemented.');','line_number':171,'multiline':False]
['text':' throw new Error('Method not implemented.');','line_number':175,'multiline':False]
['text':' throw new Error('Method not implemented.');','line_number':179,'multiline':False]
['text':' throw new Error('Method not implemented.');','line_number':183,'multiline':False]
['text':' noop','line_number':187,'multiline':False]
['text':' throw new Error('Method not implemented.');','line_number':224,'multiline':False]
['text':' throw new Error('Method not implemented.');','line_number':227,'multiline':False]
['text':' throw new Error('Method not implemented.');','line_number':230,'multiline':False]
['text':' throw new Error('Method not implemented.');','line_number':233,'multiline':False]
['text':' throw new Error('Method not implemented.');','line_number':236,'multiline':False]
['text':' throw new Error('Method not implemented.');','line_number':239,'multiline':False]
['text':' transformOptimization: (isMacintosh && isNative) || getTitleBarStyle(this.configurationService, this.environmentService) === 'native',','line_number':272,'multiline':False]
['text':' focusNextPreviousDelegate: {','line_number':297,'multiline':False]
['text':' 	onFocusNext: (applyFocusNext: () => void) => this._updateForCursorNavigationMode(applyFocusNext),','line_number':298,'multiline':False]
['text':' 	onFocusPrevious: (applyFocusPrevious: () => void) => this._updateForCursorNavigationMode(applyFocusPrevious),','line_number':299,'multiline':False]
['text':' }','line_number':300,'multiline':False]
['text':' transparent cover','line_number':323,'multiline':False]
['text':' no matter when','line_number':335,'multiline':False]
['text':' output is already gone','line_number':368,'multiline':False]
['text':' attach the webview container to the DOM tree first','line_number':485,'multiline':False]
['text':' attach the webview container to the DOM tree first','line_number':502,'multiline':False]
['text':' after await the editor might be disposed.','line_number':524,'multiline':False]
['text':' this._diffElementViewModels = viewModels;','line_number':538,'multiline':False]
['text':' this._list.splice(0, this._list.length, this._diffElementViewModels);','line_number':539,'multiline':False]
['text':'*
	 * making sure that swapping cells are always translated to `insert+delete`.
	 ','line_number':580,'multiline':True]
['text':' then we know there is another change after current one','line_number':586,'multiline':False]
['text':' this is a swap','line_number':602,'multiline':False]
['text':' common cells','line_number':635,'multiline':False]
['text':' modified cells','line_number':701,'multiline':False]
['text':' deletion','line_number':718,'multiline':False]
['text':' insertion','line_number':731,'multiline':False]
['text':' const activeWebview = diffSide === DiffSide.Modified ? this._modifiedWebview : this._originalWebview;','line_number':748,'multiline':False]
['text':' find the index of previous change','line_number':812,'multiline':False]
['text':' go to the last one','line_number':827,'multiline':False]
['text':' find the index of next change','line_number':843,'multiline':False]
['text':' go to the first one','line_number':858,'multiline':False]
['text':' TODO','line_number':893,'multiline':False]
['text':' private async _resolveWebview(rightEditor: boolean): Promise<BackLayerWebView | null> {','line_number':948,'multiline':False]
['text':' 	if (rightEditor) {','line_number':949,'multiline':False]
['text':' 	}','line_number':951,'multiline':False]
['text':' }','line_number':952,'multiline':False]
