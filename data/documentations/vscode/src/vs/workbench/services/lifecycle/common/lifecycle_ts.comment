['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * An event that is send out when the window is about to close. Clients have a chance to veto
 * the closing by either calling veto with a boolean "true" directly or with a promise that
 * resolves to a boolean. Returning a promise is useful in cases of long running operations
 * on shutdown.
 *
 * Note: It is absolutely important to avoid long running promises if possible. Please try hard
 * to return a boolean directly. Returning a promise has quite an impact on the shutdown sequence!
 ','line_number':12,'multiline':True]
['text':'*
	 * The reason why the application will be shutting down.
	 ','line_number':23,'multiline':True]
['text':'*
	 * Allows to veto the shutdown. The veto can be a long running operation but it
	 * will block the application from closing.
	 *
	 * @param id to identify the veto operation in case it takes very long or never
	 * completes.
	 ','line_number':28,'multiline':True]
['text':'*
	 * Allows to set a veto operation to run after all other
	 * vetos have been handled from the `BeforeShutdownEvent`
	 *
	 * This method is hidden from the API because it is intended
	 * to be only used once internally.
	 ','line_number':40,'multiline':True]
['text':'*
 * An event that signals an error happened during `onBeforeShutdown` veto handling.
 * In this case the shutdown operation will not proceed because this is an unexpected
 * condition that is treated like a veto.
 ','line_number':50,'multiline':True]
['text':'*
	 * The reason why the application is shutting down.
	 ','line_number':57,'multiline':True]
['text':'*
	 * The error that happened during shutdown handling.
	 ','line_number':62,'multiline':True]
['text':'*
 * An event that is send out when the window closes. Clients have a chance to join the closing
 * by providing a promise from the join method. Returning a promise is useful in cases of long
 * running operations on shutdown.
 *
 * Note: It is absolutely important to avoid long running promises if possible. Please try hard
 * to return a boolean directly. Returning a promise has quite an impact on the shutdown sequence!
 ','line_number':73,'multiline':True]
['text':'*
	 * The reason why the application is shutting down.
	 ','line_number':83,'multiline':True]
['text':'*
	 * A token that will signal cancellation when the
	 * shutdown was forced by the user.
	 ','line_number':88,'multiline':True]
['text':'*
	 * Allows to join the shutdown. The promise can be a long running operation but it
	 * will block the application from closing.
	 *
	 * @param joiner to identify the join operation in case it takes very long or never
	 * completes.
	 ','line_number':94,'multiline':True]
['text':'*
	 * Allows to access the joiners that have not finished joining this event.
	 ','line_number':103,'multiline':True]
['text':'*
	 * Allows to enforce the shutdown, even when there are
	 * pending `join` operations to complete.
	 ','line_number':108,'multiline':True]
['text':'*
	 * The window is closed.
	 ','line_number':117,'multiline':True]
['text':'*
	 * The window closes because the application quits.
	 ','line_number':122,'multiline':True]
['text':'*
	 * The window is reloaded.
	 ','line_number':127,'multiline':True]
['text':'*
	 * The window is loaded into a different workspace context.
	 ','line_number':132,'multiline':True]
['text':'*
	 * The first phase signals that we are about to startup getting ready.
	 *
	 * Note: doing work in this phase blocks an editor from showing to
	 * the user, so please rather consider to use `Restored` phase.
	 ','line_number':154,'multiline':True]
['text':'*
	 * Services are ready and the window is about to restore its UI state.
	 *
	 * Note: doing work in this phase blocks an editor from showing to
	 * the user, so please rather consider to use `Restored` phase.
	 ','line_number':162,'multiline':True]
['text':'*
	 * Views, panels and editors have restored. Editors are given a bit of
	 * time to restore their contents.
	 ','line_number':170,'multiline':True]
['text':'*
	 * The last phase after views, panels and editors have restored and
	 * some time has passed (2-5 seconds).
	 ','line_number':176,'multiline':True]
['text':'*
 * A lifecycle service informs about lifecycle events of the
 * application, such as shutdown.
 ','line_number':192,'multiline':True]
['text':'*
	 * Value indicates how this window got loaded.
	 ','line_number':200,'multiline':True]
['text':'*
	 * A flag indicating in what phase of the lifecycle we currently are.
	 ','line_number':205,'multiline':True]
['text':'*
	 * Fired before shutdown happens. Allows listeners to veto against the
	 * shutdown to prevent it from happening.
	 *
	 * The event carries a shutdown reason that indicates how the shutdown was triggered.
	 ','line_number':210,'multiline':True]
['text':'*
	 * Fired when the shutdown was prevented by a component giving veto.
	 ','line_number':218,'multiline':True]
['text':'*
	 * Fired when an error happened during `onBeforeShutdown` veto handling.
	 * In this case the shutdown operation will not proceed because this is
	 * an unexpected condition that is treated like a veto.
	 *
	 * The event carries a shutdown reason that indicates how the shutdown was triggered.
	 ','line_number':223,'multiline':True]
['text':'*
	 * Fired when no client is preventing the shutdown from happening (from `onBeforeShutdown`).
	 *
	 * This event can be joined with a long running operation via `WillShutdownEvent#join()` to
	 * handle long running shutdown operations.
	 *
	 * The event carries a shutdown reason that indicates how the shutdown was triggered.
	 ','line_number':232,'multiline':True]
['text':'*
	 * Fired when the shutdown is about to happen after long running shutdown operations
	 * have finished (from `onWillShutdown`).
	 *
	 * This event should be used to dispose resources.
	 ','line_number':242,'multiline':True]
['text':'*
	 * Returns a promise that resolves when a certain lifecycle phase
	 * has started.
	 ','line_number':250,'multiline':True]
['text':'*
	 * Triggers a shutdown of the workbench. Depending on native or web, this can have
	 * different implementations and behaviour.
	 *
	 * **Note:** this should normally not be called. See related methods in `IHostService`
	 * and `INativeHostService` to close a window or quit the application.
	 ','line_number':256,'multiline':True]
