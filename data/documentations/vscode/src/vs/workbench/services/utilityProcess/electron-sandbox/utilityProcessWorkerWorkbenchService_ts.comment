['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
	 * A IPC client to communicate to the worker process.
	 ','line_number':21,'multiline':True]
['text':'*
	 * A promise that resolves to an object once the
	 * worker process terminates, giving information
	 * how the process terminated.
	 *
	 * This can be used to figure out whether the worker
	 * should be restarted in case of an unexpected
	 * termination.
	 ','line_number':26,'multiline':True]
['text':'*
	 * Will fork a new process with the provided module identifier in a utility
	 * process and establishes a message port connection to that process.
	 *
	 * Requires the forked process to be AMD module that uses our IPC channel framework
	 * to respond to the provided `channelName` as a server.
	 *
	 * The process will be automatically terminated when the workbench window closes,
	 * crashes or loads/reloads.
	 *
	 * Note on affinity: repeated calls to `createWorkerChannel` with the same `moduleId`
	 * from the same window will result in any previous forked process to get terminated.
	 * In other words, it is not possible, nor intended to create multiple workers of
	 * the same process from one window. The intent of these workers is to be reused per
	 * window and the communication channel allows to dynamically update the processes
	 * after the fact.
	 *
	 * @param process information around the process to fork as worker
	 *
	 * @returns the worker IPC client to communicate with. Provides a `dispose` method that
	 * allows to terminate the worker if needed.
	 ','line_number':42,'multiline':True]
['text':'*
	 * Notifies the service that the workbench window has restored.
	 ','line_number':66,'multiline':True]
['text':' We want to avoid heavy utility process work to happen before','line_number':99,'multiline':False]
['text':' the window has restored. As such, make sure we await the','line_number':100,'multiline':False]
['text':' `Restored` phase before making a connection attempt, but also','line_number':101,'multiline':False]
['text':' add a timeout to be safe against possible deadlocks.','line_number':102,'multiline':False]
['text':' Get ready to acquire the message port from the utility process worker','line_number':106,'multiline':False]
['text':' we trigger the request via service call! ','line_number':109,'multiline':True]
['text':' Actually talk with the utility process service','line_number':111,'multiline':False]
['text':' to create a new process from a worker','line_number':112,'multiline':False]
['text':' Dispose worker upon disposal via utility process service','line_number':118,'multiline':False]
