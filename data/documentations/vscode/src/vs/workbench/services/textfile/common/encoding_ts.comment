['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' number of bytes to look at to decide about a file being binary or not','line_number':26,'multiline':False]
['text':' when not auto guessing the encoding, small number of bytes are enough','line_number':27,'multiline':False]
['text':' with auto guessing we want a lot more content to be read for guessing','line_number':28,'multiline':False]
['text':' set an upper limit for the number of bytes we pass on to jschardet','line_number':29,'multiline':False]
['text':'*
	 * Error indicating that the stream is binary even
	 * though `acceptTextOnly` was specified.
	 ','line_number':46,'multiline':True]
['text':'*
	 * This stream will only load iconv-lite lazily if the encoding
	 * is not UTF-8. This ensures that for most common cases we do
	 * not pay the price of loading the module from disk.
	 *
	 * We still need to be careful when converting UTF-8 to a string
	 * though because we read the file in chunks of Buffer and thus
	 * need to decode it via TextDecoder helper that is available
	 * in browser and node.js environments.
	 ','line_number':70,'multiline':True]
['text':' Signal to TextDecoder that potentially more data is coming','line_number':90,'multiline':False]
['text':' and that we are calling `decode` in the end to consume any','line_number':91,'multiline':False]
['text':' remainders','line_number':92,'multiline':False]
['text':' detect encoding from buffer','line_number':133,'multiline':False]
['text':' throw early if the source seems binary and','line_number':139,'multiline':False]
['text':' we are instructed to only accept text','line_number':140,'multiline':False]
['text':' ensure to respect overwrite of encoding','line_number':145,'multiline':False]
['text':' decode and write buffered content','line_number':148,'multiline':False]
['text':' signal to the outside our detected encoding and final decoder stream','line_number':156,'multiline':False]
['text':' Stop handling anything from the source and target','line_number':163,'multiline':False]
['text':' if the decoder is ready, we just write directly','line_number':174,'multiline':False]
['text':' otherwise we need to buffer the data until the stream is ready','line_number':179,'multiline':False]
['text':' buffered enough data for encoding detection, create stream','line_number':184,'multiline':False]
['text':' pause stream here until the decoder is ready','line_number':187,'multiline':False]
['text':' resume stream now that decoder is ready but','line_number':192,'multiline':False]
['text':' outside of this stack to reduce recursion','line_number':193,'multiline':False]
['text':' simply forward to target','line_number':198,'multiline':False]
['text':' we were still waiting for data to do the encoding','line_number':201,'multiline':False]
['text':' detection. thus, wrap up starting the stream even','line_number':202,'multiline':False]
['text':' without all the data to get things going','line_number':203,'multiline':False]
['text':' end the target with the remainders of the decoder','line_number':208,'multiline':False]
['text':' If we are instructed to add a BOM but we detect that no','line_number':232,'multiline':False]
['text':' bytes have been written, we must ensure to return the BOM','line_number':233,'multiline':False]
['text':' ourselves so that we comply with the contract.','line_number':234,'multiline':False]
['text':' iconv does not distinguish UTF 8 with or without BOM, so we need to help it','line_number':272,'multiline':False]
['text':' UTF-16 BE','line_number':286,'multiline':False]
['text':' UTF-16 LE','line_number':291,'multiline':False]
['text':' UTF-8','line_number':302,'multiline':False]
['text':' we explicitly ignore a specific set of encodings from auto guessing','line_number':310,'multiline':False]
['text':' - ASCII: we never want this encoding (most UTF-8 files would happily detect as','line_number':311,'multiline':False]
['text':'          ASCII files and then you could not type non-ASCII characters anymore)','line_number':312,'multiline':False]
['text':' - UTF-16: we have our own detection logic for UTF-16','line_number':313,'multiline':False]
['text':' - UTF-32: we do not support this encoding in VSCode','line_number':314,'multiline':False]
['text':'*
 * Guesses the encoding from buffer.
 ','line_number':317,'multiline':True]
['text':' ensure to limit buffer for guessing due to https://github.com/aadsm/jschardet/issues/53','line_number':323,'multiline':False]
['text':' before guessing jschardet calls toString('binary') on input if it is a Buffer,','line_number':326,'multiline':False]
['text':' since we are using it inside browser environment as well we do conversion ourselves','line_number':327,'multiline':False]
['text':' https://github.com/aadsm/jschardet/blob/v2.1.1/src/index.js#L36-L40','line_number':328,'multiline':False]
['text':' see comment above why we ignore some encodings','line_number':338,'multiline':False]
['text':'*
 * The encodings that are allowed in a settings file don't match the canonical encoding labels specified by WHATWG.
 * See https://encoding.spec.whatwg.org/#names-and-labels
 * Iconv-lite strips all non-alphanumeric characters, but ripgrep doesn't. For backcompat, allow these labels.
 ','line_number':365,'multiline':True]
['text':' Always first check for BOM to find out about encoding','line_number':417,'multiline':False]
['text':' Detect 0 bytes to see if file is binary or UTF-16 LE/BE','line_number':420,'multiline':False]
['text':' unless we already know that this file has a UTF-16 encoding','line_number':421,'multiline':False]
['text':' e.g. 0xAA 0x00','line_number':424,'multiline':False]
['text':' e.g. 0x00 0xAA','line_number':425,'multiline':False]
['text':' This is a simplified guess to detect UTF-16 BE or LE by just checking if','line_number':428,'multiline':False]
['text':' the first 512 bytes have the 0-byte at a specific location. For UTF-16 LE','line_number':429,'multiline':False]
['text':' this would be the odd byte index and for UTF-16 BE the even one.','line_number':430,'multiline':False]
['text':' Note: this can produce false positives (a binary file that uses a 2-byte','line_number':431,'multiline':False]
['text':' encoding of the same format as UTF-16) and false negatives (a UTF-16 file','line_number':432,'multiline':False]
['text':' that is using 4 bytes to encode a character).','line_number':433,'multiline':False]
['text':' assume 2-byte sequences typical for UTF-16','line_number':435,'multiline':False]
['text':' UTF-16 LE: expect e.g. 0xAA 0x00','line_number':442,'multiline':False]
['text':' UTF-16 BE: expect e.g. 0x00 0xAA','line_number':447,'multiline':False]
['text':' Return if this is neither UTF16-LE nor UTF16-BE and thus treat as binary','line_number':452,'multiline':False]
['text':' Handle case of 0-byte included','line_number':458,'multiline':False]
['text':' Auto guess encoding if configured','line_number':470,'multiline':False]
