['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * One folder to search and a glob expression that should be applied.
 ','line_number':26,'multiline':True]
['text':'*
 * One folder to search and a set of glob expressions that should be applied.
 ','line_number':34,'multiline':True]
['text':'*
 * A set of search paths and a set of glob expressions that should be applied.
 ','line_number':42,'multiline':True]
['text':'* Parse the special ./ syntax supported by the searchview, and expand foo to ** /foo ','line_number':56,'multiline':True]
['text':'*
	 * Adjusts input pattern for config
	 ','line_number':126,'multiline':True]
['text':' Build folderQueries from searchPaths, if given, otherwise folderResources','line_number':209,'multiline':False]
['text':' Filter extraFileResources against global include/exclude patterns - they are already expected to not belong to a workspace','line_number':237,'multiline':False]
['text':' Special case userdata as we don't have a search provider for it, but it can be searched.','line_number':253,'multiline':False]
['text':'*
	 * Resolve isCaseSensitive flag based on the query and the isSmartCase flag, for search providers that don't support smart case natively.
	 ','line_number':283,'multiline':True]
['text':' Consider it case sensitive if it contains an unescaped capital letter','line_number':289,'multiline':False]
['text':'*
	 * Take the includePattern as seen in the search viewlet, and split into components that look like searchPaths, and
	 * glob patterns. Glob patterns are expanded from 'foo/bar' to '{foo/bar/**, **\/foo/bar}.
	 *
	 * Public for test.
	 ','line_number':317,'multiline':True]
['text':' A segment is a search path if it is an absolute path or starts with ./, ../, .\, or ..\','line_number':325,'multiline':False]
['text':' convert ".js" to "*.js"','line_number':347,'multiline':False]
['text':'*
	 * Split search paths (./ or ../ or absolute paths in the includePatterns) into absolute paths and globs applied to those paths
	 ','line_number':374,'multiline':True]
['text':' No workspace => ignore search paths','line_number':379,'multiline':False]
['text':' 1 open folder => just resolve the search paths to absolute paths','line_number':384,'multiline':False]
['text':' One pathPortion to multiple expanded search paths (e.g. duplicate matching workspace folders)','line_number':391,'multiline':False]
['text':' Expanded search paths to multiple resolved patterns (with ** and without)','line_number':394,'multiline':False]
['text':'*
	 * Takes a searchPath like `./a/foo` or `../a/foo` and expands it to absolute paths for all the workspaces it matches.
	 ','line_number':418,'multiline':True]
['text':' Currently only local resources can be searched for with absolute search paths.','line_number':430,'multiline':False]
['text':' TODO convert this to a workspace folder + pattern, so excludes will be resolved properly for an absolute path inside a workspace folder','line_number':431,'multiline':False]
['text':' ./ or ./**/foo makes sense for single-folder but not multi-folder workspaces','line_number':454,'multiline':False]
['text':' No root folder with name','line_number':478,'multiline':False]
['text':' entire folder is excluded','line_number':526,'multiline':False]
['text':' If the last slash was the only slash, then we now have '' or 'C:' or '.'. Append a slash.','line_number':562,'multiline':False]
['text':' No glob char, or malformed','line_number':573,'multiline':False]
['text':'*
 * Note - we used {} here previously but ripgrep can't handle nested {} patterns. See https://github.com/microsoft/vscode/issues/32761
 ','line_number':591,'multiline':True]
['text':'*`,
		`*','line_number':596,'multiline':True]
['text':'*
 * Normalize slashes, remove `./` and trailing slashes
 ','line_number':607,'multiline':True]
['text':', '')','line_number':612,'multiline':False]
['text':'*
 * Escapes a path for use as a glob pattern that would match the input precisely.
 * Characters '?', '*', '[', and ']' are escaped into character range glob syntax
 * (for example, '?' becomes '[?]').
 * NOTE: This implementation makes no special cases for UNC paths. For example,
 * given the input "//?/C:/A?.txt", this would produce output '//[?]/C:/A[?].txt',
 * which may not be desirable in some cases. Use with caution if UNC paths could be expected.
 ','line_number':616,'multiline':True]
['text':'*
 * Construct an include pattern from a list of folders uris to search in.
 ','line_number':628,'multiline':True]
['text':' Show relative path from the root for single-root mode','line_number':641,'multiline':False]
['text':' always uses forward slashes','line_number':642,'multiline':False]
['text':' If this root is the only one with its basename, use a relative ./ path. If there is another, use an absolute path','line_number':650,'multiline':False]
['text':' always uses forward slashes','line_number':653,'multiline':False]
['text':' TODO rob: handle non-file URIs','line_number':660,'multiline':False]
