['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' Don't want to lose reference to parent `this` in the getters','line_number':41,'multiline':False]
['text':' We use a getter function here to always ensure at most 1 active tab per group and prevent iteration for being required','line_number':45,'multiline':False]
['text':' Construct all tabs from the given dto','line_number':120,'multiline':False]
['text':' Don't want to lose reference to parent `this` in the getters','line_number':131,'multiline':False]
['text':' We use a getter function here to always ensure at most 1 active group and prevent iteration for being required','line_number':135,'multiline':False]
['text':' In the open case we add the tab to the group','line_number':166,'multiline':False]
['text':' Insert tab at editor index','line_number':169,'multiline':False]
['text':' Splice to remove at old index and insert at new index === moving the tab','line_number':188,'multiline':False]
['text':' Events aren't guaranteed to be in order so if we receive a dto that matches the active tab id','line_number':203,'multiline':False]
['text':' but isn't active we mark the active tab id as empty. This prevent onDidActiveTabChange from','line_number':204,'multiline':False]
['text':' firing incorrectly','line_number':205,'multiline':False]
['text':' Not a getter since it must be a function to be used as a callback for the tabs','line_number':212,'multiline':False]
['text':' Have to use ! because this gets initialized via an RPC proxy','line_number':225,'multiline':False]
['text':' never changes -> simple value','line_number':240,'multiline':False]
['text':' dynamic -> getters','line_number':243,'multiline':False]
['text':' Check which type was passed in and call the appropriate close','line_number':257,'multiline':False]
['text':' Casting is needed as typescript doesn't seem to infer enough from this','line_number':258,'multiline':False]
['text':' move: async (tab: vscode.Tab, viewColumn: ViewColumn, index: number, preserveFocus?: boolean) => {','line_number':265,'multiline':False]
['text':' 	const extHostTab = this._findExtHostTabFromApi(tab);','line_number':266,'multiline':False]
['text':' 	if (!extHostTab) {','line_number':267,'multiline':False]
['text':' 		throw new Error('Invalid tab');','line_number':268,'multiline':False]
['text':' 	}','line_number':269,'multiline':False]
['text':' 	this._proxy.$moveTab(extHostTab.tabId, index, typeConverters.ViewColumn.from(viewColumn), preserveFocus);','line_number':270,'multiline':False]
['text':' 	return;','line_number':271,'multiline':False]
['text':' }','line_number':272,'multiline':False]
['text':' Set the active tab group id','line_number':300,'multiline':False]
['text':' Construct the tab change event based on the operation','line_number':327,'multiline':False]
['text':'#region Utils','line_number':394,'multiline':False]
['text':'#endregion','line_number':402,'multiline':False]
