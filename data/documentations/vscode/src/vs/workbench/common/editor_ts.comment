['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' Static values for editor contributions','line_number':32,'multiline':False]
['text':' Static information regarding the text editor','line_number':38,'multiline':False]
['text':'*
 * Side by side editor id.
 ','line_number':45,'multiline':True]
['text':'*
 * Text diff editor id.
 ','line_number':50,'multiline':True]
['text':'*
 * Binary diff editor id.
 ','line_number':55,'multiline':True]
['text':'*
	 * The unique type identifier of the editor. All instances
	 * of the same `IEditorPane` should have the same type
	 * identifier.
	 ','line_number':62,'multiline':True]
['text':'*
	 * The display name of the editor.
	 ','line_number':69,'multiline':True]
['text':'*
	 * Instantiates the editor pane using the provided services.
	 ','line_number':74,'multiline':True]
['text':'*
	 * Whether the descriptor is for the provided editor pane.
	 ','line_number':79,'multiline':True]
['text':'*
 * The editor pane is the container for workbench editors.
 ','line_number':85,'multiline':True]
['text':'*
	 * An event to notify when the `IEditorControl` in this
	 * editor pane changes.
	 *
	 * This can be used for editor panes that are a compound
	 * of multiple editor controls to signal that the active
	 * editor control has changed when the user clicks around.
	 ','line_number':90,'multiline':True]
['text':'*
	 * An optional event to notify when the selection inside the editor
	 * pane changed in case the editor has a selection concept.
	 *
	 * For example, in a text editor pane, the selection changes whenever
	 * the cursor is set to a new location.
	 ','line_number':100,'multiline':True]
['text':'*
	 * The assigned input of this editor.
	 ','line_number':109,'multiline':True]
['text':'*
	 * The assigned options of the editor.
	 ','line_number':114,'multiline':True]
['text':'*
	 * The assigned group this editor is showing in.
	 ','line_number':119,'multiline':True]
['text':'*
	 * The minimum width of this editor.
	 ','line_number':124,'multiline':True]
['text':'*
	 * The maximum width of this editor.
	 ','line_number':129,'multiline':True]
['text':'*
	 * The minimum height of this editor.
	 ','line_number':134,'multiline':True]
['text':'*
	 * The maximum height of this editor.
	 ','line_number':139,'multiline':True]
['text':'*
	 * An event to notify whenever minimum/maximum width/height changes.
	 ','line_number':144,'multiline':True]
['text':'*
	 * The context key service for this editor. Should be overridden by
	 * editors that have their own ScopedContextKeyService
	 ','line_number':149,'multiline':True]
['text':'*
	 * Returns the underlying control of this editor. Callers need to cast
	 * the control to a specific instance as needed, e.g. by using the
	 * `isCodeEditor` helper method to access the text code editor.
	 *
	 * Use the `onDidChangeControl` event to track whenever the control
	 * changes.
	 ','line_number':155,'multiline':True]
['text':'*
	 * Returns the current view state of the editor if any.
	 *
	 * This method is optional to override for the editor pane
	 * and should only be overridden when the pane can deal with
	 * `IEditorOptions.viewState` to be applied when opening.
	 ','line_number':165,'multiline':True]
['text':'*
	 * An optional method to return the current selection in
	 * the editor pane in case the editor pane has a selection
	 * concept.
	 *
	 * Clients of this method will typically react to the
	 * `onDidChangeSelection` event to receive the current
	 * selection as needed.
	 ','line_number':174,'multiline':True]
['text':'*
	 * Finds out if this editor is visible or not.
	 ','line_number':185,'multiline':True]
['text':'*
	 * More details for how the selection was made.
	 ','line_number':193,'multiline':True]
['text':'*
	 * The selection was changed as a result of a programmatic
	 * method invocation.
	 *
	 * For a text editor pane, this for example can be a selection
	 * being restored from previous view state automatically.
	 ','line_number':201,'multiline':True]
['text':'*
	 * The selection was changed by the user.
	 *
	 * This typically means the user changed the selection
	 * with mouse or keyboard.
	 ','line_number':210,'multiline':True]
['text':'*
	 * The selection was changed as a result of editing in
	 * the editor pane.
	 *
	 * For a text editor pane, this for example can be typing
	 * in the text of the editor pane.
	 ','line_number':218,'multiline':True]
['text':'*
	 * The selection was changed as a result of a navigation
	 * action.
	 *
	 * For a text editor pane, this for example can be a result
	 * of selecting an entry from a text outline view.
	 ','line_number':227,'multiline':True]
['text':'*
	 * The selection was changed as a result of a jump action
	 * from within the editor pane.
	 *
	 * For a text editor pane, this for example can be a result
	 * of invoking "Go to definition" from a symbol.
	 ','line_number':236,'multiline':True]
['text':'*
	 * Asks to compare this selection to another selection.
	 ','line_number':248,'multiline':True]
['text':'*
	 * Asks to massage the provided `options` in a way
	 * that the selection can be restored when the editor
	 * is opened again.
	 *
	 * For a text editor this means to apply the selected
	 * line and column as text editor options.
	 ','line_number':253,'multiline':True]
['text':'*
	 * Only used for logging to print more info about the selection.
	 ','line_number':263,'multiline':True]
['text':'*
	 * The selections are identical.
	 ','line_number':271,'multiline':True]
['text':'*
	 * The selections are similar.
	 *
	 * For a text editor this can mean that the one
	 * selection is in close proximity to the other
	 * selection.
	 *
	 * Upstream clients may decide in this case to
	 * not treat the selection different from the
	 * previous one because it is not distinct enough.
	 ','line_number':276,'multiline':True]
['text':'*
	 * The selections are entirely different.
	 ','line_number':289,'multiline':True]
['text':'*
 * Try to retrieve the view state for the editor pane that
 * has the provided editor input opened, if at all.
 *
 * This method will return `undefined` if the editor input
 * is not visible in any of the opened editor panes.
 ','line_number':308,'multiline':True]
['text':'*
 * Overrides `IEditorPane` where `input` and `group` are known to be set.
 ','line_number':325,'multiline':True]
['text':'*
 * The text editor pane is the container for workbench text editors.
 ','line_number':333,'multiline':True]
['text':'*
	 * Returns the underlying text editor widget of this editor.
	 ','line_number':338,'multiline':True]
['text':'*
 * The text editor pane is the container for workbench text diff editors.
 ','line_number':344,'multiline':True]
['text':'*
	 * Returns the underlying text diff editor widget of this editor.
	 ','line_number':349,'multiline':True]
['text':'*
 * Marker interface for the control inside an editor pane. Callers
 * have to cast the control to work with it, e.g. via methods
 * such as `isCodeEditor(control)`.
 ','line_number':355,'multiline':True]
['text':'*
	 * The type identifier of the file editor.
	 ','line_number':364,'multiline':True]
['text':'*
	 * Creates new new editor capable of showing files.
	 ','line_number':369,'multiline':True]
['text':'*
	 * Check if the provided object is a file editor.
	 ','line_number':374,'multiline':True]
['text':'*
	 * Registers the file editor factory to use for file editors.
	 ','line_number':382,'multiline':True]
['text':'*
	 * Returns the file editor factory to use for file editors.
	 ','line_number':387,'multiline':True]
['text':'*
	 * Registers a editor serializer for the given editor to the registry.
	 * An editor serializer is capable of serializing and deserializing editor
	 * from string data.
	 *
	 * @param editorTypeId the type identifier of the editor
	 * @param serializer the editor serializer for serialization/deserialization
	 ','line_number':392,'multiline':True]
['text':'*
	 * Returns the editor serializer for the given editor.
	 ','line_number':402,'multiline':True]
['text':'*
	 * Starts the registry by providing the required services.
	 ','line_number':408,'multiline':True]
['text':'*
	 * Determines whether the given editor can be serialized by the serializer.
	 ','line_number':416,'multiline':True]
['text':'*
	 * Returns a string representation of the provided editor that contains enough information
	 * to deserialize back to the original editor from the deserialize() method.
	 ','line_number':421,'multiline':True]
['text':'*
	 * Returns an editor from the provided serialized form of the editor. This form matches
	 * the value returned from the serialize() method.
	 ','line_number':427,'multiline':True]
['text':'*
	 * Optional resource for the untitled editor. Depending on the value, the editor:
	 * - should get a unique name if `undefined` (for example `Untitled-1`)
	 * - should use the resource directly if the scheme is `untitled:`
	 * - should change the scheme to `untitled:` otherwise and assume an associated path
	 *
	 * Untitled editors with associated path behave slightly different from other untitled
	 * editors:
	 * - they are dirty right when opening
	 * - they will not ask for a file path when saving but use the associated path
	 ','line_number':436,'multiline':True]
['text':'*
 * A resource side by side editor input shows 2 editors side by side but
 * without highlighting any differences.
 *
 * Note: both sides will be resolved as editor individually. As such, it is
 * possible to show 2 different editors side by side.
 *
 * @see {@link IResourceDiffEditorInput} for a variant that compares 2 editors.
 ','line_number':450,'multiline':True]
['text':'*
	 * The right hand side editor to open inside a side-by-side editor.
	 ','line_number':461,'multiline':True]
['text':'*
	 * The left hand side editor to open inside a side-by-side editor.
	 ','line_number':466,'multiline':True]
['text':'*
 * A resource diff editor input compares 2 editors side by side
 * highlighting the differences.
 *
 * Note: both sides must be resolvable to the same editor, or
 * a text based presentation will be used as fallback.
 ','line_number':472,'multiline':True]
['text':'*
	 * The left hand side editor to open inside a diff editor.
	 ','line_number':481,'multiline':True]
['text':'*
	 * The right hand side editor to open inside a diff editor.
	 ','line_number':486,'multiline':True]
['text':'*
 * A resource list diff editor input compares multiple resources side by side
 * highlighting the differences.
 ','line_number':492,'multiline':True]
['text':'*
	 * The list of resources to compare.
	 ','line_number':497,'multiline':True]
['text':'*
 * A resource merge editor input compares multiple editors
 * highlighting the differences for merging.
 *
 * Note: all sides must be resolvable to the same editor, or
 * a text based presentation will be used as fallback.
 ','line_number':505,'multiline':True]
['text':'*
	 * The one changed version of the file.
	 ','line_number':514,'multiline':True]
['text':'*
	 * The second changed version of the file.
	 ','line_number':519,'multiline':True]
['text':'*
	 * The base common ancestor of the file to merge.
	 ','line_number':524,'multiline':True]
['text':'*
	 * The resulting output of the merge.
	 ','line_number':529,'multiline':True]
['text':' make sure to not accidentally match on typed editor inputs','line_number':537,'multiline':False]
['text':' make sure to not accidentally match on typed editor inputs','line_number':547,'multiline':False]
['text':' make sure to not accidentally match on typed editor inputs','line_number':557,'multiline':False]
['text':' make sure to not accidentally match on typed editor inputs','line_number':567,'multiline':False]
['text':' make sure to not accidentally match on diff editors','line_number':571,'multiline':False]
['text':' make sure to not accidentally match on typed editor inputs','line_number':581,'multiline':False]
['text':' make sure to not accidentally match on typed editor inputs','line_number':594,'multiline':False]
['text':'*
	 * Explicit user gesture.
	 ','line_number':610,'multiline':True]
['text':'*
	 * Auto save after a timeout.
	 ','line_number':615,'multiline':True]
['text':'*
	 * Auto save after editor focus change.
	 ','line_number':620,'multiline':True]
['text':'*
	 * Auto save after window change.
	 ','line_number':625,'multiline':True]
['text':'*
	 * Registers a `SaveSource` with an identifier and label
	 * to the registry so that it can be used in save operations.
	 ','line_number':642,'multiline':True]
['text':'*
	 * An indicator how the save operation was triggered.
	 ','line_number':665,'multiline':True]
['text':'*
	 * An indicator about the source of the save operation.
	 *
	 * Must use `SaveSourceRegistry.registerSource()` to obtain.
	 ','line_number':670,'multiline':True]
['text':'*
	 * Forces to save the contents of the working copy
	 * again even if the working copy is not dirty.
	 ','line_number':677,'multiline':True]
['text':'*
	 * Instructs the save operation to skip any save participants.
	 ','line_number':683,'multiline':True]
['text':'*
	 * A hint as to which file systems should be available for saving.
	 ','line_number':688,'multiline':True]
['text':'*
	 * Forces to load the contents of the working copy
	 * again even if the working copy is not dirty.
	 ','line_number':696,'multiline':True]
['text':'*
	 * A soft revert will clear dirty state of a working copy
	 * but will not attempt to load it from its persisted state.
	 *
	 * This option may be used in scenarios where an editor is
	 * closed and where we do not require to load the contents.
	 ','line_number':702,'multiline':True]
['text':'*
	 * Signals no specific capability for the input.
	 ','line_number':719,'multiline':True]
['text':'*
	 * Signals that the input is readonly.
	 ','line_number':724,'multiline':True]
['text':'*
	 * Signals that the input is untitled.
	 ','line_number':729,'multiline':True]
['text':'*
	 * Signals that the input can only be shown in one group
	 * and not be split into multiple groups.
	 ','line_number':734,'multiline':True]
['text':'*
	 * Signals that the input requires workspace trust.
	 ','line_number':740,'multiline':True]
['text':'*
	 * Signals that the editor can split into 2 in the same
	 * editor group.
	 ','line_number':745,'multiline':True]
['text':'*
	 * Signals that the editor wants its description to be
	 * visible when presented to the user. By default, a UI
	 * component may decide to hide the description portion
	 * for brevity.
	 ','line_number':751,'multiline':True]
['text':'*
	 * Signals that the editor supports dropping into the
	 * editor by holding shift.
	 ','line_number':759,'multiline':True]
['text':'*
	 * Signals that the editor is composed of multiple editors
	 * within.
	 ','line_number':765,'multiline':True]
['text':'*
	 * Signals that the editor cannot be in a dirty state
	 * and may still have unsaved changes
	 ','line_number':771,'multiline':True]
['text':'*
	 * Signals that the editor does not support opening in
	 * auxiliary windows yet.
	 ','line_number':777,'multiline':True]
['text':' Marker class for implementing `isEditorInput`','line_number':787,'multiline':False]
['text':'*
	 * An editor may provide an additional preferred resource alongside
	 * the `resource` property. While the `resource` property serves as
	 * unique identifier of the editor that should be used whenever we
	 * compare to other editors, the `preferredResource` should be used
	 * in places where e.g. the resource is shown to the user.
	 *
	 * For example: on Windows and macOS, the same URI with different
	 * casing may point to the same file. The editor may chose to
	 * "normalize" the URIs so that only one editor opens for different
	 * URIs. But when displaying the editor label to the user, the
	 * preferred URI should be used.
	 *
	 * Not all editors have a `preferredResource`. The `EditorResourceAccessor`
	 * utility can be used to always get the right resource without having
	 * to do instanceof checks.
	 ','line_number':796,'multiline':True]
['text':'*
	 * The primary editor input is shown on the right hand side.
	 ','line_number':824,'multiline':True]
['text':'*
	 * The secondary editor input is shown on the left hand side.
	 ','line_number':829,'multiline':True]
['text':'*
	 * The modified (primary) editor input is shown on the right hand side.
	 ','line_number':843,'multiline':True]
['text':'*
	 * The original (secondary) editor input is shown on the left hand side.
	 ','line_number':848,'multiline':True]
['text':'*
	 * A marker to create a `IFileEditorInput` from this untyped input.
	 ','line_number':862,'multiline':True]
['text':'*
 * This is a tagging interface to declare an editor input being capable of dealing with files. It is only used in the editor registry
 * to register this kind of input to the platform.
 ','line_number':868,'multiline':True]
['text':'*
	 * Gets the resource this file input is about. This will always be the
	 * canonical form of the resource, so it may differ from the original
	 * resource that was provided to create the input. Use `preferredResource`
	 * for the form as it was created.
	 ','line_number':874,'multiline':True]
['text':'*
	 * Sets the preferred resource to use for this file input.
	 ','line_number':882,'multiline':True]
['text':'*
	 * Sets the preferred name to use for this file input.
	 *
	 * Note: for certain file schemes the input may decide to ignore this
	 * name and use our standard naming. Specifically for schemes we own,
	 * we do not let others override the name.
	 ','line_number':887,'multiline':True]
['text':'*
	 * Sets the preferred description to use for this file input.
	 *
	 * Note: for certain file schemes the input may decide to ignore this
	 * description and use our standard naming. Specifically for schemes we own,
	 * we do not let others override the description.
	 ','line_number':896,'multiline':True]
['text':'*
	 * Sets the preferred encoding to use for this file input.
	 ','line_number':905,'multiline':True]
['text':'*
	 * Sets the preferred language id to use for this file input.
	 ','line_number':910,'multiline':True]
['text':'*
	 * Sets the preferred contents to use for this file input.
	 ','line_number':915,'multiline':True]
['text':'*
	 * Forces this file input to open as binary instead of text.
	 ','line_number':920,'multiline':True]
['text':'*
	 * Figure out if the file input has been resolved or not.
	 ','line_number':925,'multiline':True]
['text':'*
	 * If provided, the size of the file will be checked against the limits
	 * and an error will be thrown if any limit is exceeded.
	 ','line_number':933,'multiline':True]
['text':'*
 * Context passed into `EditorPane#setInput` to give additional
 * context information around why the editor was opened.
 ','line_number':988,'multiline':True]
['text':'*
	 * An indicator if the editor input is new for the group the editor is in.
	 * An editor is new for a group if it was not part of the group before and
	 * otherwise was already opened in the group and just became the active editor.
	 *
	 * This hint can e.g. be used to decide whether to restore view state or not.
	 ','line_number':994,'multiline':True]
['text':'*
 * The editor commands context is used for editor commands (e.g. in the editor title)
 * and we must ensure that the context is serializable because it potentially travels
 * to the extension host!
 ','line_number':1015,'multiline':True]
['text':'*
 * More information around why an editor was closed in the model.
 ','line_number':1027,'multiline':True]
['text':'*
	 * No specific context for closing (e.g. explicit user gesture).
	 ','line_number':1032,'multiline':True]
['text':'*
	 * The editor closed because it was replaced with another editor.
	 * This can either happen via explicit replace call or when an
	 * editor is in preview mode and another editor opens.
	 ','line_number':1037,'multiline':True]
['text':'*
	 * The editor closed as a result of moving it to another group.
	 ','line_number':1044,'multiline':True]
['text':'*
	 * The editor closed because another editor turned into preview
	 * and this used to be the preview editor before.
	 ','line_number':1049,'multiline':True]
['text':'*
	 * More information around why the editor was closed.
	 ','line_number':1058,'multiline':True]
['text':'*
	 * The index of the editor before closing.
	 ','line_number':1063,'multiline':True]
['text':'*
	 * Whether the editor was sticky or not.
	 ','line_number':1068,'multiline':True]
['text':'*
	 * The new active editor or `undefined` if the group is empty.
	 ','line_number':1076,'multiline':True]
['text':'*
	 * The target group of the move operation.
	 ','line_number':1084,'multiline':True]
['text':' Group Changes ','line_number':1096,'multiline':True]
['text':' Editor Changes ','line_number':1102,'multiline':True]
['text':'*
	 * Whether to consider any or both side by side editor as matching.
	 * By default, side by side editors will not be considered
	 * as matching, even if the editor is opened in one of the sides.
	 ','line_number':1197,'multiline':True]
['text':'*
	 * Whether to consider a side by side editor as matching.
	 * By default, side by side editors will not be considered
	 * as matching, even if the editor is opened in one of the sides.
	 ','line_number':1207,'multiline':True]
['text':'*
	 * Only consider an editor to match when the
	 * `candidate === editor` but not when
	 * `candidate.matches(editor)`.
	 ','line_number':1214,'multiline':True]
['text':'*
	 * Allows to access the `resource(s)` of side by side editors. If not
	 * specified, a `resource` for a side by side editor will always be
	 * `undefined`.
	 ','line_number':1224,'multiline':True]
['text':'*
	 * Allows to filter the scheme to consider. A resource scheme that does
	 * not match a filter will not be considered.
	 ','line_number':1231,'multiline':True]
['text':'*
	 * The original URI of an editor is the URI that was used originally to open
	 * the editor and should be used whenever the URI is presented to the user,
	 * e.g. as a label together with utility methods such as `ResourceLabel` or
	 * `ILabelService` that can turn this original URI into the best form for
	 * presenting.
	 *
	 * In contrast, the canonical URI (#getCanonicalUri) may be different and should
	 * be used whenever the URI is used to e.g. compare with other editors or when
	 * caching certain data based on the URI.
	 *
	 * For example: on Windows and macOS, the same file URI with different casing may
	 * point to the same file. The editor may chose to "normalize" the URI into a canonical
	 * form so that only one editor opens for same file URIs with different casing. As
	 * such, the original URI and the canonical URI can be different.
	 ','line_number':1240,'multiline':True]
['text':' Merge editors are handled with `merged` result editor','line_number':1265,'multiline':False]
['text':' Optionally support side-by-side editors','line_number':1270,'multiline':False]
['text':' Original URI is the `preferredResource` of an editor if any','line_number':1291,'multiline':False]
['text':'*
	 * The canonical URI of an editor is the true unique identifier of the editor
	 * and should be used whenever the URI is used e.g. to compare with other
	 * editors or when caching certain data based on the URI.
	 *
	 * In contrast, the original URI (#getOriginalUri) may be different and should
	 * be used whenever the URI is presented to the user, e.g. as a label.
	 *
	 * For example: on Windows and macOS, the same file URI with different casing may
	 * point to the same file. The editor may chose to "normalize" the URI into a canonical
	 * form so that only one editor opens for same file URIs with different casing. As
	 * such, the original URI and the canonical URI can be different.
	 ','line_number':1312,'multiline':True]
['text':' Merge editors are handled with `merged` result editor','line_number':1334,'multiline':False]
['text':' Optionally support side-by-side editors','line_number':1339,'multiline':False]
['text':' Canonical URI is the `resource` of an editor','line_number':1360,'multiline':False]
['text':' Multiple scheme filter','line_number':1371,'multiline':False]
['text':' Single scheme filter','line_number':1378,'multiline':False]
['text':' only interested in sticky editors','line_number':1399,'multiline':False]
['text':' Type ID ','line_number':1439,'multiline':True]
['text':' Type ID ','line_number':1440,'multiline':True]
['text':'*
	 * Editors sorted by most recent activity (most recent active first)
	 ','line_number':1550,'multiline':True]
['text':'*
	 * Editors sorted by sequential order
	 ','line_number':1555,'multiline':True]
['text':'*
	 * If set to true, the message will be taken
	 * from the error message entirely and not be
	 * composed with more text.
	 ','line_number':1579,'multiline':True]
['text':'*
	 * If set, will override the severity of the error.
	 ','line_number':1586,'multiline':True]
['text':'*
	 * If set to true, the error may be shown in a dialog
	 * to the user if the editor opening was triggered by
	 * user action. Otherwise and by default, the error will
	 * be shown as place holder in the editor area.
	 ','line_number':1591,'multiline':True]
