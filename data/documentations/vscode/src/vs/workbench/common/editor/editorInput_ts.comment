['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
	 * If `true`, will call into the `confirm` method to ask for confirmation
	 * before closing the editor.
	 ','line_number':19,'multiline':True]
['text':'*
	 * Allows an editor to control what should happen when the editor
	 * (or a list of editor of the same kind) is being closed.
	 *
	 * By default a file specific dialog will open if the editor is
	 * dirty and not in the process of saving.
	 *
	 * If the editor is not dealing with files or another condition
	 * should be used besides dirty state, this method should be
	 * implemented to show a different dialog.
	 *
	 * @param editors All editors of the same kind that are being closed. Should be used
	 * to show a combined dialog.
	 ','line_number':25,'multiline':True]
['text':'*
 * Editor inputs are lightweight objects that can be passed to the workbench API to open inside the editor part.
 * Each editor input is mapped to an editor that is capable of opening it through the Platform facade.
 ','line_number':42,'multiline':True]
['text':'*
	 * Triggered when this input changes its dirty state.
	 ','line_number':54,'multiline':True]
['text':'*
	 * Triggered when this input changes its label
	 ','line_number':59,'multiline':True]
['text':'*
	 * Triggered when this input changes its capabilities.
	 ','line_number':64,'multiline':True]
['text':'*
	 * Triggered when this input is about to be disposed.
	 ','line_number':69,'multiline':True]
['text':'*
	 * Optional: subclasses can override to implement
	 * custom confirmation on close behavior.
	 ','line_number':74,'multiline':True]
['text':'*
	 * Unique type identifier for this input. Every editor input of the
	 * same class should share the same type identifier. The type identifier
	 * is used for example for serialising/deserialising editor inputs
	 * via the serialisers of the `EditorInputFactoryRegistry`.
	 ','line_number':80,'multiline':True]
['text':'*
	 * Returns the optional associated resource of this input.
	 *
	 * This resource should be unique for all editors of the same
	 * kind and input and is often used to identify the editor input among
	 * others.
	 *
	 * **Note:** DO NOT use this property for anything but identity
	 * checks. DO NOT use this property to present as label to the user.
	 * Please refer to `EditorResourceAccessor` documentation in that case.
	 ','line_number':88,'multiline':True]
['text':'*
	 * Identifies the type of editor this input represents
	 * This ID is registered with the {@link EditorResolverService} to allow
	 * for resolving an untyped input to a typed one
	 ','line_number':101,'multiline':True]
['text':'*
	 * The capabilities of the input.
	 ','line_number':110,'multiline':True]
['text':'*
	 * Figure out if the input has the provided capability.
	 ','line_number':117,'multiline':True]
['text':'*
	 * Returns the display name of this input.
	 ','line_number':132,'multiline':True]
['text':'*
	 * Returns the display description of this input.
	 ','line_number':139,'multiline':True]
['text':'*
	 * Returns the display title of this input.
	 ','line_number':146,'multiline':True]
['text':'*
	 * Returns the extra classes to apply to the label of this input.
	 ','line_number':153,'multiline':True]
['text':'*
	 * Returns the aria label to be read out by a screen reader.
	 ','line_number':160,'multiline':True]
['text':'*
	 * Returns the icon which represents this editor input.
	 * If undefined, the default icon will be used.
	 ','line_number':167,'multiline':True]
['text':'*
	 * Returns a descriptor suitable for telemetry events.
	 *
	 * Subclasses should extend if they can contribute.
	 ','line_number':175,'multiline':True]
['text':' __GDPR__FRAGMENT__
			"EditorTelemetryDescriptor" : {
				"typeId" : { "classification": "SystemMetaData", "purpose": "FeatureInsight" }
			}
		','line_number':181,'multiline':True]
['text':'*
	 * Returns if this input is dirty or not.
	 ','line_number':189,'multiline':True]
['text':'*
	 * Returns if the input has unsaved changes.
	 ','line_number':196,'multiline':True]
['text':'*
	 * Returns if this input is currently being saved or soon to be
	 * saved. Based on this assumption the editor may for example
	 * decide to not signal the dirty state to the user assuming that
	 * the save is scheduled to happen anyway.
	 ','line_number':203,'multiline':True]
['text':'*
	 * Returns a type of `IDisposable` that represents the resolved input.
	 * Subclasses should override to provide a meaningful model or return
	 * `null` if the editor does not require a model.
	 *
	 * The `options` parameter are passed down from the editor when the
	 * input is resolved as part of it.
	 ','line_number':213,'multiline':True]
['text':'*
	 * Saves the editor. The provided groupId helps implementors
	 * to e.g. preserve view state of the editor and re-open it
	 * in the correct group after saving.
	 *
	 * @returns the resulting editor input (typically the same) of
	 * this operation or `undefined` to indicate that the operation
	 * failed or was canceled.
	 ','line_number':225,'multiline':True]
['text':'*
	 * Saves the editor to a different location. The provided `group`
	 * helps implementors to e.g. preserve view state of the editor
	 * and re-open it in the correct group after saving.
	 *
	 * @returns the resulting editor input (typically a different one)
	 * of this operation or `undefined` to indicate that the operation
	 * failed or was canceled.
	 ','line_number':238,'multiline':True]
['text':'*
	 * Reverts this input from the provided group.
	 ','line_number':251,'multiline':True]
['text':'*
	 * Called to determine how to handle a resource that is renamed that matches
	 * the editors resource (or is a child of).
	 *
	 * Implementors are free to not implement this method to signal no intent
	 * to participate. If an editor is returned though, it will replace the
	 * current one with that editor and optional options.
	 ','line_number':256,'multiline':True]
['text':'*
	 * Returns a copy of the current editor input. Used when we can't just reuse the input
	 ','line_number':268,'multiline':True]
['text':'*
	 * Returns if the other object matches this input.
	 ','line_number':275,'multiline':True]
['text':' Typed inputs: via  === check','line_number':280,'multiline':False]
['text':' Untyped inputs: go into properties','line_number':285,'multiline':False]
['text':' If the overrides are both defined and don't match that means they're separate inputs','line_number':288,'multiline':False]
['text':'*
	 * If a editor was registered onto multiple editor panes, this method
	 * will be asked to return the preferred one to use.
	 *
	 * @param editorPanes a list of editor pane descriptors that are candidates
	 * for the editor to open in.
	 ','line_number':296,'multiline':True]
['text':'*
	 * Returns a representation of this typed editor input as untyped
	 * resource editor input that e.g. can be used to serialize the
	 * editor input into a form that it can be restored.
	 *
	 * May return `undefined` if an untyped representation is not supported.
	 *
	 * @param options additional configuration for the expected return type.
	 * When `preserveViewState` is provided, implementations should try to
	 * preserve as much view state as possible from the typed input based on
	 * the group the editor is opened.
	 ','line_number':307,'multiline':True]
['text':'*
	 * Returns if this editor is disposed.
	 ','line_number':323,'multiline':True]
