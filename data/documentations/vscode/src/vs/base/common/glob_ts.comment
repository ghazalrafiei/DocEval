['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
	 * A base file path to which this pattern will be matched against relatively.
	 ','line_number':17,'multiline':True]
['text':'*
	 * A file glob pattern like `*.{ts,js}` that will be matched on file paths
	 * relative to the base path.
	 *
	 * Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`,
	 * the file glob pattern will match on `index.js`.
	 ','line_number':22,'multiline':True]
['text':' any slash or backslash','line_number':47,'multiline':False]
['text':' any non-slash and non-backslash','line_number':48,'multiline':False]
['text':'g;','line_number':49,'multiline':False]
['text':' 1 star matches any number of characters except path separator (/ and \) - non greedy (?)','line_number':56,'multiline':False]
['text':' Matches:  (Path Sep OR Path Val followed by Path Sep) 0-many times except when it's the last pattern','line_number':58,'multiline':False]
['text':'           in which case also matches (Path Sep followed by Path Val)','line_number':59,'multiline':False]
['text':' Group is non capturing because we don't need to capture at all (?:...)','line_number':60,'multiline':False]
['text':' Overall we use non-greedy matching because it could be that we match too much','line_number':61,'multiline':False]
['text':' Tail','line_number':104,'multiline':False]
['text':' Split up into segments for each slash found','line_number':119,'multiline':False]
['text':' Special case where we only have globstars','line_number':122,'multiline':False]
['text':' Build regex over segments','line_number':127,'multiline':False]
['text':' Treat globstar specially','line_number':132,'multiline':False]
['text':' if we have more than one globstar after another, just ignore it','line_number':135,'multiline':False]
['text':' Anything else, not globstar','line_number':143,'multiline':False]
['text':' States','line_number':146,'multiline':False]
['text':' Support brace expansion','line_number':155,'multiline':False]
['text':' Support brackets','line_number':161,'multiline':False]
['text':' ] is literally only allowed as first character in brackets to match it ','line_number':162,'multiline':True]
['text':' range operator','line_number':165,'multiline':False]
['text':' negation operator (only valid on first index in bracket)','line_number':170,'multiline':False]
['text':' glob split matching is not allowed within character ranges','line_number':175,'multiline':False]
['text':' see http://man7.org/linux/man-pages/man7/glob.7.html','line_number':176,'multiline':False]
['text':' anything else gets escaped','line_number':181,'multiline':False]
['text':' Converts {foo,bar} => [foo|bar]','line_number':202,'multiline':False]
['text':' 1 ? matches any single character except path separator (/ and \)','line_number':223,'multiline':False]
['text':' Tail: Add the slash we had split on if there is more to','line_number':235,'multiline':False]
['text':' come and the remaining pattern is not a globstar','line_number':236,'multiline':False]
['text':' For example if pattern: some/**/*.js we want the "/" after','line_number':237,'multiline':False]
['text':' some to be included in the RegEx to prevent a folder called','line_number':238,'multiline':False]
['text':' "something" to match as well.','line_number':239,'multiline':False]
['text':' more segments to come after this','line_number':241,'multiline':False]
['text':' next segment is not **, or...','line_number':243,'multiline':False]
['text':' ...next segment is ** but there is more segments after that','line_number':244,'multiline':False]
['text':' update globstar state','line_number':251,'multiline':False]
['text':' regexes to check for trivial glob patterns that just check for String#endsWith','line_number':259,'multiline':False]
['text':' **/*.something','line_number':260,'multiline':False]
['text':' **/something','line_number':261,'multiline':False]
['text':' {**/*.something,**/*.else} or {**/package.json,**/project.json}','line_number':262,'multiline':False]
['text':' Like T3, with optional trailing /**','line_number':263,'multiline':False]
['text':' **/something/else','line_number':264,'multiline':False]
['text':' something/else','line_number':265,'multiline':False]
['text':' The `ParsedExpression` returns a `Promise`','line_number':269,'multiline':False]
['text':' iff `hasSibling` returns a `Promise`.','line_number':270,'multiline':False]
['text':' the matching pattern ','line_number':271,'multiline':True]
['text':'*
	 * Simplify patterns for use as exclusion filters during
	 * tree traversal to skip entire subtrees. Cannot be used
	 * outside of a tree traversal.
	 ','line_number':275,'multiline':True]
['text':' the matching pattern ','line_number':284,'multiline':True]
['text':' the matching pattern ','line_number':292,'multiline':True]
['text':' bounded to 10000 elements','line_number':298,'multiline':False]
['text':' Handle relative patterns','line_number':313,'multiline':False]
['text':' Whitespace trimming','line_number':321,'multiline':False]
['text':' Check cache','line_number':324,'multiline':False]
['text':' Check for Trivials','line_number':331,'multiline':False]
['text':' common pattern: **/*.txt just need endsWith check','line_number':334,'multiline':False]
['text':' common pattern: **/some.txt just need basename check','line_number':335,'multiline':False]
['text':' repetition of common patterns (see above) {**/*.txt,**/*.png}','line_number':337,'multiline':False]
['text':' common pattern: **/something/else just need endsWith check','line_number':339,'multiline':False]
['text':' common pattern: something/else just need equals check','line_number':341,'multiline':False]
['text':' Otherwise convert to pattern','line_number':345,'multiline':False]
['text':' Cache','line_number':350,'multiline':False]
['text':' skip glob matching if `base` is not a parent of `path`','line_number':363,'multiline':False]
['text':' Given we have checked `base` being a parent of `path`,','line_number':367,'multiline':False]
['text':' we can now remove the `base` portion of the `path`','line_number':368,'multiline':False]
['text':' and only match on the remaining path components','line_number':369,'multiline':False]
['text':' For that we try to extract the portion of the `path`','line_number':370,'multiline':False]
['text':' that comes after the `base` portion. We have to account','line_number':371,'multiline':False]
['text':' for the fact that `base` might end in a path separator','line_number':372,'multiline':False]
['text':' (https://github.com/microsoft/vscode/issues/162498)','line_number':373,'multiline':False]
['text':' Make sure to preserve associated metadata','line_number':378,'multiline':False]
['text':' dropping **, tailing / is dropped later','line_number':388,'multiline':False]
['text':' common pattern: **/*.txt just need endsWith check','line_number':391,'multiline':False]
['text':' common pattern: **/some.txt just need basename check','line_number':398,'multiline':False]
['text':' repetition of common patterns (see above) {**/*.txt,**/*.png}','line_number':423,'multiline':False]
['text':' common patterns: **/something/else just need endsWith check, something/else just needs and equals check','line_number':462,'multiline':False]
['text':' reset RegExp to its initial state to reuse it!','line_number':489,'multiline':False]
['text':'*
 * Simplified glob matching. Supports a subset of glob patterns:
 * * `*` to match zero or more characters in a path segment
 * * `?` to match on one character in a path segment
 * * `**` to match any number of path segments, including none
 * * `{}` to group conditions (e.g. *.{ts,js} matches all TypeScript and JavaScript files)
 * * `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
 * * `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
 ','line_number':498,'multiline':True]
['text':' the matching pattern ','line_number':508,'multiline':True]
['text':'*
 * Simplified glob matching. Supports a subset of glob patterns:
 * * `*` to match zero or more characters in a path segment
 * * `?` to match on one character in a path segment
 * * `**` to match any number of path segments, including none
 * * `{}` to group conditions (e.g. *.{ts,js} matches all TypeScript and JavaScript files)
 * * `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
 * * `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
 ','line_number':517,'multiline':True]
['text':' Glob with String','line_number':534,'multiline':False]
['text':' Glob with Expression','line_number':556,'multiline':False]
['text':' immediately return as soon as the first expression matches','line_number':598,'multiline':False]
['text':' If the result is a promise, we have to keep it for','line_number':601,'multiline':False]
['text':' later processing and await the result properly.','line_number':602,'multiline':False]
['text':' With result promises, we have to loop over each and','line_number':612,'multiline':False]
['text':' await the result before we can return any result.','line_number':613,'multiline':False]
['text':' Pattern matches path','line_number':649,'multiline':False]
['text':' immediately return as soon as the first expression matches','line_number':663,'multiline':False]
['text':' If the result is a promise, we have to keep it for','line_number':666,'multiline':False]
['text':' later processing and await the result properly.','line_number':667,'multiline':False]
['text':' With result promises, we have to loop over each and','line_number':677,'multiline':False]
['text':' await the result before we can return any result.','line_number':678,'multiline':False]
['text':' pattern is disabled','line_number':710,'multiline':False]
['text':' Expression Pattern is <boolean>','line_number':718,'multiline':False]
['text':' Expression Pattern is <SiblingClause>','line_number':723,'multiline':False]
['text':' Expression is anything','line_number':745,'multiline':False]
