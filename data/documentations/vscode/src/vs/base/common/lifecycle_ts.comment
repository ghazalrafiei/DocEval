['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' #region Disposable Tracking','line_number':12,'multiline':False]
['text':'*
 * Enables logging of potentially leaked disposables.
 *
 * A disposable is considered leaked if it is not disposed or not registered as the child of
 * another disposable. This tracking is very simple an only works for classes that either
 * extend Disposable or use a DisposableStore. This means there are a lot of false positives.
 ','line_number':14,'multiline':True]
['text':'*
	 * Is called on construction of a disposable.
	','line_number':25,'multiline':True]
['text':'*
	 * Is called when a disposable is registered as child of another disposable (e.g. {@link DisposableStore}).
	 * If parent is `null`, the disposable is removed from its former parent.
	','line_number':30,'multiline':True]
['text':'*
	 * Is called after a disposable is disposed.
	','line_number':36,'multiline':True]
['text':'*
	 * Indicates that the given object is a singleton which does not need to be disposed.
	','line_number':41,'multiline':True]
['text':' Remove all objects that are a child of other leaking objects. Assumes there are no cycles.','line_number':126,'multiline':False]
['text':' Put earlier leaks first','line_number':160,'multiline':False]
['text':' noop','line_number':218,'multiline':False]
['text':' noop','line_number':228,'multiline':False]
['text':'*
 * Indicates that the given object is a singleton which does not need to be disposed.
','line_number':258,'multiline':True]
['text':' #endregion','line_number':266,'multiline':False]
['text':'*
 * An object that performs a cleanup operation when `.dispose()` is called.
 *
 * Some examples of how disposables are used:
 *
 * - An event listener that removes itself when `.dispose()` is called.
 * - A resource such as a file system watcher that cleans up the resource when `.dispose()` is called.
 * - The return value from registering a provider. When `.dispose()` is called, the provider is unregistered.
 ','line_number':268,'multiline':True]
['text':'*
 * Check if `thing` is {@link IDisposable disposable}.
 ','line_number':281,'multiline':True]
['text':'*
 * Disposes of the value(s) passed in.
 ','line_number':288,'multiline':True]
['text':'*
 * Combine multiple disposable values into a single {@link IDisposable}.
 ','line_number':332,'multiline':True]
['text':'*
 * Turn a function that implements dispose into an {@link IDisposable}.
 *
 * @param fn Clean up function, guaranteed to be called only **once**.
 ','line_number':341,'multiline':True]
['text':'*
 * Manages a collection of disposable values.
 *
 * This is the preferred way to manage multiple disposables. A `DisposableStore` is safer to work with than an
 * `IDisposable[]` as it considers edge cases, such as registering the same value multiple times or adding an item to a
 * store that has already been disposed of.
 ','line_number':356,'multiline':True]
['text':'*
	 * Dispose of all registered disposables and mark this object as disposed.
	 *
	 * Any future disposables added to this object will be disposed of on `add`.
	 ','line_number':374,'multiline':True]
['text':'*
	 * @return `true` if this object has been disposed of.
	 ','line_number':389,'multiline':True]
['text':'*
	 * Dispose of all registered disposables but do not mark this object as disposed.
	 ','line_number':396,'multiline':True]
['text':'*
	 * Add a new {@link IDisposable disposable} to the collection.
	 ','line_number':411,'multiline':True]
['text':'*
	 * Deletes a disposable from store and disposes of it. This will not throw or warn and proceed to dispose the
	 * disposable even when the disposable is not part in the store.
	 ','line_number':434,'multiline':True]
['text':'*
	 * Deletes the value from the store, but does not dispose it.
	 ','line_number':449,'multiline':True]
['text':'*
 * Abstract base class for a {@link IDisposable disposable} object.
 *
 * Subclasses can {@linkcode _register} disposables that will be automatically cleaned up when this object is disposed of.
 ','line_number':463,'multiline':True]
['text':'*
	 * A disposable that does nothing when it is disposed of.
	 *
	 * TODO: This should not be a static property.
	 ','line_number':470,'multiline':True]
['text':'*
	 * Adds `o` to the collection of disposables managed by this object.
	 ','line_number':490,'multiline':True]
['text':'*
 * Manages the lifecycle of a disposable value that may be changed.
 *
 * This ensures that when the disposable value is changed, the previously held disposable is disposed of. You can
 * also register a `MutableDisposable` on a `Disposable` to ensure it is automatically cleaned up.
 ','line_number':501,'multiline':True]
['text':'*
	 * Resets the stored value and disposed of the previously stored value.
	 ','line_number':531,'multiline':True]
['text':'*
	 * Clears the value, but does not dispose it.
	 * The old value is returned.
	','line_number':545,'multiline':True]
['text':'*
 * Manages the lifecycle of a disposable value that may be changed like {@link MutableDisposable}, but the value must
 * exist and cannot be undefined.
 ','line_number':559,'multiline':True]
['text':'*
 * A safe disposable can be `unset` so that a leaked reference (listener)
 * can be cut-off.
 ','line_number':609,'multiline':True]
['text':'*
 * Unwraps a reference collection of promised values. Makes sure
 * references are disposed whenever promises get rejected.
 ','line_number':671,'multiline':True]
['text':' noop ','line_number':698,'multiline':True]
['text':'*
 * A map the manages the lifecycle of the values that it stores.
 ','line_number':710,'multiline':True]
['text':'*
	 * Disposes of all stored values and mark this object as disposed.
	 *
	 * Trying to use this object after it has been disposed of is an error.
	 ','line_number':722,'multiline':True]
['text':'*
	 * Disposes of all stored values and clear the map, but DO NOT mark this object as disposed.
	 ','line_number':733,'multiline':True]
['text':'*
	 * Delete the value stored for `key` from this map and also dispose of it.
	 ','line_number':772,'multiline':True]
