['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' Returns null if word doesn't match.','line_number':12,'multiline':False]
['text':' Combined filters','line_number':21,'multiline':False]
['text':'*
 * @returns A filter which combines the provided set
 * of filters with an or. The *first* filters that
 * matches defined the return value of the returned
 * filter.
 ','line_number':23,'multiline':True]
['text':' Prefix','line_number':41,'multiline':False]
['text':' Contiguous Substring','line_number':65,'multiline':False]
['text':' Substring','line_number':76,'multiline':False]
['text':' CamelCase','line_number':100,'multiline':False]
['text':' These are chosen as natural word separators based on writen text.','line_number':124,'multiline':False]
['text':' It is a subset of the word separators used by the monaco editor.','line_number':125,'multiline':False]
['text':'*
 * Gets alternative codes to the character code passed in. This comes in the
 * form of an array of character codes, all of which must match _in order_ to
 * successfully match.
 *
 * @param code The character code to check.
 ','line_number':139,'multiline':True]
['text':' NOTE: This function is written in such a way that it can be extended in','line_number':151,'multiline':False]
['text':' the future, but right now the return type takes into account it's only','line_number':152,'multiline':False]
['text':' supported by a single "alt codes provider".','line_number':153,'multiline':False]
['text':' `ArrayLike<ArrayLike<number>>` is a more appropriate type if changed.','line_number':154,'multiline':False]
['text':' Heuristic to avoid computing camel case matcher for words that don't','line_number':216,'multiline':False]
['text':' look like camelCaseWords.','line_number':217,'multiline':False]
['text':' Heuristic to avoid computing camel case matcher for words that don't','line_number':248,'multiline':False]
['text':' look like camel case patterns.','line_number':249,'multiline':False]
['text':' Matches beginning of words supporting non-ASCII languages','line_number':308,'multiline':False]
['text':' If `contiguous` is true then matches word with beginnings of the words in the target. E.g. "pul" will match "Git: Pull"','line_number':309,'multiline':False]
['text':' Otherwise also matches sub string of the word with beginnings of the words in the target. E.g. "gp" or "g p" will match "Git: Pull"','line_number':310,'multiline':False]
['text':' Useful in cases where the target is words (e.g. command labels)','line_number':311,'multiline':False]
['text':' Verify alternate characters before exiting','line_number':342,'multiline':False]
['text':' If the characters don't exactly match, then they must be word separators (see charactersMatch(...)).','line_number':369,'multiline':False]
['text':' We don't want to include this in the matches but we don't want to throw the target out all together so we return `result`.','line_number':370,'multiline':False]
['text':' Verify alternate characters before exiting','line_number':372,'multiline':False]
['text':' Fuzzy','line_number':397,'multiline':False]
['text':' bounded to 10000 elements','line_number':401,'multiline':False]
['text':' return early for invalid input','line_number':405,'multiline':False]
['text':' Form RegExp for wildcard matches','line_number':408,'multiline':False]
['text':' RegExp Filter','line_number':415,'multiline':False]
['text':' Default Filter','line_number':421,'multiline':False]
['text':'*
 * Match pattern against word in a fuzzy way. As in IntelliSense and faster and more
 * powerful than `matchesFuzzy`
 ','line_number':425,'multiline':True]
['text':'#region --- fuzzyScore ---','line_number':445,'multiline':False]
['text':' min word position for a certain pattern position','line_number':487,'multiline':False]
['text':' max word position for a certain pattern position','line_number':488,'multiline':False]
['text':' the length of a contiguous diagonal match','line_number':489,'multiline':False]
['text':' Remember the min word position for each pattern position','line_number':579,'multiline':False]
['text':' pattern must be exhausted','line_number':586,'multiline':False]
['text':'*
 * An array representing a fuzzy match.
 *
 * 0. the score
 * 1. the offset at which matching started
 * 2. `<match_pos_N>`
 * 3. `<match_pos_1>`
 * 4. `<match_pos_0>` etc
 ','line_number':591,'multiline':True]
['text':'*
	 * No matches and value `-100`
	 ','line_number':603,'multiline':True]
['text':' Run a simple check if the characters of pattern occur','line_number':636,'multiline':False]
['text':' (in order) at all in word. If that isn't the case we','line_number':637,'multiline':False]
['text':' stop because no match will be possible','line_number':638,'multiline':False]
['text':' Find the max matching word position for each pattern position','line_number':643,'multiline':False]
['text':' NOTE: the min matching word position was filled in above, in the `isPatternInWord` call','line_number':644,'multiline':False]
['text':' There will be a match, fill in tables','line_number':654,'multiline':False]
['text':' Reduce search space to possible matching word positions and to possible access from next row','line_number':657,'multiline':False]
['text':' penalty for a gap start','line_number':683,'multiline':False]
['text':' penalty for a gap start','line_number':686,'multiline':False]
['text':' always prefer choosing left left to jump over a diagonal because that means a match is earlier in the word','line_number':689,'multiline':False]
['text':' always prefer choosing left since that means a match is earlier in the word','line_number':694,'multiline':False]
['text':' Find the column where we go diagonally up','line_number':725,'multiline':False]
['text':' found the diagonal','line_number':734,'multiline':False]
['text':' Overturn the "forwards" decision if keeping the "backwards" diagonal would give a better match','line_number':739,'multiline':False]
['text':' only if we would have a contiguous match of 3 characters','line_number':741,'multiline':False]
['text':' only if we can do a contiguous match diagonally','line_number':742,'multiline':False]
['text':' only if the forwards chose diagonal is not an uppercase','line_number':743,'multiline':False]
['text':' only if our contiguous match would be longer than the "forwards" contiguous match','line_number':744,'multiline':False]
['text':' this is a contiguous match','line_number':750,'multiline':False]
['text':' remember the last matched column','line_number':757,'multiline':False]
['text':' the word matches the pattern with all characters!','line_number':767,'multiline':False]
['text':' giving the score a total match boost (to come up ahead other words)','line_number':768,'multiline':False]
['text':' Add 1 penalty for each skipped character in the word','line_number':772,'multiline':False]
['text':' common prefix: `foobar <-> foobaz`','line_number':804,'multiline':False]
['text':'                            ^^^^^','line_number':805,'multiline':False]
['text':' hitting upper-case: `foo <-> forOthers`','line_number':809,'multiline':False]
['text':'                              ^^ ^','line_number':810,'multiline':False]
['text':' hitting a separator: `. <-> foo.bar`','line_number':815,'multiline':False]
['text':'                                ^','line_number':816,'multiline':False]
['text':' post separator: `foo <-> bar_foo`','line_number':820,'multiline':False]
['text':'                              ^^^','line_number':821,'multiline':False]
['text':'','line_number':834,'multiline':False]
['text':' first character in pattern','line_number':835,'multiline':False]
['text':' the first pattern character would match a word character that is not at the word start','line_number':837,'multiline':False]
['text':' so introduce a penalty to account for the gap preceding this match','line_number':838,'multiline':False]
['text':' this would be the beginning of a new match (i.e. there would be a gap before this location)','line_number':843,'multiline':False]
['text':' this is part of a contiguous match, so give it a slight bonus, but do so only if it would not be a preferred gap location','line_number':846,'multiline':False]
['text':' we always penalize gaps, but this gives unfair advantages to a match that would match the last character in the word','line_number':852,'multiline':False]
['text':' so pretend there is a gap after the last character in the word to normalize things','line_number':853,'multiline':False]
['text':'#endregion','line_number':860,'multiline':False]
['text':'#region --- graceful ---','line_number':863,'multiline':False]
['text':' when using the original pattern yield a result we`','line_number':877,'multiline':False]
['text':' return it unless we are aggressive and try to find','line_number':878,'multiline':False]
['text':' a better alignment, e.g. `cno` -> `^co^ns^ole` or `^c^o^nsole`.','line_number':879,'multiline':False]
['text':' When the pattern is long enough then try a few (max 7)','line_number':884,'multiline':False]
['text':' permutations of the pattern to find a better match. The','line_number':885,'multiline':False]
['text':' permutations only swap neighbouring characters, e.g','line_number':886,'multiline':False]
['text':' `cnoso` becomes `conso`, `cnsoo`, `cnoos`.','line_number':887,'multiline':False]
['text':' permutation penalty','line_number':894,'multiline':False]
['text':'#endregion','line_number':925,'multiline':False]
