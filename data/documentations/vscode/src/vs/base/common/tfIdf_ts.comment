['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' word ','line_number':8,'multiline':True]
['text':' weight ','line_number':8,'multiline':True]
['text':' word ','line_number':9,'multiline':True]
['text':'occurrences','line_number':9,'multiline':True]
['text':' word ','line_number':10,'multiline':True]
['text':'documentOccurrences','line_number':10,'multiline':True]
['text':'*
	 * An unbounded number.
	 ','line_number':32,'multiline':True]
['text':'*
	 * A number between 0 and 1.
	 ','line_number':40,'multiline':True]
['text':'*
 * Implementation of tf-idf (term frequency-inverse document frequency) for a set of
 * documents where each document contains one or more chunks of text.
 * Each document is identified by a key, and the score for each document is computed
 * by taking the max score over all the chunks in the document.
 ','line_number':46,'multiline':True]
['text':' For each document, generate one score','line_number':57,'multiline':False]
['text':'*
	 * Count how many times each term (word) appears in a string.
	 ','line_number':74,'multiline':True]
['text':'*
	 * Break a string into terms (words).
	 ','line_number':81,'multiline':True]
['text':' Only match on words that are at least 3 characters long and start with a letter','line_number':87,'multiline':False]
['text':' Require at least 3 letters in the parts of a camel case word','line_number':94,'multiline':False]
['text':'*
	 * Total number of chunks
	 ','line_number':103,'multiline':True]
['text':' word ','line_number':108,'multiline':True]
['text':'documentOccurrences','line_number':108,'multiline':True]
['text':' key ','line_number':110,'multiline':True]
['text':' TODO: See if we can compute the tf lazily','line_number':122,'multiline':False]
['text':' The challenge is that we need to also update the `chunkOccurrences`','line_number':123,'multiline':False]
['text':' and all of those updates need to get flushed before the real TF-IDF of','line_number':124,'multiline':False]
['text':' anything is computed.','line_number':125,'multiline':False]
['text':' Update occurrences list','line_number':128,'multiline':False]
['text':' Update term occurrences for the document','line_number':151,'multiline':False]
['text':' Compute the dot product between the chunk's embedding and the query embedding','line_number':168,'multiline':False]
['text':' Note that the chunk embedding is computed lazily on a per-term basis.','line_number':170,'multiline':False]
['text':' This lets us skip a large number of calculations because the majority','line_number':171,'multiline':False]
['text':' of chunks do not share any terms with the query.','line_number':172,'multiline':False]
['text':' Term does not appear in chunk so it has no contribution','line_number':178,'multiline':False]
['text':'*
 * Normalize the scores to be between 0 and 1 and sort them decending.
 * @param scores array of scores from {@link TfIdfCalculator.calculateScores}
 * @returns normalized scores
 ','line_number':218,'multiline':True]
['text':' copy of scores','line_number':225,'multiline':False]
['text':' sort descending','line_number':228,'multiline':False]
['text':' normalize','line_number':231,'multiline':False]
