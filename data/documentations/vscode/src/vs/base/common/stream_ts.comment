['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * The payload that flows in readable stream events.
 ','line_number':10,'multiline':True]
['text':'*
	 * The 'data' event is emitted whenever the stream is
	 * relinquishing ownership of a chunk of data to a consumer.
	 *
	 * NOTE: PLEASE UNDERSTAND THAT ADDING A DATA LISTENER CAN
	 * TURN THE STREAM INTO FLOWING MODE. IT IS THEREFOR THE
	 * LAST LISTENER THAT SHOULD BE ADDED AND NOT THE FIRST
	 *
	 * Use `listenStream` as a helper method to listen to
	 * stream events in the right order.
	 ','line_number':17,'multiline':True]
['text':'*
	 * Emitted when any error occurs.
	 ','line_number':30,'multiline':True]
['text':'*
	 * The 'end' event is emitted when there is no more data
	 * to be consumed from the stream. The 'end' event will
	 * not be emitted unless the data is completely consumed.
	 ','line_number':35,'multiline':True]
['text':'*
 * A interface that emulates the API shape of a node.js readable
 * stream for use in native and web environments.
 ','line_number':43,'multiline':True]
['text':'*
	 * Stops emitting any events until resume() is called.
	 ','line_number':49,'multiline':True]
['text':'*
	 * Starts emitting events again after pause() was called.
	 ','line_number':54,'multiline':True]
['text':'*
	 * Destroys the stream and stops emitting any event.
	 ','line_number':59,'multiline':True]
['text':'*
	 * Allows to remove a listener that was previously added.
	 ','line_number':64,'multiline':True]
['text':'*
 * A interface that emulates the API shape of a node.js readable
 * for use in native and web environments.
 ','line_number':70,'multiline':True]
['text':'*
	 * Read data from the underlying source. Will return
	 * null to indicate that no more data can be read.
	 ','line_number':76,'multiline':True]
['text':'*
 * A interface that emulates the API shape of a node.js writeable
 * stream for use in native and web environments.
 ','line_number':92,'multiline':True]
['text':'*
	 * Writing data to the stream will trigger the on('data')
	 * event listener if the stream is flowing and buffer the
	 * data otherwise until the stream is flowing.
	 *
	 * If a `highWaterMark` is configured and writing to the
	 * stream reaches this mark, a promise will be returned
	 * that should be awaited on before writing more data.
	 * Otherwise there is a risk of buffering a large number
	 * of data chunks without consumer.
	 ','line_number':98,'multiline':True]
['text':'*
	 * Signals an error to the consumer of the stream via the
	 * on('error') handler if the stream is flowing.
	 *
	 * NOTE: call `end` to signal that the stream has ended,
	 * this DOES NOT happen automatically from `error`.
	 ','line_number':111,'multiline':True]
['text':'*
	 * Signals the end of the stream to the consumer. If the
	 * result is provided, will trigger the on('data') event
	 * listener if the stream is flowing and buffer the data
	 * otherwise until the stream is flowing.
	 ','line_number':120,'multiline':True]
['text':'*
 * A stream that has a buffer already read. Returns the original stream
 * that was read as well as the chunks that got read.
 *
 * The `ended` flag indicates if the stream has been fully consumed.
 ','line_number':129,'multiline':True]
['text':'*
	 * The original stream that is being read.
	 ','line_number':137,'multiline':True]
['text':'*
	 * An array of chunks already read from this stream.
	 ','line_number':142,'multiline':True]
['text':'*
	 * Signals if the stream has ended or not. If not, consumers
	 * should continue to read from the stream until consumed.
	 ','line_number':147,'multiline':True]
['text':'*
	 * The number of objects to buffer before WriteableStream#write()
	 * signals back that the buffer is full. Can be used to reduce
	 * the memory pressure when the stream is not flowing.
	 ','line_number':195,'multiline':True]
['text':' emit buffered events','line_number':242,'multiline':False]
['text':' flowing: directly send the data to listeners','line_number':254,'multiline':False]
['text':' not yet flowing: buffer data until flowing','line_number':259,'multiline':False]
['text':' highWaterMark: if configured, signal back when buffer reached limits','line_number':263,'multiline':False]
['text':' flowing: directly send the error to listeners','line_number':275,'multiline':False]
['text':' not yet flowing: buffer errors until flowing','line_number':280,'multiline':False]
['text':' end with data if provided','line_number':291,'multiline':False]
['text':' flowing: send end event to listeners','line_number':296,'multiline':False]
['text':' not yet flowing: remember state','line_number':303,'multiline':False]
['text':' slice to avoid listener mutation from delivering event','line_number':310,'multiline':False]
['text':' nobody listened to this error so we log it as unexpected','line_number':315,'multiline':False]
['text':' slice to avoid listener mutation from delivering event','line_number':317,'multiline':False]
['text':' slice to avoid listener mutation from delivering event','line_number':322,'multiline':False]
['text':' switch into flowing mode as soon as the first 'data'','line_number':337,'multiline':False]
['text':' listener is added and we are not yet in flowing mode','line_number':338,'multiline':False]
['text':' emit 'end' event directly if we are flowing','line_number':346,'multiline':False]
['text':' and the end has already been reached','line_number':347,'multiline':False]
['text':'','line_number':348,'multiline':False]
['text':' finish() when it went through','line_number':349,'multiline':False]
['text':' emit buffered 'error' events unless done already','line_number':359,'multiline':False]
['text':' now that we know that we have at least one listener','line_number':360,'multiline':False]
['text':' When the buffer is empty, resolve all pending writers','line_number':406,'multiline':False]
['text':'*
 * Helper to fully read a T readable into a T.
 ','line_number':450,'multiline':True]
['text':'*
 * Helper to read a T readable up to a maximum of chunks. If the limit is
 * reached, will return a readable instead to ensure all data can still
 * be read.
 ','line_number':464,'multiline':True]
['text':' If the last chunk is null, it means we reached the end of','line_number':477,'multiline':False]
['text':' the readable and return all the data at once','line_number':478,'multiline':False]
['text':' Otherwise, we still have a chunk, it means we reached the maxChunks','line_number':483,'multiline':False]
['text':' value and as such we return a new Readable that first returns','line_number':484,'multiline':False]
['text':' the existing read chunks and then continues with reading from','line_number':485,'multiline':False]
['text':' the underlying readable.','line_number':486,'multiline':False]
['text':' First consume chunks from our array','line_number':490,'multiline':False]
['text':' Then ensure to return our last read chunk','line_number':495,'multiline':False]
['text':' explicitly use undefined here to indicate that we consumed','line_number':499,'multiline':False]
['text':' the chunk, which could have either been null or valued.','line_number':500,'multiline':False]
['text':' Finally delegate back to the Readable','line_number':506,'multiline':False]
['text':'*
 * Helper to fully read a T stream into a T or consuming
 * a stream fully, awaiting all the events without caring
 * about the data.
 ','line_number':512,'multiline':True]
['text':'*
	 * The 'data' event is emitted whenever the stream is
	 * relinquishing ownership of a chunk of data to a consumer.
	 ','line_number':549,'multiline':True]
['text':'*
	 * Emitted when any error occurs.
	 ','line_number':555,'multiline':True]
['text':'*
	 * The 'end' event is emitted when there is no more data
	 * to be consumed from the stream. The 'end' event will
	 * not be emitted unless the data is completely consumed.
	 ','line_number':560,'multiline':True]
['text':'*
 * Helper to listen to all events of a T stream in proper order.
 ','line_number':568,'multiline':True]
['text':' Adding the `data` listener will turn the stream','line_number':585,'multiline':False]
['text':' into flowing mode. As such it is important to','line_number':586,'multiline':False]
['text':' add this listener last (DO NOT CHANGE!)','line_number':587,'multiline':False]
['text':'*
 * Helper to peek up to `maxChunks` into a stream. The return type signals if
 * the stream has ended or not. If not, caller needs to add a `data` listener
 * to continue reading.
 ','line_number':595,'multiline':True]
['text':' Data Listener','line_number':605,'multiline':False]
['text':' Add to buffer','line_number':608,'multiline':False]
['text':' We reached maxChunks and thus need to return','line_number':611,'multiline':False]
['text':' Dispose any listeners and ensure to pause the','line_number':614,'multiline':False]
['text':' stream so that it can be consumed again by caller','line_number':615,'multiline':False]
['text':' Error Listener','line_number':623,'multiline':False]
['text':' End Listener','line_number':630,'multiline':False]
['text':' Important: leave the `data` listener last because','line_number':643,'multiline':False]
['text':' this can turn the stream into flowing mode and we','line_number':644,'multiline':False]
['text':' want `error` events to be received as well.','line_number':645,'multiline':False]
['text':'*
 * Helper to create a readable stream from an existing T.
 ','line_number':651,'multiline':True]
['text':'*
 * Helper to create an empty stream
 ','line_number':662,'multiline':True]
['text':'*
 * Helper to convert a T into a Readable<T>.
 ','line_number':672,'multiline':True]
['text':'*
 * Helper to transform a readable stream into another stream.
 ','line_number':691,'multiline':True]
['text':'*
 * Helper to take an existing readable that will
 * have a prefix injected to the beginning.
 ','line_number':706,'multiline':True]
['text':' Handle prefix only once','line_number':717,'multiline':False]
['text':' If we have also a read-result, make','line_number':721,'multiline':False]
['text':' sure to reduce it to a single result','line_number':722,'multiline':False]
['text':' Otherwise, just return prefix directly','line_number':727,'multiline':False]
['text':'*
 * Helper to take an existing stream that will
 * have a prefix injected to the beginning.
 ','line_number':736,'multiline':True]
['text':' Handle prefix only once','line_number':748,'multiline':False]
['text':' Handle prefix only once','line_number':760,'multiline':False]
