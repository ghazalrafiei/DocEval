['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * Represents an observable value.
 *
 * @template T The type of the values the observable can hold.
 * @template TChange The type used to describe value changes
 * (usually `void` and only used in advanced scenarios).
 * While observers can miss temporary values of an observable,
 * they will receive all change values (as long as they are subscribed)!
 ','line_number':11,'multiline':True]
['text':'*
	 * Returns the current value.
	 *
	 * Calls {@link IObserver.handleChange} if the observable notices that the value changed.
	 * Must not be called from {@link IObserver.handleChange}!
	 ','line_number':21,'multiline':True]
['text':'*
	 * Forces the observable to check for changes and report them.
	 *
	 * Has the same effect as calling {@link IObservable.get}, but does not force the observable
	 * to actually construct the value, e.g. if change deltas are used.
	 * Calls {@link IObserver.handleChange} if the observable notices that the value changed.
	 * Must not be called from {@link IObserver.handleChange}!
	 ','line_number':29,'multiline':True]
['text':'*
	 * Adds the observer to the set of subscribed observers.
	 * This method is idempotent.
	 ','line_number':39,'multiline':True]
['text':'*
	 * Removes the observer from the set of subscribed observers.
	 * This method is idempotent.
	 ','line_number':45,'multiline':True]
['text':'*
	 * Reads the current value and subscribes the reader to this observable.
	 *
	 * Calls {@link IReader.readObservable} if a reader is given, otherwise {@link IObservable.get}
	 * (see {@link ConvenientObservable.read} for the implementation).
	 ','line_number':51,'multiline':True]
['text':'*
	 * Creates a derived observable that depends on this observable.
	 * Use the reader to read other observables
	 * (see {@link ConvenientObservable.map} for the implementation).
	 ','line_number':59,'multiline':True]
['text':'*
	 * Makes sure this value is computed eagerly.
	 ','line_number':67,'multiline':True]
['text':'*
	 * A human-readable name for debugging purposes.
	 ','line_number':72,'multiline':True]
['text':'*
	 * This property captures the type of the change object. Do not use it at runtime!
	 ','line_number':77,'multiline':True]
['text':'*
	 * Reads the value of an observable and subscribes to it.
	 ','line_number':84,'multiline':True]
['text':'*
 * Represents an observer that can be subscribed to an observable.
 *
 * If an observer is subscribed to an observable and that observable didn't signal
 * a change through one of the observer methods, the observer can assume that the
 * observable didn't change.
 * If an observable reported a possible change, {@link IObservable.reportChanges} forces
 * the observable to report an actual change if there was one.
 ','line_number':90,'multiline':True]
['text':'*
	 * Signals that the given observable might have changed and a transaction potentially modifying that observable started.
	 * Before the given observable can call this method again, is must call {@link IObserver.endUpdate}.
	 *
	 * Implementations must not get/read the value of other observables, as they might not have received this event yet!
	 * The method {@link IObservable.reportChanges} can be used to force the observable to report the changes.
	 ','line_number':100,'multiline':True]
['text':'*
	 * Signals that the transaction that potentially modified the given observable ended.
	 * This is a good place to react to (potential) changes.
	 ','line_number':109,'multiline':True]
['text':'*
	 * Signals that the given observable might have changed.
	 * The method {@link IObservable.reportChanges} can be used to force the observable to report the changes.
	 *
	 * Implementations must not get/read the value of other observables, as they might not have received this event yet!
	 * The change should be processed lazily or in {@link IObserver.endUpdate}.
	 ','line_number':115,'multiline':True]
['text':'*
	 * Signals that the given {@link observable} changed.
	 *
	 * Implementations must not get/read the value of other observables, as they might not have received this event yet!
	 * The change should be processed lazily or in {@link IObserver.endUpdate}.
	 *
	 * @param change Indicates how or why the value changed.
	 ','line_number':124,'multiline':True]
['text':'*
	 * Sets the value of the observable.
	 * Use a transaction to batch multiple changes (with a transaction, observers only react at the end of the transaction).
	 *
	 * @param transaction When given, value changes are handled on demand or when the transaction ends.
	 * @param change Describes how or why the value changed.
	 ','line_number':136,'multiline':True]
['text':'*
	 * Calls {@link Observer.beginUpdate} immediately
	 * and {@link Observer.endUpdate} when the transaction ends.
	 ','line_number':147,'multiline':True]
['text':'*
 * @internal
 * This is to allow splitting files.
','line_number':161,'multiline':True]
['text':'* @sealed ','line_number':181,'multiline':True]
['text':'* @sealed ','line_number':190,'multiline':True]
['text':' regexp to match `x => x.y` or `x => x?.y` where x and y can be arbitrary identifiers (uses backref):','line_number':206,'multiline':False]
['text':'*
 * Starts a transaction in which many observables can be changed at once.
 * {@link fn} should start with a JS Doc using `@description` to give the transaction a debug name.
 * Reaction run on demand or when the transaction ends.
 ','line_number':252,'multiline':True]
['text':' During finish, more actions might be added to the transaction.','line_number':278,'multiline':False]
['text':' Which is why we only clear the global transaction after finish.','line_number':279,'multiline':False]
['text':'*
 * Allows to chain transactions.
 ','line_number':294,'multiline':True]
['text':' When this gets called while finish is active, they will still get considered','line_number':320,'multiline':False]
['text':' Prevent anyone from updating observers from now on.','line_number':331,'multiline':False]
['text':' Pattern: /** @description ... */','line_number':424,'multiline':False]
['text':';','line_number':425,'multiline':False]
['text':'*
 * A settable observable.
 ','line_number':431,'multiline':True]
['text':'*
 * Creates an observable value.
 * Observers get informed when the value changes.
 * @template TChange An arbitrary type to describe how or why the value changed. Defaults to `void`.
 * Observers will receive every single change value.
 ','line_number':437,'multiline':True]
['text':'*
 * A disposable observable. When disposed, its value is also disposed.
 * When a new value is set, the previous value is disposed.
 ','line_number':509,'multiline':True]
['text':'*
	 * Returns if this change should cause an invalidation.
	 * Implementations can record changes.
	','line_number':538,'multiline':True]
['text':'*
	 * Returns if the given observable caused the change.
	 ','line_number':549,'multiline':True]
