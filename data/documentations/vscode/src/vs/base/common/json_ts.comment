['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * The scanner object, representing a JSON scanner at a position in the input string.
 ','line_number':36,'multiline':True]
['text':'*
	 * Sets the scan position to a new offset. A call to 'scan' is needed to get the first token.
	 ','line_number':40,'multiline':True]
['text':'*
	 * Read the next token. Returns the token code.
	 ','line_number':44,'multiline':True]
['text':'*
	 * Returns the current scan position, which is after the last read token.
	 ','line_number':48,'multiline':True]
['text':'*
	 * Returns the last read token.
	 ','line_number':52,'multiline':True]
['text':'*
	 * Returns the last read token value. The value for strings is the decoded string content. For numbers its of type number, for boolean it's true or false.
	 ','line_number':56,'multiline':True]
['text':'*
	 * The start offset of the last read token.
	 ','line_number':60,'multiline':True]
['text':'*
	 * The length of the last read token.
	 ','line_number':64,'multiline':True]
['text':'*
	 * An error code of the last scan.
	 ','line_number':68,'multiline':True]
['text':'*
	 * The previous property key or literal value (string, number, boolean or null) or undefined.
	 ','line_number':117,'multiline':True]
['text':'*
	 * The path describing the location in the JSON document. The path consists of a sequence strings
	 * representing an object property or numbers for array indices.
	 ','line_number':121,'multiline':True]
['text':'*
	 * Matches the locations path against a pattern consisting of strings (for properties) and numbers (for array indices).
	 * '*' will match a single segment, of any property name or index.
	 * '**' will match a sequence of segments or no segment, of any property name or index.
	 ','line_number':126,'multiline':True]
['text':'*
	 * If set, the location's offset is at a property key.
	 ','line_number':132,'multiline':True]
['text':'*
	 * Invoked when an open brace is encountered and an object is started. The offset and length represent the location of the open brace.
	 ','line_number':151,'multiline':True]
['text':'*
	 * Invoked when a property is encountered. The offset and length represent the location of the property name.
	 ','line_number':156,'multiline':True]
['text':'*
	 * Invoked when a closing brace is encountered and an object is completed. The offset and length represent the location of the closing brace.
	 ','line_number':161,'multiline':True]
['text':'*
	 * Invoked when an open bracket is encountered. The offset and length represent the location of the open bracket.
	 ','line_number':166,'multiline':True]
['text':'*
	 * Invoked when a closing bracket is encountered. The offset and length represent the location of the closing bracket.
	 ','line_number':171,'multiline':True]
['text':'*
	 * Invoked when a literal value is encountered. The offset and length represent the location of the literal value.
	 ','line_number':176,'multiline':True]
['text':'*
	 * Invoked when a comma or colon separator is encountered. The offset and length represent the location of the separator.
	 ','line_number':181,'multiline':True]
['text':'*
	 * When comments are allowed, invoked when a line or block comment is encountered. The offset and length represent the location of the comment.
	 ','line_number':186,'multiline':True]
['text':'*
	 * Invoked on an error.
	 ','line_number':191,'multiline':True]
['text':'*
 * Creates a JSON scanner on the given text.
 * If ignoreTrivia is set, whitespaces or comments are ignored.
 ','line_number':197,'multiline':True]
['text':' mark as error but continue with string','line_number':357,'multiline':False]
['text':' at the end','line_number':373,'multiline':False]
['text':' trivia: whitespace','line_number':379,'multiline':False]
['text':' trivia: newlines','line_number':390,'multiline':False]
['text':' tokens: []{}:,','line_number':402,'multiline':False]
['text':' strings','line_number':422,'multiline':False]
['text':' comments','line_number':428,'multiline':False]
['text':' Single-line comment','line_number':431,'multiline':False]
['text':' Multi-line comment','line_number':446,'multiline':False]
['text':' For lookahead.','line_number':450,'multiline':False]
['text':' just a single slash','line_number':471,'multiline':False]
['text':' numbers','line_number':476,'multiline':False]
['text':' found a minus, followed by a number so','line_number':483,'multiline':False]
['text':' we fall through to proceed with scanning','line_number':484,'multiline':False]
['text':' numbers','line_number':485,'multiline':False]
['text':' literals and unknown symbols','line_number':498,'multiline':False]
['text':' is a literal? Read the full word.','line_number':500,'multiline':False]
['text':' keywords: true, false, null','line_number':507,'multiline':False]
['text':' some','line_number':515,'multiline':False]
['text':' \n','line_number':579,'multiline':False]
['text':' \r','line_number':580,'multiline':False]
['text':' REVIEW: do we need to support this?  The scanner doesn't, but our IText does.  This seems','line_number':584,'multiline':False]
['text':' like an odd disparity?  (Or maybe it's completely fine for them to be different).','line_number':585,'multiline':False]
['text':' Unicode 3.0 space characters','line_number':588,'multiline':False]
['text':' " "','line_number':589,'multiline':False]
['text':'','line_number':590,'multiline':False]
['text':' &','line_number':676,'multiline':False]
['text':' *','line_number':677,'multiline':False]
['text':' @','line_number':678,'multiline':False]
['text':' \','line_number':679,'multiline':False]
['text':' |','line_number':680,'multiline':False]
['text':' ^','line_number':681,'multiline':False]
['text':' }','line_number':682,'multiline':False]
['text':' ]','line_number':683,'multiline':False]
['text':' )','line_number':684,'multiline':False]
['text':' :','line_number':685,'multiline':False]
['text':' ,','line_number':686,'multiline':False]
['text':' .','line_number':687,'multiline':False]
['text':' "','line_number':688,'multiline':False]
['text':' =','line_number':689,'multiline':False]
['text':' !','line_number':690,'multiline':False]
['text':' >','line_number':691,'multiline':False]
['text':' <','line_number':692,'multiline':False]
['text':' -','line_number':693,'multiline':False]
['text':' {','line_number':694,'multiline':False]
['text':' [','line_number':695,'multiline':False]
['text':' (','line_number':696,'multiline':False]
['text':' %','line_number':697,'multiline':False]
['text':' +','line_number':698,'multiline':False]
['text':' ?','line_number':699,'multiline':False]
['text':' ;','line_number':700,'multiline':False]
['text':' '','line_number':701,'multiline':False]
['text':' /','line_number':702,'multiline':False]
['text':' ~','line_number':703,'multiline':False]
['text':' \b','line_number':705,'multiline':False]
['text':' \f','line_number':706,'multiline':False]
['text':' \t','line_number':708,'multiline':False]
['text':' \v','line_number':709,'multiline':False]
['text':'*
 * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.
 ','line_number':722,'multiline':True]
['text':' strings or numbers','line_number':726,'multiline':False]
['text':' push a placeholder (will be replaced)','line_number':754,'multiline':False]
['text':'*
 * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.
 * Therefore always check the errors list to find out if the input was valid.
 ','line_number':842,'multiline':True]
['text':'*
 * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.
 ','line_number':893,'multiline':True]
['text':' artificial root','line_number':897,'multiline':False]
['text':'*
 * Finds the node at the given path in a JSON DOM.
 ','line_number':958,'multiline':True]
['text':'*
 * Gets the JSON path of the given JSON DOM node
 ','line_number':993,'multiline':True]
['text':'*
 * Evaluates the JavaScript object of the given JSON DOM node
 ','line_number':1013,'multiline':True]
['text':'*
 * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.
 ','line_number':1045,'multiline':True]
['text':'*
 * Parses the given text and invokes the visitor functions for each object, array and literal reached.
 ','line_number':1066,'multiline':True]
['text':' consume colon','line_number':1205,'multiline':False]
['text':' consume open brace','line_number':1218,'multiline':False]
['text':' consume comma','line_number':1227,'multiline':False]
['text':' consume close brace','line_number':1243,'multiline':False]
['text':' consume open bracket','line_number':1250,'multiline':False]
['text':' consume comma','line_number':1259,'multiline':False]
['text':' consume close bracket','line_number':1275,'multiline':False]
['text':'*
 * Takes JSON with JavaScript-style comments and remove
 * them. Optionally replaces every none-newline character
 * of comments with a replaceCharacter
 ','line_number':1311,'multiline':True]
