['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
	 * The position of the first element in the original sequence which
	 * this change affects.
	 ','line_number':34,'multiline':True]
['text':'*
	 * The number of elements from the original sequence which were
	 * affected.
	 ','line_number':40,'multiline':True]
['text':'*
	 * The position of the first element in the modified sequence which
	 * this change affects.
	 ','line_number':46,'multiline':True]
['text':'*
	 * The number of elements from the modified sequence which were
	 * affected (added).
	 ','line_number':52,'multiline':True]
['text':'','line_number':68,'multiline':False]
['text':' The code below has been ported from a C# implementation in VS','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':'*
	 * Copies a range of elements from an Array starting at the specified source index and pastes
	 * them to another Array starting at the specified destination index. The length and the indexes
	 * are specified as 64-bit integers.
	 * sourceArray:
	 *		The Array that contains the data to copy.
	 * sourceIndex:
	 *		A 64-bit integer that represents the index in the sourceArray at which copying begins.
	 * destinationArray:
	 *		The Array that receives the data.
	 * destinationIndex:
	 *		A 64-bit integer that represents the index in the destinationArray at which storing begins.
	 * length:
	 *		A 64-bit integer that represents the number of elements to copy.
	 ','line_number':82,'multiline':True]
['text':'*****************************************************************************','line_number':109,'multiline':False]
['text':' LcsDiff.cs','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':' An implementation of the difference algorithm described in','line_number':112,'multiline':False]
['text':' "An O(ND) Difference Algorithm and its variations" by Eugene W. Myers','line_number':113,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':' Copyright (C) 2008 Microsoft Corporation @minifier_do_not_preserve','line_number':115,'multiline':False]
['text':'*****************************************************************************','line_number':116,'multiline':False]
['text':' Our total memory usage for storing history is (worst-case):','line_number':118,'multiline':False]
['text':' 2 * [(MaxDifferencesHistory + 1) * (MaxDifferencesHistory + 1) - 1] * sizeof(int)','line_number':119,'multiline':False]
['text':' 2 * [1448*1448 - 1] * 4 = 16773624 = 16MB','line_number':120,'multiline':False]
['text':'*
 * A utility class which helps to create the set of DiffChanges from
 * a difference operation. This class accepts original DiffElements and
 * modified DiffElements that are involved in a particular change. The
 * MarkNextChange() method can be called to mark the separation between
 * distinct changes. At the end, the Changes property can be called to retrieve
 * the constructed changes.
 ','line_number':125,'multiline':True]
['text':'*
	 * Constructs a new DiffChangeHelper for the given DiffSequences.
	 ','line_number':141,'multiline':True]
['text':'*
	 * Marks the beginning of the next change in the set of differences.
	 ','line_number':152,'multiline':True]
['text':' Only add to the list if there is something to add','line_number':156,'multiline':False]
['text':' Add the new change to our list','line_number':158,'multiline':False]
['text':' Reset for the next change','line_number':163,'multiline':False]
['text':'*
	 * Adds the original element at the given position to the elements
	 * affected by the current change. The modified index gives context
	 * to the change position with respect to the original sequence.
	 * @param originalIndex The index of the original element to add.
	 * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.
	 ','line_number':170,'multiline':True]
['text':' The 'true' start index is the smallest of the ones we've seen','line_number':178,'multiline':False]
['text':'*
	 * Adds the modified element at the given position to the elements
	 * affected by the current change. The original index gives context
	 * to the change position with respect to the modified sequence.
	 * @param originalIndex The index of the original element that provides corresponding position in the original sequence.
	 * @param modifiedIndex The index of the modified element to add.
	 ','line_number':185,'multiline':True]
['text':' The 'true' start index is the smallest of the ones we've seen','line_number':193,'multiline':False]
['text':'*
	 * Retrieves all of the changes marked by the class.
	 ','line_number':200,'multiline':True]
['text':' Finish up on whatever is left','line_number':205,'multiline':False]
['text':'*
	 * Retrieves all of the changes marked by the class in the reverse order
	 ','line_number':212,'multiline':True]
['text':' Finish up on whatever is left','line_number':217,'multiline':False]
['text':'*
 * An implementation of the difference algorithm described in
 * "An O(ND) Difference Algorithm and its variations" by Eugene W. Myers
 ','line_number':227,'multiline':True]
['text':'*
	 * Constructs the DiffFinder
	 ','line_number':246,'multiline':True]
['text':'*
	 * Computes the differences between the original and modified input
	 * sequences on the bounded range.
	 * @returns An array of the differences between the two input sequences.
	 ','line_number':331,'multiline':True]
['text':' We have to clean up the computed diff to be more intuitive','line_number':341,'multiline':False]
['text':' but it turns out this cannot be done correctly until the entire set','line_number':342,'multiline':False]
['text':' of diffs have been computed','line_number':343,'multiline':False]
['text':'*
	 * Private helper method which computes the differences on the bounded range
	 * recursively.
	 * @returns An array of the differences between the two input sequences.
	 ','line_number':353,'multiline':True]
['text':' Find the start of the differences','line_number':361,'multiline':False]
['text':' Find the end of the differences','line_number':367,'multiline':False]
['text':' In the special case where we either have all insertions or all deletions or the sequences are identical','line_number':373,'multiline':False]
['text':' All insertions','line_number':380,'multiline':False]
['text':' All deletions','line_number':387,'multiline':False]
['text':' Identical sequences - No differences','line_number':395,'multiline':False]
['text':' This problem can be solved using the Divide-And-Conquer technique.','line_number':402,'multiline':False]
['text':' Result is not-null when there was enough memory to compute the changes while','line_number':411,'multiline':False]
['text':' searching for the recursion point','line_number':412,'multiline':False]
['text':' We can break the problem down recursively by finding the changes in the','line_number':415,'multiline':False]
['text':' First Half:   (originalStart, modifiedStart) to (midOriginal, midModified)','line_number':416,'multiline':False]
['text':' Second Half:  (midOriginal + 1, minModified + 1) to (originalEnd, modifiedEnd)','line_number':417,'multiline':False]
['text':' NOTE: ComputeDiff() is inclusive, therefore the second range starts on the next point','line_number':418,'multiline':False]
['text':' We didn't have time to finish the first half, so we don't have time to compute this half.','line_number':426,'multiline':False]
['text':' Consider the entire rest of the sequence different.','line_number':427,'multiline':False]
['text':' If we hit here, we quit early, and so can't return anything meaningful','line_number':436,'multiline':False]
['text':' First, walk backward through the forward diagonals history','line_number':452,'multiline':False]
['text':' Get the diagonal index from the relative diagonal number','line_number':461,'multiline':False]
['text':' Figure out where we came from','line_number':464,'multiline':False]
['text':' Vertical line (the element is an insert)','line_number':466,'multiline':False]
['text':'Setup for the next iteration','line_number':474,'multiline':False]
['text':' Horizontal line (the element is a deletion)','line_number':476,'multiline':False]
['text':'Setup for the next iteration','line_number':484,'multiline':False]
['text':'We stored this in the first spot','line_number':489,'multiline':False]
['text':' Ironically, we get the forward changes as the reverse of the','line_number':495,'multiline':False]
['text':' order we added them since we technically added them backwards','line_number':496,'multiline':False]
['text':' TODO: Calculate a partial from the reverse diagonals.','line_number':500,'multiline':False]
['text':'       For now, just assume everything after the midOriginal/midModified point is a diff','line_number':501,'multiline':False]
['text':' Now walk backward through the reverse diagonals history','line_number':517,'multiline':False]
['text':' Get the diagonal index from the relative diagonal number','line_number':526,'multiline':False]
['text':' Figure out where we came from','line_number':529,'multiline':False]
['text':' Horizontal line (the element is a deletion))','line_number':531,'multiline':False]
['text':'Setup for the next iteration','line_number':539,'multiline':False]
['text':' Vertical line (the element is an insertion)','line_number':541,'multiline':False]
['text':'Setup for the next iteration','line_number':549,'multiline':False]
['text':'We stored this in the first spot','line_number':554,'multiline':False]
['text':' There are cases where the reverse history will find diffs that','line_number':560,'multiline':False]
['text':' are correct, but not intuitive, so we need shift them.','line_number':561,'multiline':False]
['text':'*
	 * Given the range to compute the diff on, this method finds the point:
	 * (midOriginal, midModified)
	 * that exists in the middle of the LCS of the two sequences and
	 * is the point at which the LCS problem may be broken down recursively.
	 * This method will try to keep the LCS trace in memory. If the LCS recursion
	 * point is calculated and the full trace is available in memory, then this method
	 * will return the change list.
	 * @param originalStart The start bound of the original sequence range
	 * @param originalEnd The end bound of the original sequence range
	 * @param modifiedStart The start bound of the modified sequence range
	 * @param modifiedEnd The end bound of the modified sequence range
	 * @param midOriginal The middle point of the original sequence range
	 * @param midModified The middle point of the modified sequence range
	 * @returns The diff changes, if available, otherwise null
	 ','line_number':568,'multiline':True]
['text':' To traverse the edit graph and produce the proper LCS, our actual','line_number':589,'multiline':False]
['text':' start position is just outside the given boundary','line_number':590,'multiline':False]
['text':' We set these up to make the compiler happy, but they will','line_number':594,'multiline':False]
['text':' be replaced before we return with the actual recursion point','line_number':595,'multiline':False]
['text':' Clear out the history','line_number':599,'multiline':False]
['text':' Each cell in the two arrays corresponds to a diagonal in the edit graph.','line_number':603,'multiline':False]
['text':' The integer value in the cell represents the originalIndex of the furthest','line_number':604,'multiline':False]
['text':' reaching point found so far that ends in that diagonal.','line_number':605,'multiline':False]
['text':' The modifiedIndex can be computed mathematically from the originalIndex and the diagonal number.','line_number':606,'multiline':False]
['text':' diagonalForwardBase: Index into forwardPoints of the diagonal which passes through (originalStart, modifiedStart)','line_number':611,'multiline':False]
['text':' diagonalReverseBase: Index into reversePoints of the diagonal which passes through (originalEnd, modifiedEnd)','line_number':612,'multiline':False]
['text':' diagonalForwardOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the','line_number':615,'multiline':False]
['text':'    diagonal number (relative to diagonalForwardBase)','line_number':616,'multiline':False]
['text':' diagonalReverseOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the','line_number':617,'multiline':False]
['text':'    diagonal number (relative to diagonalReverseBase)','line_number':618,'multiline':False]
['text':' delta: The difference between the end diagonal and the start diagonal. This is used to relate diagonal numbers','line_number':622,'multiline':False]
['text':'   relative to the start diagonal with diagonal numbers relative to the end diagonal.','line_number':623,'multiline':False]
['text':' The Even/Oddn-ness of this delta is important for determining when we should check for overlap','line_number':624,'multiline':False]
['text':' Here we set up the start and end points as the furthest points found so far','line_number':628,'multiline':False]
['text':' in both the forward and reverse directions, respectively','line_number':629,'multiline':False]
['text':' Remember if we quit early, and thus need to do a best-effort result instead of a real result.','line_number':633,'multiline':False]
['text':' A couple of points:','line_number':638,'multiline':False]
['text':' --With this method, we iterate on the number of differences between the two sequences.','line_number':639,'multiline':False]
['text':'   The more differences there actually are, the longer this will take.','line_number':640,'multiline':False]
['text':' --Also, as the number of differences increases, we have to search on diagonals further','line_number':641,'multiline':False]
['text':'   away from the reference diagonal (which is diagonalForwardBase for forward, diagonalReverseBase for reverse).','line_number':642,'multiline':False]
['text':' --We extend on even diagonals (relative to the reference diagonal) only when numDifferences','line_number':643,'multiline':False]
['text':'   is even and odd diagonals only when numDifferences is odd.','line_number':644,'multiline':False]
['text':' Run the algorithm in the forward direction','line_number':649,'multiline':False]
['text':' STEP 1: We extend the furthest reaching point in the present diagonal','line_number':653,'multiline':False]
['text':' by looking at the diagonals above and below and picking the one whose point','line_number':654,'multiline':False]
['text':' is further away from the start point (originalStart, modifiedStart)','line_number':655,'multiline':False]
['text':' Save the current originalIndex so we can test for false overlap in step 3','line_number':663,'multiline':False]
['text':' STEP 2: We can continue to extend the furthest reaching point in the present diagonal','line_number':666,'multiline':False]
['text':' so long as the elements are equal.','line_number':667,'multiline':False]
['text':' STEP 3: If delta is odd (overlap first happens on forward when delta is odd)','line_number':679,'multiline':False]
['text':' and diagonal is in the range of reverse diagonals computed for numDifferences-1','line_number':680,'multiline':False]
['text':' (the previous iteration; we haven't computed reverse diagonals for numDifferences yet)','line_number':681,'multiline':False]
['text':' then check for overlap.','line_number':682,'multiline':False]
['text':' BINGO! We overlapped, and we have the full trace in memory!','line_number':689,'multiline':False]
['text':' Either false overlap, or we didn't have enough memory for the full trace','line_number':698,'multiline':False]
['text':' Just return the recursion point','line_number':699,'multiline':False]
['text':' Check to see if we should be quitting early, before moving on to the next iteration.','line_number':706,'multiline':False]
['text':' We can't finish, so skip ahead to generating a result from what we have.','line_number':710,'multiline':False]
['text':' Use the furthest distance we got in the forward direction.','line_number':713,'multiline':False]
['text':' Enough of the history is in memory to walk it backwards','line_number':718,'multiline':False]
['text':' We didn't actually remember enough of the history.','line_number':727,'multiline':False]
['text':'Since we are quitting the diff early, we need to shift back the originalStart and modified start','line_number':729,'multiline':False]
['text':'back into the boundary limits since we decremented their value above beyond the boundary limit.','line_number':730,'multiline':False]
['text':' Run the algorithm in the reverse direction','line_number':741,'multiline':False]
['text':' STEP 1: We extend the furthest reaching point in the present diagonal','line_number':745,'multiline':False]
['text':' by looking at the diagonals above and below and picking the one whose point','line_number':746,'multiline':False]
['text':' is further away from the start point (originalEnd, modifiedEnd)','line_number':747,'multiline':False]
['text':' Save the current originalIndex so we can test for false overlap','line_number':755,'multiline':False]
['text':' STEP 2: We can continue to extend the furthest reaching point in the present diagonal','line_number':758,'multiline':False]
['text':' as long as the elements are equal.','line_number':759,'multiline':False]
['text':' STEP 4: If delta is even (overlap first happens on reverse when delta is even)','line_number':766,'multiline':False]
['text':' and diagonal is in the range of forward diagonals computed for numDifferences','line_number':767,'multiline':False]
['text':' then check for overlap.','line_number':768,'multiline':False]
['text':' BINGO! We overlapped, and we have the full trace in memory!','line_number':775,'multiline':False]
['text':' Either false overlap, or we didn't have enough memory for the full trace','line_number':784,'multiline':False]
['text':' Just return the recursion point','line_number':785,'multiline':False]
['text':' Save current vectors to history before the next iteration','line_number':792,'multiline':False]
['text':' We are allocating space for one extra int, which we fill with','line_number':794,'multiline':False]
['text':' the index of the diagonal base index','line_number':795,'multiline':False]
['text':' If we got here, then we have the full trace in history. We just have to convert it to a change list','line_number':809,'multiline':False]
['text':' NOTE: This part is a bit messy','line_number':810,'multiline':False]
['text':'*
	 * Shifts the given changes to provide a more intuitive diff.
	 * While the first element in a diff matches the first element after the diff,
	 * we shift the diff down.
	 *
	 * @param changes The list of changes to shift
	 * @returns The shifted changes
	 ','line_number':820,'multiline':True]
['text':' Shift all the changes down first','line_number':830,'multiline':False]
['text':' moving the change down would create an equal change, but the elements are not strict equal','line_number':847,'multiline':False]
['text':' Shift changes back up until we hit empty or whitespace-only lines','line_number':863,'multiline':False]
['text':' There could be multiple longest common substrings.','line_number':921,'multiline':False]
['text':' Give preference to the ones containing longer lines','line_number':922,'multiline':False]
['text':' Avoid wasting a lot of time with these searches','line_number':934,'multiline':False]
['text':' switch to another sequence that has a better score','line_number':944,'multiline':False]
['text':'*
	 * Concatenates the two input DiffChange lists and returns the resulting
	 * list.
	 * @param The left changes
	 * @param The right changes
	 * @returns The concatenated list
	 ','line_number':1042,'multiline':True]
['text':' Since we break the problem down recursively, it is possible that we','line_number':1055,'multiline':False]
['text':' might recurse in the middle of a change thereby splitting it into','line_number':1056,'multiline':False]
['text':' two changes. Here in the combining stage, we detect and fuse those','line_number':1057,'multiline':False]
['text':' changes back together','line_number':1058,'multiline':False]
['text':'*
	 * Returns true if the two changes overlap and can be merged into a single
	 * change
	 * @param left The left change
	 * @param right The right change
	 * @param mergedChange The merged change if the two overlap, null otherwise
	 * @returns True if the two changes overlap
	 ','line_number':1074,'multiline':True]
['text':'*
	 * Helper method used to clip a diagonal index to the range of valid
	 * diagonals. This also decides whether or not the diagonal index,
	 * if it exceeds the boundary, should be clipped to the boundary or clipped
	 * one inside the boundary depending on the Even/Odd status of the boundary
	 * and numDifferences.
	 * @param diagonal The index of the diagonal to clip.
	 * @param numDifferences The current number of differences being iterated upon.
	 * @param diagonalBaseIndex The base reference diagonal.
	 * @param numDiagonals The total number of diagonals.
	 * @returns The clipped diagonal index.
	 ','line_number':1107,'multiline':True]
['text':' Nothing to clip, its in range','line_number':1121,'multiline':False]
['text':' diagonalsBelow: The number of diagonals below the reference diagonal','line_number':1125,'multiline':False]
['text':' diagonalsAbove: The number of diagonals above the reference diagonal','line_number':1126,'multiline':False]
