['text':'! @license DOMPurify 3.0.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.0.5/LICENSE ','line_number':1,'multiline':True]
['text':' eslint-disable-line import/no-mutable-exports','line_number':14,'multiline':False]
['text':' Add properties to a lookup table ','line_number':74,'multiline':True]
['text':' Make 'in' and truthy checks like Boolean(set.constructor)','line_number':82,'multiline':False]
['text':' independent of any properties defined on Object.prototype.','line_number':83,'multiline':False]
['text':' Prevent prototype setters from intercepting set as a this value.','line_number':84,'multiline':False]
['text':' Config presets (e.g. tags.js, attrs.js) are immutable.','line_number':97,'multiline':False]
['text':' Shallow clone an object ','line_number':111,'multiline':True]
['text':' This method automatically checks if the prop is function
 * or getter and behaves accordingly. ','line_number':122,'multiline':True]
['text':' SVG','line_number':150,'multiline':False]
['text':' List of SVG elements that are disallowed by default.','line_number':153,'multiline':False]
['text':' We still need to know them so that we can do namespace','line_number':154,'multiline':False]
['text':' checks properly in case one wants to add them to','line_number':155,'multiline':False]
['text':' allow-list.','line_number':156,'multiline':False]
['text':' Similarly to SVG, we want to know all MathML elements,','line_number':159,'multiline':False]
['text':' even those that we disallow by default.','line_number':160,'multiline':False]
['text':' Specify template detection regex for SAFE_FOR_TEMPLATES mode','line_number':170,'multiline':False]
['text':' eslint-disable-line no-useless-escape','line_number':174,'multiline':False]
['text':' eslint-disable-line no-useless-escape','line_number':176,'multiline':False]
['text':' eslint-disable-line no-useless-escape','line_number':178,'multiline':False]
['text':' eslint-disable-line no-control-regex','line_number':181,'multiline':False]
['text':'#__PURE__','line_number':185,'multiline':True]
['text':'*
 * Creates a no-op policy for internal use only.
 * Don't export this function outside this module!
 * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
 * @param {HTMLScriptElement} purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).
 * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
 * are not supported or creating the policy failed).
 ','line_number':199,'multiline':True]
['text':' Allow the callers to control the unique policy name','line_number':212,'multiline':False]
['text':' by adding a data-tt-policy-suffix to the script element with the DOMPurify.','line_number':213,'multiline':False]
['text':' Policy creation with duplicate names throws in Trusted Types.','line_number':214,'multiline':False]
['text':' Policy creation failed (most likely another DOMPurify script has','line_number':238,'multiline':False]
['text':' already run). Skip creating the policy, as this will only cause errors','line_number':239,'multiline':False]
['text':' if TT are enforced.','line_number':240,'multiline':False]
['text':'*
	 * Version label, exposed for easier checks
	 * if DOMPurify is up to date or not
	 ','line_number':250,'multiline':True]
['text':'*
	 * Array of elements that DOMPurify removed during sanitation.
	 * Empty if nothing was removed.
	 ','line_number':257,'multiline':True]
['text':' Not running in a browser, provide a factory function','line_number':265,'multiline':False]
['text':' so that you can pass your own Window','line_number':266,'multiline':False]
['text':' As per issue #47, the web-components registry is inherited by a','line_number':291,'multiline':False]
['text':' new document created via createHTMLDocument. As per the spec','line_number':292,'multiline':False]
['text':' (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)','line_number':293,'multiline':False]
['text':' a new empty registry is used when creating a template contents owner','line_number':294,'multiline':False]
['text':' document, so we use that as our parent document to ensure nothing','line_number':295,'multiline':False]
['text':' is inherited.','line_number':296,'multiline':False]
['text':'*
	 * Expose whether this browser supports running the full DOMPurify.
	 ','line_number':318,'multiline':True]
['text':'*
	 * We consider the elements and attributes below to be safe. Ideally
	 * don't add any new ones but feel free to remove unwanted ones.
	 ','line_number':335,'multiline':True]
['text':' allowed element names ','line_number':340,'multiline':True]
['text':' Allowed attribute names ','line_number':344,'multiline':True]
['text':'
	 * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.
	 * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
	 * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
	 * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
	 ','line_number':348,'multiline':True]
['text':' Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) ','line_number':375,'multiline':True]
['text':' Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) ','line_number':378,'multiline':True]
['text':' Decide if ARIA attributes are okay ','line_number':381,'multiline':True]
['text':' Decide if custom data attributes are okay ','line_number':384,'multiline':True]
['text':' Decide if unknown protocols are okay ','line_number':387,'multiline':True]
['text':' Decide if self-closing tags in attributes are allowed.
	 * Usually removed due to a mXSS issue in jQuery 3.0 ','line_number':390,'multiline':True]
['text':' Output should be safe for common template engines.
	 * This means, DOMPurify removes data attributes, mustaches and ERB
	 ','line_number':394,'multiline':True]
['text':' Decide if document with <html>... should be returned ','line_number':399,'multiline':True]
['text':' Track whether config is already set on this instance of DOMPurify. ','line_number':402,'multiline':True]
['text':' Decide if all elements (e.g. style, script) must be children of
	 * document.body. By default, browsers might move them to document.head ','line_number':405,'multiline':True]
['text':' Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
	 * string (or a TrustedHTML object if Trusted Types are supported).
	 * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
	 ','line_number':409,'multiline':True]
['text':' Decide if a DOM `DocumentFragment` should be returned, instead of a html
	 * string  (or a TrustedHTML object if Trusted Types are supported) ','line_number':415,'multiline':True]
['text':' Try to return a Trusted Type object instead of a string, return a string in
	 * case Trusted Types are not supported  ','line_number':419,'multiline':True]
['text':' Output should be free from DOM clobbering attacks?
	 * This sanitizes markups named with colliding, clobberable built-in DOM APIs.
	 ','line_number':423,'multiline':True]
['text':' Achieve full DOM Clobbering protection by isolating the namespace of named
	 * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.
	 *
	 * HTML/DOM spec rules that enable DOM Clobbering:
	 *   - Named Access on Window (§7.3.3)
	 *   - DOM Tree Accessors (§3.1.5)
	 *   - Form Element Parent-Child Relations (§4.10.3)
	 *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)
	 *   - HTMLCollection (§4.2.10.2)
	 *
	 * Namespace isolation is implemented by prefixing `id` and `name` attributes
	 * with a constant string, i.e., `user-content-`
	 ','line_number':428,'multiline':True]
['text':' Keep element content when removing element? ','line_number':444,'multiline':True]
['text':' If a `Node` is passed to sanitize(), then performs sanitization in-place instead
	 * of importing it into a new Document and returning a sanitized copy ','line_number':447,'multiline':True]
['text':' Allow usage of profiles like html, svg and mathMl ','line_number':451,'multiline':True]
['text':' Tags to ignore content of when KEEP_CONTENT is true ','line_number':454,'multiline':True]
['text':' Tags that are safe for data: URIs ','line_number':458,'multiline':True]
['text':' Attributes safe for values like "javascript:" ','line_number':462,'multiline':True]
['text':' Document namespace ','line_number':469,'multiline':True]
['text':' Allowed XHTML+XML namespaces ','line_number':473,'multiline':True]
['text':' Parsing of strict XHTML documents ','line_number':477,'multiline':True]
['text':' Keep a reference to config to pass to hooks ','line_number':483,'multiline':True]
['text':' Ideally, do not touch anything below this line ','line_number':486,'multiline':True]
['text':' ______________________________________________ ','line_number':488,'multiline':True]
['text':'*
	 * _parseConfig
	 *
	 * @param  {Object} cfg optional config literal
	 ','line_number':495,'multiline':True]
['text':' eslint-disable-next-line complexity','line_number':500,'multiline':False]
['text':' Shield configuration object from tampering ','line_number':507,'multiline':True]
['text':' Shield configuration object from prototype pollution ','line_number':513,'multiline':True]
['text':' eslint-disable-next-line unicorn/prefer-includes','line_number':517,'multiline':False]
['text':' HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.','line_number':518,'multiline':False]
['text':' Set configuration parameters ','line_number':521,'multiline':True]
['text':' eslint-disable-line indent','line_number':526,'multiline':False]
['text':' eslint-disable-line indent','line_number':527,'multiline':False]
['text':' eslint-disable-line indent','line_number':528,'multiline':False]
['text':' eslint-disable-line indent','line_number':529,'multiline':False]
['text':' eslint-disable-line indent','line_number':531,'multiline':False]
['text':' eslint-disable-line indent','line_number':532,'multiline':False]
['text':' eslint-disable-line indent','line_number':533,'multiline':False]
['text':' eslint-disable-line indent','line_number':534,'multiline':False]
['text':' Default true','line_number':540,'multiline':False]
['text':' Default true','line_number':542,'multiline':False]
['text':' Default false','line_number':544,'multiline':False]
['text':' Default true','line_number':546,'multiline':False]
['text':' Default false','line_number':548,'multiline':False]
['text':' Default false','line_number':550,'multiline':False]
['text':' Default false','line_number':552,'multiline':False]
['text':' Default false','line_number':554,'multiline':False]
['text':' Default false','line_number':556,'multiline':False]
['text':' Default false','line_number':558,'multiline':False]
['text':' Default true','line_number':560,'multiline':False]
['text':' Default false','line_number':562,'multiline':False]
['text':' Default true','line_number':564,'multiline':False]
['text':' Default false','line_number':566,'multiline':False]
['text':' Parse profile info ','line_number':591,'multiline':True]
['text':' Merge configuration parameters ','line_number':621,'multiline':True]
['text':' Add #text in case KEEP_CONTENT is set to true ','line_number':651,'multiline':True]
['text':' Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true ','line_number':657,'multiline':True]
['text':' Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 ','line_number':663,'multiline':True]
['text':' Overwrite existing TrustedTypes policy.','line_number':678,'multiline':False]
['text':' Sign local variables required by `sanitize`.','line_number':681,'multiline':False]
['text':' Uninitialized policy, attempt to initialize the internal dompurify policy.','line_number':685,'multiline':False]
['text':' If creating the internal policy succeeded sign internal variables.','line_number':688,'multiline':False]
['text':' Prevent further manipulation of configuration.','line_number':694,'multiline':False]
['text':' Not available in IE8, Safari 5, etc.','line_number':695,'multiline':False]
['text':' Certain elements are allowed in both SVG and HTML','line_number':706,'multiline':False]
['text':' namespace. We need to specify them explicitly','line_number':707,'multiline':False]
['text':' so that they don't get erroneously deleted from','line_number':708,'multiline':False]
['text':' HTML namespace.','line_number':709,'multiline':False]
['text':' Keep track of all possible SVG and MathML tags
	 * so that we can perform the namespace checks
	 * correctly. ','line_number':712,'multiline':True]
['text':'*
	 *
	 *
	 * @param  {Element} element a DOM element whose namespace is being checked
	 * @returns {boolean} Return false if the element has a
	 *  namespace that a spec-compliant parser would never
	 *  return. Return true otherwise.
	 ','line_number':721,'multiline':True]
['text':' In JSDOM, if we're inside shadow DOM, then parentNode','line_number':731,'multiline':False]
['text':' can be null. We just simulate parent in this case.','line_number':732,'multiline':False]
['text':' The only way to switch from HTML namespace to SVG','line_number':749,'multiline':False]
['text':' is via <svg>. If it happens via any other tag, then','line_number':750,'multiline':False]
['text':' it should be killed.','line_number':751,'multiline':False]
['text':' The only way to switch from MathML to SVG is via`','line_number':754,'multiline':False]
['text':' svg if parent is either <annotation-xml> or MathML','line_number':755,'multiline':False]
['text':' text integration points.','line_number':756,'multiline':False]
['text':' We only allow elements that are defined in SVG','line_number':761,'multiline':False]
['text':' spec. All others are disallowed in SVG namespace.','line_number':762,'multiline':False]
['text':' The only way to switch from HTML namespace to MathML','line_number':769,'multiline':False]
['text':' is via <math>. If it happens via any other tag, then','line_number':770,'multiline':False]
['text':' it should be killed.','line_number':771,'multiline':False]
['text':' The only way to switch from SVG to MathML is via','line_number':774,'multiline':False]
['text':' <math> and HTML integration points','line_number':775,'multiline':False]
['text':' We only allow elements that are defined in MathML','line_number':780,'multiline':False]
['text':' spec. All others are disallowed in MathML namespace.','line_number':781,'multiline':False]
['text':' The only way to switch from SVG to HTML is via','line_number':788,'multiline':False]
['text':' HTML integration points, and from MathML to HTML','line_number':789,'multiline':False]
['text':' is via MathML text integration points','line_number':790,'multiline':False]
['text':' We disallow tags that are specific for MathML','line_number':797,'multiline':False]
['text':' or SVG and should never appear in HTML namespace','line_number':798,'multiline':False]
['text':' For XHTML and XML documents that support custom namespaces','line_number':802,'multiline':False]
['text':' The code should never reach this place (this means','line_number':807,'multiline':False]
['text':' that the element somehow got namespace that is not','line_number':808,'multiline':False]
['text':' HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).','line_number':809,'multiline':False]
['text':' Return false just in case.','line_number':810,'multiline':False]
['text':'*
	 * _forceRemove
	 *
	 * @param  {Node} node a DOM node
	 ','line_number':815,'multiline':True]
['text':' eslint-disable-next-line unicorn/prefer-dom-node-remove','line_number':828,'multiline':False]
['text':'*
	 * _removeAttribute
	 *
	 * @param  {String} name an Attribute name
	 * @param  {Node} node a DOM node
	 ','line_number':834,'multiline':True]
['text':' We void attribute values for unremovable "is"" attributes','line_number':855,'multiline':False]
['text':'*
	 * _initDocument
	 *
	 * @param  {String} dirty a string of dirty markup
	 * @return {Document} a DOM, filled with the dirty markup
	 ','line_number':869,'multiline':True]
['text':' Create a HTML document ','line_number':878,'multiline':True]
['text':' If FORCE_BODY isn't used, leading whitespace needs to be preserved manually ','line_number':885,'multiline':True]
['text':' Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)','line_number':891,'multiline':False]
['text':'
		 * Use the DOMParser API by default, fallback later if needs be
		 * DOMParser not work for svg when has multiple root element.
		 ','line_number':896,'multiline':True]
['text':' Use createHTMLDocument in case DOMParser is not available ','line_number':906,'multiline':True]
['text':' Syntax error if dirtyPayload is invalid xml','line_number':914,'multiline':False]
['text':' Work on whole document or just its body ','line_number':923,'multiline':True]
['text':'*
	 * _createIterator
	 *
	 * @param  {Document} root document/fragment to create iterator for
	 * @return {Iterator} iterator instance
	 ','line_number':932,'multiline':True]
['text':' eslint-disable-next-line no-bitwise','line_number':941,'multiline':False]
['text':'*
	 * _isClobbered
	 *
	 * @param  {Node} elm element to check for clobbering attacks
	 * @return {Boolean} true if clobbered, false if safe
	 ','line_number':944,'multiline':True]
['text':'*
	 * _isNode
	 *
	 * @param  {Node} obj object to check whether it's a DOM node
	 * @return {Boolean} true is object is a DOM node
	 ','line_number':955,'multiline':True]
['text':'*
	 * _executeHook
	 * Execute user configurable hooks
	 *
	 * @param  {String} entryPoint  Name of the hook's entry point
	 * @param  {Node} currentNode node to work on with the hook
	 * @param  {Object} data additional hook parameters
	 ','line_number':966,'multiline':True]
['text':'*
	 * _sanitizeElements
	 *
	 * @protect nodeName
	 * @protect textContent
	 * @protect removeChild
	 *
	 * @param   {Node} currentNode to check for permission to exist
	 * @return  {Boolean} true if node was killed, false if left alive
	 ','line_number':985,'multiline':True]
['text':' Execute a hook if present ','line_number':999,'multiline':True]
['text':' Check if element is clobbered or can clobber ','line_number':1002,'multiline':True]
['text':' Now let's check the element's type and name ','line_number':1010,'multiline':True]
['text':' Execute a hook if present ','line_number':1014,'multiline':True]
['text':' Detect mXSS attempts abusing namespace confusion ','line_number':1020,'multiline':True]
['text':' Remove element if anything forbids its presence ','line_number':1028,'multiline':True]
['text':' Check if we have a custom element to handle ','line_number':1032,'multiline':True]
['text':' Keep content except for bad-listed elements ','line_number':1037,'multiline':True]
['text':' Check whether element has a valid namespace ','line_number':1057,'multiline':True]
['text':' Make sure that older browsers don't get fallback-tag mXSS ','line_number':1065,'multiline':True]
['text':' Sanitize element content to be template-safe ','line_number':1073,'multiline':True]
['text':' Get the element's text content ','line_number':1077,'multiline':True]
['text':' Execute a hook if present ','line_number':1090,'multiline':True]
['text':'*
	 * _isValidAttribute
	 *
	 * @param  {string} lcTag Lowercase tag name of containing element.
	 * @param  {string} lcName Lowercase attribute name.
	 * @param  {string} value Attribute value.
	 * @return {Boolean} Returns true if `value` is valid, otherwise false.
	 ','line_number':1097,'multiline':True]
['text':' eslint-disable-next-line complexity','line_number':1105,'multiline':False]
['text':' Make sure attribute cannot clobber ','line_number':1109,'multiline':True]
['text':' Allow valid data-* attributes: At least one character after "-"
				(https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
				XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
				We don't need to check the value; it's always URI safe. ','line_number':1113,'multiline':True]
['text':' First condition does a very basic check if a) it's basically a valid custom element tagname AND','line_number':1120,'multiline':False]
['text':' b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck','line_number':1121,'multiline':False]
['text':' and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck','line_number':1122,'multiline':False]
['text':' Alternative, second condition checks if it's an `is`-attribute, AND','line_number':1123,'multiline':False]
['text':' the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck','line_number':1124,'multiline':False]
['text':' Check value is safe. First, is attr inert? If so, is safe ','line_number':1128,'multiline':True]
['text':'*
	 * _basicCustomElementCheck
	 * checks if at least one dash is included in tagName, and it's not the first char
	 * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
	 * @param {string} tagName name of the tag of the node to sanitize
	 ','line_number':1136,'multiline':True]
['text':'*
	 * _sanitizeAttributes
	 *
	 * @protect attributes
	 * @protect nodeName
	 * @protect removeAttribute
	 * @protect setAttribute
	 *
	 * @param  {Node} currentNode to sanitize
	 ','line_number':1147,'multiline':True]
['text':' Execute a hook if present ','line_number':1164,'multiline':True]
['text':' Check if we have attributes; if not we might have a text node ','line_number':1171,'multiline':True]
['text':' Go backwards over all attributes; safely remove bad ones ','line_number':1184,'multiline':True]
['text':' Execute a hook if present ','line_number':1194,'multiline':True]
['text':' Allows developers to see this is a property they can set','line_number':1199,'multiline':False]
['text':' Did the hooks approve of the attribute? ','line_number':1204,'multiline':True]
['text':' Remove attribute ','line_number':1209,'multiline':True]
['text':' Did the hooks approve of the attribute? ','line_number':1213,'multiline':True]
['text':' Work around a security issue in jQuery 3.0 ','line_number':1219,'multiline':True]
['text':' Sanitize attribute content to be template-safe ','line_number':1227,'multiline':True]
['text':' Is `value` valid for this attribute? ','line_number':1235,'multiline':True]
['text':' Full DOM Clobbering protection via namespace isolation,
			 * Prefix id and name attributes with `user-content-`
			 ','line_number':1243,'multiline':True]
['text':' Remove the attribute with this value','line_number':1249,'multiline':False]
['text':' Prefix the value and later re-create the attribute with the sanitized value','line_number':1250,'multiline':False]
['text':' Handle attributes that require Trusted Types ','line_number':1255,'multiline':True]
['text':' Handle invalid data-* attribute set by try-catching it ','line_number':1275,'multiline':True]
['text':' Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". ','line_number':1282,'multiline':True]
['text':' Execute a hook if present ','line_number':1289,'multiline':True]
['text':'*
	 * _sanitizeShadowDOM
	 *
	 * @param  {DocumentFragment} fragment to iterate over recursively
	 ','line_number':1294,'multiline':True]
['text':' Execute a hook if present ','line_number':1305,'multiline':True]
['text':' Execute a hook if present ','line_number':1311,'multiline':True]
['text':' Sanitize tags and elements ','line_number':1313,'multiline':True]
['text':' Deep shadow DOM detected ','line_number':1319,'multiline':True]
['text':' Check attributes, sanitize if necessary ','line_number':1325,'multiline':True]
['text':' Execute a hook if present ','line_number':1330,'multiline':True]
['text':'*
	 * Sanitize
	 * Public method providing core sanitation functionality
	 *
	 * @param {String|Node} dirty string or DOM node
	 * @param {Object} configuration object
	 ','line_number':1335,'multiline':True]
['text':' eslint-disable-next-line complexity','line_number':1342,'multiline':False]
['text':' Make sure we have a string to sanitize.
			DO NOT return early, as this will return the wrong type if
			the user has requested a DOM object rather than a string ','line_number':1351,'multiline':True]
['text':' Stringify, in case dirty is an object ','line_number':1360,'multiline':True]
['text':' Return dirty HTML if DOMPurify cannot run ','line_number':1374,'multiline':True]
['text':' Assign config vars ','line_number':1380,'multiline':True]
['text':' Clean up removed elements ','line_number':1386,'multiline':True]
['text':' Check if dirty is correctly typed for IN_PLACE ','line_number':1390,'multiline':True]
['text':' Do some early pre-sanitization to avoid unsafe root nodes ','line_number':1397,'multiline':True]
['text':' If dirty is a DOM element, append to an empty document to avoid
				 elements being stripped by the parser ','line_number':1406,'multiline':True]
['text':' Node is already a body, use as is ','line_number':1412,'multiline':True]
['text':' eslint-disable-next-line unicorn/prefer-dom-node-append','line_number':1417,'multiline':False]
['text':' Exit directly if we have nothing to do ','line_number':1421,'multiline':True]
['text':' eslint-disable-next-line unicorn/prefer-includes','line_number':1422,'multiline':False]
['text':' Initialize the document to work on ','line_number':1426,'multiline':True]
['text':' Check we have a DOM node from the data ','line_number':1430,'multiline':True]
['text':' Remove first element node (ours) if FORCE_BODY is set ','line_number':1436,'multiline':True]
['text':' Get node iterator ','line_number':1442,'multiline':True]
['text':' Now start iterating over the created document ','line_number':1446,'multiline':True]
['text':' Sanitize tags and elements ','line_number':1450,'multiline':True]
['text':' Shadow DOM detected, sanitize it ','line_number':1454,'multiline':True]
['text':' Check attributes, sanitize if necessary ','line_number':1460,'multiline':True]
['text':' If we sanitized `dirty` in-place, return it. ','line_number':1465,'multiline':True]
['text':' Return sanitized string or DOM ','line_number':1471,'multiline':True]
['text':' eslint-disable-next-line unicorn/prefer-dom-node-append','line_number':1479,'multiline':False]
['text':'
					AdoptNode() is not used because internal state is not reset
					(e.g. the past names map of a HTMLFormElement), this is safe
					in theory but we would rather not risk another attack vector.
					The state that is cloned by importNode() is explicitly defined
					by the specs.
				','line_number':1487,'multiline':True]
['text':' Serialize doctype if allowed ','line_number':1501,'multiline':True]
['text':' Sanitize final string template-safe ','line_number':1506,'multiline':True]
['text':'*
	 * Public method to set the configuration once
	 * setConfig
	 *
	 * @param {Object} cfg configuration object
	 ','line_number':1517,'multiline':True]
['text':'*
	 * Public method to remove the configuration
	 * clearConfig
	 *
	 ','line_number':1530,'multiline':True]
['text':'*
	 * Public method to check if an attribute value is valid.
	 * Uses last set config, if any. Otherwise, uses config defaults.
	 * isValidAttribute
	 *
	 * @param  {string} tag Tag name of containing element.
	 * @param  {string} attr Attribute name.
	 * @param  {string} value Attribute value.
	 * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
	 ','line_number':1541,'multiline':True]
['text':' Initialize shared config vars if necessary. ','line_number':1554,'multiline':True]
['text':'*
	 * AddHook
	 * Public method to add DOMPurify hooks
	 *
	 * @param {String} entryPoint entry point for the hook to add
	 * @param {Function} hookFunction function to execute
	 ','line_number':1563,'multiline':True]
['text':'*
	 * RemoveHook
	 * Public method to remove a DOMPurify hook at a given entryPoint
	 * (pops it from the stack of hooks if more are present)
	 *
	 * @param {String} entryPoint entry point for the hook to remove
	 * @return {Function} removed(popped) hook
	 ','line_number':1580,'multiline':True]
['text':'*
	 * RemoveHooks
	 * Public method to remove all DOMPurify hooks at a given entryPoint
	 *
	 * @param  {String} entryPoint entry point for the hooks to remove
	 ','line_number':1595,'multiline':True]
['text':'*
	 * RemoveAllHooks
	 * Public method to remove all DOMPurify hooks
	 *
	 ','line_number':1608,'multiline':True]
['text':' ESM-comment-begin','line_number':1624,'multiline':False]
['text':' ESM-comment-end','line_number':1626,'multiline':False]
['text':' ESM-uncomment-begin','line_number':1628,'multiline':False]
['text':' export default purify;','line_number':1629,'multiline':False]
['text':' export const version = purify.version;','line_number':1630,'multiline':False]
['text':' export const isSupported = purify.isSupported;','line_number':1631,'multiline':False]
['text':' export const sanitize = purify.sanitize;','line_number':1632,'multiline':False]
['text':' export const setConfig = purify.setConfig;','line_number':1633,'multiline':False]
['text':' export const clearConfig = purify.clearConfig;','line_number':1634,'multiline':False]
['text':' export const isValidAttribute = purify.isValidAttribute;','line_number':1635,'multiline':False]
['text':' export const addHook = purify.addHook;','line_number':1636,'multiline':False]
['text':' export const removeHook = purify.removeHook;','line_number':1637,'multiline':False]
['text':' export const removeHooks = purify.removeHooks;','line_number':1638,'multiline':False]
['text':' export const removeAllHooks = purify.removeAllHooks;','line_number':1639,'multiline':False]
['text':' ESM-uncomment-end','line_number':1640,'multiline':False]
