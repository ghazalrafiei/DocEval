['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.
 * Result:
 * -1: run into the boundary of embedded languages
 * 0: every line above are invalid
 * else: nearest preceding line of the same language
 ','line_number':31,'multiline':True]
['text':'*
 * Get inherited indentation from above lines.
 * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.
 * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.
 * 3. If this line doesn't match any indent rules
 *   a. check whether the line above it matches indentNextLinePattern
 *   b. If not, the indent level of this line is the result
 *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).
 * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`
 *
 * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.
 ','line_number':61,'multiline':True]
['text':' Use no indent if this is the first non-blank line','line_number':96,'multiline':False]
['text':' precedingUnIgnoredLine can not be ignored.','line_number':133,'multiline':False]
['text':' it doesn't increase indent of following lines','line_number':134,'multiline':False]
['text':' it doesn't increase just next line','line_number':135,'multiline':False]
['text':' so current line is not affect by precedingUnIgnoredLine','line_number':136,'multiline':False]
['text':' and then we should get a correct inheritted indentation from above lines','line_number':137,'multiline':False]
['text':' search from precedingUnIgnoredLine until we find one whose indent is not temporary','line_number':174,'multiline':False]
['text':' Apply enter action as long as there are only whitespace lines between inherited line and this line.','line_number':244,'multiline':False]
['text':' we are in the embeded language content','line_number':319,'multiline':False]
['text':' if embeddedLanguage is true, then we don't touch the indentation of current line','line_number':320,'multiline':False]
['text':'*
 * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of
 * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.
 ','line_number':389,'multiline':True]
['text':' this line has mixed languages and indentation rules will not work','line_number':407,'multiline':False]
['text':' selection support','line_number':419,'multiline':False]
['text':' If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted','line_number':428,'multiline':False]
['text':' Users might change the indentation by purpose and we should honor that instead of readjusting.','line_number':429,'multiline':False]
['text':' after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.','line_number':431,'multiline':False]
['text':' 1. Get inherited indent action','line_number':432,'multiline':False]
