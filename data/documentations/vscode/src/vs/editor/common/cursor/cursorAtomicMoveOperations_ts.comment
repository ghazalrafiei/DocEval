['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
	 * Get the visible column at the position. If we get to a non-whitespace character first
	 * or past the end of string then return -1.
	 *
	 * **Note** `position` and the return value are 0-based.
	 ','line_number':16,'multiline':True]
['text':' Skip to the next multiple of tabSize.','line_number':41,'multiline':False]
['text':'*
	 * Return the position that should result from a move left, right or to the
	 * nearest tab, if atomic tabs are enabled. Left and right are used for the
	 * arrow key movements, nearest is used for mouse selection. It returns
	 * -1 if atomic tabs are not relevant and you should fall back to normal
	 * behaviour.
	 *
	 * **Note**: `position` and the return value are 0-based.
	 ','line_number':54,'multiline':True]
['text':' Get the 0-based visible column corresponding to the position, or return','line_number':66,'multiline':False]
['text':' -1 if it is not in the initial whitespace.','line_number':67,'multiline':False]
['text':' Is the output left or right of the current position. The case for nearest','line_number':74,'multiline':False]
['text':' where it is the same as the current position is handled in the switch.','line_number':75,'multiline':False]
['text':' The code below assumes the output position is either left or right','line_number':85,'multiline':False]
['text':' of the input position. If it is the same, return immediately.','line_number':86,'multiline':False]
['text':' Go to the nearest indentation.','line_number':90,'multiline':False]
['text':' If going left, we can just use the info about the last tab stop position and','line_number':95,'multiline':False]
['text':' last tab stop visible column that we computed in the first walk over the whitespace.','line_number':96,'multiline':False]
['text':' If the direction is left, we need to keep scanning right to ensure','line_number':101,'multiline':False]
['text':' that targetVisibleColumn + tabSize is before non-whitespace.','line_number':102,'multiline':False]
['text':' This is so that when we press left at the end of a partial','line_number':103,'multiline':False]
['text':' indentation it only goes one character. For example '      foo' with','line_number':104,'multiline':False]
['text':' tabSize 4, should jump from position 6 to position 5, not 4.','line_number':105,'multiline':False]
['text':' It is a full indentation.','line_number':109,'multiline':False]
['text':' It must have been a partial indentation.','line_number':128,'multiline':False]
['text':' We are going right.','line_number':132,'multiline':False]
['text':' We can just continue from where whitespaceVisibleColumn got to.','line_number':135,'multiline':False]
['text':' This condition handles when the target column is at the end of the line.','line_number':154,'multiline':False]
