['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' Paste entire line at the beginning of line','line_number':98,'multiline':False]
['text':' Try to spread the pasted text in case the line count matches the cursor count','line_number':125,'multiline':False]
['text':' Remove trailing \n if present','line_number':126,'multiline':False]
['text':' Remove trailing \r if present','line_number':130,'multiline':False]
['text':' No previous line with content found','line_number':173,'multiline':False]
['text':' This is a single line selection that is not the entire line','line_number':245,'multiline':False]
['text':' looks like https://github.com/microsoft/vscode/issues/2773','line_number':274,'multiline':False]
['text':' where a cursor operation occurred before a canceled composition','line_number':275,'multiline':False]
['text':' => ignore composition','line_number':276,'multiline':False]
['text':' => ignore composition that doesn't do anything','line_number':285,'multiline':False]
['text':' Nothing special','line_number':312,'multiline':False]
['text':' Indent once','line_number':316,'multiline':False]
['text':' Ultra special','line_number':320,'multiline':False]
['text':' Do not over-type quotes after a backslash','line_number':456,'multiline':False]
['text':' Must over-type a closing character typed by the editor','line_number':463,'multiline':False]
['text':' If the start of lineAfter can be interpretted as both a starting or ending brace, default to returning false','line_number':497,'multiline':False]
['text':'*
	 * Determine if typing `ch` at all `positions` in the `model` results in an
	 * auto closing open sequence being typed.
	 *
	 * Auto closing open sequences can consist of multiple characters, which
	 * can lead to ambiguities. In such a case, the longest auto-closing open
	 * sequence is returned.
	 ','line_number':508,'multiline':True]
['text':' Determine which auto-closing pair it is','line_number':522,'multiline':False]
['text':'*
	 * Find another auto-closing pair that is contained by the one passed in.
	 *
	 * e.g. when having [(,)] and [(*,*)] as auto-closing pairs
	 * this method will find [(,)] as a containment pair for [(*,*)]
	 ','line_number':543,'multiline':True]
['text':' get candidates with the same last character as close','line_number':554,'multiline':False]
['text':' This method is called both when typing (regularly) and when composition ends','line_number':575,'multiline':False]
['text':' This means that we need to work with a text buffer where sometimes `ch` is not','line_number':576,'multiline':False]
['text':' there (it is being typed right now) or with a text buffer where `ch` has already been typed','line_number':577,'multiline':False]
['text':'','line_number':578,'multiline':False]
['text':' In order to avoid adding checks for `chIsAlreadyTyped` in all places, we will work','line_number':579,'multiline':False]
['text':' with two conceptual positions, the position before `ch` and the position after `ch`','line_number':580,'multiline':False]
['text':'','line_number':581,'multiline':False]
['text':' Find the longest auto-closing open pair in case of multiple ending in `ch`','line_number':592,'multiline':False]
['text':' e.g. when having [f","] and [","], it picks [f","] if the character before is f','line_number':593,'multiline':False]
['text':' Sometimes, it is possible to have two auto-closing pairs that have a containment relationship','line_number':621,'multiline':False]
['text':' e.g. when having [(,)] and [(*,*)]','line_number':622,'multiline':False]
['text':' - when typing (, the resulting state is (|)','line_number':623,'multiline':False]
['text':' - when typing *, the desired resulting state is (*|*), not (*|*))','line_number':624,'multiline':False]
['text':' Only consider auto closing the pair if an allowed character follows or if another autoclosed pair closing brace follows','line_number':639,'multiline':False]
['text':' Do not auto-close ' or " after a word character','line_number':649,'multiline':False]
['text':' Do not force tokenization','line_number':661,'multiline':False]
['text':' Typing for example a quote could either start a new string, in which case auto-closing is desirable','line_number':672,'multiline':False]
['text':' or it could end a previously started string, in which case auto-closing is not desirable','line_number':673,'multiline':False]
['text':'','line_number':674,'multiline':False]
['text':' In certain cases, it is really not possible to look at the previous token to determine','line_number':675,'multiline':False]
['text':' what would happen. That's why we do something really unusual, we pretend to type a different','line_number':676,'multiline':False]
['text':' character and ask the tokenizer what the outcome of doing that is: after typing a neutral','line_number':677,'multiline':False]
['text':' character, are we in a string (i.e. the quote would most likely end a string) or not?','line_number':678,'multiline':False]
['text':'','line_number':679,'multiline':False]
['text':' Character is a bracket','line_number':712,'multiline':False]
['text':' this selected text contains something other than whitespace','line_number':738,'multiline':False]
['text':' Typing a quote character on top of another quote character','line_number':751,'multiline':False]
['text':' => disable surround selection type','line_number':752,'multiline':False]
['text':' give at most 500ms to compute ','line_number':807,'multiline':True]
['text':' matched something on the same line => no change in indentation','line_number':811,'multiline':False]
['text':'*
	 * This is very similar with typing, but the character is already in the text buffer!
	 ','line_number':837,'multiline':True]
['text':' could not deduce what the composition did','line_number':842,'multiline':False]
['text':' not all selections agree on what was typed','line_number':851,'multiline':False]
['text':' we're only interested in the case where a single character was inserted','line_number':857,'multiline':False]
['text':' Check if this could have been a surround selection','line_number':872,'multiline':False]
['text':' more text was deleted than was selected, so this could not have been a surround selection','line_number':882,'multiline':False]
['text':' deleted text was only whitespace','line_number':886,'multiline':False]
['text':' deleted text was a quote','line_number':890,'multiline':False]
['text':' Unfortunately, the close character is at this point "doubled", so we need to delete it...','line_number':918,'multiline':False]
['text':' Electric characters make sense only when dealing with a single cursor,','line_number':980,'multiline':False]
['text':' as multiple cursors typing brackets for example would interfer with bracket matching','line_number':981,'multiline':False]
['text':' A simple character type','line_number':989,'multiline':False]
['text':' Always set an undo stop before non-type operations','line_number':1106,'multiline':False]
['text':' `abc |d`: No undo stop','line_number':1110,'multiline':False]
['text':' `abc  |d`: Undo stop','line_number':1111,'multiline':False]
['text':' Insert undo stop between different operation types','line_number':1114,'multiline':False]
