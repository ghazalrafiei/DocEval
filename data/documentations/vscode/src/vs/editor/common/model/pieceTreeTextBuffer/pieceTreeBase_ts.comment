['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' const lfRegex = new RegExp(/\r\n|\r|\n/g);','line_number':13,'multiline':False]
['text':' \r\n... case','line_number':46,'multiline':False]
['text':' skip \n','line_number':48,'multiline':False]
['text':' \r... case','line_number':50,'multiline':False]
['text':' \r\n... case','line_number':75,'multiline':False]
['text':' skip \n','line_number':78,'multiline':False]
['text':' \r... case','line_number':81,'multiline':False]
['text':'*
	 * Piece Index
	 ','line_number':102,'multiline':True]
['text':'*
	 * remainder in current piece.
	','line_number':106,'multiline':True]
['text':'*
	 * node start offset in document.
	 ','line_number':110,'multiline':True]
['text':'*
	 * Line number in current buffer
	 ','line_number':117,'multiline':True]
['text':'*
	 * Column number in current buffer
	 ','line_number':121,'multiline':True]
['text':'*
 * Readonly snapshot for piece tree.
 * In a real multiple thread environment, to make snapshot reading always work correctly, we need to
 * 1. Make TreeNode.piece immutable, then reading and writing can run in parallel.
 * 2. TreeNode/Buffers normalization should not happen during snapshot reading.
 ','line_number':153,'multiline':True]
['text':' 0 is change buffer, others are readonly original buffer.','line_number':270,'multiline':False]
['text':' flush anyways','line_number':338,'multiline':False]
['text':' #region Buffer API','line_number':354,'multiline':False]
['text':' inorder','line_number':396,'multiline':False]
['text':' lineNumber >= 2','line_number':405,'multiline':False]
['text':' last node','line_number':446,'multiline':False]
['text':' pretend the \n was in the previous piece..','line_number':541,'multiline':False]
['text':' this piece has no new lines','line_number':554,'multiline':False]
['text':' add the text before the first line start in this piece','line_number':564,'multiline':False]
['text':' The last line ended with a \r, let's undo the push, it will be pushed by next iteration','line_number':584,'multiline':False]
['text':' the char we want to fetch is at the head of next node.','line_number':633,'multiline':False]
['text':' Reset regex to search from the beginning','line_number':676,'multiline':False]
['text':' last line break position','line_number':745,'multiline':False]
['text':' search for the remaining content','line_number':760,'multiline':False]
['text':' Reset regex to search from the beginning','line_number':811,'multiline':False]
['text':' #endregion','line_number':825,'multiline':False]
['text':' #region Piece Table','line_number':827,'multiline':False]
['text':' changed buffer','line_number':844,'multiline':False]
['text':' we are inserting into the middle of a node.','line_number':854,'multiline':False]
['text':'* \n ','line_number':867,'multiline':True]
['text':' reuse node for content before insertion point.','line_number':881,'multiline':False]
['text':'* \r ','line_number':884,'multiline':True]
['text':' insert new node','line_number':913,'multiline':False]
['text':' todo, this is too brutal. Total line feed count should be updated the same way as lf_left.','line_number':922,'multiline':False]
['text':' delete node','line_number':944,'multiline':False]
['text':' delete content in the middle, this node will be splitted to nodes','line_number':965,'multiline':False]
['text':' update last touched node','line_number':980,'multiline':False]
['text':' delete nodes in between','line_number':987,'multiline':False]
['text':' we are inserting content to the beginning of node','line_number':1000,'multiline':False]
['text':' move `\n` to new node.','line_number':1003,'multiline':False]
['text':' we are inserting to the right of this node.','line_number':1035,'multiline':False]
['text':' move \n to the new node.','line_number':1037,'multiline':False]
['text':' binary search offset between startOffset and endOffset','line_number':1063,'multiline':False]
['text':' we don't need to worry about start: abc\r|\n, or abc|\r, or abc|\n, or abc|\r\n doesn't change the fact that, there is one line break after start.','line_number':1103,'multiline':False]
['text':' now let's take care of end: abc\r|\n, if end is in between \r and \n, we need to add line feed count by 1','line_number':1104,'multiline':False]
['text':' it means, there is no \n after end, otherwise, there will be one more lineStart.','line_number':1110,'multiline':False]
['text':' there are more than 1 character after end, which means it can't be \n','line_number':1116,'multiline':False]
['text':' endOffset + 1 === nextLineStartOffset','line_number':1119,'multiline':False]
['text':' character at endOffset is \n, so we check the character before first','line_number':1120,'multiline':False]
['text':' if character at endOffset is \r, end.column is 0 and we can't get here.','line_number':1121,'multiline':False]
['text':' end.column > 0 so it's okay.','line_number':1122,'multiline':False]
['text':' the content is large, operations like substring, charCode becomes slow','line_number':1145,'multiline':False]
['text':' so here we split it into smaller chunks, just like what we did for CR/LF normalization','line_number':1146,'multiline':False]
['text':' last character is \r or a high surrogate => keep it back','line_number':1152,'multiline':False]
['text':' buffer index ','line_number':1162,'multiline':True]
['text':' buffer index ','line_number':1173,'multiline':True]
['text':' todo, we can check this._lastChangeBufferPos's column as it's the last one','line_number':1191,'multiline':False]
['text':'* todo@peng ','line_number':1218,'multiline':True]
['text':' search in order, to find the node contains end column','line_number':1282,'multiline':False]
['text':' #region node operations','line_number':1321,'multiline':False]
['text':' we are checking the end of this node, so a CRLF check is necessary.','line_number':1328,'multiline':False]
['text':' aha yes, CRLF','line_number':1331,'multiline':False]
['text':' old piece, originalStartPos, start','line_number':1404,'multiline':False]
['text':' new right piece, end, originalEndPos','line_number':1421,'multiline':False]
['text':' _lastChangeBufferPos is already wrong','line_number':1449,'multiline':False]
['text':' search in order, to find the node contains position.column','line_number':1545,'multiline':False]
['text':' #endregion','line_number':1601,'multiline':False]
['text':' #region CRLF','line_number':1603,'multiline':False]
['text':' last line, so there is no line feed at the end of this line','line_number':1622,'multiline':False]
['text':' update node','line_number':1664,'multiline':False]
['text':' it means, last line ends with \r, not \r\n','line_number':1668,'multiline':False]
['text':' \r\n','line_number':1671,'multiline':False]
['text':' update nextNode','line_number':1690,'multiline':False]
['text':' create new piece which contains \r\n','line_number':1707,'multiline':False]
['text':' delete empty nodes','line_number':1710,'multiline':False]
['text':' move `\n` forward','line_number':1721,'multiline':False]
['text':' #endregion','line_number':1749,'multiline':False]
['text':' #endregion','line_number':1751,'multiline':False]
['text':' #region Tree operations','line_number':1753,'multiline':False]
['text':'*
	 *      node              node
	 *     /  \              /  \
	 *    a   b    <----   a    b
	 *                         /
	 *                        z
	 ','line_number':1787,'multiline':True]
['text':'*
	 *      node              node
	 *     /  \              /  \
	 *    a   b     ---->   a    b
	 *                       \
	 *                        z
	 ','line_number':1819,'multiline':True]
['text':' a','line_number':1841,'multiline':False]
['text':' #endregion','line_number':1860,'multiline':False]
