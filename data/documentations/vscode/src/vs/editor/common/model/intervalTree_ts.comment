['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'','line_number':10,'multiline':False]
['text':' The red-black tree is based on the "Introduction to Algorithms" by Cormen, Leiserson and Rivest.','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':'*
	 * Due to how deletion works (in order to avoid always walking the right subtree of the deleted node),
	 * the deltas for nodes can grow and shrink dramatically. It has been observed, in practice, that unless
	 * the deltas are corrected, integer overflow will occur.
	 *
	 * The integer overflow occurs when 53 bits are used in the numbers, but we will try to avoid it as
	 * a node's delta gets below a negative 30 bits number.
	 *
	 * MIN SMI (SMall Integer) as defined in v8.
	 * one bit is lost for boxing/unboxing flag.
	 * one bit is lost for sign flag.
	 * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values
	 ','line_number':54,'multiline':True]
['text':'*
	 * MAX SMI (SMall Integer) as defined in v8.
	 * one bit is lost for boxing/unboxing flag.
	 * one bit is lost for sign flag.
	 * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values
	 ','line_number':68,'multiline':True]
['text':'*
	 * contains binary encoded information for color, visited, isForValidation and stickiness.
	 ','line_number':131,'multiline':True]
['text':' FORCE_OVERFLOWING_TEST: this.delta = start;','line_number':164,'multiline':False]
['text':'*
	 * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!
	 ','line_number':253,'multiline':True]
['text':'*
	 * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!
	 ','line_number':260,'multiline':True]
['text':' Our strategy is to remove all directly impacted nodes, and then add them back to the tree.','line_number':293,'multiline':False]
['text':' (1) collect all nodes that are intersecting this edit as nodes of interest','line_number':295,'multiline':False]
['text':' (2) remove all nodes that are intersecting this edit','line_number':298,'multiline':False]
['text':' (3) edit all tree nodes except the nodes of interest','line_number':305,'multiline':False]
['text':' (4) edit the nodes of interest and insert them back in the tree','line_number':309,'multiline':False]
['text':'#region Delta Normalization','line_number':334,'multiline':False]
['text':' go left','line_number':341,'multiline':False]
['text':' go right','line_number':347,'multiline':False]
['text':' handle current node','line_number':353,'multiline':False]
['text':' going up from this node','line_number':361,'multiline':False]
['text':'#endregion','line_number':372,'multiline':False]
['text':'#region Editing','line_number':374,'multiline':False]
['text':'*
 * This is a lot more complicated than strictly necessary to maintain the same behaviour
 * as when decorations were implemented using two markers.
 ','line_number':398,'multiline':True]
['text':' This edit encompasses the entire decoration range','line_number':424,'multiline':False]
['text':' and the decoration has asked to become collapsed','line_number':425,'multiline':False]
['text':' Finish','line_number':464,'multiline':False]
['text':' https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree','line_number':479,'multiline':False]
['text':' Now, it is known that two intervals A and B overlap only when both','line_number':480,'multiline':False]
['text':' A.low <= B.high and A.high >= B.low. When searching the trees for','line_number':481,'multiline':False]
['text':' nodes overlapping with a given interval, you can immediately skip:','line_number':482,'multiline':False]
['text':'  a) all nodes to the right of nodes whose low value is past the end of the given interval.','line_number':483,'multiline':False]
['text':'  b) all nodes that have their maximum 'high' value below the start of the given interval.','line_number':484,'multiline':False]
['text':' going up from this node','line_number':494,'multiline':False]
['text':' first time seeing this node','line_number':505,'multiline':False]
['text':' cover case b) from above','line_number':508,'multiline':False]
['text':' there is no need to search this node or its children','line_number':509,'multiline':False]
['text':' go left','line_number':515,'multiline':False]
['text':' handle current node','line_number':521,'multiline':False]
['text':' cover case a) from above','line_number':524,'multiline':False]
['text':' there is no need to search this node or its right subtree','line_number':525,'multiline':False]
['text':' go right','line_number':538,'multiline':False]
['text':' https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree','line_number':551,'multiline':False]
['text':' Now, it is known that two intervals A and B overlap only when both','line_number':552,'multiline':False]
['text':' A.low <= B.high and A.high >= B.low. When searching the trees for','line_number':553,'multiline':False]
['text':' nodes overlapping with a given interval, you can immediately skip:','line_number':554,'multiline':False]
['text':'  a) all nodes to the right of nodes whose low value is past the end of the given interval.','line_number':555,'multiline':False]
['text':'  b) all nodes that have their maximum 'high' value below the start of the given interval.','line_number':556,'multiline':False]
['text':' going up from this node','line_number':564,'multiline':False]
['text':' first time seeing this node','line_number':576,'multiline':False]
['text':' cover case b) from above','line_number':579,'multiline':False]
['text':' there is no need to search this node or its children','line_number':580,'multiline':False]
['text':' go left','line_number':586,'multiline':False]
['text':' handle current node','line_number':592,'multiline':False]
['text':' cover case a) from above','line_number':601,'multiline':False]
['text':' there is no need to search this node or its right subtree','line_number':602,'multiline':False]
['text':' go right','line_number':610,'multiline':False]
['text':'#endregion','line_number':620,'multiline':False]
['text':'#region Searching','line_number':622,'multiline':False]
['text':' going up from this node','line_number':630,'multiline':False]
['text':' go left','line_number':638,'multiline':False]
['text':' handle current node','line_number':643,'multiline':False]
['text':' go right','line_number':651,'multiline':False]
['text':' going up from this node','line_number':668,'multiline':False]
['text':' go left','line_number':676,'multiline':False]
['text':' go right','line_number':682,'multiline':False]
['text':' handle current node','line_number':687,'multiline':False]
['text':' going up from this node','line_number':706,'multiline':False]
['text':' go left','line_number':717,'multiline':False]
['text':' handle current node','line_number':722,'multiline':False]
['text':' go right','line_number':746,'multiline':False]
['text':' https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree','line_number':759,'multiline':False]
['text':' Now, it is known that two intervals A and B overlap only when both','line_number':760,'multiline':False]
['text':' A.low <= B.high and A.high >= B.low. When searching the trees for','line_number':761,'multiline':False]
['text':' nodes overlapping with a given interval, you can immediately skip:','line_number':762,'multiline':False]
['text':'  a) all nodes to the right of nodes whose low value is past the end of the given interval.','line_number':763,'multiline':False]
['text':'  b) all nodes that have their maximum 'high' value below the start of the given interval.','line_number':764,'multiline':False]
['text':' going up from this node','line_number':775,'multiline':False]
['text':' first time seeing this node','line_number':786,'multiline':False]
['text':' cover case b) from above','line_number':789,'multiline':False]
['text':' there is no need to search this node or its children','line_number':790,'multiline':False]
['text':' go left','line_number':796,'multiline':False]
['text':' handle current node','line_number':802,'multiline':False]
['text':' cover case a) from above','line_number':805,'multiline':False]
['text':' there is no need to search this node or its right subtree','line_number':806,'multiline':False]
['text':' There is overlap','line_number':814,'multiline':False]
['text':' go right','line_number':836,'multiline':False]
['text':'#endregion','line_number':848,'multiline':False]
['text':'#region Insertion','line_number':850,'multiline':False]
['text':' repair tree','line_number':865,'multiline':False]
['text':' this node should be inserted to the left','line_number':918,'multiline':False]
['text':' => it is not affected by the node's delta','line_number':919,'multiline':False]
['text':' this node should be inserted to the right','line_number':930,'multiline':False]
['text':' => it is not affected by the node's delta','line_number':931,'multiline':False]
['text':'#endregion','line_number':950,'multiline':False]
['text':'#region Deletion','line_number':952,'multiline':False]
['text':' RB-DELETE except we don't swap z and y in case c)','line_number':958,'multiline':False]
['text':' i.e. we always delete what's pointed at by z.','line_number':959,'multiline':False]
['text':' x's delta is no longer influenced by z's delta','line_number':965,'multiline':False]
['text':' y's delta is no longer influenced by z's delta,','line_number':981,'multiline':False]
['text':' but we don't want to walk the entire right-hand-side subtree of x.','line_number':982,'multiline':False]
['text':' we therefore maintain z's delta in y, and adjust only x','line_number':983,'multiline':False]
['text':' RB-DELETE-FIXUP','line_number':1070,'multiline':False]
['text':' optional','line_number':1146,'multiline':False]
['text':' optional','line_number':1147,'multiline':False]
['text':' optional','line_number':1148,'multiline':False]
['text':'#endregion','line_number':1150,'multiline':False]
['text':'#region Rotations','line_number':1152,'multiline':False]
['text':' set y.','line_number':1154,'multiline':False]
['text':' y's delta is no longer influenced by x's delta','line_number':1156,'multiline':False]
['text':' turn y's left subtree into x's right subtree.','line_number':1163,'multiline':False]
['text':' link x's parent to y.','line_number':1167,'multiline':False]
['text':' put x on y's left.','line_number':1176,'multiline':False]
['text':'#endregion','line_number':1212,'multiline':False]
['text':'#region max end computation','line_number':1214,'multiline':False]
['text':' no need to go further','line_number':1243,'multiline':False]
['text':'#endregion','line_number':1252,'multiline':False]
['text':'#region utils','line_number':1254,'multiline':False]
['text':'#endregion','line_number':1261,'multiline':False]
