['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * Every time we write to the clipboard, we record a bit of extra metadata here.
 * Every time we read from the cipboard, if the text matches our last written text,
 * we can fetch the previous metadata.
 ','line_number':67,'multiline':True]
['text':' match!','line_number':87,'multiline':False]
['text':'*
 * Writes screen reader content to the textarea and is able to analyze its input events to generate:
 *  - onCut
 *  - onPaste
 *  - onType
 *
 * Composition events are generated for presentation purposes (composition input is reflected in onType).
 ','line_number':152,'multiline':True]
['text':' ---','line_number':195,'multiline':False]
['text':' Stop propagation for keyDown events if the IME is processing key input','line_number':243,'multiline':False]
['text':' Prevent default always for `Esc`, otherwise it will generate a keypress','line_number':248,'multiline':False]
['text':' See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx','line_number':249,'multiline':False]
['text':' simply reset the composition context','line_number':269,'multiline':False]
['text':' Handling long press case on Chromium/Safari macOS + arrow key => pretend the character was selected','line_number':284,'multiline':False]
['text':' Pretend the previous character was composed (in order to get it removed by subsequent compositionupdate events)','line_number':288,'multiline':False]
['text':' when tapping on the editor, Android enters composition mode to edit the current word','line_number':295,'multiline':False]
['text':' so we cannot clear the textarea on Android and we must pretend the current word was selected','line_number':296,'multiline':False]
['text':' should not be possible to receive a 'compositionupdate' without a 'compositionstart'','line_number':310,'multiline':False]
['text':' On Android, the data sent with the composition update event is unusable.','line_number':314,'multiline':False]
['text':' For example, if the cursor is in the middle of a word like Mic|osoft','line_number':315,'multiline':False]
['text':' and Microsoft is chosen from the keyboard's suggestions, the e.data will contain "Microsoft".','line_number':316,'multiline':False]
['text':' This is not really usable because it doesn't tell us where the edit began and where it ended.','line_number':317,'multiline':False]
['text':' https://github.com/microsoft/monaco-editor/issues/1663','line_number':337,'multiline':False]
['text':' On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data','line_number':338,'multiline':False]
['text':' On Android, the data sent with the composition update event is unusable.','line_number':344,'multiline':False]
['text':' For example, if the cursor is in the middle of a word like Mic|osoft','line_number':345,'multiline':False]
['text':' and Microsoft is chosen from the keyboard's suggestions, the e.data will contain "Microsoft".','line_number':346,'multiline':False]
['text':' This is not really usable because it doesn't tell us where the edit began and where it ended.','line_number':347,'multiline':False]
['text':' Pretend here we touched the text area, as the `input` event will most likely','line_number':367,'multiline':False]
['text':' result in a `selectionchange` event which we want to ignore','line_number':368,'multiline':False]
['text':'couldBeEmojiInput','line_number':376,'multiline':True]
['text':' one character was typed','line_number':379,'multiline':False]
['text':' Delete ','line_number':382,'multiline':True]
['text':' Ignore invalid input but keep it around for next time','line_number':384,'multiline':False]
['text':' --- Clipboard operations','line_number':400,'multiline':False]
['text':' Pretend here we touched the text area, as the `cut` event will most likely','line_number':403,'multiline':False]
['text':' result in a `selectionchange` event which we want to ignore','line_number':404,'multiline':False]
['text':' Pretend here we touched the text area, as the `paste` event will most likely','line_number':416,'multiline':False]
['text':' result in a `selectionchange` event which we want to ignore','line_number':417,'multiline':False]
['text':' try the in-memory store','line_number':431,'multiline':False]
['text':' When "tabbing into" the textarea, immediately after dispatching the 'focus' event,','line_number':446,'multiline':False]
['text':' Safari will always move the selection at offset 0 in the textarea','line_number':447,'multiline':False]
['text':' See https://github.com/microsoft/vscode/issues/112621','line_number':456,'multiline':False]
['text':' where compositionend is not triggered when the editor','line_number':457,'multiline':False]
['text':' is taken off-dom during a composition','line_number':458,'multiline':False]
['text':' Clear the flag to be able to write to the textarea','line_number':460,'multiline':False]
['text':' Clear the textarea to avoid an unwanted cursor type','line_number':463,'multiline':False]
['text':' Fire artificial composition end','line_number':466,'multiline':False]
['text':' on Android, tapping does not cancel the current composition, so the','line_number':473,'multiline':False]
['text':' textarea is stuck showing the old composition','line_number':474,'multiline':False]
['text':' Clear the flag to be able to write to the textarea','line_number':476,'multiline':False]
['text':' Clear the textarea to avoid an unwanted cursor type','line_number':479,'multiline':False]
['text':' Fire artificial composition end','line_number':482,'multiline':False]
['text':' See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256','line_number':494,'multiline':False]
['text':' When using a Braille display, it is possible for users to reposition the','line_number':495,'multiline':False]
['text':' system caret. This is reflected in Chrome as a `selectionchange` event.','line_number':496,'multiline':False]
['text':'','line_number':497,'multiline':False]
['text':' The `selectionchange` event appears to be emitted under numerous other circumstances,','line_number':498,'multiline':False]
['text':' so it is quite a challenge to distinguish a `selectionchange` coming in from a user','line_number':499,'multiline':False]
['text':' using a Braille display from all the other cases.','line_number':500,'multiline':False]
['text':'','line_number':501,'multiline':False]
['text':' The problems with the `selectionchange` event are:','line_number':502,'multiline':False]
['text':'  * the event is emitted when the textarea is focused programmatically -- textarea.focus()','line_number':503,'multiline':False]
['text':'  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)','line_number':504,'multiline':False]
['text':'  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'','line_number':505,'multiline':False]
['text':'  * the event is emitted when tabbing into the textarea','line_number':506,'multiline':False]
['text':'  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)','line_number':507,'multiline':False]
['text':'  * the event sometimes comes in bursts for a single logical textarea operation','line_number':508,'multiline':False]
['text':' `selectionchange` events often come multiple times for a single logical change','line_number':510,'multiline':False]
['text':' so throttle multiple `selectionchange` events that burst in a short period of time.','line_number':511,'multiline':False]
['text':'todo','line_number':513,'multiline':False]
['text':' Support only for Chrome until testing happens on other browsers','line_number':523,'multiline':False]
['text':' received another `selectionchange` event within 5ms of the previous `selectionchange` event','line_number':532,'multiline':False]
['text':' => ignore it','line_number':533,'multiline':False]
['text':' received a `selectionchange` event within 100ms since we touched the textarea','line_number':540,'multiline':False]
['text':' => ignore it, since we caused it','line_number':541,'multiline':False]
['text':' Cannot correlate a position in the textarea with a position in the editor...','line_number':546,'multiline':False]
['text':' Cannot correlate a position in the textarea with a position in the editor...','line_number':552,'multiline':False]
['text':' Nothing to do...','line_number':559,'multiline':False]
['text':' Setting this._hasFocus and writing the screen reader content','line_number':587,'multiline':False]
['text':' will result in a focus() and setSelectionRange() in the textarea','line_number':588,'multiline':False]
['text':' If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus','line_number':591,'multiline':False]
['text':' no change','line_number':605,'multiline':False]
['text':' Do not write to the text on render unless a screen reader is being used #192278','line_number':640,'multiline':False]
['text':' Do not write to the text area when doing composition','line_number':641,'multiline':False]
['text':' When writing "LINE\r\n" to the clipboard and then pasting,','line_number':657,'multiline':False]
['text':' Firefox pastes "LINE\n", so let's work around this quirk','line_number':658,'multiline':False]
['text':' no problem!','line_number':683,'multiline':False]
['text':' no textual data pasted, generate text from file names','line_number':688,'multiline':False]
['text':' console.log('current value: ' + this._textArea.value);','line_number':768,'multiline':False]
['text':' No change','line_number':775,'multiline':False]
['text':' console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);','line_number':778,'multiline':False]
['text':' No change','line_number':808,'multiline':False]
['text':' Firefox iframe bug https://github.com/microsoft/monaco-editor/issues/643#issuecomment-367871377','line_number':809,'multiline':False]
['text':' console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);','line_number':816,'multiline':False]
['text':' No need to focus, only need to change the selection range','line_number':819,'multiline':False]
['text':' If the focus is outside the textarea, browsers will try really hard to reveal the textarea.','line_number':828,'multiline':False]
['text':' Here, we try to undo the browser's desperate reveal.','line_number':829,'multiline':False]
['text':' Sometimes IE throws when setting selection (e.g. textarea is off-DOM)','line_number':837,'multiline':False]
