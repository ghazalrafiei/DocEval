['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
	 * Get the last rendered information for cursors & textarea.
	 ','line_number':33,'multiline':True]
['text':'*
	 * Render right now
	 ','line_number':38,'multiline':True]
['text':'*
	 * Decode a position from a rendered dom node
	 ','line_number':46,'multiline':True]
['text':' See https://github.com/microsoft/vscode/issues/138789','line_number':93,'multiline':False]
['text':' When moving the mouse really quickly, the browser sometimes forgets to','line_number':94,'multiline':False]
['text':' send us a `mouseleave` or `mouseout` event. We therefore install here','line_number':95,'multiline':False]
['text':' a global `mousemove` listener to manually recover if the mouse goes outside','line_number':96,'multiline':False]
['text':' the editor. As soon as the mouse leaves outside of the editor, we','line_number':97,'multiline':False]
['text':' remove this listener','line_number':98,'multiline':False]
['text':' went outside the editor!','line_number':103,'multiline':False]
['text':' `pointerdown` events can't be used to determine if there's a double click, or triple click','line_number':114,'multiline':False]
['text':' because their `e.detail` is always 0.','line_number':115,'multiline':False]
['text':' We will therefore save the pointer id for the mouse and then reuse it in the `mousedown` event','line_number':116,'multiline':False]
['text':' for `element.setPointerCapture`.','line_number':117,'multiline':False]
['text':' The `pointerup` listener registered by `GlobalEditorPointerMoveMonitor` does not get invoked 100% of the times.','line_number':122,'multiline':False]
['text':' I speculate that this is because the `pointerup` listener is only registered during the `mousedown` event, and perhaps','line_number':123,'multiline':False]
['text':' the `pointerup` event is already queued for dispatching, which makes it that the new listener doesn't get fired.','line_number':124,'multiline':False]
['text':' See https://github.com/microsoft/vscode/issues/146486 for repro steps.','line_number':125,'multiline':False]
['text':' To compensate for that, we simply register here a `pointerup` listener and just communicate it.','line_number':126,'multiline':False]
['text':' we consider mousewheel events that occur within 50ms of each other to be part of the same gesture','line_number':164,'multiline':False]
['text':' we don't want to consider mouse wheel events where ctrl/cmd is pressed during the inertia phase','line_number':165,'multiline':False]
['text':' we also want to accumulate deltaY values from the same gesture and use that to set the zoom level','line_number':166,'multiline':False]
['text':' reset if more than 50ms have passed','line_number':168,'multiline':False]
['text':' on macOS we support cmd + two fingers scroll (`metaKey` set)','line_number':189,'multiline':False]
['text':' and also the two fingers pinch gesture (`ctrKey` set)','line_number':190,'multiline':False]
['text':' --- begin event handlers','line_number':206,'multiline':False]
['text':' layout change','line_number':209,'multiline':False]
['text':' --- end event handlers','line_number':225,'multiline':False]
['text':' In selection/drag operation','line_number':271,'multiline':False]
['text':' Due to throttling, this event occurred before the mouse left the editor, therefore ignore it.','line_number':276,'multiline':False]
['text':' Do not steal focus','line_number':330,'multiline':False]
['text':' Ignoring because position is unknown','line_number':408,'multiline':False]
['text':' Ignoring because position is unknown','line_number':435,'multiline':False]
['text':' Overwrite the detail of the MouseEvent, as it will be sent out in an event and contributions might rely on it.','line_number':441,'multiline':False]
['text':' we don't support multiple mouse','line_number':449,'multiline':False]
['text':' only single click on a selection can work','line_number':450,'multiline':False]
['text':' the mouse is not down yet','line_number':451,'multiline':False]
['text':' we don't drag single cursor','line_number':452,'multiline':False]
['text':' single click on text','line_number':453,'multiline':False]
['text':' single click on a selection','line_number':454,'multiline':False]
['text':' cancel','line_number':468,'multiline':False]
['text':' Ignoring because position is unknown, e.g., Content View Zone','line_number':473,'multiline':False]
['text':' Force position on view zones to go above or below depending on where selection started from','line_number':591,'multiline':False]
['text':'*
	 * update internal state and return elapsed ms since last time
	 ','line_number':698,'multiline':True]
['text':'*
	 * get the number of lines per second to auto-scroll
	 ','line_number':708,'multiline':True]
['text':' First, try to find a position that matches the horizontal position of the mouse','line_number':738,'multiline':False]
['text':' ms','line_number':762,'multiline':False]
['text':' a. Invalidate multiple clicking if too much time has passed (will be hit by IE because the detail field of mouse events contains garbage in IE10)','line_number':827,'multiline':False]
['text':' b. Ensure that we don't jump from single click to triple click in one go (will be hit by IE because the detail field of mouse events contains garbage in IE10)','line_number':834,'multiline':False]
['text':' c. Invalidate multiple clicking if the logical position is different','line_number':839,'multiline':False]
['text':' Finally set the lastMouseDownCount','line_number':847,'multiline':False]
