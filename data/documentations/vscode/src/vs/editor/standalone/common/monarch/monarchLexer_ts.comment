['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * Create a syntax highighter with a fully declarative JSON style lexer description
 * using regular expressions.
 ','line_number':6,'multiline':True]
['text':'*
 * Reuse the same stack elements up to a certain depth.
 ','line_number':23,'multiline':True]
['text':' no caching above a certain depth','line_number':43,'multiline':False]
['text':' save an object','line_number':146,'multiline':False]
['text':'*
 * Reuse the same line states up to a certain depth.
 ','line_number':154,'multiline':True]
['text':' no caching when embedding','line_number':174,'multiline':False]
['text':' no caching above a certain depth','line_number':178,'multiline':False]
['text':' save an object','line_number':208,'multiline':False]
['text':' Set up listening for embedded modes','line_number':409,'multiline':False]
['text':' The nested language is already loaded','line_number':446,'multiline':False]
['text':' The nested language is in the process of being loaded','line_number':457,'multiline':False]
['text':' do parent matching','line_number':507,'multiline':False]
['text':' tokenization will not leave nested language','line_number':551,'multiline':False]
['text':' tokenize with the nested language','line_number':558,'multiline':False]
['text':' regular expression group matching','line_number':584,'multiline':False]
['text':' these never need cloning or equality since they are only used within a line match','line_number':585,'multiline':False]
['text':' See https://github.com/microsoft/monaco-editor/issues/1235','line_number':593,'multiline':False]
['text':' Evaluate rules at least once for an empty line','line_number':594,'multiline':False]
['text':' check if we need to process group matches first','line_number':611,'multiline':False]
['text':' cleanup if necessary','line_number':619,'multiline':False]
['text':' otherwise we match on the token stream','line_number':624,'multiline':False]
['text':' nothing to do','line_number':627,'multiline':False]
['text':' get the rules for this state','line_number':633,'multiline':False]
['text':' do parent matching','line_number':636,'multiline':False]
['text':' try each rule until we match','line_number':642,'multiline':False]
['text':' We matched 'rule' with 'matches' and 'action'','line_number':656,'multiline':False]
['text':' bad: we didn't match anything, and there is no action to take','line_number':663,'multiline':False]
['text':' we need to advance the stream or we get progress trouble','line_number':664,'multiline':False]
['text':' should never happen, needed for strict null checking','line_number':673,'multiline':False]
['text':' advance stream','line_number':677,'multiline':False]
['text':' maybe call action function (used for 'cases')','line_number':680,'multiline':False]
['text':' set the result: either a string or an array of actions','line_number':686,'multiline':False]
['text':' do $n replacements?','line_number':693,'multiline':False]
['text':' enter embedded language?','line_number':700,'multiline':False]
['text':' state transformations','line_number':714,'multiline':False]
['text':' back up the stream..','line_number':715,'multiline':False]
['text':' switch state without a push...','line_number':720,'multiline':False]
['text':' peel off starting '@'','line_number':722,'multiline':False]
['text':' peel off starting '@'','line_number':750,'multiline':False]
['text':' check result','line_number':766,'multiline':False]
['text':' support language names, mime types, and language ids','line_number':772,'multiline':False]
['text':' there is content from the embedded language on this line','line_number':782,'multiline':False]
['text':' is the result a group match?','line_number':790,'multiline':False]
['text':' call recursively to initiate first result match','line_number':819,'multiline':False]
['text':' regular result','line_number':822,'multiline':False]
['text':' check for '@rematch'','line_number':824,'multiline':False]
['text':' better set the next state too..','line_number':827,'multiline':False]
['text':' Even though `@rematch` was specified, if `nextEmbedded` also specified,','line_number':831,'multiline':False]
['text':' a state transition should occur.','line_number':832,'multiline':False]
['text':' check progress','line_number':838,'multiline':False]
['text':' return the result (and check for brace matching)','line_number':847,'multiline':False]
['text':' todo: for efficiency we could pre-sanitize tokenPostfix and substitutions','line_number':848,'multiline':False]
['text':' Fire language loading event','line_number':881,'multiline':False]
['text':'*
 * Searches for a bracket in the 'brackets' attribute that matches the input.
 ','line_number':896,'multiline':True]
