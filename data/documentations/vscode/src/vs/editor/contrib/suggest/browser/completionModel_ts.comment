['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'*
 * Sorted, filtered completion view model
 * ','line_number':34,'multiline':True]
['text':' incrementally filter less','line_number':133,'multiline':False]
['text':' picks a score function based on the number of','line_number':137,'multiline':False]
['text':' items that we have to score/filter and based on the','line_number':138,'multiline':False]
['text':' user-configuration','line_number':139,'multiline':False]
['text':' SKIP invalid items','line_number':147,'multiline':False]
['text':' keep all items by their provider','line_number':150,'multiline':False]
['text':' 'word' is that remainder of the current line that we','line_number':158,'multiline':False]
['text':' filter and score against. In theory each suggestion uses a','line_number':159,'multiline':False]
['text':' different word, but in practice not - that's why we cache','line_number':160,'multiline':False]
['text':' remember the word against which this item was','line_number':168,'multiline':False]
['text':' scored','line_number':169,'multiline':False]
['text':' when there is nothing to score against, don't','line_number':173,'multiline':False]
['text':' event try to do. Use a const rank and rely on','line_number':174,'multiline':False]
['text':' the fallback-sort using the initial sort order.','line_number':175,'multiline':False]
['text':' use a score of `-100` because that is out of the','line_number':176,'multiline':False]
['text':' bound of values `fuzzyScore` will return','line_number':177,'multiline':False]
['text':' skip word characters that are whitespace until','line_number':181,'multiline':False]
['text':' we have hit the replace range (overwriteBefore)','line_number':182,'multiline':False]
['text':' the wordPos at which scoring starts is the whole word','line_number':194,'multiline':False]
['text':' and therefore the same rules as not having a word apply','line_number':195,'multiline':False]
['text':' when there is a `filterText` it must match the `word`.','line_number':199,'multiline':False]
['text':' if it matches we check with the label to compute highlights','line_number':200,'multiline':False]
['text':' and if that doesn't yield a result we have no highlights,','line_number':201,'multiline':False]
['text':' despite having the match','line_number':202,'multiline':False]
['text':' NO match','line_number':205,'multiline':False]
['text':' filterText and label are actually the same -> use good highlights','line_number':208,'multiline':False]
['text':' re-run the scorer on the label in the hope of a result BUT use the rank','line_number':211,'multiline':False]
['text':' of the filterText-match','line_number':212,'multiline':False]
['text':' use score from filterText','line_number':214,'multiline':False]
['text':' by default match `word` against the `label`','line_number':218,'multiline':False]
['text':' NO match','line_number':221,'multiline':False]
['text':' update stats','line_number':231,'multiline':False]
