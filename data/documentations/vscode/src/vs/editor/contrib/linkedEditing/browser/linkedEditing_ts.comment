['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' The one at index 0 is the reference one','line_number':73,'multiline':False]
['text':' delayed invocation, make sure we're still on','line_number':180,'multiline':False]
['text':' nothing to do','line_number':182,'multiline':False]
['text':' disabled or multicursor','line_number':284,'multiline':False]
['text':' same position','line_number':293,'multiline':False]
['text':' just moving inside the existing primary range','line_number':298,'multiline':False]
['text':' Clear existing decorations while we compute new ones','line_number':303,'multiline':False]
['text':' Cannot do linked editing if the ranges are not where the cursor is...','line_number':342,'multiline':False]
['text':' cancel any pending syncRanges call','line_number':350,'multiline':False]
['text':' stop if we are still the latest request','line_number':356,'multiline':False]
['text':' for testing','line_number':365,'multiline':False]
['text':' private printDecorators(model: ITextModel) {','line_number':370,'multiline':False]
['text':' 	return this._currentDecorations.map(d => {','line_number':371,'multiline':False]
['text':' 		const range = model.getDecorationRange(d);','line_number':372,'multiline':False]
['text':' 		if (range) {','line_number':373,'multiline':False]
['text':' 			return this.printRange(range);','line_number':374,'multiline':False]
['text':' 		}','line_number':375,'multiline':False]
['text':' 		return 'invalid';','line_number':376,'multiline':False]
['text':' 	}).join(',');','line_number':377,'multiline':False]
['text':' }','line_number':378,'multiline':False]
['text':' private printChanges(changes: IModelContentChange[]) {','line_number':380,'multiline':False]
['text':' 	return changes.map(c => {','line_number':381,'multiline':False]
['text':' 		return `${this.printRange(c.range)} - ${c.text}`;','line_number':382,'multiline':False]
['text':' 	}','line_number':383,'multiline':False]
['text':' 	).join(',');','line_number':384,'multiline':False]
['text':' }','line_number':385,'multiline':False]
['text':' private printRange(range: IRange) {','line_number':387,'multiline':False]
['text':' 	return `${range.startLineNumber},${range.startColumn}/${range.endLineNumber},${range.endColumn}`;','line_number':388,'multiline':False]
['text':' }','line_number':389,'multiline':False]
['text':' in order of score ask the linked editing range provider','line_number':453,'multiline':False]
['text':' until someone response with a good result','line_number':454,'multiline':False]
['text':' (good = not null)','line_number':455,'multiline':False]
