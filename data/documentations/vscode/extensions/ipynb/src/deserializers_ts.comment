['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' Default to python language only if the Python extension is installed.','line_number':24,'multiline':False]
['text':' Note, whatever language is returned here, when the user selects a kernel, the cells (of blank documents) get updated based on that kernel selection.','line_number':30,'multiline':False]
['text':' Sometimes we can have mime types with empty data, e.g. when using holoview we can have `application/vnd.holoviews_load.v0+json` with empty value.','line_number':78,'multiline':False]
['text':' & in these cases we have HTML/JS and those take precedence.','line_number':79,'multiline':False]
['text':' https://github.com/microsoft/vscode-jupyter/issues/6109','line_number':80,'multiline':False]
['text':' Just trim whitespace. Leave \n in place','line_number':114,'multiline':False]
['text':' Images in Jupyter are stored in base64 encoded format.','line_number':132,'multiline':False]
['text':' VS Code expects bytes when rendering images.','line_number':133,'multiline':False]
['text':' For everything else, treat the data as strings (or multi-line strings).','line_number':145,'multiline':False]
['text':' We put this only for VSC to display in diff view.','line_number':158,'multiline':False]
['text':' Else we don't use this.','line_number':159,'multiline':False]
['text':' Add on transient data if we have any. This should be removed by our save functions elsewhere.','line_number':178,'multiline':False]
['text':' Metadata could be as follows:','line_number':205,'multiline':False]
['text':' We'll have metadata specific to each mime type as well as generic metadata.','line_number':206,'multiline':False]
['text':'
	IDisplayData = {
		output_type: 'display_data',
		data: {
			'image/jpg': '/////'
			'image/png': '/////'
			'text/plain': '/////'
		},
		metadata: {
			'image/png': '/////',
			'background': true,
			'xyz': '///
		}
	}
	','line_number':207,'multiline':True]
['text':'*
	 * Stream, `application/x.notebook.stream`
	 * Error, `application/x.notebook.error-traceback`
	 * Rich, { mime: value }
	 *
	 * outputs: [
			new vscode.NotebookCellOutput([
				new vscode.NotebookCellOutputItem('application/x.notebook.stream', 2),
				new vscode.NotebookCellOutputItem('application/x.notebook.stream', 3),
			]),
			new vscode.NotebookCellOutput([
				new vscode.NotebookCellOutputItem('text/markdown', '## header 2'),
				new vscode.NotebookCellOutputItem('image/svg+xml', [
					"<svg baseProfile=\"full\" height=\"200\" version=\"1.1\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\n",
					"  <rect fill=\"blue\" height=\"100%\" width=\"100%\"/>\n",
					"  <circle cx=\"150\" cy=\"100\" fill=\"green\" r=\"80\"/>\n",
					"  <text fill=\"white\" font-size=\"60\" text-anchor=\"middle\" x=\"150\" y=\"125\">SVG</text>\n",
					"</svg>"
					]),
			]),
		]
	 *
	 ','line_number':261,'multiline':True]
['text':'*
 * Converts a NotebookModel into VS Code format.
 ','line_number':350,'multiline':True]
