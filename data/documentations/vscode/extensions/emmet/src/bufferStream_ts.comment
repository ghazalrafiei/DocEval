['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' Based on @sergeche's work in his emmet plugin ','line_number':6,'multiline':True]
['text':'*
 * A stream reader for VSCode's `TextDocument`
 * Based on @emmetio/stream-reader and @emmetio/atom-plugin
 ','line_number':10,'multiline':True]
['text':'*
	 * Returns true only if the stream is at the start of the file.
	 ','line_number':28,'multiline':True]
['text':'*
	 * Returns true only if the stream is at the end of the file.
	 ','line_number':35,'multiline':True]
['text':'*
	 * Creates a new stream instance which is limited to given range for given document
	 ','line_number':42,'multiline':True]
['text':'*
	 * Returns the next character code in the stream without advancing it.
	 * Will return NaN at the end of the file.
	 ','line_number':49,'multiline':True]
['text':'*
	 * Returns the next character in the stream and advances it.
	 * Also returns NaN when no more characters are available.
	 ','line_number':60,'multiline':True]
['text':' restrict pos to eof, if in case it got moved beyond eof','line_number':73,'multiline':False]
['text':'*
	 * Backs up the stream n characters. Backing it up further than the
	 * start of the current token will cause things to break, so be careful.
	 ','line_number':80,'multiline':True]
['text':'*
	 * Get the string between the start of the current token and the
	 * current stream position.
	 ','line_number':92,'multiline':True]
['text':'*
	 * Returns contents for given range
	 ','line_number':100,'multiline':True]
['text':'*
	 * Creates error object with current stream state
	 ','line_number':107,'multiline':True]
['text':'*
	 * `match` can be a character code or a function that takes a character code
	 * and returns a boolean. If the next character in the stream 'matches'
	 * the given argument, it is consumed and returned.
	 * Otherwise, `false` is returned.
	 ','line_number':115,'multiline':True]
['text':'*
	 * Repeatedly calls <code>eat</code> with the given argument, until it
	 * fails. Returns <code>true</code> if any characters were eaten.
	 ','line_number':132,'multiline':True]
