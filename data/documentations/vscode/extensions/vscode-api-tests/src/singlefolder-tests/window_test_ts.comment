['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' test('editor, UN-active text editor', () => {','line_number':36,'multiline':False]
['text':' 	assert.strictEqual(window.visibleTextEditors.length, 0);','line_number':37,'multiline':False]
['text':' 	assert.ok(window.activeTextEditor === undefined);','line_number':38,'multiline':False]
['text':' });','line_number':39,'multiline':False]
['text':' close editor 1, wait a little for the event to bubble','line_number':95,'multiline':False]
['text':' move active editor group left','line_number':134,'multiline':False]
['text':' no focus!','line_number':150,'multiline':False]
['text':' verify the result array matches our expectations: depending','line_number':205,'multiline':False]
['text':' on execution time there are 2 possible results for the first','line_number':206,'multiline':False]
['text':' two entries. For the last entry there is only the `fileC` URI','line_number':207,'multiline':False]
['text':' as expected result because it is the last editor opened.','line_number':208,'multiline':False]
['text':' - either `undefined` indicating that the opening of the editor','line_number':209,'multiline':False]
['text':'   was cancelled by the next editor opening','line_number':210,'multiline':False]
['text':' - or the expected `URI` that was opened in case it suceeds','line_number':211,'multiline':False]
['text':' Open 10 line file, show it in slot 1, set cursor to line 10','line_number':357,'multiline':False]
['text':' Open 30 line file, show it in slot 1, set cursor to line 30','line_number':358,'multiline':False]
['text':' Open 10 line file, show it in slot 1','line_number':359,'multiline':False]
['text':' Open 30 line file, show it in slot 1','line_number':360,'multiline':False]
['text':'#region Tabs API tests','line_number':384,'multiline':False]
['text':' test('Tabs - move tab', async function () {','line_number':385,'multiline':False]
['text':' 	const [docA, docB, docC] = await Promise.all([','line_number':386,'multiline':False]
['text':' 		workspace.openTextDocument(await createRandomFile()),','line_number':387,'multiline':False]
['text':' 		workspace.openTextDocument(await createRandomFile()),','line_number':388,'multiline':False]
['text':' 		workspace.openTextDocument(await createRandomFile())','line_number':389,'multiline':False]
['text':' 	]);','line_number':390,'multiline':False]
['text':' 	await window.showTextDocument(docA, { viewColumn: ViewColumn.One, preview: false });','line_number':392,'multiline':False]
['text':' 	await window.showTextDocument(docB, { viewColumn: ViewColumn.One, preview: false });','line_number':393,'multiline':False]
['text':' 	await window.showTextDocument(docC, { viewColumn: ViewColumn.Two, preview: false });','line_number':394,'multiline':False]
['text':' 	const tabGroups = window.tabGroups;','line_number':396,'multiline':False]
['text':' 	assert.strictEqual(tabGroups.all.length, 2);','line_number':397,'multiline':False]
['text':' 	const group1Tabs = tabGroups.all[0].tabs;','line_number':399,'multiline':False]
['text':' 	assert.strictEqual(group1Tabs.length, 2);','line_number':400,'multiline':False]
['text':' 	const group2Tabs = tabGroups.all[1].tabs;','line_number':402,'multiline':False]
['text':' 	assert.strictEqual(group2Tabs.length, 1);','line_number':403,'multiline':False]
['text':' 	await tabGroups.move(group1Tabs[0], ViewColumn.One, 1);','line_number':405,'multiline':False]
['text':' });','line_number':406,'multiline':False]
['text':' TODO @lramos15 re-enable these once shape is more stable','line_number':408,'multiline':False]
['text':' Simple function to get the active tab','line_number':410,'multiline':False]
['text':' Ensure active tab is correct after calling vscode.opn','line_number':427,'multiline':False]
['text':' Reduce test timeout as this test should be quick, so even with 3 retries it will be under 60s.','line_number':448,'multiline':False]
['text':' This test can be flaky because of opening a notebook','line_number':450,'multiline':False]
['text':' Sometimes the webview doesn't resolve especially on windows so we will retry 3 times','line_number':451,'multiline':False]
['text':' All resources should match the text documents as they're the only tabs currently open','line_number':472,'multiline':False]
['text':' Diff editor and side by side editor report the right side as the resource','line_number':481,'multiline':False]
['text':' Function to acquire the active tab within the active group','line_number':500,'multiline':False]
['text':' TODO@lramos15 https://github.com/microsoft/vscode/issues/145846','line_number':531,'multiline':False]
['text':' Should ensure to either use existing tab API for modifications','line_number':532,'multiline':False]
['text':' or commands that operate on a dedicated editor that is passed','line_number':533,'multiline':False]
['text':' in as an argument','line_number':534,'multiline':False]
['text':' test('Tabs - verify pinned state', async () => {','line_number':536,'multiline':False]
['text':' 	const [docA] = await Promise.all([','line_number':538,'multiline':False]
['text':' 		workspace.openTextDocument(await createRandomFile())','line_number':539,'multiline':False]
['text':' 	]);','line_number':540,'multiline':False]
['text':' 	await window.showTextDocument(docA, { viewColumn: ViewColumn.One, preview: false });','line_number':542,'multiline':False]
['text':' 	const tab = window.tabGroups.activeTabGroup?.activeTab;','line_number':544,'multiline':False]
['text':' 	assert.ok(tab);','line_number':545,'multiline':False]
['text':' 	assert.strictEqual(tab.isPinned, false);','line_number':547,'multiline':False]
['text':' 	let onDidChangeTab = asPromise(window.tabGroups.onDidChangeTab);','line_number':549,'multiline':False]
['text':' 	await commands.executeCommand('workbench.action.pinEditor');','line_number':551,'multiline':False]
['text':' 	await onDidChangeTab;','line_number':552,'multiline':False]
['text':' 	assert.strictEqual(tab.isPinned, true);','line_number':554,'multiline':False]
['text':' 	onDidChangeTab = asPromise(window.tabGroups.onDidChangeTab);','line_number':556,'multiline':False]
['text':' 	await commands.executeCommand('workbench.action.unpinEditor');','line_number':558,'multiline':False]
['text':' 	await onDidChangeTab;','line_number':559,'multiline':False]
['text':' 	assert.strictEqual(tab.isPinned, false);','line_number':561,'multiline':False]
['text':' });','line_number':562,'multiline':False]
['text':' test('Tabs - verify preview state', async () => {','line_number':564,'multiline':False]
['text':' 	const [docA] = await Promise.all([','line_number':566,'multiline':False]
['text':' 		workspace.openTextDocument(await createRandomFile())','line_number':567,'multiline':False]
['text':' 	]);','line_number':568,'multiline':False]
['text':' 	await window.showTextDocument(docA, { viewColumn: ViewColumn.One, preview: true });','line_number':570,'multiline':False]
['text':' 	const tab = window.tabGroups.activeTabGroup?.activeTab;','line_number':572,'multiline':False]
['text':' 	assert.ok(tab);','line_number':573,'multiline':False]
['text':' 	assert.strictEqual(tab.isPreview, true);','line_number':575,'multiline':False]
['text':' 	let onDidChangeTab = asPromise(window.tabGroups.onDidChangeTab);','line_number':577,'multiline':False]
['text':' 	await commands.executeCommand('workbench.action.keepEditor');','line_number':579,'multiline':False]
['text':' 	await onDidChangeTab;','line_number':580,'multiline':False]
['text':' 	assert.strictEqual(tab.isPreview, false);','line_number':582,'multiline':False]
['text':' });','line_number':583,'multiline':False]
['text':' test('Tabs - verify dirty state', async () => {','line_number':585,'multiline':False]
['text':' 	const [docA] = await Promise.all([','line_number':587,'multiline':False]
['text':' 		workspace.openTextDocument(await createRandomFile())','line_number':588,'multiline':False]
['text':' 	]);','line_number':589,'multiline':False]
['text':' 	await window.showTextDocument(docA, { viewColumn: ViewColumn.One, preview: true });','line_number':591,'multiline':False]
['text':' 	const tab = window.tabGroups.activeTabGroup?.activeTab;','line_number':593,'multiline':False]
['text':' 	assert.ok(tab);','line_number':594,'multiline':False]
['text':' 	assert.strictEqual(tab.isDirty, false);','line_number':596,'multiline':False]
['text':' 	assert.strictEqual(docA.isDirty, false);','line_number':597,'multiline':False]
['text':' 	let onDidChangeTab = asPromise(window.tabGroups.onDidChangeTab);','line_number':599,'multiline':False]
['text':' 	const edit = new WorkspaceEdit();','line_number':601,'multiline':False]
['text':' 	edit.insert(docA.uri, new Position(0, 0), 'var abc = 0;');','line_number':602,'multiline':False]
['text':' 	await workspace.applyEdit(edit);','line_number':603,'multiline':False]
['text':' 	await onDidChangeTab;','line_number':605,'multiline':False]
['text':' 	assert.strictEqual(tab.isDirty, true);','line_number':607,'multiline':False]
['text':' 	onDidChangeTab = asPromise(window.tabGroups.onDidChangeTab);','line_number':609,'multiline':False]
['text':' 	await commands.executeCommand('workbench.action.files.save');','line_number':611,'multiline':False]
['text':' 	await onDidChangeTab;','line_number':613,'multiline':False]
['text':' 	assert.strictEqual(tab.isDirty, false);','line_number':615,'multiline':False]
['text':' });','line_number':616,'multiline':False]
['text':' test('Tabs - verify active state', async () => {','line_number':618,'multiline':False]
['text':' 	const [docA, docB] = await Promise.all([','line_number':620,'multiline':False]
['text':' 		workspace.openTextDocument(await createRandomFile()),','line_number':621,'multiline':False]
['text':' 		workspace.openTextDocument(await createRandomFile()),','line_number':622,'multiline':False]
['text':' 	]);','line_number':623,'multiline':False]
['text':' 	await window.showTextDocument(docA, { viewColumn: ViewColumn.One, preview: false });','line_number':625,'multiline':False]
['text':' 	await window.showTextDocument(docB, { viewColumn: ViewColumn.One, preview: false });','line_number':626,'multiline':False]
['text':' 	const tab = window.tabGroups.activeTabGroup?.tabs;','line_number':628,'multiline':False]
['text':' 	assert.strictEqual(tab?.length, 2);','line_number':629,'multiline':False]
['text':' 	assert.strictEqual(tab[0].isActive, false);','line_number':631,'multiline':False]
['text':' 	assert.strictEqual(tab[1].isActive, true);','line_number':632,'multiline':False]
['text':' 	let onDidChangeTab = asPromise(window.tabGroups.onDidChangeTab);','line_number':634,'multiline':False]
['text':' 	await window.showTextDocument(docA, { viewColumn: ViewColumn.One, preview: false });','line_number':636,'multiline':False]
['text':' 	await onDidChangeTab;','line_number':638,'multiline':False]
['text':' 	assert.strictEqual(tab[0].isActive, true);','line_number':640,'multiline':False]
['text':' 	assert.strictEqual(tab[1].isActive, false);','line_number':641,'multiline':False]
['text':' });','line_number':642,'multiline':False]
['text':'

	test('Tabs - Move Tab', async () => {
		const [docA, docB, docC] = await Promise.all([
			workspace.openTextDocument(await createRandomFile()),
			workspace.openTextDocument(await createRandomFile()),
			workspace.openTextDocument(await createRandomFile()),
		]);
		await window.showTextDocument(docA, { viewColumn: ViewColumn.One, preview: false });
		await window.showTextDocument(docB, { viewColumn: ViewColumn.One, preview: false });
		await window.showTextDocument(docC, { viewColumn: ViewColumn.Two, preview: false });

		const getAllTabs = () => {

		};
		let tabs = window.tabs;
		assert.strictEqual(tabs.length, 3);

		// Move the first tab of Group 1 to be the first tab of Group 2
		await tabs[0].move(0, ViewColumn.Two);
		assert.strictEqual(tabs.length, 3);
		tabs = window.tabs;
		// Tabs should now be B -> A -> C
		assert.strictEqual(tabs[0].resource?.toString(), docB.uri.toString());

		await tabs[2].move(0, ViewColumn.Two);
		assert.strictEqual(tabs.length, 3);
		tabs = window.tabs;
		// Tabs should now be B -> C -> A
		assert.strictEqual(tabs[1].resource?.toString(), docC.uri.toString());
		await tabs[2].move(1000, ViewColumn.Two);
		assert.strictEqual(tabs.length, 3);
		tabs = window.tabs;
		// Tabs should still be B -> C -> A
		assert.strictEqual(tabs[2].resource?.toString(), docA.uri.toString());

		await tabs[1].move(0, ViewColumn.Three);
		assert.strictEqual(tabs.length, 3);
		tabs = window.tabs;
		// Tabs should now be B -> A -> C With C in a new group
		assert.strictEqual(tabs[2].resource?.toString(), docC.uri.toString());
		assert.strictEqual(tabs[2].viewColumn, ViewColumn.Three);

		await commands.executeCommand('workbench.action.closeActiveEditor');
		await commands.executeCommand('workbench.action.closeActiveEditor');
		await commands.executeCommand('workbench.action.closeActiveEditor');

		assert.ok(!window.activeTab);
	});

	test('Tabs - Close Tabs', async () => {
		const [docA, docB, docC] = await Promise.all([
			workspace.openTextDocument(await createRandomFile()),
			workspace.openTextDocument(await createRandomFile()),
			workspace.openTextDocument(await createRandomFile()),
		]);
		await window.showTextDocument(docA, { viewColumn: ViewColumn.One, preview: false });
		await window.showTextDocument(docB, { viewColumn: ViewColumn.One, preview: false });
		await window.showTextDocument(docC, { viewColumn: ViewColumn.Two, preview: false });

		let tabs = window.tabs;
		assert.strictEqual(tabs.length, 3);

		await tabs[0].close();
		tabs = window.tabs;
		assert.strictEqual(tabs.length, 2);
		assert.strictEqual(tabs[0].resource?.toString(), docB.uri.toString());

		await tabs[0].close();
		tabs = window.tabs;
		assert.strictEqual(tabs.length, 1);
		assert.strictEqual(tabs[0].resource?.toString(), docC.uri.toString());

		await tabs[0].close();
		tabs = window.tabs;
		assert.strictEqual(tabs.length, 0);
		assert.strictEqual(tabs.length, 0);
		assert.ok(!window.activeTab);
	});
	','line_number':644,'multiline':True]
['text':'#endregion','line_number':724,'multiline':False]
['text':' const label = 'showQuickPick, select first two';','line_number':818,'multiline':False]
['text':' let i = 0;','line_number':819,'multiline':False]
['text':' console.log(`${label}: ${++i}`);','line_number':831,'multiline':False]
['text':' Allow UI to update.','line_number':832,'multiline':False]
['text':' console.log(`${label}: ${++i}`);','line_number':833,'multiline':False]
['text':' console.log(`${label}: ${++i}`);','line_number':835,'multiline':False]
['text':' console.log(`${label}: ${++i}`);','line_number':837,'multiline':False]
['text':' console.log(`${label}: ${++i}`);','line_number':839,'multiline':False]
['text':' console.log(`${label}: ${++i}`);','line_number':842,'multiline':False]
['text':' console.log(`${label}: ${++i}`);','line_number':844,'multiline':False]
['text':' console.log(`${label}: ${++i}`);','line_number':846,'multiline':False]
['text':' console.log(`${label}: ${++i}`);','line_number':848,'multiline':False]
['text':' console.log(`${label}: ${++i}`);','line_number':850,'multiline':False]
