['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':' Disable terminal tests:','line_number':10,'multiline':False]
['text':' - Web https://github.com/microsoft/vscode/issues/92826','line_number':11,'multiline':False]
['text':' Trigger extension activation and grab the context as some tests depend on it','line_number':16,'multiline':False]
['text':' Disable conpty in integration tests because of https://github.com/microsoft/vscode/issues/76548','line_number':21,'multiline':False]
['text':' Disable exit alerts as tests may trigger then and we're not testing the notifications','line_number':23,'multiline':False]
['text':' Canvas may cause problems when running in a container','line_number':25,'multiline':False]
['text':' Disable env var relaunch for tests to prevent terminals relaunching themselves','line_number':27,'multiline':False]
['text':' Use a single character to avoid winpty/conpty issues with injected sequences','line_number':71,'multiline':False]
['text':' Print an environment variable value so the echo statement doesn't get matched','line_number':88,'multiline':False]
['text':' test('onDidChangeActiveTerminal should fire when new terminals are created', (done) => {','line_number':257,'multiline':False]
['text':' 	const reg1 = window.onDidChangeActiveTerminal((active: Terminal | undefined) => {','line_number':258,'multiline':False]
['text':' 		equal(active, terminal);','line_number':259,'multiline':False]
['text':' 		equal(active, window.activeTerminal);','line_number':260,'multiline':False]
['text':' 		reg1.dispose();','line_number':261,'multiline':False]
['text':' 		const reg2 = window.onDidChangeActiveTerminal((active: Terminal | undefined) => {','line_number':262,'multiline':False]
['text':' 			equal(active, undefined);','line_number':263,'multiline':False]
['text':' 			equal(active, window.activeTerminal);','line_number':264,'multiline':False]
['text':' 			reg2.dispose();','line_number':265,'multiline':False]
['text':' 			done();','line_number':266,'multiline':False]
['text':' 		});','line_number':267,'multiline':False]
['text':' 		terminal.dispose();','line_number':268,'multiline':False]
['text':' 	});','line_number':269,'multiline':False]
['text':' 	const terminal = window.createTerminal();','line_number':270,'multiline':False]
['text':' 	terminal.show();','line_number':271,'multiline':False]
['text':' });','line_number':272,'multiline':False]
['text':' test('onDidChangeTerminalDimensions should fire when new terminals are created', (done) => {','line_number':274,'multiline':False]
['text':' 	const reg1 = window.onDidChangeTerminalDimensions(async (event: TerminalDimensionsChangeEvent) => {','line_number':275,'multiline':False]
['text':' 		equal(event.terminal, terminal1);','line_number':276,'multiline':False]
['text':' 		equal(typeof event.dimensions.columns, 'number');','line_number':277,'multiline':False]
['text':' 		equal(typeof event.dimensions.rows, 'number');','line_number':278,'multiline':False]
['text':' 		ok(event.dimensions.columns > 0);','line_number':279,'multiline':False]
['text':' 		ok(event.dimensions.rows > 0);','line_number':280,'multiline':False]
['text':' 		reg1.dispose();','line_number':281,'multiline':False]
['text':' 		let terminal2: Terminal;','line_number':282,'multiline':False]
['text':' 		const reg2 = window.onDidOpenTerminal((newTerminal) => {','line_number':283,'multiline':False]
['text':' 			// This is guarantees to fire before dimensions change event','line_number':284,'multiline':False]
['text':' 			if (newTerminal !== terminal1) {','line_number':285,'multiline':False]
['text':' 				terminal2 = newTerminal;','line_number':286,'multiline':False]
['text':' 				reg2.dispose();','line_number':287,'multiline':False]
['text':' 			}','line_number':288,'multiline':False]
['text':' 		});','line_number':289,'multiline':False]
['text':' 		let firstCalled = false;','line_number':290,'multiline':False]
['text':' 		let secondCalled = false;','line_number':291,'multiline':False]
['text':' 		const reg3 = window.onDidChangeTerminalDimensions((event: TerminalDimensionsChangeEvent) => {','line_number':292,'multiline':False]
['text':' 			if (event.terminal === terminal1) {','line_number':293,'multiline':False]
['text':' 				// The original terminal should fire dimension change after a split','line_number':294,'multiline':False]
['text':' 				firstCalled = true;','line_number':295,'multiline':False]
['text':' 			} else if (event.terminal !== terminal1) {','line_number':296,'multiline':False]
['text':' 				// The new split terminal should fire dimension change','line_number':297,'multiline':False]
['text':' 				secondCalled = true;','line_number':298,'multiline':False]
['text':' 			}','line_number':299,'multiline':False]
['text':' 			if (firstCalled && secondCalled) {','line_number':300,'multiline':False]
['text':' 				let firstDisposed = false;','line_number':301,'multiline':False]
['text':' 				let secondDisposed = false;','line_number':302,'multiline':False]
['text':' 				const reg4 = window.onDidCloseTerminal(term => {','line_number':303,'multiline':False]
['text':' 					if (term === terminal1) {','line_number':304,'multiline':False]
['text':' 						firstDisposed = true;','line_number':305,'multiline':False]
['text':' 					}','line_number':306,'multiline':False]
['text':' 					if (term === terminal2) {','line_number':307,'multiline':False]
['text':' 						secondDisposed = true;','line_number':308,'multiline':False]
['text':' 					}','line_number':309,'multiline':False]
['text':' 					if (firstDisposed && secondDisposed) {','line_number':310,'multiline':False]
['text':' 						reg4.dispose();','line_number':311,'multiline':False]
['text':' 						done();','line_number':312,'multiline':False]
['text':' 					}','line_number':313,'multiline':False]
['text':' 				});','line_number':314,'multiline':False]
['text':' 				terminal1.dispose();','line_number':315,'multiline':False]
['text':' 				terminal2.dispose();','line_number':316,'multiline':False]
['text':' 				reg3.dispose();','line_number':317,'multiline':False]
['text':' 			}','line_number':318,'multiline':False]
['text':' 		});','line_number':319,'multiline':False]
['text':' 		await timeout(500);','line_number':320,'multiline':False]
['text':' 		commands.executeCommand('workbench.action.terminal.split');','line_number':321,'multiline':False]
['text':' 	});','line_number':322,'multiline':False]
['text':' 	const terminal1 = window.createTerminal({ name: 'test' });','line_number':323,'multiline':False]
['text':' 	terminal1.show();','line_number':324,'multiline':False]
['text':' });','line_number':325,'multiline':False]
['text':' Wait for some terminal data','line_number':360,'multiline':False]
['text':' Wait for some terminal data','line_number':374,'multiline':False]
['text':' still flaky with retries, skipping https://github.com/microsoft/vscode/issues/193505','line_number':390,'multiline':False]
['text':' This test has been flaky in the past but it's not clear why, possibly because','line_number':392,'multiline':False]
['text':' events from previous tests polluting the event recording in this test. Retries','line_number':393,'multiline':False]
['text':' was added so we continue to have coverage of the onDidWriteTerminalData API.','line_number':394,'multiline':False]
['text':' Wait until the data is written','line_number':439,'multiline':False]
['text':' Wait until the terminal is closed','line_number':444,'multiline':False]
['text':' Wait until the data is written','line_number':456,'multiline':False]
['text':' Wait until the terminal is closed','line_number':461,'multiline':False]
['text':' The below tests depend on global UI state and each other','line_number':497,'multiline':False]
['text':' test('should not provide dimensions on start as the terminal has not been shown yet', (done) => {','line_number':498,'multiline':False]
['text':' 	const reg1 = window.onDidOpenTerminal(term => {','line_number':499,'multiline':False]
['text':' 		equal(terminal, term);','line_number':500,'multiline':False]
['text':' 		reg1.dispose();','line_number':501,'multiline':False]
['text':' 	});','line_number':502,'multiline':False]
['text':' 	const pty: Pseudoterminal = {','line_number':503,'multiline':False]
['text':' 		onDidWrite: new EventEmitter<string>().event,','line_number':504,'multiline':False]
['text':' 		open: (dimensions) => {','line_number':505,'multiline':False]
['text':' 			equal(dimensions, undefined);','line_number':506,'multiline':False]
['text':' 			const reg3 = window.onDidCloseTerminal(() => {','line_number':507,'multiline':False]
['text':' 				reg3.dispose();','line_number':508,'multiline':False]
['text':' 				done();','line_number':509,'multiline':False]
['text':' 			});','line_number':510,'multiline':False]
['text':' 			// Show a terminal and wait a brief period before dispose, this will cause','line_number':511,'multiline':False]
['text':' 			// the panel to init it's dimenisons and be provided to following terminals.','line_number':512,'multiline':False]
['text':' 			// The following test depends on this.','line_number':513,'multiline':False]
['text':' 			terminal.show();','line_number':514,'multiline':False]
['text':' 			setTimeout(() => terminal.dispose(), 200);','line_number':515,'multiline':False]
['text':' 		},','line_number':516,'multiline':False]
['text':' 		close: () => {}','line_number':517,'multiline':False]
['text':' 	};','line_number':518,'multiline':False]
['text':' 	const terminal = window.createTerminal({ name: 'foo', pty });','line_number':519,'multiline':False]
['text':' });','line_number':520,'multiline':False]
['text':' test('should provide dimensions on start as the terminal has been shown', (done) => {','line_number':521,'multiline':False]
['text':' 	const reg1 = window.onDidOpenTerminal(term => {','line_number':522,'multiline':False]
['text':' 		equal(terminal, term);','line_number':523,'multiline':False]
['text':' 		reg1.dispose();','line_number':524,'multiline':False]
['text':' 	});','line_number':525,'multiline':False]
['text':' 	const pty: Pseudoterminal = {','line_number':526,'multiline':False]
['text':' 		onDidWrite: new EventEmitter<string>().event,','line_number':527,'multiline':False]
['text':' 		open: (dimensions) => {','line_number':528,'multiline':False]
['text':' 			// This test depends on Terminal.show being called some time before such','line_number':529,'multiline':False]
['text':' 			// that the panel dimensions are initialized and cached.','line_number':530,'multiline':False]
['text':' 			ok(dimensions!.columns > 0);','line_number':531,'multiline':False]
['text':' 			ok(dimensions!.rows > 0);','line_number':532,'multiline':False]
['text':' 			const reg3 = window.onDidCloseTerminal(() => {','line_number':533,'multiline':False]
['text':' 				reg3.dispose();','line_number':534,'multiline':False]
['text':' 				done();','line_number':535,'multiline':False]
['text':' 			});','line_number':536,'multiline':False]
['text':' 			terminal.dispose();','line_number':537,'multiline':False]
['text':' 		},','line_number':538,'multiline':False]
['text':' 		close: () => {}','line_number':539,'multiline':False]
['text':' 	};','line_number':540,'multiline':False]
['text':' 	const terminal = window.createTerminal({ name: 'foo', pty });','line_number':541,'multiline':False]
['text':' });','line_number':542,'multiline':False]
['text':' TODO: Fix test, flaky in CI (local and remote) https://github.com/microsoft/vscode/issues/137155','line_number':544,'multiline':False]
['text':' Exit the test early if dimensions already match which may happen if the exthost','line_number':562,'multiline':False]
['text':' has high latency','line_number':563,'multiline':False]
['text':' TODO: Remove logs when the test is verified as non-flaky','line_number':567,'multiline':False]
['text':' Does this never fire because it's already set to 10x5?','line_number':569,'multiline':False]
['text':' The default pty dimensions have a chance to appear here since override','line_number':572,'multiline':False]
['text':' dimensions happens after the terminal is created. If so just ignore and','line_number':573,'multiline':False]
['text':' wait for the right dimensions','line_number':574,'multiline':False]
['text':' Wait 500ms as any exits that occur within 500ms of terminal launch are','line_number':670,'multiline':False]
['text':' are counted as "exiting during launch" which triggers a notification even','line_number':671,'multiline':False]
['text':' when showExitAlerts is true','line_number':672,'multiline':False]
['text':' Setup collection and create terminal','line_number':720,'multiline':False]
['text':' Listen for all data events','line_number':734,'multiline':False]
['text':' Run both PowerShell and sh commands, errors don't matter we're just looking for','line_number':743,'multiline':False]
['text':' the correct output','line_number':744,'multiline':False]
['text':' Poll for the echo results to show up','line_number':752,'multiline':False]
['text':' Wait for terminal to be disposed','line_number':757,'multiline':False]
['text':' Setup collection and create terminal','line_number':765,'multiline':False]
['text':' Listen for all data events','line_number':779,'multiline':False]
['text':' Run both PowerShell and sh commands, errors don't matter we're just looking for','line_number':788,'multiline':False]
['text':' the correct output','line_number':789,'multiline':False]
['text':' Poll for the echo results to show up','line_number':797,'multiline':False]
['text':' Wait for terminal to be disposed','line_number':802,'multiline':False]
['text':' Setup collection and create terminal','line_number':810,'multiline':False]
['text':' Listen for all data events','line_number':823,'multiline':False]
['text':' Run both PowerShell and sh commands, errors don't matter we're just looking for','line_number':832,'multiline':False]
['text':' the correct output','line_number':833,'multiline':False]
['text':' Poll for the echo results to show up','line_number':839,'multiline':False]
['text':' Wait for terminal to be disposed','line_number':843,'multiline':False]
['text':' Setup collection and create terminal','line_number':851,'multiline':False]
['text':' Listen for all data events','line_number':864,'multiline':False]
['text':' Run both PowerShell and sh commands, errors don't matter we're just looking for','line_number':873,'multiline':False]
['text':' the correct output','line_number':874,'multiline':False]
['text':' Poll for the echo results to show up','line_number':880,'multiline':False]
['text':' Wait for terminal to be disposed','line_number':884,'multiline':False]
['text':' Verify get','line_number':897,'multiline':False]
['text':' Verify forEach','line_number':905,'multiline':False]
['text':' Verify get for scope','line_number':926,'multiline':False]
['text':' Verify forEach','line_number':936,'multiline':False]
['text':' Strip NL/CR so terminal dimensions don't impact tests','line_number':951,'multiline':False]
['text':' Strip escape sequences so winpty/conpty doesn't cause flakiness, do for all platforms for','line_number':954,'multiline':False]
['text':' consistency','line_number':955,'multiline':False]
