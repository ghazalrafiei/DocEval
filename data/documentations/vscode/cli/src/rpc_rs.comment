['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]
['text':'/ Serialization is given to the RpcBuilder and defines how data gets serialized','line_number':40,'multiline':False]
['text':'/ when callinth methods.','line_number':41,'multiline':False]
['text':'/ RPC is a basic, transport-agnostic builder for RPC methods. You can','line_number':47,'multiline':False]
['text':'/ register methods to it, then call `.build()` to get a "dispatcher" type.','line_number':48,'multiline':False]
['text':'/ Creates a new empty RPC builder.','line_number':56,'multiline':False]
['text':'/ Creates a caller that will be connected to any eventual dispatchers,','line_number':65,'multiline':False]
['text':'/ and that sends data to the "tx" channel.','line_number':66,'multiline':False]
['text':'/ Gets a method builder.','line_number':75,'multiline':False]
['text':'/ Registers a synchronous rpc call that returns its result directly.','line_number':100,'multiline':False]
['text':'/ Registers an async rpc call that returns a Future.','line_number':147,'multiline':False]
['text':'/ Registers an async rpc call that returns a Future containing a duplex','line_number':201,'multiline':False]
['text':'/ stream that should be handled by the client.','line_number':202,'multiline':False]
['text':'/ Builds into a usable, sync rpc dispatcher.','line_number':274,'multiline':False]
['text':'/ Dispatcher returned from a Builder that provides a transport-agnostic way to','line_number':306,'multiline':False]
['text':'/ deserialize and dispatch RPC calls. This structure may get more advanced as','line_number':307,'multiline':False]
['text':'/ time goes on...','line_number':308,'multiline':False]
['text':'/ Enqueues an outbound call. Returns whether the message was enqueued.','line_number':330,'multiline':False]
['text':'/ Enqueues an outbound call, returning its result.','line_number':341,'multiline':False]
['text':'/ Dispatcher returned from a Builder that provides a transport-agnostic way to','line_number':384,'multiline':False]
['text':'/ deserialize and handle RPC calls. This structure may get more advanced as','line_number':385,'multiline':False]
['text':'/ time goes on...','line_number':386,'multiline':False]
['text':'/ Runs the incoming request, returning the result of the call synchronously','line_number':403,'multiline':False]
['text':'/ or in a future. (The caller can then decide whether to run the future','line_number':404,'multiline':False]
['text':'/ sequentially in its receive loop, or not.)','line_number':405,'multiline':False]
['text':'/','line_number':406,'multiline':False]
['text':'/ The future or return result will be optional bytes that should be sent','line_number':407,'multiline':False]
['text':'/ back to the socket.','line_number':408,'multiline':False]
['text':'/ Like dispatch, but allows passing an existing PartialIncoming.','line_number':419,'multiline':False]
['text':'/ Registers a stream call returned from dispatch().','line_number':452,'multiline':False]
['text':' will shut down in write loop','line_number':553,'multiline':False]
['text':' do this outside of the sync lock:','line_number':558,'multiline':False]
['text':'/ Write loop started by `Streams.write`. It takes the WriteHalf, and','line_number':587,'multiline':False]
['text':'/ runs until there's no more items in the 'write queue'. At that point, if the','line_number':588,'multiline':False]
['text':'/ record still exists in the `streams` (i.e. we haven't shut down), it'll','line_number':589,'multiline':False]
['text':'/ return the WriteHalf so that the next `write` call starts','line_number':590,'multiline':False]
['text':'/ the loop again. Otherwise, it'll shut down the WriteHalf.','line_number':591,'multiline':False]
['text':'/','line_number':592,'multiline':False]
['text':'/ This is the equivalent of the same write_loop in the server_multiplexer.','line_number':593,'multiline':False]
['text':'/ I couldn't figure out a nice way to abstract it without introducing','line_number':594,'multiline':False]
['text':'/ performance overhead...','line_number':595,'multiline':False]
['text':' got here from `break` above, meaning our record got cleared. Close the bridge if so','line_number':630,'multiline':False]
['text':'/ Approximate shape that is used to determine what kind of data is incoming.','line_number':640,'multiline':False]
['text':' spawn write loop','line_number':746,'multiline':False]
['text':' enqueued while writing','line_number':747,'multiline':False]
['text':' end stream','line_number':748,'multiline':False]
