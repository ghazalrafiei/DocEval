['text':'
This file is part of Telegram Desktop,
the official desktop application for the Telegram messaging service.

For license and copyright information please follow this link:
https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
','line_number':1,'multiline':True]
['text':' CopyPostLink.','line_number':32,'multiline':False]
['text':'auto scrollTop = scrollArea()->scrollTop(), scrollBottom = scrollTop + scrollArea()->height();','line_number':620,'multiline':False]
['text':'auto from = scrollTop, to = scrollTop;','line_number':621,'multiline':False]
['text':'if (scrollTop > top) {','line_number':622,'multiline':False]
['text':'	to = top;','line_number':623,'multiline':False]
['text':'} else if (scrollBottom < bottom) {','line_number':624,'multiline':False]
['text':'	to = bottom - (scrollBottom - scrollTop);','line_number':625,'multiline':False]
['text':'}','line_number':626,'multiline':False]
['text':'if (from != to) {','line_number':627,'multiline':False]
['text':'	_scrollAnimation.start([this]() { scrollAnimationCallback(); }, from, to, st::shareScrollDuration, anim::sineInOut);','line_number':628,'multiline':False]
['text':'}','line_number':629,'multiline':False]
['text':'auto scrollTop = qRound(_scrollAnimation.current(scrollArea()->scrollTop()));','line_number':633,'multiline':False]
['text':'scrollArea()->scrollToY(scrollTop);','line_number':634,'multiline':False]
['text':' Count SHA1() of data.','line_number':1297,'multiline':False]
['text':'// Mix in channel access hash to the first 64 bits of SHA1 of data.','line_number':1302,'multiline':False]
['text':'*reinterpret_cast<uint64*>(shareHashEncrypted.data()) ^= channelAccessHash;','line_number':1303,'multiline':False]
['text':' Encrypt data.','line_number':1305,'multiline':False]
['text':' Share clicked already.','line_number':1355,'multiline':False]
['text':' send_as','line_number':1446,'multiline':False]
['text':' Decrypt data.','line_number':1568,'multiline':False]
['text':' Count SHA1() of data.','line_number':1574,'multiline':False]
['text':'// Mix out channel access hash from the first 64 bits of SHA1 of data.','line_number':1578,'multiline':False]
['text':'auto channelAccessHash = *reinterpret_cast<uint64*>(hashEncrypted.data()) ^ *reinterpret_cast<uint64*>(dataSha1);','line_number':1579,'multiline':False]
['text':'// Check next 64 bits of SHA1() of data.','line_number':1581,'multiline':False]
['text':'auto skipSha1Part = sizeof(channelAccessHash);','line_number':1582,'multiline':False]
['text':'if (memcmp(dataSha1 + skipSha1Part, hashEncrypted.constData() + skipSha1Part, key128Size - skipSha1Part) != 0) {','line_number':1583,'multiline':False]
['text':'	Ui::show(Box<Ui::InformBox>(tr::lng_share_wrong_user(tr::now)));','line_number':1584,'multiline':False]
['text':'	return;','line_number':1585,'multiline':False]
['text':'}','line_number':1586,'multiline':False]
['text':' Check 128 bits of SHA1() of data.','line_number':1588,'multiline':False]
['text':' If there is no channel id, there should be no channel access_hash.','line_number':1607,'multiline':False]
