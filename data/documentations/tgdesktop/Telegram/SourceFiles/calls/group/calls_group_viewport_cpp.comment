['text':'
This file is part of Telegram Desktop,
the official desktop application for the Telegram messaging service.

For license and copyright information please follow this link:
https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
','line_number':1,'multiline':True]
['text':' MuteButtonTooltip.','line_number':24,'multiline':False]
['text':' namespace','line_number':48,'multiline':False]
['text':' If a video get's switched off, GroupCall first unpins it,','line_number':539,'multiline':False]
['text':' then removes it from Large endpoint, then removes from active tracks.','line_number':540,'multiline':False]
['text':'','line_number':541,'multiline':False]
['text':' If we want to animate large video removal properly, we need to','line_number':542,'multiline':False]
['text':' delay this update and start animation directly from removing of the','line_number':543,'multiline':False]
['text':' track from the active list. Otherwise final state won't be correct.','line_number':544,'multiline':False]
['text':'return rpl::single(std::make_tuple(','line_number':866,'multiline':False]
['text':'	(Data::GroupCall*)nullptr,','line_number':867,'multiline':False]
['text':'	call->scheduleDate()','line_number':868,'multiline':False]
['text':')) | rpl::then(call->real(','line_number':869,'multiline':False]
['text':') | rpl::map([](not_null<Data::GroupCall*> real) {','line_number':870,'multiline':False]
['text':'	using namespace rpl::mappers;','line_number':871,'multiline':False]
['text':'	return real->scheduleDateValue(','line_number':872,'multiline':False]
['text':'	) | rpl::map([=](TimeId scheduleDate) {','line_number':873,'multiline':False]
['text':'		return std::make_tuple(real.get(), scheduleDate);','line_number':874,'multiline':False]
['text':'	});','line_number':875,'multiline':False]
['text':'}) | rpl::flatten_latest(','line_number':876,'multiline':False]
['text':')) | rpl::map([=](','line_number':877,'multiline':False]
['text':'		Data::GroupCall *real,','line_number':878,'multiline':False]
['text':'		TimeId scheduleDate) -> rpl::producer<QString> {','line_number':879,'multiline':False]
['text':'	if (scheduleDate) {','line_number':880,'multiline':False]
['text':'		return rpl::combine(','line_number':881,'multiline':False]
['text':'			call->canManageValue(),','line_number':882,'multiline':False]
['text':'			(real','line_number':883,'multiline':False]
['text':'				? real->scheduleStartSubscribedValue()','line_number':884,'multiline':False]
['text':'				: rpl::single(false))','line_number':885,'multiline':False]
['text':'		) | rpl::map([](bool canManage, bool subscribed) {','line_number':886,'multiline':False]
['text':'			return canManage','line_number':887,'multiline':False]
['text':'				? tr::lng_group_call_start_now()','line_number':888,'multiline':False]
['text':'				: subscribed','line_number':889,'multiline':False]
['text':'				? tr::lng_group_call_cancel_reminder()','line_number':890,'multiline':False]
['text':'				: tr::lng_group_call_set_reminder();','line_number':891,'multiline':False]
['text':'		}) | rpl::flatten_latest();','line_number':892,'multiline':False]
['text':'	}','line_number':893,'multiline':False]
['text':'}) | rpl::flatten_latest();','line_number':912,'multiline':False]
['text':' namespace Calls::Group','line_number':915,'multiline':False]
