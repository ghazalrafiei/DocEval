['text':'
This file is part of Telegram Desktop,
the official desktop application for the Telegram messaging service.

For license and copyright information please follow this link:
https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
','line_number':1,'multiline':True]
['text':' ...TogglePinnedToast.','line_number':35,'multiline':False]
['text':' PrepareShareBox.','line_number':36,'multiline':False]
['text':' namespace','line_number':76,'multiline':False]
['text':' For downloads manager.','line_number':194,'multiline':False]
['text':' Don't allow forwarding more than one story.','line_number':358,'multiline':False]
['text':' ignore mouse press, that was hiding context menu','line_number':843,'multiline':False]
['text':' #TODO text selection','line_number':901,'multiline':False]
['text':'	return dynamic_cast<Sticker*>(layout->getMedia());','line_number':1438,'multiline':False]
['text':' #TODO scroll by drag','line_number':1602,'multiline':False]
['text':'if (_mouseAction == MouseAction::Selecting) {','line_number':1603,'multiline':False]
['text':'	_widget->checkSelectingScroll(mousePos);','line_number':1604,'multiline':False]
['text':'} else {','line_number':1605,'multiline':False]
['text':'	clearDragSelection();','line_number':1606,'multiline':False]
['text':'	_widget->noSelectingScroll();','line_number':1607,'multiline':False]
['text':'}','line_number':1608,'multiline':False]
['text':' In shared media overview drag only by click handlers.','line_number':1701,'multiline':False]
['text':' start items drag','line_number':1702,'multiline':False]
['text':' start items select','line_number':1704,'multiline':False]
['text':' start text drag','line_number':1737,'multiline':False]
['text':' start items select','line_number':1759,'multiline':False]
['text':'	_widget->noSelectingScroll(); // #TODO scroll by drag','line_number':1776,'multiline':False]
['text':'QList<QUrl> urls;','line_number':1803,'multiline':False]
['text':'		sel = getSelectedText();','line_number':1805,'multiline':False]
['text':'if (!sel.isEmpty() && sel.at(0) != '/' && sel.at(0) != '@' && sel.at(0) != '#') {','line_number':1808,'multiline':False]
['text':'	urls.push_back(QUrl::fromEncoded(sel.toUtf8())); // Google Chrome crashes in Mac OS X O_o','line_number':1809,'multiline':False]
['text':'}','line_number':1810,'multiline':False]
['text':'if (auto mimeData = MimeDataFromText(sel)) {','line_number':1812,'multiline':False]
['text':'	clearDragSelection();','line_number':1813,'multiline':False]
['text':'	_widget->noSelectingScroll();','line_number':1814,'multiline':False]
['text':'	if (!urls.isEmpty()) mimeData->setUrls(urls);','line_number':1816,'multiline':False]
['text':'	if (uponSelected && !Adaptive::OneColumn()) {','line_number':1817,'multiline':False]
['text':'		auto selectedState = getSelectionState();','line_number':1818,'multiline':False]
['text':'		if (selectedState.count > 0 && selectedState.count == selectedState.canForwardCount) {','line_number':1819,'multiline':False]
['text':'			session().data().setMimeForwardIds(collectSelectedIds());','line_number':1820,'multiline':False]
['text':'			mimeData->setData(u"application/x-td-forward"_q, "1");','line_number':1821,'multiline':False]
['text':'		}','line_number':1822,'multiline':False]
['text':'	}','line_number':1823,'multiline':False]
['text':'	_controller->parentController()->window()->launchDrag(std::move(mimeData));','line_number':1824,'multiline':False]
['text':'	return;','line_number':1825,'multiline':False]
['text':'} else {','line_number':1826,'multiline':False]
['text':'	auto forwardMimeType = QString();','line_number':1827,'multiline':False]
['text':'	auto pressedMedia = static_cast<HistoryView::Media*>(nullptr);','line_number':1828,'multiline':False]
['text':'	if (auto pressedItem = _pressState.layout) {','line_number':1829,'multiline':False]
['text':'		pressedMedia = pressedItem->getMedia();','line_number':1830,'multiline':False]
['text':'		if (_mouseCursorState == CursorState::Date) {','line_number':1831,'multiline':False]
['text':'			session().data().setMimeForwardIds(session().data().itemOrItsGroup(pressedItem));','line_number':1832,'multiline':False]
['text':'			forwardMimeType = u"application/x-td-forward"_q;','line_number':1833,'multiline':False]
['text':'		}','line_number':1834,'multiline':False]
['text':'	}','line_number':1835,'multiline':False]
['text':'	if (auto pressedLnkItem = App::pressedLinkItem()) {','line_number':1836,'multiline':False]
['text':'		if ((pressedMedia = pressedLnkItem->getMedia())) {','line_number':1837,'multiline':False]
['text':'			if (forwardMimeType.isEmpty() && pressedMedia->dragItemByHandler(pressedHandler)) {','line_number':1838,'multiline':False]
['text':'				session().data().setMimeForwardIds({ 1, pressedLnkItem->fullId() });','line_number':1839,'multiline':False]
['text':'				forwardMimeType = u"application/x-td-forward"_q;','line_number':1840,'multiline':False]
['text':'			}','line_number':1841,'multiline':False]
['text':'		}','line_number':1842,'multiline':False]
['text':'	}','line_number':1843,'multiline':False]
['text':'	if (!forwardMimeType.isEmpty()) {','line_number':1844,'multiline':False]
['text':'		auto mimeData = std::make_unique<QMimeData>();','line_number':1845,'multiline':False]
['text':'		mimeData->setData(forwardMimeType, "1");','line_number':1846,'multiline':False]
['text':'		if (auto document = (pressedMedia ? pressedMedia->getDocument() : nullptr)) {','line_number':1847,'multiline':False]
['text':'			auto filepath = document->filepath(true);','line_number':1848,'multiline':False]
['text':'			if (!filepath.isEmpty()) {','line_number':1849,'multiline':False]
['text':'				QList<QUrl> urls;','line_number':1850,'multiline':False]
['text':'				urls.push_back(QUrl::fromLocalFile(filepath));','line_number':1851,'multiline':False]
['text':'				mimeData->setUrls(urls);','line_number':1852,'multiline':False]
['text':'			}','line_number':1853,'multiline':False]
['text':'		}','line_number':1854,'multiline':False]
['text':'		// This call enters event loop and can destroy any QObject.','line_number':1856,'multiline':False]
['text':'		_controller->parentController()->window()->launchDrag(std::move(mimeData));','line_number':1857,'multiline':False]
['text':'		return;','line_number':1858,'multiline':False]
['text':'	}','line_number':1859,'multiline':False]
['text':'}','line_number':1860,'multiline':False]
['text':'_controller->parentController()->window()->setInnerFocus(); // #TODO focus','line_number':1920,'multiline':False]
['text':'_widget->noSelectingScroll(); // #TODO scroll by drag','line_number':1926,'multiline':False]
['text':'_widget->updateTopBarSelection();','line_number':1927,'multiline':False]
['text':'if (QGuiApplication::clipboard()->supportsSelection() && hasSelectedText()) { // #TODO linux clipboard','line_number':1929,'multiline':False]
['text':'	TextUtilities::SetClipboardText(_selected.cbegin()->first->selectedText(_selected.cbegin()->second), QClipboard::Selection);','line_number':1930,'multiline':False]
['text':'}','line_number':1931,'multiline':False]
['text':' We don't want it to be called after ListWidget is destroyed.','line_number':2027,'multiline':False]
['text':' namespace Media','line_number':2032,'multiline':False]
['text':' namespace Info','line_number':2033,'multiline':False]
