['text':'===-- allocator_config.h --------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]
['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]
['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]
['text':' To import a custom configuration, define `SCUDO_USE_CUSTOM_CONFIG` and','line_number':22,'multiline':False]
['text':' aliasing the `Config` like:','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':' namespace scudo {','line_number':25,'multiline':False]
['text':'   // The instance of Scudo will be initiated with `Config`.','line_number':26,'multiline':False]
['text':'   typedef CustomConfig Config;','line_number':27,'multiline':False]
['text':'   // Aliasing as default configuration to run the tests with this config.','line_number':28,'multiline':False]
['text':'   typedef CustomConfig DefaultConfig;','line_number':29,'multiline':False]
['text':' } // namespace scudo','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' Put them in the header `custom_scudo_config.h` then you will be using the','line_number':32,'multiline':False]
['text':' custom configuration and able to run all the tests as well.','line_number':33,'multiline':False]
['text':' The combined allocator uses a structure as a template argument that','line_number':40,'multiline':False]
['text':' specifies the configuration options for the various subcomponents of the','line_number':41,'multiline':False]
['text':' allocator.','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':' struct ExampleConfig {','line_number':44,'multiline':False]
['text':'   // Indicates possible support for Memory Tagging.','line_number':45,'multiline':False]
['text':'   static const bool MaySupportMemoryTagging = false;','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':'   // Thread-Specific Data Registry used, shared or exclusive.','line_number':48,'multiline':False]
['text':'   template <class A> using TSDRegistryT = TSDRegistrySharedT<A, 8U, 4U>;','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':'   struct Primary {','line_number':51,'multiline':False]
['text':'     // SizeClassMap to use with the Primary.','line_number':52,'multiline':False]
['text':'     using SizeClassMap = DefaultSizeClassMap;','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':'     // Log2 of the size of a size class region, as used by the Primary.','line_number':55,'multiline':False]
['text':'     static const uptr RegionSizeLog = 30U;','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':'     // Log2 of the size of block group, as used by the Primary. Each group','line_number':58,'multiline':False]
['text':'     // contains a range of memory addresses, blocks in the range will belong','line_number':59,'multiline':False]
['text':'     // to the same group. In general, single region may have 1 or 2MB group','line_number':60,'multiline':False]
['text':'     // size. Multiple regions will have the group size equal to the region','line_number':61,'multiline':False]
['text':'     // size because the region size is usually smaller than 1 MB.','line_number':62,'multiline':False]
['text':'     // Smaller value gives fine-grained control of memory usage but the','line_number':63,'multiline':False]
['text':'     // trade-off is that it may take longer time of deallocation.','line_number':64,'multiline':False]
['text':'     static const uptr GroupSizeLog = 20U;','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':'     // Defines the type and scale of a compact pointer. A compact pointer can','line_number':67,'multiline':False]
['text':'     // be understood as the offset of a pointer within the region it belongs','line_number':68,'multiline':False]
['text':'     // to, in increments of a power-of-2 scale.','line_number':69,'multiline':False]
['text':'     // eg: Ptr = Base + (CompactPtr << Scale).','line_number':70,'multiline':False]
['text':'     typedef u32 CompactPtrT;','line_number':71,'multiline':False]
['text':'     static const uptr CompactPtrScale = SCUDO_MIN_ALIGNMENT_LOG;','line_number':72,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':'     // Indicates support for offsetting the start of a region by','line_number':74,'multiline':False]
['text':'     // a random number of pages. Only used with primary64.','line_number':75,'multiline':False]
['text':'     static const bool EnableRandomOffset = true;','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':'     // Call map for user memory with at least this size. Only used with','line_number':78,'multiline':False]
['text':'     // primary64.','line_number':79,'multiline':False]
['text':'     static const uptr MapSizeIncrement = 1UL << 18;','line_number':80,'multiline':False]
['text':'','line_number':81,'multiline':False]
['text':'     // Defines the minimal & maximal release interval that can be set.','line_number':82,'multiline':False]
['text':'     static const s32 MinReleaseToOsIntervalMs = INT32_MIN;','line_number':83,'multiline':False]
['text':'     static const s32 MaxReleaseToOsIntervalMs = INT32_MAX;','line_number':84,'multiline':False]
['text':'   };','line_number':85,'multiline':False]
['text':'   // Defines the type of Primary allocator to use.','line_number':86,'multiline':False]
['text':'   template <typename Config> using PrimaryT = SizeClassAllocator64<Config>;','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':'   // Defines the type of cache used by the Secondary. Some additional','line_number':89,'multiline':False]
['text':'   // configuration entries can be necessary depending on the Cache.','line_number':90,'multiline':False]
['text':'   struct Secondary {','line_number':91,'multiline':False]
['text':'     struct Cache {','line_number':92,'multiline':False]
['text':'       static const u32 EntriesArraySize = 32U;','line_number':93,'multiline':False]
['text':'       static const u32 QuarantineSize = 0U;','line_number':94,'multiline':False]
['text':'       static const u32 DefaultMaxEntriesCount = 32U;','line_number':95,'multiline':False]
['text':'       static const uptr DefaultMaxEntrySize = 1UL << 19;','line_number':96,'multiline':False]
['text':'       static const s32 MinReleaseToOsIntervalMs = INT32_MIN;','line_number':97,'multiline':False]
['text':'       static const s32 MaxReleaseToOsIntervalMs = INT32_MAX;','line_number':98,'multiline':False]
['text':'     };','line_number':99,'multiline':False]
['text':'     // Defines the type of Secondary Cache to use.','line_number':100,'multiline':False]
['text':'     template <typename Config> using CacheT = MapAllocatorCache<Config>;','line_number':101,'multiline':False]
['text':'   };','line_number':102,'multiline':False]
['text':'   // Defines the type of Secondary allocator to use.','line_number':103,'multiline':False]
['text':'   template <typename Config> using SecondaryT = MapAllocator<Config>;','line_number':104,'multiline':False]
['text':' };','line_number':105,'multiline':False]
['text':' Default configurations for various platforms. Note this is only enabled when','line_number':109,'multiline':False]
['text':' there's no custom configuration in the build system.','line_number':110,'multiline':False]
['text':' Exclusive','line_number':113,'multiline':False]
['text':' SCUDO_USE_CUSTOM_CONFIG','line_number':153,'multiline':False]
['text':' Shared, max 8 TSDs.','line_number':158,'multiline':False]
['text':' Shared, max 2 TSDs.','line_number':201,'multiline':False]
['text':' Shared, max 8 TSDs.','line_number':246,'multiline':False]
['text':' Support 39-bit VMA for riscv-64','line_number':251,'multiline':False]
['text':' Shared, max 1 TSD.','line_number':276,'multiline':False]
['text':' SCUDO_USE_CUSTOM_CONFIG','line_number':311,'multiline':False]
['text':' namespace scudo','line_number':313,'multiline':False]
['text':' SCUDO_ALLOCATOR_CONFIG_H_','line_number':315,'multiline':False]
