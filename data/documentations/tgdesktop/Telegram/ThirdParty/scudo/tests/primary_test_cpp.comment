['text':'===-- primary_test.cpp ----------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]
['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]
['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]
['text':' Note that with small enough regions, the SizeClassAllocator64 also works on','line_number':24,'multiline':False]
['text':' 32-bit architectures. It's not something we want to encourage, but we still','line_number':25,'multiline':False]
['text':' should ensure the tests pass.','line_number':26,'multiline':False]
['text':' Unable to allocate greater size on QEMU-user.','line_number':50,'multiline':False]
['text':' Unable to allocate greater size on QEMU-user.','line_number':71,'multiline':False]
['text':' Unable to allocate greater size on QEMU-user.','line_number':92,'multiline':False]
['text':'ReleaseToOsInterval=','line_number':164,'multiline':True]
['text':' The 64-bit SizeClassAllocator can be easily OOM'd with small region sizes.','line_number':205,'multiline':False]
['text':' For the 32-bit one, it requires actually exhausting memory, so we skip it.','line_number':206,'multiline':False]
['text':'ReleaseToOsInterval=','line_number':211,'multiline':True]
['text':'ReleaseToOsInterval=','line_number':251,'multiline':True]
['text':'ReleaseToOsInterval=','line_number':288,'multiline':True]
['text':' Try to interleave pushBlocks(), popBatch() and releaseToOS().','line_number':313,'multiline':False]
['text':' This increases the chance of having non-full TransferBatches and it','line_number':320,'multiline':False]
['text':' will jump into the code path of merging TransferBatches.','line_number':321,'multiline':False]
['text':' Through a simple allocation that spans two pages, verify that releaseToOS','line_number':341,'multiline':False]
['text':' actually releases some bytes (at least one page worth). This is a regression','line_number':342,'multiline':False]
['text':' test for an error in how the release criteria were computed.','line_number':343,'multiline':False]
['text':'ReleaseToOsInterval=','line_number':347,'multiline':True]
['text':'ReleaseToOsInterval=','line_number':363,'multiline':True]
['text':' We will allocate 4 times the group size memory and release all of them. We','line_number':369,'multiline':False]
['text':' expect the free blocks will be classified with groups. Then we will','line_number':370,'multiline':False]
['text':' allocate the same amount of memory as group size and expect the blocks will','line_number':371,'multiline':False]
['text':' have the max address difference smaller or equal to 2 times the group size.','line_number':372,'multiline':False]
['text':' Note that it isn't necessary to be in the range of single group size','line_number':373,'multiline':False]
['text':' because the way we get the group id is doing compact pointer shifting.','line_number':374,'multiline':False]
['text':' According to configuration, the compact pointer may not align to group','line_number':375,'multiline':False]
['text':' size. As a result, the blocks can cross two groups at most.','line_number':376,'multiline':False]
['text':' Release all the allocated blocks, including those held by local cache.','line_number':389,'multiline':False]
