['text':'===-- wrappers_c_test.cpp -------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]
['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]
['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]
['text':' Fuchsia only has valloc','line_number':26,'multiline':False]
['text':' Android only has pvalloc/valloc on 32 bit','line_number':29,'multiline':False]
['text':' !defined(__LP64__)','line_number':33,'multiline':False]
['text':' All others assumed to support both functions.','line_number':35,'multiline':False]
['text':' Note that every C allocation function in the test binary will be fulfilled','line_number':50,'multiline':False]
['text':' by Scudo (this includes the gtest APIs, etc.), which is a test by itself.','line_number':51,'multiline':False]
['text':' But this might also lead to unexpected side-effects, since the allocation and','line_number':52,'multiline':False]
['text':' deallocation operations in the TEST functions will coexist with others (see','line_number':53,'multiline':False]
['text':' the EXPECT_DEATH comment below).','line_number':54,'multiline':False]
['text':' We have to use a small quarantine to make sure that our double-free tests','line_number':56,'multiline':False]
['text':' trigger. Otherwise EXPECT_DEATH ends up reallocating the chunk that was just','line_number':57,'multiline':False]
['text':' freed (this depends on the size obviously) and the following free succeeds.','line_number':58,'multiline':False]
['text':' An update to this warning in Clang now triggers in this line, but it's ok','line_number':68,'multiline':False]
['text':' because the check is expecting a bad pointer and should fail.','line_number':69,'multiline':False]
['text':' Allocating pointers by the powers of 2 from 1 to 0x10000','line_number':120,'multiline':False]
['text':' Using powers of 2 due to memalign using powers of 2 and test more sizes','line_number':121,'multiline':False]
['text':' Reserving space to prevent further allocation during the test','line_number':124,'multiline':False]
['text':' Android's memalign accepts non power-of-2 alignments, and 0.','line_number':163,'multiline':False]
['text':' realloc(nullptr, N) is malloc(N)','line_number':188,'multiline':False]
['text':' realloc(P, 0U) is free(P) and returns nullptr','line_number':195,'multiline':False]
['text':' Android allows realloc of memalign pointers.','line_number':228,'multiline':False]
['text':' mallopt doesn't set errno.','line_number':250,'multiline':False]
['text':' mallinfo is deprecated.','line_number':293,'multiline':False]
['text':' Verify that a block located on an iteration boundary is not mis-accounted.','line_number':341,'multiline':False]
['text':' To achieve this, we allocate a chunk for which the backing block will be','line_number':342,'multiline':False]
['text':' aligned on a page, then run the malloc_iterate on both the pages that the','line_number':343,'multiline':False]
['text':' block is a boundary for. It must only be seen once by the callback function.','line_number':344,'multiline':False]
['text':' Android uses a 16 byte alignment for both 32 bit and 64 bit.','line_number':348,'multiline':False]
['text':' We aren't guaranteed that any size class is exactly a page wide. So we need','line_number':355,'multiline':False]
['text':' to keep making allocations until we get an allocation that starts exactly','line_number':356,'multiline':False]
['text':' on a page boundary. The BlockDelta value is expected to be the number of','line_number':357,'multiline':False]
['text':' bytes to subtract from a returned pointer to get to the actual start of','line_number':358,'multiline':False]
['text':' the pointer in the size class. In practice, this means BlockDelta should','line_number':359,'multiline':False]
['text':' be set to the minimum alignment in bytes for the allocation.','line_number':360,'multiline':False]
['text':'','line_number':361,'multiline':False]
['text':' With a 16-byte block alignment and 4096-byte page size, each allocation has','line_number':362,'multiline':False]
['text':' a probability of (1 - (16/4096)) of failing to meet the alignment','line_number':363,'multiline':False]
['text':' requirements, and the probability of failing 65536 times is','line_number':364,'multiline':False]
['text':' (1 - (16/4096))^65536 < 10^-112. So if we still haven't succeeded after','line_number':365,'multiline':False]
['text':' 65536 tries, give up.','line_number':366,'multiline':False]
['text':' Fuchsia doesn't have alarm, fork or malloc_info.','line_number':395,'multiline':False]
['text':' We expect heap operations within a disable/enable scope to deadlock.','line_number':398,'multiline':False]
['text':' Use volatile so that the allocations don't get optimized away.','line_number':413,'multiline':False]
['text':' fork should stall if the allocator has been disabled.','line_number':449,'multiline':False]
['text':' Initialize the allocator for this thread.','line_number':465,'multiline':False]
['text':' Signal the main thread we are ready.','line_number':471,'multiline':False]
['text':' Wait for the malloc_disable & fork, then enable the allocator again.','line_number':477,'multiline':False]
['text':' Wait for the thread to be warmed up.','line_number':489,'multiline':False]
['text':' Disable the allocator and fork. fork should succeed after malloc_enable.','line_number':495,'multiline':False]
['text':' SCUDO_FUCHSIA','line_number':510,'multiline':False]
