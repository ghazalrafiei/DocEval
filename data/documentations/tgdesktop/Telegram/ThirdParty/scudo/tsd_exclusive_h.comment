['text':'===-- tsd_exclusive.h -----------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]
['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]
['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]
['text':' Sets Initialized.','line_number':42,'multiline':False]
['text':' We don't have a way to iterate all thread local `ThreadTSD`s. Simply','line_number':63,'multiline':False]
['text':' drain the `ThreadTSD` of current thread and `FallbackTSD`.','line_number':64,'multiline':False]
['text':' TODO(chiahungduan): Consider removing the argument `UnlockRequired` by','line_number':77,'multiline':False]
['text':' embedding the logic into TSD or always locking the TSD. It will enable us','line_number':78,'multiline':False]
['text':' to properly mark thread annotation here and adding proper runtime','line_number':79,'multiline':False]
['text':' assertions in the member functions of TSD. For example, assert the lock is','line_number':80,'multiline':False]
['text':' acquired before calling TSD::commitBack().','line_number':81,'multiline':False]
['text':' To disable the exclusive TSD registry, we effectively lock the fallback TSD','line_number':94,'multiline':False]
['text':' and force all threads to attempt to use it instead of their local one.','line_number':95,'multiline':False]
['text':' We don't have a way to iterate all thread local `ThreadTSD`s. Instead of','line_number':119,'multiline':False]
['text':' printing only self `ThreadTSD` which may mislead the usage, we just skip','line_number':120,'multiline':False]
['text':' it.','line_number':121,'multiline':False]
['text':' Using minimal initialization allows for global initialization while keeping','line_number':126,'multiline':False]
['text':' the thread specific structure untouched. The fallback structure will be','line_number':127,'multiline':False]
['text':' used instead.','line_number':128,'multiline':False]
['text':' The glibc POSIX thread-local-storage deallocation routine calls user','line_number':160,'multiline':False]
['text':' provided destructors in a loop of PTHREAD_DESTRUCTOR_ITERATIONS.','line_number':161,'multiline':False]
['text':' We want to be called last since other destructors might call free and the','line_number':162,'multiline':False]
['text':' like, so we wait until PTHREAD_DESTRUCTOR_ITERATIONS before draining the','line_number':163,'multiline':False]
['text':' quarantine and swallowing the cache.','line_number':164,'multiline':False]
['text':' If pthread_setspecific fails, we will go ahead with the teardown.','line_number':167,'multiline':False]
['text':' namespace scudo','line_number':176,'multiline':False]
['text':' SCUDO_TSD_EXCLUSIVE_H_','line_number':178,'multiline':False]
