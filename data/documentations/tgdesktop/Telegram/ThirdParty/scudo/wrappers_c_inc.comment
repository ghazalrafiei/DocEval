['text':'===-- wrappers_c.inc ------------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]
['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]
['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]
['text':' malloc-type functions have to be aligned to std::max_align_t. This is','line_number':13,'multiline':False]
['text':' distinct from (1U << SCUDO_MIN_ALIGNMENT_LOG), since C++ new-type functions','line_number':14,'multiline':False]
['text':' do not have to abide by the same requirement.','line_number':15,'multiline':False]
['text':' Space allocated in mmapped regions (bytes)','line_number':43,'multiline':False]
['text':' Maximum total allocated space (bytes)','line_number':45,'multiline':False]
['text':' Space in freed fastbin blocks (bytes)','line_number':47,'multiline':False]
['text':' Total allocated space (bytes)','line_number':49,'multiline':False]
['text':' Total free space (bytes)','line_number':52,'multiline':False]
['text':' On Android, mallinfo2 is an alias of mallinfo, so don't define both.','line_number':57,'multiline':False]
['text':' Space allocated in mmapped regions (bytes)','line_number':63,'multiline':False]
['text':' Maximum total allocated space (bytes)','line_number':65,'multiline':False]
['text':' Space in freed fastbin blocks (bytes)','line_number':67,'multiline':False]
['text':' Total allocated space (bytes)','line_number':69,'multiline':False]
['text':' Total free space (bytes)','line_number':71,'multiline':False]
['text':' Android rounds up the alignment to a power of two if it isn't one.','line_number':91,'multiline':False]
['text':' pvalloc(0) should allocate one page.','line_number':136,'multiline':False]
['text':' Will set the release values to their minimum values.','line_number':182,'multiline':False]
['text':' Will set the release values to their maximum values.','line_number':185,'multiline':False]
['text':' Disable memory tagging for the heap. The caller must disable memory tag','line_number':264,'multiline':False]
['text':' checks globally (e.g. by clearing TCF0 on aarch64) before calling this','line_number':265,'multiline':False]
['text':' function, and may not re-enable them after calling the function.','line_number':266,'multiline':False]
['text':' Sets whether scudo records stack traces and other metadata for allocations','line_number':271,'multiline':False]
['text':' and deallocations. This function only has an effect if the allocator and','line_number':272,'multiline':False]
['text':' hardware support memory tagging.','line_number':273,'multiline':False]
['text':' Sets whether scudo zero-initializes all allocated memory.','line_number':279,'multiline':False]
['text':' Sets whether scudo pattern-initializes all allocated memory.','line_number':285,'multiline':False]
['text':' Sets whether scudo adds a small amount of slack at the end of large','line_number':292,'multiline':False]
['text':' allocations, before the guard page. This can be enabled to work around buggy','line_number':293,'multiline':False]
['text':' applications that read a few bytes past the end of their allocation.','line_number':294,'multiline':False]
['text':' extern "C"','line_number':300,'multiline':False]
