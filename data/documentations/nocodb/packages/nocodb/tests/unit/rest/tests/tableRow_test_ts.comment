['text':' @ts-ignore','line_number':2,'multiline':False]
['text':' todo: Test contents of file','line_number':335,'multiline':False]
['text':' todo: Test contents of file','line_number':353,'multiline':False]
['text':' todo: Add export test for views','line_number':373,'multiline':False]
['text':' PG, R, NC-17, G, PG-17, null (uncategorized)','line_number':744,'multiline':False]
['text':' Since sqlite doesn't support date comparison','line_number':1005,'multiline':False]
['text':' rollup usage in formula is currently not supported','line_number':1365,'multiline':False]
['text':' work in progress','line_number':1366,'multiline':False]
['text':' it('Get nested sorted filtered table with nested fields data list with a formula > lookup > rollup column in customer table', async function () {','line_number':1411,'multiline':False]
['text':'   const rentalTable = await Model.getByIdOrName({','line_number':1412,'multiline':False]
['text':'     base_id: sakilaProject.id,','line_number':1413,'multiline':False]
['text':'     source_id: sakilaProject.sources[0].id,','line_number':1414,'multiline':False]
['text':'     table_name: 'rental',','line_number':1415,'multiline':False]
['text':'   });','line_number':1416,'multiline':False]
['text':'   const rollupColumn = await createRollupColumn(context, {','line_number':1418,'multiline':False]
['text':'     sakilaProject,','line_number':1419,'multiline':False]
['text':'     title: 'Number of rentals',','line_number':1420,'multiline':False]
['text':'     rollupFunction: 'count',','line_number':1421,'multiline':False]
['text':'     table: customerTable,','line_number':1422,'multiline':False]
['text':'     relatedTableName: 'rental',','line_number':1423,'multiline':False]
['text':'     relatedTableColumnTitle: 'RentalDate',','line_number':1424,'multiline':False]
['text':'   });','line_number':1425,'multiline':False]
['text':'   const lookupColumn = await createLookupColumn(context, {','line_number':1427,'multiline':False]
['text':'     sakilaProject,','line_number':1428,'multiline':False]
['text':'     title: 'Lookup',','line_number':1429,'multiline':False]
['text':'     table: rentalTable,','line_number':1430,'multiline':False]
['text':'     relatedTableName: customerTable.table_name,','line_number':1431,'multiline':False]
['text':'     relatedTableColumnTitle: rollupColumn.title,','line_number':1432,'multiline':False]
['text':'   });','line_number':1433,'multiline':False]
['text':'   const formulaColumn = await createColumn(context, rentalTable, {','line_number':1435,'multiline':False]
['text':'     uidt: UITypes.Formula,','line_number':1436,'multiline':False]
['text':'     title: 'Formula',','line_number':1437,'multiline':False]
['text':'     formula: `ADD({${lookupColumn.title}}, 10)`,','line_number':1438,'multiline':False]
['text':'   });','line_number':1439,'multiline':False]
['text':'   console.log(formulaColumn);','line_number':1440,'multiline':False]
['text':'   const response = await request(context.app)','line_number':1442,'multiline':False]
['text':'     .get(`/api/v1/db/data/noco/${sakilaProject.id}/${customerTable.id}`)','line_number':1443,'multiline':False]
['text':'     .set('xc-auth', context.token)','line_number':1444,'multiline':False]
['text':'     .query({','line_number':1445,'multiline':False]
['text':'       sortArrJson: JSON.stringify([','line_number':1446,'multiline':False]
['text':'         {','line_number':1447,'multiline':False]
['text':'           fk_column_id: formulaColumn?.id,','line_number':1448,'multiline':False]
['text':'           direction: 'asc',','line_number':1449,'multiline':False]
['text':'         },','line_number':1450,'multiline':False]
['text':'       ]),','line_number':1451,'multiline':False]
['text':'     })','line_number':1452,'multiline':False]
['text':'     .expect(200);','line_number':1453,'multiline':False]
['text':'   console.log(response.body);','line_number':1455,'multiline':False]
['text':' });','line_number':1456,'multiline':False]
['text':' todo: Test webhooks of before and after update','line_number':1708,'multiline':False]
['text':' todo: Test with form view','line_number':1709,'multiline':False]
['text':' Mysql will not return the batched inserted rows','line_number':1808,'multiline':False]
['text':' Max 10 rows will be inserted in sqlite','line_number':1818,'multiline':False]
['text':' Mysql will not return the batched inserted rows','line_number':1844,'multiline':False]
['text':' Max 10 rows will be inserted in sqlite','line_number':1854,'multiline':False]
['text':' todo: Since sqlite doesn't support multiple sql connections, we can't test bulk update in sqlite','line_number':1867,'multiline':False]
['text':' todo: Integrate filterArrJson with bulk delete all and update all','line_number':1926,'multiline':False]
['text':' it('Bulk delete all with condition', async function () {','line_number':1927,'multiline':False]
['text':'   const table = await createTable(context, base);','line_number':1928,'multiline':False]
['text':'   const columns = await table.getColumns();','line_number':1929,'multiline':False]
['text':'   const idColumn = columns.find((column) => column.title === 'Id')!;','line_number':1930,'multiline':False]
['text':'   const arr = Array(120)','line_number':1932,'multiline':False]
['text':'     .fill(0)','line_number':1933,'multiline':False]
['text':'     .map((_, index) => index);','line_number':1934,'multiline':False]
['text':'   for (const index of arr) {','line_number':1935,'multiline':False]
['text':'     await createRow(context, { base, table, index });','line_number':1936,'multiline':False]
['text':'   }','line_number':1937,'multiline':False]
['text':'   const rows = await listRow({ base, table });','line_number':1939,'multiline':False]
['text':'   await request(context.app)','line_number':1941,'multiline':False]
['text':'     .delete(`/api/v1/db/data/bulk/noco/${base.id}/${table.id}/all`)','line_number':1942,'multiline':False]
['text':'     .set('xc-auth', context.token)','line_number':1943,'multiline':False]
['text':'     .query({ filterArr: [','line_number':1944,'multiline':False]
['text':'       {','line_number':1945,'multiline':False]
['text':'         logical_op: 'and',','line_number':1946,'multiline':False]
['text':'         fk_column_id: idColumn.id,','line_number':1947,'multiline':False]
['text':'         comparison_op: 'lt',','line_number':1948,'multiline':False]
['text':'         value: 20,','line_number':1949,'multiline':False]
['text':'       }','line_number':1950,'multiline':False]
['text':'     ]})','line_number':1951,'multiline':False]
['text':'     .send(rows.map((row) => ({ id: row['Id'] })))','line_number':1952,'multiline':False]
['text':'     .expect(200);','line_number':1953,'multiline':False]
['text':'   const updatedRows: Array<any> = await listRow({ base, table });','line_number':1955,'multiline':False]
['text':'   if (updatedRows.length !== 0) {','line_number':1956,'multiline':False]
['text':'     console.log(updatedRows.length)','line_number':1957,'multiline':False]
['text':'     throw new Error('Wrong number of rows delete');','line_number':1958,'multiline':False]
['text':'   }','line_number':1959,'multiline':False]
['text':' });','line_number':1960,'multiline':False]
['text':' todo: add test for bulk delete with ltar but need filterArrJson. filterArrJson not now supported with this api.','line_number':1962,'multiline':False]
['text':' it('Bulk update nested filtered table data list with a lookup column', async function () {','line_number':1963,'multiline':False]
['text':' });','line_number':1964,'multiline':False]
['text':' todo: Api does not support fields and sort','line_number':1966,'multiline':False]
['text':' it('Nested row list hm with selected fields', async () => {','line_number':1967,'multiline':False]
['text':'   const rowId = 1;','line_number':1968,'multiline':False]
['text':'   const firstNameColumn = customerColumns.find(','line_number':1970,'multiline':False]
['text':'     (col) => col.title === 'FirstName'','line_number':1971,'multiline':False]
['text':'   );','line_number':1972,'multiline':False]
['text':'   const visibleColumns = [firstNameColumn];','line_number':1973,'multiline':False]
['text':'   const rentalListColumn = (await customerTable.getColumns()).find(','line_number':1975,'multiline':False]
['text':'     (column) => column.title === 'Rentals'','line_number':1976,'multiline':False]
['text':'   )!;','line_number':1977,'multiline':False]
['text':'   const response = await request(context.app)','line_number':1978,'multiline':False]
['text':'     .get(`/api/v1/db/data/noco/${sakilaProject.id}/${customerTable.id}/${rowId}/hm/${rentalListColumn.id}`)','line_number':1979,'multiline':False]
['text':'     .query({','line_number':1980,'multiline':False]
['text':'       fields: visibleColumns.map((c) => c.title),','line_number':1981,'multiline':False]
['text':'     })','line_number':1982,'multiline':False]
['text':'     .set('xc-auth', context.token)','line_number':1983,'multiline':False]
['text':'   const pageInfo = response.body['pageInfo']','line_number':1985,'multiline':False]
['text':'   if(pageInfo['totalRows'] !== 32) {','line_number':1986,'multiline':False]
['text':'     throw new Error('Wrong total rows');','line_number':1987,'multiline':False]
['text':'   }','line_number':1988,'multiline':False]
['text':'   if (!isColumnsCorrectInResponse(response.body.list[0], visibleColumns)) {','line_number':1990,'multiline':False]
['text':'     console.log(response.body.list);','line_number':1991,'multiline':False]
['text':'     throw new Error('Wrong columns');','line_number':1992,'multiline':False]
['text':'   }','line_number':1993,'multiline':False]
['text':' })','line_number':1994,'multiline':False]
['text':' todo: mm create api does not error out in the case of existing ref row id','line_number':1996,'multiline':False]
['text':' it('Create list mm existing ref row id', async () => {','line_number':1997,'multiline':False]
['text':'   const rowId = 1;','line_number':1998,'multiline':False]
['text':'   const rentalListColumn = (await customerTable.getColumns()).find(','line_number':1999,'multiline':False]
['text':'     (column) => column.title === 'Rentals'','line_number':2000,'multiline':False]
['text':'   )!;','line_number':2001,'multiline':False]
['text':'   const refId = 1;','line_number':2002,'multiline':False]
['text':'   await request(context.app)','line_number':2004,'multiline':False]
['text':'     .post(`/api/v1/db/data/noco/${sakilaProject.id}/${customerTable.id}/${rowId}/hm/${rentalListColumn.id}/${refId}`)','line_number':2005,'multiline':False]
['text':'     .set('xc-auth', context.token)','line_number':2006,'multiline':False]
['text':'     .expect(400)','line_number':2007,'multiline':False]
['text':'     await request(context.app)','line_number':2009,'multiline':False]
['text':'     .post(`/api/v1/db/data/noco/${sakilaProject.id}/${customerTable.id}/${rowId}/hm/${rentalListColumn.id}/${refId}`)','line_number':2010,'multiline':False]
['text':'     .set('xc-auth', context.token)','line_number':2011,'multiline':False]
['text':'     .expect(400)','line_number':2012,'multiline':False]
['text':' })','line_number':2013,'multiline':False]
['text':' todo: Foreign key has non nullable clause in sqlite sakila','line_number':2118,'multiline':False]
['text':' todo: Foreign key has non nullable clause in sqlite sakila','line_number':2203,'multiline':False]
['text':' todo: only keep generic error message once updated in noco catchError middleware','line_number':2219,'multiline':False]
['text':' read rows of related table','line_number':2258,'multiline':False]
['text':' LTAR now returns rollup count','line_number':2269,'multiline':False]
