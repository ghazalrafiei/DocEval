['text':'*
 * Base class for models
 *
 * @class
 * @classdesc Base class for models
 ','line_number':9,'multiline':True]
['text':'*
   *
   * @param {Object} args
   * @param {Object} args.knex - Knex instance
   * @param {String} args.tn - table name
   * @param {Object[]} args.columns - columns
   * @param {Object[]} args.pks - primary keys
   * @param {Object[]} args.hasMany - has many relations
   * @param {Object[]} args.belongsTo - belongs to relations
   * @param {Object} args.hooks - afterInsert, beforeInsert, errorInsert, afterUpdate, beforeUpdate, errorUpdate, afterDelete, beforeDelete, errorDelete
   * @returns {BaseModelSql} Returns {@link BaseModelSql} reference.
   *
   ','line_number':28,'multiline':True]
['text':'*
   * Validates column values against validation functions
   *
   * @param {Object[]} columns - columns with values
   * @memberof BaseModel
   * @returns Promise<Boolean>
   * @throws {Error}
   ','line_number':97,'multiline':True]
['text':' let cols = Object.keys(this.columns);','line_number':106,'multiline':False]
['text':'*
   *
   * @returns {Object} knex instance attached to a table
   ','line_number':132,'multiline':True]
['text':'*
   * _wherePk
   *
   * @param {String} id - pk separated by ___
   * @returns {Object} - primary key where condition
   * @private
   ','line_number':149,'multiline':True]
['text':'*
   * _whereFk
   *
   * @param {Object} args
   * @param {String} args.tnp - parent table name
   * @param {String} args.parentId - foreign key
   * @returns {Object} - foreign key where condition
   * @private
   ','line_number':165,'multiline':True]
['text':'*
   *
   * @param obj
   * @returns {Object} Copy of the object excluding primary keys
   * @private
   ','line_number':180,'multiline':True]
['text':'*
   *
   * @param obj
   * @returns {Object} Copy of the object excluding primary keys
   * @private
   ','line_number':198,'multiline':True]
['text':'*
   * Returns a transaction reference
   *
   * @async
   *
   * @returns {Promise<Object>} Transaction reference
   ','line_number':216,'multiline':True]
['text':'*
   * Commit transaction
   *
   * @async
   * @param {Object} trx - Transaction reference
   * @returns {Promise<void>}
   ','line_number':227,'multiline':True]
['text':'*
   * Rollback transaction
   *
   * @async
   * @param {Object} trx - Transaction reference
   * @returns {Promise<void>}
   ','line_number':238,'multiline':True]
['text':'*
   * Transaction completed
   *
   * @async
   * @param {Object} trx - Transaction reference
   * @returns {Promise<void>}
   ','line_number':249,'multiline':True]
['text':'*
   * Creates row in table
   *
   * @param {Object} data - row data
   * @param {Object} [trx] - knex transaction object
   * @returns {Promise<Object[]>|Promise<Number[]>}
   ','line_number':260,'multiline':True]
['text':' todo: optimize','line_number':267,'multiline':False]
['text':' response = await this.readByPk(id)','line_number':305,'multiline':False]
['text':'*
   * Update table row data by primary key
   *
   * @param {String} id - primary key separated by ___
   * @param {Object} data - table row data
   * @param {Object} [trx] - knex transaction object
   * @returns {Promise<Number>} 1 for success, 0 for failure
   ','line_number':337,'multiline':True]
['text':' this.validate(data);','line_number':355,'multiline':False]
['text':'*
   * Delete table row data by primary key
   *
   * @param {String} id - primary key separated by ___
   * @param {Object} [trx] - knex transaction object
   * @returns {Promise<Number>} 1 for success, 0 for failure
   ','line_number':370,'multiline':True]
['text':'*
   * Creates row in this table under a certain parent
   *
   * @param {Object} args
   * @param {Object} args.data - row data
   * @param {String} args.parentId - parent table id
   * @param {String} args.tnp - parent table name
   * @param {Object} [trx] - knex transaction object
   * @returns {Promise<Object[]>|Promise<Object[]>}
   * @todo should return inserted record
   ','line_number':395,'multiline':True]
['text':' else {','line_number':423,'multiline':False]
['text':'   response = insertObj;','line_number':424,'multiline':False]
['text':'   const res = await this._run(query);','line_number':425,'multiline':False]
['text':'   const ai = this.columns.find(c => c.ai);','line_number':426,'multiline':False]
['text':'   if (ai) {','line_number':427,'multiline':False]
['text':'     response[ai._cn] = res[0];','line_number':428,'multiline':False]
['text':'   }','line_number':429,'multiline':False]
['text':' }','line_number':430,'multiline':False]
['text':'*
   * Update table row data by primary key and foreign key
   *
   * @param {Object} args
   * @param {String} args.id - primary key separated by ___
   * @param {String} args.parentId - parent table id
   * @param {String} args.tnp - parent table name
   * @param {Object} args.data - table row data
   * @param {Object} [trx] - knex transaction object
   * @returns {Promise<Number>} 1 for success, 0 for failure
   ','line_number':459,'multiline':True]
['text':' this.validate(data);','line_number':478,'multiline':False]
['text':'*
   * Update table row data by using  where clause
   *
   * @param {Object} args
   * @param {String} args.where - update where clause
   * @param {Object} args.data - table row data
   * @param {Object} [trx] - knex transaction object
   * @returns {Promise<Number>} number of rows affected
   ','line_number':496,'multiline':True]
['text':' await this.beforeUpdate(data);','line_number':508,'multiline':False]
['text':' await this.afterUpdate(data);','line_number':520,'multiline':False]
['text':' await this.errorUpdate(e, data);','line_number':524,'multiline':False]
['text':'*
   * Delete table row data by primary key and foreign key
   *
   * @param {Object} args
   * @param {String} args.id - primary key separated by ___
   * @param {String} args.parentId - parent table id
   * @param {String} args.tnp - parent table name
   * @param {Object} [trx] - knex transaction object
   * @returns {Promise<Number>} 1 for success, 0 for failure
   ','line_number':529,'multiline':True]
['text':'*
   * Delete table row data by where conditions
   *
   * @param {Object} args
   * @param {String} args.where - where clause for deleting
   * @param {Object} [trx] - knex transaction object
   * @returns {Promise<Number>} number of deleted records
   ','line_number':561,'multiline':True]
['text':' await this.beforeUpdate(data);','line_number':571,'multiline':False]
['text':' await this.afterUpdate(data);','line_number':582,'multiline':False]
['text':' await this.errorUpdate(e, data);','line_number':586,'multiline':False]
['text':'*
   * Creates multiple rows in table
   *
   * @param {Object[]} data - row data
   * @returns {Promise<Object[]>|Promise<Number[]>}
   ','line_number':591,'multiline':True]
['text':'*
   * Update bulk - happens within a transaction
   *
   * @param {Object[]} data - table rows to be updated
   * @returns {Promise<Number[]>} - 1 for success, 0 for failure
   ','line_number':623,'multiline':True]
['text':' this.validate(d);','line_number':640,'multiline':False]
['text':'*
   * Bulk delete happens within a transaction
   *
   * @param {Object[]} ids - rows to be deleted
   * @returns {Promise<Number[]>} - 1 for success, 0 for failure
   ','line_number':659,'multiline':True]
['text':'*
   * Reads table row data
   *
   * @param {String} id - primary key separated by ___
   * @returns {Promise<Object>} Table row data
   ','line_number':691,'multiline':True]
['text':'*
   * Reads table row data under a certain parent
   *
   * @param {Object} args
   * @param {Object} args.id - primary key separated by ___
   * @param {String} args.parentId - parent table id
   * @param {String} args.tnp - parent table name
   * @returns {Promise<Object>} returns row
   ','line_number':717,'multiline':True]
['text':'*
   * Get the list of rows in table
   *
   * @param {object} args
   * @param {String} [args.fields=*] - commas separated column names of this table
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @returns {Promise<Object[]>} rows
   * @memberof BaseModel
   * @throws {Error}
   ','line_number':747,'multiline':True]
['text':' .select(...fields.split(','))','line_number':774,'multiline':False]
['text':'*
   * Get the first row from the select query
   *
   * @param {object} args
   * @param {String} [args.fields=*] - commas separated column names of this table
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @returns {Promise<Object>} row
   * @memberof BaseModel
   * @throws {Error}
   ','line_number':792,'multiline':True]
['text':' .select(fields)','line_number':824,'multiline':False]
['text':'*
   * Get the first row from the select query
   *
   * @param {object} args
   * @param {String} [args.fields=*] - commas separated column names of this table
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @param {String} args.parentId - parent table id
   * @param {String} args.tnp - parent table name
   * @returns {Promise<Object>} row
   * @memberof BaseModel
   * @throws {Error}
   ','line_number':852,'multiline':True]
['text':' .select(fields)','line_number':876,'multiline':False]
['text':'*
   * Get the count of rows based on the where
   *
   * @param {object} args
   * @param {String} [args.where]  - where clause with conditions within ()
   * @returns {Promise<Object>}
   * @memberof BaseModel
   * @throws {Error}
   ','line_number':891,'multiline':True]
['text':'*
   * Get the count of rows based on the where
   *
   * @param {object} args
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} args.parentId - parent table id
   * @param {String} args.tnp - parent table name
   * @returns {Promise<Object>}
   * @memberof BaseModel
   * @throws {Error}
   ','line_number':938,'multiline':True]
['text':'*
   * Table row exists
   *
   * @param {String} id - ___ separated primary key string
   * @returns {Promise<boolean>} - true for exits and false for none
   ','line_number':970,'multiline':True]
['text':'*
   * Table row exists
   *
   * @param {String} id - ___ separated primary key string
   * @returns {Promise<boolean>} - true for exits and false for none
   ','line_number':985,'multiline':True]
['text':'*
   * Get the rows by group by
   *
   * @param {object} args
   * @param {String} args.cn - column name of this table()
   * @param {String} [args.fields] - commas separated column names of this table
   * @param {String} [args.having]  - having clause with conditions within ()
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @returns {Promise<Object[]>} rows
   * @memberof BaseModel
   * @throws {Error}
   ','line_number':1003,'multiline':True]
['text':' .select(columns)','line_number':1026,'multiline':False]
['text':'*
   * Get the rows by aggregation by an aggregation function(s)
   *
   * @param {object} args
   * @param {String} args.func - comma separated aggregation functions
   * @param {String} args.cn - column name of this table()
   * @param {String} [args.fields] - commas separated column names of this table
   * @param {String} [args.having]  - having clause with conditions within ()
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @returns {Promise<Object[]>} rows - aggregated rows by function names
   * @memberof BaseModel
   * @throws {Error}
   ','line_number':1039,'multiline':True]
['text':' .select(...fields.split(','))','line_number':1065,'multiline':False]
['text':'*
   * Distribution of column values in the table
   *
   * @param {object} args
   * @param {String} [args.func=count] - comma separated aggregation functions
   * @param {String} args.cn - column name of this table()
   * @param {String} [args.steps]  - comma separated ascending numbers
   * @param {String} [args.min] - minimum value
   * @param {String} [args.max] - maximum value
   * @param {String} [args.step] - step value
   * @returns {Promise<Object[]>} Distributions of column values in table
   * @run
   * table.distribution({
   *   cn : 'price',
   *   steps: '0,100,200,300,400',
   *   func: 'sum,avg'
   * })
   * @run
   * table.distribution({
   *   cn : 'price',
   *   min: '0',
   *   max: '400',
   *   step: '100',
   *   func: 'sum,avg'
   * })
   * @memberof BaseModel
   * @throws {Error}
   ','line_number':1088,'multiline':True]
['text':'*
   * Get the list of distinct rows
   *
   * @param {object} args
   * @param {String} args.cn - column name of this table()
   * @param {String} [args.fields] - commas separated column names of this table
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @returns {Promise<Object[]>} rows
   * @memberof BaseModel
   * @throws {Error}
   ','line_number':1172,'multiline':True]
['text':'*
   * Builds a query string that will return distinct values for the given column
   * @param {string[]} columns - the column to query for distinct values
   * @returns {object} the query.
   ','line_number':1207,'multiline':True]
['text':'*
   * Selects the formulas for the give columns.
   * @param {Array} sheet - The colums to select formulas for.
   * @returns Array of formulas.
   ','line_number':1228,'multiline':True]
['text':' arr.push(','line_number':1240,'multiline':False]
['text':'   // formulaQueryBuilder(','line_number':1241,'multiline':False]
['text':'   //   v.formula?.tree,','line_number':1242,'multiline':False]
['text':'   //   v._cn,','line_number':1243,'multiline':False]
['text':'   //   this.dbDriver,','line_number':1244,'multiline':False]
['text':'   //   this.aliasToColumn','line_number':1245,'multiline':False]
['text':'   // )','line_number':1246,'multiline':False]
['text':' );','line_number':1247,'multiline':False]
['text':'*
   * Returns an array of the columns that are of formula type.
   * @returns {Array<string>} - an array of the formula columns.
   ','line_number':1253,'multiline':True]
['text':'*
   * Runs raw query on database
   *
   * @param {String} queryString - query string
   * @param {Object[]} params - paramaterised values in an array for query
   * @returns {Promise} - return raw data from database driver
   ','line_number':1265,'multiline':True]
['text':'*
   * Get child list and map to input parent
   *
   * @param {Object[]} parent - parent list array
   * @param {String} child - child table name
   * @param {Object} rest - index suffixed fields, limit, offset, where and sort
   * @param {Object} rest - index suffixed fields, limit, offset, where and sort
   * @param index - child table index
   * @returns {Promise<void>}
   * @private
   ','line_number':1282,'multiline':True]
['text':' ...fields.split(','));','line_number':1323,'multiline':False]
['text':'*
   * Get child list and map to input parent
   *
   * @param {Object[]} parent - parent list array
   * @param {String} child - child table name
   * @param {Object} rest - index suffixed fields, limit, offset, where and sort
   * @param index - child table index
   * @returns {Promise<void>}
   * @private
   ','line_number':1339,'multiline':True]
['text':' @ts-ignore','line_number':1380,'multiline':False]
['text':' const _cn = this.dbModels[tn].columnToAlias?.[cn];','line_number':1381,'multiline':False]
['text':' p[this.columnToAlias?.[this.pks[0].cn] || this.pks[0].cn])','line_number':1396,'multiline':False]
['text':' ...fields.split(','));','line_number':1401,'multiline':False]
['text':'*
   * Gets child rows for a parent row in this table
   *
   * @param {Object} args
   * @param {String} args.child - child table name
   * @param {String} args.parentId - pk
   * @param {String} [args.fields=*] - commas separated column names of this table
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @returns {Promise<Object[]>} return child rows
   ','line_number':1414,'multiline':True]
['text':' .select(...fields.split(','))','line_number':1444,'multiline':False]
['text':'*
   * Gets parent list along with children list
   *
   * @param {Object} args
   * @param {String} args.childs - comma separated child table names
   * @param {String} [args.fields=*] - commas separated column names of this table
   * @param {String} [args.fields*=*] - commas separated column names of child table(* is a natural number 'i' where i is index of child table in comma separated list)
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} [args.where*] - where clause with conditions within ()(* is a natural number 'i' where i is index of child table in comma separated list)
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.limit*] -  number of rows to be limited  of child table(* is a natural number 'i' where i is index of child table in comma separated list)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.offset*] - offset from which to get the number of rows of child table(* is a natural number 'i' where i is index of child table in comma separated list)
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @param {String} [args.sort*] - comma separated column names where each column name is cn ascending and -cn is cn descending(* is a natural number 'i' where i is index of child table in comma separated list)
   * @returns {Promise<Object[]>}
   ','line_number':1458,'multiline':True]
['text':' todo : add conditionGraph','line_number':1476,'multiline':False]
['text':'*
   * Gets parent list along with children list and parent
   *
   * @param {Object} args
   * @param {String} args.childs - comma separated child table naes
   * @param {String} [args.fields=*] - commas separated column names of this table
   * @param {String} [args.fields*=*] - commas separated column names of child table(* is a natural number 'i' where i is index of child table in comma separated list)
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} [args.where*] - where clause with conditions within ()(* is a natural number 'i' where i is index of child table in comma separated list)
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.limit*] -  number of rows to be limited  of child table(* is a natural number 'i' where i is index of child table in comma separated list)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.offset*] - offset from which to get the number of rows of child table(* is a natural number 'i' where i is index of child table in comma separated list)
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @param {String} [args.sort*] - comma separated column names where each column name is cn ascending and -cn is cn descending(* is a natural number 'i' where i is index of child table in comma separated list)
   * @returns {Promise<Object[]>}
   ','line_number':1508,'multiline':True]
['text':' todo : add conditionGraph','line_number':1526,'multiline':False]
['text':' todo : implement nestedread','line_number':1527,'multiline':False]
['text':' todo: use fields in readbyPk','line_number':1623,'multiline':False]
['text':' response = await this.readByPk(id)','line_number':1731,'multiline':False]
['text':' response = await this.nestedRead(','line_number':1732,'multiline':False]
['text':'   rowId,','line_number':1733,'multiline':False]
['text':'   this.defaultNestedBtQueryParams,','line_number':1734,'multiline':False]
['text':'   driver','line_number':1735,'multiline':False]
['text':' );','line_number':1736,'multiline':False]
['text':' response = await this.nestedRead(','line_number':1744,'multiline':False]
['text':'   Array.isArray(response)','line_number':1745,'multiline':False]
['text':'     ? response?.[0]?.[ai._cn]','line_number':1746,'multiline':False]
['text':'     : response?.[ai._cn],','line_number':1747,'multiline':False]
['text':'   this.defaultNestedBtQueryParams,','line_number':1748,'multiline':False]
['text':'   driver','line_number':1749,'multiline':False]
['text':' );','line_number':1750,'multiline':False]
['text':' todo: naming','line_number':1849,'multiline':False]
['text':' @ts-ignore','line_number':1854,'multiline':False]
['text':' todo: naming','line_number':1887,'multiline':False]
['text':' @ts-ignore','line_number':1896,'multiline':False]
['text':'*
   * Gets child list along with its parent
   *
   * @param {Object} args
   * @param {String} args.parents - comma separated parent table names
   * @param {String} [args.fields=*] - commas separated column names of this table
   * @param {String} [args.fields*=*] - commas separated column names of parent table(* is a natural number 'i' where i is index of child table in comma separated list)
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @returns {Promise<Object[]>}
   ','line_number':1925,'multiline':True]
['text':' todo : add conditionGraph','line_number':1939,'multiline':False]
['text':'*
   * Get parent and map to input child
   *
   * @param {String} parent - parent table name
   * @param {Object} childs - children list
   * @param {Object} rest - index suffixed fields, limit, offset, where and sort
   * @param index - child table index
   * @param {String} [args.fields*=*] - commas separated column names of parent table(* is a natural number 'i' where i is index of child table in comma separated list)
   * @returns {Promise<void>}
   * @private
   ','line_number':1975,'multiline':True]
['text':' .select(...fields.split(',')','line_number':2001,'multiline':False]
['text':'*
   * Returns key value paired grouped children list
   *
   * @param {Object} args
   * @param {String} args.child - child table name
   * @param {String[]} ids  - array of parent primary keys
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @returns {Promise<Object.<string, Object[]>>}  key will be parent pk and value will be child list
   ','line_number':2017,'multiline':True]
['text':' ...restArgs','line_number':2037,'multiline':False]
['text':' let { fields } = restArgs;','line_number':2039,'multiline':False]
['text':' todo: get only required fields','line_number':2040,'multiline':False]
['text':' .select(...fields.split(','));','line_number':2064,'multiline':False]
['text':' return groupBy(childs, cn);','line_number':2085,'multiline':False]
['text':'*
   * Returns key value paired grouped children list
   *
   * @param {Object} args
   * @param {String} args.child - child table name
   * @param {String[]} ids  - array of parent primary keys
   * @param {String} [args.where]  - where clause with conditions within ()
   * @param {String} [args.limit]  - number of rows to be limited (has default,min,max values in config)
   * @param {String} [args.offset] - offset from which to get the number of rows
   * @param {String} [args.sort]   - comma separated column names where each column name is cn ascending and -cn is cn descending
   * @returns {Promise<Object.<string, Object[]>>}  key will be parent pk and value will be child list
   ','line_number':2101,'multiline':True]
['text':' return groupBy(childs, cn);','line_number':2135,'multiline':False]
['text':'*
   * Adds default params to limit, ofgste and sort params
   *
   * @param {Object} query - knex query builder
   * @param {Object} args
   * @param {string} args.limit - limit
   * @param {string} args.offset - offset
   * @param {string} args.sort - sort
   * @returns {Object} query appended with paginate and sort params
   * @private
   ','line_number':2142,'multiline':True]
['text':'*
   * Runs a query built by knex, measure and logs time
   *
   * @param query
   * @returns {Promise<*>}
   * @private
   ','line_number':2188,'multiline':True]
['text':'*
   * Gets the default list of args for querying a table
   *
   * @param {Object} args - fields,where,limit,offset,sort indexed
   * @returns {Object} consisting of fields,where,limit,offset,sort
   * @private
   ','line_number':2211,'multiline':True]
['text':'*
   * Gets the default args for child list
   *
   * @param {Object} args - fields,where,limit,offset,sort indexed
   * @param {Number} index
   * @returns {Object} consisting of fields*,where*,limit*,offset*,sort*
   * @private
   ','line_number':2237,'multiline':True]
['text':' @ts-ignore','line_number':2278,'multiline':False]
['text':' @ts-ignore','line_number':2300,'multiline':False]
['text':' @ts-ignore','line_number':2308,'multiline':False]
['text':' @ts-ignore','line_number':2316,'multiline':False]
['text':' generate default nested fields args based on virtual column list','line_number':2343,'multiline':False]
['text':' todo: handle if virtual column missing','line_number':2361,'multiline':False]
['text':' construct fields args based on lookup columns','line_number':2362,'multiline':False]
['text':' arr.push(','line_number':2436,'multiline':False]
['text':'   formulaQueryBuilder(','line_number':2437,'multiline':False]
['text':'     v.formula?.tree,','line_number':2438,'multiline':False]
['text':'     v._cn,','line_number':2439,'multiline':False]
['text':'     this.dbDriver,','line_number':2440,'multiline':False]
['text':'     this.aliasToColumn','line_number':2441,'multiline':False]
['text':'   )','line_number':2442,'multiline':False]
['text':' );','line_number':2443,'multiline':False]
['text':' todo: optimize','line_number':2458,'multiline':False]
['text':' todo: optimize','line_number':2463,'multiline':False]
['text':' // get all nested props by default','line_number':2467,'multiline':False]
['text':' for (const key of Object.keys(defaultNestedQueryParams)) {','line_number':2468,'multiline':False]
['text':'   if (key.indexOf('fields') > -1) {','line_number':2469,'multiline':False]
['text':'     defaultNestedQueryParams[key] = '*';','line_number':2470,'multiline':False]
['text':'   }','line_number':2471,'multiline':False]
['text':' }','line_number':2472,'multiline':False]
['text':' const size = +process.env.NC_EXPORT_MAX_SIZE || 1024;','line_number':2476,'multiline':False]
['text':' todo: optimize','line_number':2542,'multiline':False]
