['text':'!/usr/bin/env zsh','line_number':1,'multiline':False]
['text':'#############################','line_number':6,'multiline':False]
['text':' CHANGELOG SCRIPT CONSTANTS #','line_number':7,'multiline':False]
['text':'#############################','line_number':8,'multiline':False]
['text':'* Holds the list of valid types recognized in a commit subject','line_number':10,'multiline':False]
['text':'* and the display string of such type','line_number':11,'multiline':False]
['text':'* Types that will be displayed in their own section, in the order specified here.','line_number':26,'multiline':False]
['text':'* Types that will be displayed under the category of other changes','line_number':30,'multiline':False]
['text':'* Commit types that don't appear in $MAIN_TYPES nor $OTHER_TYPES','line_number':34,'multiline':False]
['text':'* will not be displayed and will simply be ignored.','line_number':35,'multiline':False]
['text':'###########################','line_number':39,'multiline':False]
['text':' COMMIT PARSING UTILITIES #','line_number':40,'multiline':False]
['text':'###########################','line_number':41,'multiline':False]
['text':' This function uses the following globals as output: commits (A),','line_number':45,'multiline':False]
['text':' subjects (A), scopes (A) and breaking (A). All associative arrays (A)','line_number':46,'multiline':False]
['text':' have $hash as the key.','line_number':47,'multiline':False]
['text':' - commits holds the commit type','line_number':48,'multiline':False]
['text':' - subjects holds the commit subject','line_number':49,'multiline':False]
['text':' - scopes holds the scope of a commit','line_number':50,'multiline':False]
['text':' - breaking holds the breaking change warning if a commit does','line_number':51,'multiline':False]
['text':'   make a breaking change','line_number':52,'multiline':False]
['text':' Parse commit type from the subject','line_number':57,'multiline':False]
['text':' If $type doesn't appear in $TYPES array mark it as 'other'','line_number':62,'multiline':False]
['text':' Try to find scope in "type(<scope>):" format','line_number':73,'multiline':False]
['text':' If no scope found, try to find it in "<scope>:" format','line_number':79,'multiline':False]
['text':' Make sure it's not a type before printing it','line_number':82,'multiline':False]
['text':' Only display the relevant part of the commit, i.e. if it has the format','line_number':90,'multiline':False]
['text':' type[(scope)!]: subject, where the part between [] is optional, only','line_number':91,'multiline':False]
['text':' displays subject. If it doesn't match the format, returns the whole string.','line_number':92,'multiline':False]
['text':' Return subject if the body or subject match the breaking change format','line_number':100,'multiline':False]
['text':' remove CR characters (might be inserted in GitHub UI commit description form)','line_number':107,'multiline':False]
['text':' remove lines containing only whitespace','line_number':109,'multiline':False]
['text':' skip next paragraphs (separated by two newlines or more)','line_number':112,'multiline':False]
['text':' ... and replace newlines with spaces','line_number':114,'multiline':False]
['text':' Return truncated hash of the reverted commit','line_number':121,'multiline':False]
['text':' Parse commit with hash $1','line_number':133,'multiline':False]
['text':' Commits following Conventional Commits (https://www.conventionalcommits.org/)','line_number':136,'multiline':False]
['text':' have the following format, where parts between [] are optional:','line_number':137,'multiline':False]
['text':'','line_number':138,'multiline':False]
['text':'  type[(scope)][!]: subject','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':'  commit body','line_number':141,'multiline':False]
['text':'  [BREAKING CHANGE: warning]','line_number':142,'multiline':False]
['text':' commits holds the commit type','line_number':144,'multiline':False]
['text':' scopes holds the commit scope','line_number':146,'multiline':False]
['text':' subjects holds the commit subject','line_number':148,'multiline':False]
['text':' breaking holds whether a commit has breaking changes','line_number':151,'multiline':False]
['text':' and its warning message if it does','line_number':152,'multiline':False]
['text':' reverts holds commits reverted in the same release','line_number':157,'multiline':False]
['text':'###############################','line_number':163,'multiline':False]
['text':' SUPPORTS HYPERLINKS FUNCTION #','line_number':164,'multiline':False]
['text':'###############################','line_number':165,'multiline':False]
['text':' The code for checking if a terminal supports hyperlinks is copied from install.sh','line_number':167,'multiline':False]
['text':' The [ -t 1 ] check only works when the function is not called from','line_number':169,'multiline':False]
['text':' a subshell (like in `$(...)` or `(...)`, so this hack redefines the','line_number':170,'multiline':False]
['text':' function at the top level to always return false when stdout is not','line_number':171,'multiline':False]
['text':' a tty.','line_number':172,'multiline':False]
['text':' This function uses the logic from supports-hyperlinks[1][2], which is','line_number':183,'multiline':False]
['text':' made by Kat Marchán (@zkat) and licensed under the Apache License 2.0.','line_number':184,'multiline':False]
['text':' [1] https://github.com/zkat/supports-hyperlinks','line_number':185,'multiline':False]
['text':' [2] https://crates.io/crates/supports-hyperlinks','line_number':186,'multiline':False]
['text':'','line_number':187,'multiline':False]
['text':' Copyright (c) 2021 Kat Marchán','line_number':188,'multiline':False]
['text':'','line_number':189,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':190,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':191,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':192,'multiline':False]
['text':'','line_number':193,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':194,'multiline':False]
['text':'','line_number':195,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':196,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':197,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':198,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':199,'multiline':False]
['text':' limitations under the License.','line_number':200,'multiline':False]
['text':' $FORCE_HYPERLINK must be set and be non-zero (this acts as a logic bypass)','line_number':202,'multiline':False]
['text':' If stdout is not a tty, it doesn't support hyperlinks','line_number':208,'multiline':False]
['text':' DomTerm terminal emulator (domterm.org)','line_number':211,'multiline':False]
['text':' VTE-based terminals above v0.50 (Gnome Terminal, Guake, ROXTerm, etc)','line_number':216,'multiline':False]
['text':' If $TERM_PROGRAM is set, these terminals support hyperlinks','line_number':222,'multiline':False]
['text':' kitty supports hyperlinks','line_number':227,'multiline':False]
['text':' Windows Terminal also supports hyperlinks','line_number':232,'multiline':False]
['text':' Konsole supports hyperlinks, but it's an opt-in setting that can't be detected','line_number':237,'multiline':False]
['text':' https://github.com/ohmyzsh/ohmyzsh/issues/10964','line_number':238,'multiline':False]
['text':' if [ -n "$KONSOLE_VERSION" ]; then','line_number':239,'multiline':False]
['text':'   return 0','line_number':240,'multiline':False]
['text':' fi','line_number':241,'multiline':False]
['text':'############################','line_number':246,'multiline':False]
['text':' RELEASE CHANGELOG DISPLAY #','line_number':247,'multiline':False]
['text':'############################','line_number':248,'multiline':False]
['text':' This function uses the following globals: output, version,','line_number':252,'multiline':False]
['text':' types (A), subjects (A), scopes (A), breaking (A) and reverts (A).','line_number':253,'multiline':False]
['text':'','line_number':254,'multiline':False]
['text':' - output is the output format to use when formatting (raw|text|md)','line_number':255,'multiline':False]
['text':' - version is the version in which the commits are made','line_number':256,'multiline':False]
['text':' - types, subjects, scopes, breaking, and reverts are associative arrays','line_number':257,'multiline':False]
['text':'   with commit hashes as keys','line_number':258,'multiline':False]
['text':' Remove commits that were reverted','line_number':260,'multiline':False]
['text':' Remove revert commit','line_number':264,'multiline':False]
['text':' Remove reverted commit','line_number':266,'multiline':False]
['text':' Remove commits from ignored types unless it has breaking change information','line_number':271,'multiline':False]
['text':' If no commits left skip displaying the release','line_number':277,'multiline':False]
['text':'types == 0 )); then','line_number':278,'multiline':False]
['text':' Get length of longest scope for padding','line_number':282,'multiline':False]
['text':'scopes[$hash]} ? ${#scopes[$hash]} : max_scope ))','line_number':285,'multiline':False]
['text':'#* Formatting functions','line_number':288,'multiline':False]
['text':' Format the hash according to output format','line_number':290,'multiline':False]
['text':' If no parameter is passed, assume it comes from `$hash`','line_number':291,'multiline':False]
['text':'* Uses $hash from outer scope','line_number':293,'multiline':False]
['text':' red','line_number':298,'multiline':False]
['text':' Format headers according to output format','line_number':308,'multiline':False]
['text':' Levels 1 to 2 are considered special, the rest are formatted','line_number':309,'multiline':False]
['text':' the same, except in md output format.','line_number':310,'multiline':False]
['text':' bold, underlined','line_number':322,'multiline':False]
['text':' bold','line_number':323,'multiline':False]
['text':'* Uses $scopes (A) and $hash from outer scope','line_number':330,'multiline':False]
['text':' If no scopes, exit the function','line_number':333,'multiline':False]
['text':' Get how much padding is required for this scope','line_number':338,'multiline':False]
['text':'scope} ? 0 : max_scope - ${#scope} ))','line_number':340,'multiline':False]
['text':' If no scope, print padding and 3 spaces (equivalent to "[] ")','line_number':343,'multiline':False]
['text':' Print [scope]','line_number':349,'multiline':False]
['text':' red 9','line_number':352,'multiline':False]
['text':' If no parameter is passed, assume it comes from `$subjects[$hash]`','line_number':356,'multiline':False]
['text':'* Uses $subjects (A) and $hash from outer scope','line_number':358,'multiline':False]
['text':' Capitalize first letter of the subject','line_number':361,'multiline':False]
['text':' In text mode, highlight (#<issue>) and dim text between `backticks`','line_number':366,'multiline':False]
['text':' In markdown mode, link to (#<issue>) issues','line_number':373,'multiline':False]
['text':'* Uses $type from outer scope','line_number':379,'multiline':False]
['text':' underlined','line_number':384,'multiline':False]
['text':'#* Section functions','line_number':388,'multiline':False]
['text':'breaking != 0 )) || return 0','line_number':395,'multiline':False]
['text':' Format the BREAKING CHANGE message by word-wrapping it at maximum 100','line_number':406,'multiline':False]
['text':' characters (use $COLUMNS if smaller than 100)','line_number':407,'multiline':False]
['text':' Display hash and scope in their own line, and then the full message with','line_number':409,'multiline':False]
['text':' blank lines as separators and a 3-space left padding','line_number':410,'multiline':False]
['text':' If no commits found of type $type, go to next type','line_number':421,'multiline':False]
['text':'hashes != 0 )) || return 0','line_number':422,'multiline':False]
['text':' sort by scope','line_number':427,'multiline':False]
['text':' Commits made under types considered other changes','line_number':434,'multiline':False]
['text':' If no commits found under "other" types, don't display anything','line_number':438,'multiline':False]
['text':'changes != 0 )) || return 0','line_number':439,'multiline':False]
['text':' sort by scope','line_number':447,'multiline':False]
['text':'#* Release sections order','line_number':451,'multiline':False]
['text':' Display version header','line_number':453,'multiline':False]
['text':' Display breaking changes first','line_number':456,'multiline':False]
['text':' Display changes for commit types in the order specified','line_number':459,'multiline':False]
['text':' Display other changes','line_number':464,'multiline':False]
['text':' $1 = until commit, $2 = since commit','line_number':469,'multiline':False]
['text':' $3 = output format (--text|--raw|--md)','line_number':472,'multiline':False]
['text':' --md:   uses markdown formatting','line_number':473,'multiline':False]
['text':' --raw:  outputs without style','line_number':474,'multiline':False]
['text':' --text: uses ANSI escape codes to style the output','line_number':475,'multiline':False]
['text':'--*}','line_number':476,'multiline':False]
['text':' If $since is not specified:','line_number':483,'multiline':False]
['text':' 1) try to find the version used before updating','line_number':484,'multiline':False]
['text':' 2) try to find the first version tag before $until','line_number':485,'multiline':False]
['text':' Commit classification arrays','line_number':493,'multiline':False]
['text':' Get the first version name:','line_number':499,'multiline':False]
['text':' 1) try tag-like version, or','line_number':500,'multiline':False]
['text':' 2) try branch name, or','line_number':501,'multiline':False]
['text':' 3) try name-rev, or','line_number':502,'multiline':False]
['text':' 4) try short hash','line_number':503,'multiline':False]
['text':' Get commit list from $until commit until $since commit, or until root commit if $since is unset','line_number':509,'multiline':False]
['text':' Git log options','line_number':512,'multiline':False]
['text':' -z:             commits are delimited by null bytes','line_number':513,'multiline':False]
['text':' --format:       [7-char hash]<field sep>[ref names]<field sep>[subject]<field sep>[body]','line_number':514,'multiline':False]
['text':' --abbrev=7:     force commit hashes to be 7 characters long','line_number':515,'multiline':False]
['text':' --no-merges:    merge commits are omitted','line_number':516,'multiline':False]
['text':' --first-parent: commits from merged branches are omitted','line_number':517,'multiline':False]
['text':' Truncate list on versions with a lot of commits','line_number':527,'multiline':False]
['text':' Read the commit fields (@ is needed to keep empty values)','line_number':533,'multiline':False]
['text':' If we find a new release (exact tag)','line_number':540,'multiline':False]
['text':' Parse tag name (needs: setopt extendedglob)','line_number':542,'multiline':False]
['text':' Output previous release','line_number':544,'multiline':False]
['text':' Reinitialize commit storage','line_number':546,'multiline':False]
['text':' Start work on next release','line_number':552,'multiline':False]
['text':' Use raw output if stdout is not a tty','line_number':568,'multiline':False]
