['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]
['text':' Anti-Grain Geometry - Version 2.4','line_number':2,'multiline':False]
['text':' Copyright (C) 2002-2005 Maxim Shemanarev (http://www.antigrain.com)','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Permission to copy, use, modify, sell and distribute this software ','line_number':5,'multiline':False]
['text':' is granted provided this copyright notice appears in all copies. ','line_number':6,'multiline':False]
['text':' This software is provided "as is" without express or implied','line_number':7,'multiline':False]
['text':' warranty, and with no claim as to its suitability for any purpose.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':10,'multiline':False]
['text':' Contact: mcseem@antigrain.com','line_number':11,'multiline':False]
['text':'          mcseemagg@yahoo.com','line_number':12,'multiline':False]
['text':'          http://www.antigrain.com','line_number':13,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' Stroke math','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':18,'multiline':False]
['text':'-------------------------------------------------------------line_cap_e','line_number':28,'multiline':False]
['text':'------------------------------------------------------------line_join_e','line_number':36,'multiline':False]
['text':'-----------------------------------------------------------inner_join_e','line_number':47,'multiline':False]
['text':'------------------------------------------------------------math_stroke','line_number':56,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':128,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':143,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':160,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':166,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':208,'multiline':False]
['text':' Assume the worst','line_number':224,'multiline':False]
['text':' Assume the worst','line_number':225,'multiline':False]
['text':' Calculation of the intersection succeeded','line_number':233,'multiline':False]
['text':'---------------------','line_number':234,'multiline':False]
['text':' Inside the miter limit','line_number':238,'multiline':False]
['text':'---------------------','line_number':239,'multiline':False]
['text':' Calculation of the intersection failed, most probably','line_number':247,'multiline':False]
['text':' the three points lie one straight line. ','line_number':248,'multiline':False]
['text':' First check if v0 and v2 lie on the opposite sides of vector: ','line_number':249,'multiline':False]
['text':' (v1.x, v1.y) -> (v1.x+dx1, v1.y-dy1), that is, the perpendicular','line_number':250,'multiline':False]
['text':' to the line determined by vertices v0 and v1.','line_number':251,'multiline':False]
['text':' This condition determines whether the next line segments continues','line_number':252,'multiline':False]
['text':' the previous one or goes back.','line_number':253,'multiline':False]
['text':'----------------','line_number':254,'multiline':False]
['text':' This case means that the next segment continues ','line_number':260,'multiline':False]
['text':' the previous one (straight line)','line_number':261,'multiline':False]
['text':'-----------------','line_number':262,'multiline':False]
['text':' Miter limit exceeded','line_number':270,'multiline':False]
['text':'------------------------','line_number':271,'multiline':False]
['text':' For the compatibility with SVG, PDF, etc, ','line_number':275,'multiline':False]
['text':' we use a simple bevel join instead of','line_number':276,'multiline':False]
['text':' "smart" bevel','line_number':277,'multiline':False]
['text':'-------------------','line_number':278,'multiline':False]
['text':' If no miter-revert, calculate new dx1, dy1, dx2, dy2','line_number':288,'multiline':False]
['text':'----------------','line_number':289,'multiline':False]
['text':'--------------------------------------------------------stroke_calc_cap','line_number':315,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':377,'multiline':False]
['text':' Inner join','line_number':397,'multiline':False]
['text':'---------------','line_number':398,'multiline':False]
['text':' inner_bevel','line_number':407,'multiline':False]
['text':' Outer join','line_number':451,'multiline':False]
['text':'---------------','line_number':452,'multiline':False]
['text':' Calculate the distance between v1 and ','line_number':454,'multiline':False]
['text':' the central point of the bevel line segment','line_number':455,'multiline':False]
['text':'---------------','line_number':456,'multiline':False]
['text':' This is an optimization that reduces the number of points ','line_number':463,'multiline':False]
['text':' in cases of almost collinear segments. If there's no','line_number':464,'multiline':False]
['text':' visible difference between bevel and miter joins we'd rather','line_number':465,'multiline':False]
['text':' use miter join because it adds only one point instead of two. ','line_number':466,'multiline':False]
['text':'','line_number':467,'multiline':False]
['text':' Here we calculate the middle point between the bevel points ','line_number':468,'multiline':False]
['text':' and then, the distance between v1 and this middle point. ','line_number':469,'multiline':False]
['text':' At outer joins this distance always less than stroke width, ','line_number':470,'multiline':False]
['text':' because it's actually the height of an isosceles triangle of','line_number':471,'multiline':False]
['text':' v1 and its two bevel points. If the difference between this','line_number':472,'multiline':False]
['text':' width and this value is small (no visible bevel) we can ','line_number':473,'multiline':False]
['text':' add just one point. ','line_number':474,'multiline':False]
['text':'','line_number':475,'multiline':False]
['text':' The constant in the expression makes the result approximately ','line_number':476,'multiline':False]
['text':' the same as in round joins and caps. You can safely comment ','line_number':477,'multiline':False]
['text':' out this entire "if".','line_number':478,'multiline':False]
['text':'-------------------','line_number':479,'multiline':False]
['text':' Bevel join','line_number':514,'multiline':False]
