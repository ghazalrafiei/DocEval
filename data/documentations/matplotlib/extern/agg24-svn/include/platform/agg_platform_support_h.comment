['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]
['text':' Anti-Grain Geometry - Version 2.4','line_number':2,'multiline':False]
['text':' Copyright (C) 2002-2005 Maxim Shemanarev (http://www.antigrain.com)','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Permission to copy, use, modify, sell and distribute this software ','line_number':5,'multiline':False]
['text':' is granted provided this copyright notice appears in all copies. ','line_number':6,'multiline':False]
['text':' This software is provided "as is" without express or implied','line_number':7,'multiline':False]
['text':' warranty, and with no claim as to its suitability for any purpose.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':10,'multiline':False]
['text':' Contact: mcseem@antigrain.com','line_number':11,'multiline':False]
['text':'          mcseemagg@yahoo.com','line_number':12,'multiline':False]
['text':'          http://www.antigrain.com','line_number':13,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' class platform_support','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':' It's not a part of the AGG library, it's just a helper class to create ','line_number':18,'multiline':False]
['text':' interactive demo examples. Since the examples should not be too complex','line_number':19,'multiline':False]
['text':' this class is provided to support some very basic interactive graphical','line_number':20,'multiline':False]
['text':' functionality, such as putting the rendered image to the window, simple ','line_number':21,'multiline':False]
['text':' keyboard and mouse input, window resizing, setting the window title,','line_number':22,'multiline':False]
['text':' and catching the "idle" events.','line_number':23,'multiline':False]
['text':' ','line_number':24,'multiline':False]
['text':' The idea is to have a single header file that does not depend on any ','line_number':25,'multiline':False]
['text':' platform (I hate these endless #ifdef/#elif/#elif.../#endif) and a number','line_number':26,'multiline':False]
['text':' of different implementations depending on the concrete platform. ','line_number':27,'multiline':False]
['text':' The most popular platforms are:','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':' Windows-32 API','line_number':30,'multiline':False]
['text':' X-Window API','line_number':31,'multiline':False]
['text':' SDL library (see http://www.libsdl.org/)','line_number':32,'multiline':False]
['text':' MacOS C/C++ API','line_number':33,'multiline':False]
['text':' ','line_number':34,'multiline':False]
['text':' This file does not include any system dependent .h files such as','line_number':35,'multiline':False]
['text':' windows.h or X11.h, so, your demo applications do not depend on the','line_number':36,'multiline':False]
['text':' platform. The only file that can #include system dependend headers','line_number':37,'multiline':False]
['text':' is the implementation file agg_platform_support.cpp. Different','line_number':38,'multiline':False]
['text':' implementations are placed in different directories, such as','line_number':39,'multiline':False]
['text':' ~/agg/src/platform/win32','line_number':40,'multiline':False]
['text':' ~/agg/src/platform/sdl','line_number':41,'multiline':False]
['text':' ~/agg/src/platform/X11','line_number':42,'multiline':False]
['text':' and so on.','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':' All the system dependent stuff sits in the platform_specific ','line_number':45,'multiline':False]
['text':' class which is forward-declared here but not defined. ','line_number':46,'multiline':False]
['text':' The platform_support class has just a pointer to it and it's ','line_number':47,'multiline':False]
['text':' the responsibility of the implementation to create/delete it.','line_number':48,'multiline':False]
['text':' This class being defined in the implementation file can have ','line_number':49,'multiline':False]
['text':' any platform dependent stuff such as HWND, X11 Window and so on.','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':52,'multiline':False]
['text':'----------------------------------------------------------window_flag_e','line_number':67,'multiline':False]
['text':' These are flags used in method init(). Not all of them are','line_number':68,'multiline':False]
['text':' applicable on different platforms, for example the win32_api','line_number':69,'multiline':False]
['text':' cannot use a hardware buffer (window_hw_buffer).','line_number':70,'multiline':False]
['text':' The implementation should simply ignore unsupported flags.','line_number':71,'multiline':False]
['text':'-----------------------------------------------------------pix_format_e','line_number':80,'multiline':False]
['text':' Possible formats of the rendering buffer. Initially I thought that it's','line_number':81,'multiline':False]
['text':' reasonable to create the buffer and the rendering functions in ','line_number':82,'multiline':False]
['text':' accordance with the native pixel format of the system because it ','line_number':83,'multiline':False]
['text':' would have no overhead for pixel format conersion. ','line_number':84,'multiline':False]
['text':' But eventually I came to a conclusion that having a possibility to ','line_number':85,'multiline':False]
['text':' convert pixel formats on demand is a good idea. First, it was X11 where ','line_number':86,'multiline':False]
['text':' there lots of different formats and visuals and it would be great to ','line_number':87,'multiline':False]
['text':' render everything in, say, RGB-24 and display it automatically without','line_number':88,'multiline':False]
['text':' any additional efforts. The second reason is to have a possibility to ','line_number':89,'multiline':False]
['text':' debug renderers for different pixel formats and colorspaces having only ','line_number':90,'multiline':False]
['text':' one computer and one system.','line_number':91,'multiline':False]
['text':'','line_number':92,'multiline':False]
['text':' This stuff is not included into the basic AGG functionality because the ','line_number':93,'multiline':False]
['text':' number of supported pixel formats (and/or colorspaces) can be great and ','line_number':94,'multiline':False]
['text':' if one needs to add new format it would be good only to add new ','line_number':95,'multiline':False]
['text':' rendering files without having to modify any existing ones (a general ','line_number':96,'multiline':False]
['text':' principle of incapsulation and isolation).','line_number':97,'multiline':False]
['text':'','line_number':98,'multiline':False]
['text':' Using a particular pixel format doesn't obligatory mean the necessity','line_number':99,'multiline':False]
['text':' of software conversion. For example, win32 API can natively display ','line_number':100,'multiline':False]
['text':' gray8, 15-bit RGB, 24-bit BGR, and 32-bit BGRA formats. ','line_number':101,'multiline':False]
['text':' This list can be (and will be!) extended in future.','line_number':102,'multiline':False]
['text':' By default. No conversions are applied ','line_number':105,'multiline':False]
['text':' 1 bit per color B/W','line_number':106,'multiline':False]
['text':' Simple 256 level grayscale','line_number':107,'multiline':False]
['text':' Simple 256 level grayscale (sRGB)','line_number':108,'multiline':False]
['text':' Simple 65535 level grayscale','line_number':109,'multiline':False]
['text':' Grayscale, one 32-bit float per pixel','line_number':110,'multiline':False]
['text':' 15 bit rgb. Depends on the byte ordering!','line_number':111,'multiline':False]
['text':' 16 bit rgb. Depends on the byte ordering!','line_number':112,'multiline':False]
['text':' 30 bit rgb. Depends on the byte ordering!','line_number':113,'multiline':False]
['text':' 32 bit rgb. Depends on the byte ordering!','line_number':114,'multiline':False]
['text':' 30 bit bgr. Depends on the byte ordering!','line_number':115,'multiline':False]
['text':' 32 bit bgr. Depends on the byte ordering!','line_number':116,'multiline':False]
['text':' R-G-B, one byte per color component','line_number':117,'multiline':False]
['text':' R-G-B, one byte per color component (sRGB)','line_number':118,'multiline':False]
['text':' B-G-R, one byte per color component','line_number':119,'multiline':False]
['text':' B-G-R, native win32 BMP format (sRGB)','line_number':120,'multiline':False]
['text':' R-G-B-A, one byte per color component','line_number':121,'multiline':False]
['text':' R-G-B-A, one byte per color component (sRGB)','line_number':122,'multiline':False]
['text':' A-R-G-B, native MAC format','line_number':123,'multiline':False]
['text':' A-R-G-B, native MAC format (sRGB)','line_number':124,'multiline':False]
['text':' A-B-G-R, one byte per color component','line_number':125,'multiline':False]
['text':' A-B-G-R, one byte per color component (sRGB)','line_number':126,'multiline':False]
['text':' B-G-R-A, native win32 BMP format','line_number':127,'multiline':False]
['text':' B-G-R-A, native win32 BMP format (sRGB)','line_number':128,'multiline':False]
['text':' R-G-B, 16 bits per color component','line_number':129,'multiline':False]
['text':' B-G-R, native win32 BMP format.','line_number':130,'multiline':False]
['text':' R-G-B, one 32-bit float per color component','line_number':131,'multiline':False]
['text':' B-G-R, one 32-bit float per color component','line_number':132,'multiline':False]
['text':' R-G-B-A, 16 bits byte per color component','line_number':133,'multiline':False]
['text':' A-R-G-B, native MAC format','line_number':134,'multiline':False]
['text':' A-B-G-R, one byte per color component','line_number':135,'multiline':False]
['text':' B-G-R-A, native win32 BMP format','line_number':136,'multiline':False]
['text':' R-G-B-A, one 32-bit float per color component','line_number':137,'multiline':False]
['text':' A-R-G-B, one 32-bit float per color component','line_number':138,'multiline':False]
['text':' A-B-G-R, one 32-bit float per color component','line_number':139,'multiline':False]
['text':' B-G-R-A, one 32-bit float per color component','line_number':140,'multiline':False]
['text':'-------------------------------------------------------------input_flag_e','line_number':145,'multiline':False]
['text':' Mouse and keyboard flags. They can be different on different platforms','line_number':146,'multiline':False]
['text':' and the ways they are obtained are also different. But in any case','line_number':147,'multiline':False]
['text':' the system dependent flags should be mapped into these ones. The meaning','line_number':148,'multiline':False]
['text':' of that is as follows. For example, if kbd_ctrl is set it means that the ','line_number':149,'multiline':False]
['text':' ctrl key is pressed and being held at the moment. They are also used in ','line_number':150,'multiline':False]
['text':' the overridden methods such as on_mouse_move(), on_mouse_button_down(),','line_number':151,'multiline':False]
['text':' on_mouse_button_dbl_click(), on_mouse_button_up(), on_key(). ','line_number':152,'multiline':False]
['text':' In the method on_mouse_button_up() the mouse flags have different','line_number':153,'multiline':False]
['text':' meaning. They mean that the respective button is being released, but','line_number':154,'multiline':False]
['text':' the meaning of the keyboard flags remains the same.','line_number':155,'multiline':False]
['text':' There's absolut minimal set of flags is used because they'll be most','line_number':156,'multiline':False]
['text':' probably supported on different platforms. Even the mouse_right flag','line_number':157,'multiline':False]
['text':' is restricted because Mac's mice have only one button, but AFAIK','line_number':158,'multiline':False]
['text':' it can be simulated with holding a special key on the keydoard.','line_number':159,'multiline':False]
['text':'--------------------------------------------------------------key_code_e','line_number':168,'multiline':False]
['text':' Keyboard codes. There's also a restricted set of codes that are most ','line_number':169,'multiline':False]
['text':' probably supported on different platforms. Any platform dependent codes','line_number':170,'multiline':False]
['text':' should be converted into these ones. There're only those codes are','line_number':171,'multiline':False]
['text':' defined that cannot be represented as printable ASCII-characters. ','line_number':172,'multiline':False]
['text':' All printable ASCII-set can be used in a regular C/C++ manner: ','line_number':173,'multiline':False]
['text':' ' ', 'A', '0' '+' and so on.','line_number':174,'multiline':False]
['text':' Since the class is used for creating very simple demo-applications','line_number':175,'multiline':False]
['text':' we don't need very rich possibilities here, just basic ones. ','line_number':176,'multiline':False]
['text':' Actually the numeric key codes are taken from the SDL library, so,','line_number':177,'multiline':False]
['text':' the implementation of the SDL support does not require any mapping.','line_number':178,'multiline':False]
['text':' ASCII set. Should be supported everywhere','line_number':181,'multiline':False]
['text':' Keypad ','line_number':189,'multiline':False]
['text':' Arrow-keys and stuff','line_number':209,'multiline':False]
['text':' Functional keys. You'd better avoid using','line_number':220,'multiline':False]
['text':' f11...f15 in your applications if you want ','line_number':221,'multiline':False]
['text':' the applications to be portable','line_number':222,'multiline':False]
['text':' The possibility of using these keys is ','line_number':239,'multiline':False]
['text':' very restricted. Actually it's guaranteed ','line_number':240,'multiline':False]
['text':' only in win32_api and win32_sdl implementations','line_number':241,'multiline':False]
['text':' Phew!','line_number':246,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':251,'multiline':False]
['text':' A predeclaration of the platform dependent class. Since we do not','line_number':252,'multiline':False]
['text':' know anything here the only we can have is just a pointer to this','line_number':253,'multiline':False]
['text':' class as a data member. It should be created and destroyed explicitly','line_number':254,'multiline':False]
['text':' in the constructor/destructor of the platform_support class. ','line_number':255,'multiline':False]
['text':' Although the pointer to platform_specific is public the application ','line_number':256,'multiline':False]
['text':' cannot have access to its members or methods since it does not know','line_number':257,'multiline':False]
['text':' anything about them and it's a perfect incapsulation :-)','line_number':258,'multiline':False]
['text':'----------------------------------------------------------ctrl_container','line_number':262,'multiline':False]
['text':' A helper class that contains pointers to a number of controls.','line_number':263,'multiline':False]
['text':' This class is used to ease the event handling with controls.','line_number':264,'multiline':False]
['text':' The implementation should simply call the appropriate methods','line_number':265,'multiline':False]
['text':' of this class when appropriate events occur.','line_number':266,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':272,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':275,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':284,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':295,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':306,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':318,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':329,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':339,'multiline':False]
['text':'---------------------------------------------------------platform_support','line_number':371,'multiline':False]
['text':' This class is a base one to the apllication classes. It can be used ','line_number':372,'multiline':False]
['text':' as follows:','line_number':373,'multiline':False]
['text':'','line_number':374,'multiline':False]
['text':'  class the_application : public agg::platform_support','line_number':375,'multiline':False]
['text':'  {','line_number':376,'multiline':False]
['text':'  public:','line_number':377,'multiline':False]
['text':'      the_application(unsigned bpp, bool flip_y) :','line_number':378,'multiline':False]
['text':'          platform_support(bpp, flip_y) ','line_number':379,'multiline':False]
['text':'      . . .','line_number':380,'multiline':False]
['text':'','line_number':381,'multiline':False]
['text':'      //override stuff . . .','line_number':382,'multiline':False]
['text':'      virtual void on_init()','line_number':383,'multiline':False]
['text':'      {','line_number':384,'multiline':False]
['text':'         . . .','line_number':385,'multiline':False]
['text':'      }','line_number':386,'multiline':False]
['text':'','line_number':387,'multiline':False]
['text':'      virtual void on_draw()','line_number':388,'multiline':False]
['text':'      {','line_number':389,'multiline':False]
['text':'          . . .','line_number':390,'multiline':False]
['text':'      }','line_number':391,'multiline':False]
['text':'','line_number':392,'multiline':False]
['text':'      virtual void on_resize(int sx, int sy)','line_number':393,'multiline':False]
['text':'      {','line_number':394,'multiline':False]
['text':'          . . .','line_number':395,'multiline':False]
['text':'      }','line_number':396,'multiline':False]
['text':'      // . . . and so on, see virtual functions','line_number':397,'multiline':False]
['text':'','line_number':398,'multiline':False]
['text':'','line_number':399,'multiline':False]
['text':'      //any your own stuff . . .','line_number':400,'multiline':False]
['text':'  };','line_number':401,'multiline':False]
['text':'','line_number':402,'multiline':False]
['text':'','line_number':403,'multiline':False]
['text':'  int agg_main(int argc, char* argv[])','line_number':404,'multiline':False]
['text':'  {','line_number':405,'multiline':False]
['text':'      the_application app(pix_format_rgb24, true);','line_number':406,'multiline':False]
['text':'      app.caption("AGG Example. Lion");','line_number':407,'multiline':False]
['text':'','line_number':408,'multiline':False]
['text':'      if(app.init(500, 400, agg::window_resize))','line_number':409,'multiline':False]
['text':'      {','line_number':410,'multiline':False]
['text':'          return app.run();','line_number':411,'multiline':False]
['text':'      }','line_number':412,'multiline':False]
['text':'      return 1;','line_number':413,'multiline':False]
['text':'  }','line_number':414,'multiline':False]
['text':'','line_number':415,'multiline':False]
['text':' The reason to have agg_main() instead of just main() is that SDL','line_number':416,'multiline':False]
['text':' for Windows requires including SDL.h if you define main(). Since','line_number':417,'multiline':False]
['text':' the demo applications cannot rely on any platform/library specific','line_number':418,'multiline':False]
['text':' stuff it's impossible to include SDL.h into the application files.','line_number':419,'multiline':False]
['text':' The demo applications are simple and their use is restricted, so, ','line_number':420,'multiline':False]
['text':' this approach is quite reasonable.','line_number':421,'multiline':False]
['text':' ','line_number':422,'multiline':False]
['text':' format - see enum pix_format_e {};','line_number':428,'multiline':False]
['text':' flip_y - true if you want to have the Y-axis flipped vertically.','line_number':429,'multiline':False]
['text':' Setting the windows caption (title). Should be able','line_number':433,'multiline':False]
['text':' to be called at least before calling init(). ','line_number':434,'multiline':False]
['text':' It's perfect if they can be called anytime.','line_number':435,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':439,'multiline':False]
['text':' These 3 methods handle working with images. The image','line_number':440,'multiline':False]
['text':' formats are the simplest ones, such as .BMP in Windows or ','line_number':441,'multiline':False]
['text':' .ppm in Linux. In the applications the names of the files','line_number':442,'multiline':False]
['text':' should not have any file extensions. Method load_img() can','line_number':443,'multiline':False]
['text':' be called before init(), so, the application could be able ','line_number':444,'multiline':False]
['text':' to determine the initial size of the window depending on ','line_number':445,'multiline':False]
['text':' the size of the loaded image. ','line_number':446,'multiline':False]
['text':' The argument "idx" is the number of the image 0...max_images-1','line_number':447,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':452,'multiline':False]
['text':' init() and run(). See description before the class for details.','line_number':453,'multiline':False]
['text':' The necessity of calling init() after creation is that it's ','line_number':454,'multiline':False]
['text':' impossible to call the overridden virtual function (on_init()) ','line_number':455,'multiline':False]
['text':' from the constructor. On the other hand it's very useful to have','line_number':456,'multiline':False]
['text':' some on_init() event handler when the window is created but ','line_number':457,'multiline':False]
['text':' not yet displayed. The rbuf_window() method (see below) is ','line_number':458,'multiline':False]
['text':' accessible from on_init().','line_number':459,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':463,'multiline':False]
['text':' The very same parameters that were used in the constructor','line_number':464,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':469,'multiline':False]
['text':' The following provides a very simple mechanism of doing someting','line_number':470,'multiline':False]
['text':' in background. It's not multithreading. When wait_mode is true','line_number':471,'multiline':False]
['text':' the class waits for the events and it does not ever call on_idle().','line_number':472,'multiline':False]
['text':' When it's false it calls on_idle() when the event queue is empty.','line_number':473,'multiline':False]
['text':' The mode can be changed anytime. This mechanism is satisfactory','line_number':474,'multiline':False]
['text':' to create very simple animations.','line_number':475,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':479,'multiline':False]
['text':' These two functions control updating of the window. ','line_number':480,'multiline':False]
['text':' force_redraw() is an analog of the Win32 InvalidateRect() function.','line_number':481,'multiline':False]
['text':' Being called it sets a flag (or sends a message) which results','line_number':482,'multiline':False]
['text':' in calling on_draw() and updating the content of the window ','line_number':483,'multiline':False]
['text':' when the next event cycle comes.','line_number':484,'multiline':False]
['text':' update_window() results in just putting immediately the content ','line_number':485,'multiline':False]
['text':' of the currently rendered buffer to the window without calling','line_number':486,'multiline':False]
['text':' on_draw().','line_number':487,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':491,'multiline':False]
['text':' So, finally, how to draw anythig with AGG? Very simple.','line_number':492,'multiline':False]
['text':' rbuf_window() returns a reference to the main rendering ','line_number':493,'multiline':False]
['text':' buffer which can be attached to any rendering class.','line_number':494,'multiline':False]
['text':' rbuf_img() returns a reference to the previously created','line_number':495,'multiline':False]
['text':' or loaded image buffer (see load_img()). The image buffers ','line_number':496,'multiline':False]
['text':' are not displayed directly, they should be copied to or ','line_number':497,'multiline':False]
['text':' combined somehow with the rbuf_window(). rbuf_window() is','line_number':498,'multiline':False]
['text':' the only buffer that can be actually displayed.','line_number':499,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':504,'multiline':False]
['text':' Returns file extension used in the implementation for the particular','line_number':505,'multiline':False]
['text':' system.','line_number':506,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':509,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':518,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':528,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':542,'multiline':False]
['text':' Event handlers. They are not pure functions, so you don't have','line_number':543,'multiline':False]
['text':' to override them all.','line_number':544,'multiline':False]
['text':' In my demo applications these functions are defined inside','line_number':545,'multiline':False]
['text':' the the_application class (implicit inlining) which is in general ','line_number':546,'multiline':False]
['text':' very bad practice, I mean vitual inline methods. At least it does','line_number':547,'multiline':False]
['text':' not make sense. ','line_number':548,'multiline':False]
['text':' But in this case it's quite appropriate bacause we have the only','line_number':549,'multiline':False]
['text':' instance of the the_application class and it is in the same file ','line_number':550,'multiline':False]
['text':' where this class is defined.','line_number':551,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':563,'multiline':False]
['text':' Adding control elements. A control element once added will be ','line_number':564,'multiline':False]
['text':' working and reacting to the mouse and keyboard events. Still, you','line_number':565,'multiline':False]
['text':' will have to render them in the on_draw() using function ','line_number':566,'multiline':False]
['text':' render_ctrl() because platform_support doesn't know anything about ','line_number':567,'multiline':False]
['text':' renderers you use. The controls will be also scaled automatically ','line_number':568,'multiline':False]
['text':' if they provide a proper scaling mechanism (all the controls ','line_number':569,'multiline':False]
['text':' included into the basic AGG package do).','line_number':570,'multiline':False]
['text':' If you don't need a particular control to be scaled automatically ','line_number':571,'multiline':False]
['text':' call ctrl::no_transform() after adding.','line_number':572,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':575,'multiline':False]
['text':' Auxiliary functions. trans_affine_resizing() modifier sets up the resizing ','line_number':576,'multiline':False]
['text':' matrix on the basis of the given width and height and the initial','line_number':577,'multiline':False]
['text':' width and height of the window. The implementation should simply ','line_number':578,'multiline':False]
['text':' call this function every time when it catches the resizing event','line_number':579,'multiline':False]
['text':' passing in the new values of width and height of the window.','line_number':580,'multiline':False]
['text':' Nothing prevents you from "cheating" the scaling matrix if you','line_number':581,'multiline':False]
['text':' call this function from somewhere with wrong arguments. ','line_number':582,'multiline':False]
['text':' trans_affine_resizing() accessor simply returns current resizing matrix ','line_number':583,'multiline':False]
['text':' which can be used to apply additional scaling of any of your ','line_number':584,'multiline':False]
['text':' stuff when the window is being resized.','line_number':585,'multiline':False]
['text':' width(), height(), initial_width(), and initial_height() must be','line_number':586,'multiline':False]
['text':' clear to understand with no comments :-)','line_number':587,'multiline':False]
['text':'double sx = double(width) / double(m_initial_width);','line_number':592,'multiline':False]
['text':'double sy = double(height) / double(m_initial_height);','line_number':593,'multiline':False]
['text':'if(sy < sx) sx = sy;','line_number':594,'multiline':False]
['text':'m_resize_mtx = trans_affine_scaling(sx, sx);','line_number':595,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':617,'multiline':False]
['text':' Get raw display handler depending on the system. ','line_number':618,'multiline':False]
['text':' For win32 its an HDC, for other systems it can be a pointer to some','line_number':619,'multiline':False]
['text':' structure. See the implementation files for detals.','line_number':620,'multiline':False]
['text':' It's provided "as is", so, first you should check if it's not null.','line_number':621,'multiline':False]
['text':' If it's null the raw_display_handler is not supported. Also, there's ','line_number':622,'multiline':False]
['text':' no guarantee that this function is implemented, so, in some ','line_number':623,'multiline':False]
['text':' implementations you may have simply an unresolved symbol when linking.','line_number':624,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':627,'multiline':False]
['text':' display message box or print the message to the console ','line_number':628,'multiline':False]
['text':' (depending on implementation)','line_number':629,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':632,'multiline':False]
['text':' Stopwatch functions. Function elapsed_time() returns time elapsed ','line_number':633,'multiline':False]
['text':' since the latest start_timer() invocation in millisecods. ','line_number':634,'multiline':False]
['text':' The resolutoin depends on the implementation. ','line_number':635,'multiline':False]
['text':' In Win32 it uses QueryPerformanceFrequency() / QueryPerformanceCounter().','line_number':636,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':640,'multiline':False]
['text':' Get the full file name. In most cases it simply returns','line_number':641,'multiline':False]
['text':' file_name. As it's appropriate in many systems if you open','line_number':642,'multiline':False]
['text':' a file by its name without specifying the path, it tries to ','line_number':643,'multiline':False]
['text':' open it in the current directory. The demos usually expect ','line_number':644,'multiline':False]
['text':' all the supplementary files to be placed in the current ','line_number':645,'multiline':False]
['text':' directory, that is usually coincides with the directory where','line_number':646,'multiline':False]
['text':' the executable is. However, in some systems (BeOS) it's not so.','line_number':647,'multiline':False]
['text':' For those kinds of systems full_file_name() can help access files ','line_number':648,'multiline':False]
['text':' preserving commonly used policy.','line_number':649,'multiline':False]
['text':' So, it's a good idea to use in the demos the following:','line_number':650,'multiline':False]
['text':' FILE* fd = fopen(full_file_name("some.file"), "r"); ','line_number':651,'multiline':False]
['text':' instead of','line_number':652,'multiline':False]
['text':' FILE* fd = fopen("some.file", "r"); ','line_number':653,'multiline':False]
['text':' Sorry, I'm too tired to describe the private ','line_number':660,'multiline':False]
['text':' data membders. See the implementations for different','line_number':661,'multiline':False]
['text':' platforms for details.','line_number':662,'multiline':False]
