['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]
['text':' Anti-Grain Geometry - Version 2.4','line_number':2,'multiline':False]
['text':' Copyright (C) 2002-2005 Maxim Shemanarev (http://www.antigrain.com)','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Permission to copy, use, modify, sell and distribute this software ','line_number':5,'multiline':False]
['text':' is granted provided this copyright notice appears in all copies. ','line_number':6,'multiline':False]
['text':' This software is provided "as is" without express or implied','line_number':7,'multiline':False]
['text':' warranty, and with no claim as to its suitability for any purpose.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':10,'multiline':False]
['text':' Contact: mcseem@antigrain.com','line_number':11,'multiline':False]
['text':'          mcseemagg@yahoo.com','line_number':12,'multiline':False]
['text':'          http://www.antigrain.com','line_number':13,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' Adaptation for 32-bit screen coordinates (scanline32_u) has been sponsored by ','line_number':16,'multiline':False]
['text':' Liberty Technology Systems, Inc., visit http://lib-sys.com','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' Liberty Technology Systems, Inc. is the provider of','line_number':19,'multiline':False]
['text':' PostScript and PDF technology for software developers.','line_number':20,'multiline':False]
['text':' ','line_number':21,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':22,'multiline':False]
['text':'=============================================================scanline_u8','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' Unpacked scanline container class','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':' This class is used to transfer data from a scanline rasterizer ','line_number':35,'multiline':False]
['text':' to the rendering buffer. It's organized very simple. The class stores ','line_number':36,'multiline':False]
['text':' information of horizontal spans to render it into a pixel-map buffer. ','line_number':37,'multiline':False]
['text':' Each span has staring X, length, and an array of bytes that determine the ','line_number':38,'multiline':False]
['text':' cover-values for each pixel. ','line_number':39,'multiline':False]
['text':' Before using this class you should know the minimal and maximal pixel ','line_number':40,'multiline':False]
['text':' coordinates of your scanline. The protocol of using is:','line_number':41,'multiline':False]
['text':' 1. reset(min_x, max_x)','line_number':42,'multiline':False]
['text':' 2. add_cell() / add_span() - accumulate scanline. ','line_number':43,'multiline':False]
['text':'    When forming one scanline the next X coordinate must be always greater','line_number':44,'multiline':False]
['text':'    than the last stored one, i.e. it works only with ordered coordinates.','line_number':45,'multiline':False]
['text':' 3. Call finalize(y) and render the scanline.','line_number':46,'multiline':False]
['text':' 3. Call reset_spans() to prepare for the new scanline.','line_number':47,'multiline':False]
['text':'    ','line_number':48,'multiline':False]
['text':' 4. Rendering:','line_number':49,'multiline':False]
['text':' ','line_number':50,'multiline':False]
['text':' Scanline provides an iterator class that allows you to extract','line_number':51,'multiline':False]
['text':' the spans and the cover values for each pixel. Be aware that clipping','line_number':52,'multiline':False]
['text':' has not been done yet, so you should perform it yourself.','line_number':53,'multiline':False]
['text':' Use scanline_u8::iterator to render spans:','line_number':54,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':' int y = sl.y();                    // Y-coordinate of the scanline','line_number':57,'multiline':False]
['text':'','line_number':58,'multiline':False]
['text':' ************************************','line_number':59,'multiline':False]
['text':' ...Perform vertical clipping here...','line_number':60,'multiline':False]
['text':' ************************************','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':' scanline_u8::const_iterator span = sl.begin();','line_number':63,'multiline':False]
['text':' ','line_number':64,'multiline':False]
['text':' unsigned char* row = m_rbuf->row(y); // The address of the beginning','line_number':65,'multiline':False]
['text':'                                      // of the current row','line_number':66,'multiline':False]
['text':' ','line_number':67,'multiline':False]
['text':' unsigned num_spans = sl.num_spans(); // Number of spans. It's guaranteed that','line_number':68,'multiline':False]
['text':'                                      // num_spans is always greater than 0.','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' do','line_number':71,'multiline':False]
['text':' {','line_number':72,'multiline':False]
['text':'     const scanline_u8::cover_type* covers =','line_number':73,'multiline':False]
['text':'         span->covers;                     // The array of the cover values','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':'     int num_pix = span->len;              // Number of pixels of the span.','line_number':76,'multiline':False]
['text':'                                           // Always greater than 0, still it's','line_number':77,'multiline':False]
['text':'                                           // better to use "int" instead of ','line_number':78,'multiline':False]
['text':'                                           // "unsigned" because it's more','line_number':79,'multiline':False]
['text':'                                           // convenient for clipping','line_number':80,'multiline':False]
['text':'     int x = span->x;','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':'     **************************************','line_number':83,'multiline':False]
['text':'     ...Perform horizontal clipping here...','line_number':84,'multiline':False]
['text':'     ...you have x, covers, and pix_count..','line_number':85,'multiline':False]
['text':'     **************************************','line_number':86,'multiline':False]
['text':'','line_number':87,'multiline':False]
['text':'     unsigned char* dst = row + x;  // Calculate the start address of the row.','line_number':88,'multiline':False]
['text':'                                    // In this case we assume a simple ','line_number':89,'multiline':False]
['text':'                                    // grayscale image 1-byte per pixel.','line_number':90,'multiline':False]
['text':'     do','line_number':91,'multiline':False]
['text':'     {','line_number':92,'multiline':False]
['text':'         *dst++ = *covers++;        // Hypotetical rendering. ','line_number':93,'multiline':False]
['text':'     }','line_number':94,'multiline':False]
['text':'     while(--num_pix);','line_number':95,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':'     ++span;','line_number':97,'multiline':False]
['text':' } ','line_number':98,'multiline':False]
['text':' while(--num_spans);  // num_spans cannot be 0, so this loop is quite safe','line_number':99,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':' The question is: why should we accumulate the whole scanline when we','line_number':102,'multiline':False]
['text':' could render just separate spans when they're ready?','line_number':103,'multiline':False]
['text':' That's because using the scanline is generally faster. When is consists ','line_number':104,'multiline':False]
['text':' of more than one span the conditions for the processor cash system','line_number':105,'multiline':False]
['text':' are better, because switching between two different areas of memory ','line_number':106,'multiline':False]
['text':' (that can be very large) occurs less frequently.','line_number':107,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':108,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':116,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':127,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':134,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':148,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':167,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':186,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':205,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':211,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':218,'multiline':False]
['text':'==========================================================scanline_u8_am','line_number':240,'multiline':False]
['text':' ','line_number':241,'multiline':False]
['text':' The scanline container with alpha-masking','line_number':242,'multiline':False]
['text':' ','line_number':243,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':244,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':257,'multiline':False]
['text':'===========================================================scanline32_u8','line_number':284,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':292,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':306,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':325,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':346,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':353,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':366,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':382,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':400,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':418,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':424,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':431,'multiline':False]
['text':'========================================================scanline32_u8_am','line_number':452,'multiline':False]
['text':' ','line_number':453,'multiline':False]
['text':' The scanline container with alpha-masking','line_number':454,'multiline':False]
['text':' ','line_number':455,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':456,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':470,'multiline':False]
