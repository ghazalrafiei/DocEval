['text':' -*- mode: c++; c-basic-offset: 4 -*- ','line_number':1,'multiline':True]
['text':'
 * Modified for use within matplotlib
 * 5 July 2007
 * Michael Droettboom
 ','line_number':3,'multiline':True]
['text':'
** ~ppr/src/pprdrv/pprdrv_tt.c
** Copyright 1995, Trinity College Computing Center.
** Written by David Chappell.
**
** Permission to use, copy, modify, and distribute this software and its
** documentation for any purpose and without fee is hereby granted, provided
** that the above copyright notice appear in all copies and that both that
** copyright notice and this permission notice appear in supporting
** documentation.  This software is provided "as is" without express or
** implied warranty.
**
** TrueType font support.  These functions allow PPR to generate
** PostScript fonts from Microsoft compatible TrueType font files.
**
** Last revised 19 December 1995.
','line_number':9,'multiline':True]
['text':'==========================================================================
** Convert the indicated Truetype font file to a type 42 or type 3
** PostScript font and insert it in the output stream.
**
** All the routines from here to the end of file file are involved
** in this process.
==========================================================================','line_number':43,'multiline':True]
['text':'---------------------------------------
** Endian conversion routines.
** These routines take a BYTE pointer
** and return a value formed by reading
** bytes starting at that point.
**
** These routines read the big-endian
** values which are used in TrueType
** font files.
---------------------------------------','line_number':51,'multiline':True]
['text':'
** Get an Unsigned 32 bit number.
','line_number':62,'multiline':True]
['text':' end of ftohULONG() ','line_number':77,'multiline':True]
['text':'
** Get an unsigned 16 bit number.
','line_number':79,'multiline':True]
['text':' end of getUSHORT() ','line_number':94,'multiline':True]
['text':'
** Get a 32 bit fixed point (16.16) number.
** A special structure is used to return the value.
','line_number':96,'multiline':True]
['text':' end of getFixed() ','line_number':108,'multiline':True]
['text':'-----------------------------------------------------------------------
** Load a TrueType font table into memory and return a pointer to it.
** The font's "file" and "offset_table" fields must be set before this
** routine is called.
**
** This first argument is a TrueType font structure, the second
** argument is the name of the table to retrieve.  A table name
** is always 4 characters, though the last characters may be
** padding spaces.
-----------------------------------------------------------------------','line_number':110,'multiline':True]
['text':' We must search the table directory. ','line_number':126,'multiline':True]
['text':' Always NUL-terminate; add two in case of UTF16 strings. ','line_number':159,'multiline':True]
['text':' end of GetTable() ','line_number':173,'multiline':True]
['text':'--------------------------------------------------------------------
** Load the 'name' table, get information from it,
** and store that information in the font structure.
**
** The 'name' table contains information such as the name of
** the font, and it's PostScript name.
--------------------------------------------------------------------','line_number':182,'multiline':True]
['text':' Number of strings in this table ','line_number':192,'multiline':True]
['text':' pointer to start of string storage ','line_number':193,'multiline':True]
['text':' Current platform id ','line_number':195,'multiline':True]
['text':' name id, ','line_number':196,'multiline':True]
['text':' offset and length of string. ','line_number':197,'multiline':True]
['text':' Set default values to avoid future references to undefined
     * pointers. Allocate each of PostName, FullName, FamilyName,
     * Version, and Style separately so they can be freed safely. ','line_number':202,'multiline':True]
['text':' pointer to table ','line_number':217,'multiline':True]
['text':' number of names ','line_number':220,'multiline':True]
['text':' start of string storage ','line_number':221,'multiline':True]
['text':' Copyright notice ','line_number':233,'multiline':True]
['text':' Font Family name ','line_number':245,'multiline':True]
['text':' Font Family name ','line_number':258,'multiline':True]
['text':' Full Font name ','line_number':271,'multiline':True]
['text':' Version string ','line_number':284,'multiline':True]
['text':' PostScript name ','line_number':297,'multiline':True]
['text':' Microsoft-format PostScript name ','line_number':309,'multiline':True]
['text':' Trademark string ','line_number':322,'multiline':True]
['text':' end of Read_name() ','line_number':341,'multiline':True]
['text':'---------------------------------------------------------------------
** Write the header for a PostScript font.
---------------------------------------------------------------------','line_number':343,'multiline':True]
['text':'
    ** To show that it is a TrueType font in PostScript format,
    ** we will begin the file with a specific string.
    ** This string also indicates the version of the TrueType
    ** specification on which the font is based and the
    ** font manufacturer's revision number for the font.
    ','line_number':351,'multiline':True]
['text':' If it is not a Type 42 font, we will use a different format. ','line_number':366,'multiline':True]
['text':' See RBIIp 641 ','line_number':370,'multiline':True]
['text':' We will make the title the name of the font. ','line_number':372,'multiline':True]
['text':' If there is a Copyright notice, put it here too. ','line_number':375,'multiline':True]
['text':' We created this file. ','line_number':381,'multiline':True]
['text':' If VM usage information is available, print it. ','line_number':395,'multiline':True]
['text':' Start the dictionary which will eventually ','line_number':404,'multiline':True]
['text':' become the font. ','line_number':405,'multiline':True]
['text':' Type 3 fonts will need some subroutines here. ','line_number':414,'multiline':True]
['text':' end of ttfont_header() ','line_number':445,'multiline':True]
['text':'-------------------------------------------------------------
** Define the encoding array for this font.
** Since we don't really want to deal with converting all of
** the possible font encodings in the wild to a standard PS
** one, we just explicitly create one for each font.
-------------------------------------------------------------','line_number':447,'multiline':True]
['text':' end of ttfont_encoding() ','line_number':472,'multiline':True]
['text':'-----------------------------------------------------------
** Create the optional "FontInfo" sub-dictionary.
-----------------------------------------------------------','line_number':474,'multiline':True]
['text':' We create a sub dictionary named "FontInfo" where we ','line_number':481,'multiline':True]
['text':' store information which though it is not used by the ','line_number':482,'multiline':True]
['text':' interpreter, is useful to some programs which will ','line_number':483,'multiline':True]
['text':' be printing with the font. ','line_number':484,'multiline':True]
['text':' These names come from the TrueType font's "name" table. ','line_number':487,'multiline':True]
['text':' This information is not quite correct. ','line_number':500,'multiline':True]
['text':' Some fonts have this as "version". ','line_number':503,'multiline':True]
['text':' Some information from the "post" table. ','line_number':506,'multiline':True]
['text':' end of ttfont_FontInfo() ','line_number':513,'multiline':True]
['text':'-------------------------------------------------------------------
** sfnts routines
** These routines generate the PostScript "sfnts" array which
** contains one or more strings which contain a reduced version
** of the TrueType font.
**
** A number of functions are required to accomplish this rather
** complicated task.
-------------------------------------------------------------------','line_number':515,'multiline':True]
['text':'
** This is called once at the start.
','line_number':528,'multiline':True]
['text':' end of sfnts_start() ','line_number':537,'multiline':True]
['text':'
** Write a BYTE as a hexadecimal value as part of the sfnts array.
','line_number':539,'multiline':True]
['text':' end of sfnts_pputBYTE() ','line_number':565,'multiline':True]
['text':'
** Write a USHORT as a hexadecimal value as part of the sfnts array.
','line_number':567,'multiline':True]
['text':' end of sfnts_pputUSHORT() ','line_number':574,'multiline':True]
['text':'
** Write a ULONG as part of the sfnts array.
','line_number':576,'multiline':True]
['text':' end of sfnts_pputULONG() ','line_number':594,'multiline':True]
['text':'
** This is called whenever it is
** necessary to end a string in the sfnts array.
**
** (The array must be broken into strings which are
** no longer than 64K characters.)
','line_number':596,'multiline':True]
['text':' fool sfnts_pputBYTE() ','line_number':607,'multiline':True]
['text':' extra byte for pre-2013 compatibility ','line_number':613,'multiline':True]
['text':' end of sfnts_end_string() ','line_number':618,'multiline':True]
['text':'
** This is called at the start of each new table.
** The argement is the length in bytes of the table
** which will follow.  If the new table will not fit
** in the current string, a new one is started.
','line_number':620,'multiline':True]
['text':' end of sfnts_new_table() ','line_number':630,'multiline':True]
['text':'
** We may have to break up the 'glyf' table.  That is the reason
** why we provide this special routine to copy it into the sfnts
** array.
','line_number':632,'multiline':True]
['text':' running total of bytes written to table ','line_number':642,'multiline':True]
['text':' Seek to proper position in the file. ','line_number':653,'multiline':True]
['text':' Copy the glyphs one by one ','line_number':656,'multiline':True]
['text':' Read the glyph offset from the index-to-location table. ','line_number':659,'multiline':True]
['text':' Start new string if necessary. ','line_number':676,'multiline':True]
['text':'
        ** Make sure the glyph is padded out to a
        ** two byte boundary.
        ','line_number':679,'multiline':True]
['text':' Copy the bytes of the glyph. ','line_number':687,'multiline':True]
['text':' add to running total ','line_number':695,'multiline':True]
['text':' Pad out to full length from table directory ','line_number':706,'multiline':True]
['text':' end of sfnts_glyf_table() ','line_number':713,'multiline':True]
['text':'
** Here is the routine which ties it all together.
**
** Create the array called "sfnts" which
** holds the actual TrueType data.
','line_number':715,'multiline':True]
['text':' The names of all tables ','line_number':723,'multiline':True]
['text':' which it is worth while ','line_number':725,'multiline':True]
['text':' to include in a Type 42 ','line_number':726,'multiline':True]
['text':' PostScript font. ','line_number':727,'multiline':True]
['text':' The location of each of ','line_number':737,'multiline':True]
['text':' the above tables. ','line_number':739,'multiline':True]
['text':' A pointer into the origional table directory. ','line_number':745,'multiline':True]
['text':' General use loop countes. ','line_number':746,'multiline':True]
['text':' Input character. ','line_number':747,'multiline':True]
['text':' How many `important' tables did we find? ','line_number':750,'multiline':True]
['text':'
    ** Find the tables we want and store there vital
    ** statistics in tables[].
    ','line_number':756,'multiline':True]
['text':' Number of tables read from the directory ','line_number':760,'multiline':True]
['text':' There are still tables to read from ptr ','line_number':764,'multiline':True]
['text':' If we are past it. ','line_number':767,'multiline':True]
['text':' If we haven't hit it yet. ','line_number':770,'multiline':True]
['text':' Here it is! ','line_number':773,'multiline':True]
['text':' We've read the whole table directory already ','line_number':784,'multiline':True]
['text':' Some tables couldn't be found ','line_number':785,'multiline':True]
['text':' Proceed to next tables[x] ','line_number':787,'multiline':True]
['text':' end of for loop which passes over the table directory ','line_number':791,'multiline':True]
['text':' Begin the sfnts array. ','line_number':793,'multiline':True]
['text':' Generate the offset table header ','line_number':796,'multiline':True]
['text':' Start by copying the TrueType version number. ','line_number':797,'multiline':True]
['text':' Now, generate those silly numTables numbers. ','line_number':804,'multiline':True]
['text':' number of tables ','line_number':805,'multiline':True]
['text':' searchRange ','line_number':818,'multiline':True]
['text':' entrySelector ','line_number':819,'multiline':True]
['text':' rangeShift ','line_number':820,'multiline':True]
['text':' Now, emmit the table directory. ','line_number':824,'multiline':True]
['text':' Skip missing tables ','line_number':827,'multiline':True]
['text':' Name ','line_number':832,'multiline':True]
['text':' Checksum ','line_number':838,'multiline':True]
['text':' Offset ','line_number':841,'multiline':True]
['text':' Length ','line_number':844,'multiline':True]
['text':' Now, send the tables ','line_number':848,'multiline':True]
['text':' skip tables that aren't there ','line_number':851,'multiline':True]
['text':' 'glyf' table gets special treatment ','line_number':857,'multiline':True]
['text':' Other tables may not exceed ','line_number':862,'multiline':True]
['text':' 65535 bytes in length. ','line_number':864,'multiline':True]
['text':' Start new string if necessary. ','line_number':870,'multiline':True]
['text':' Seek to proper position in the file. ','line_number':873,'multiline':True]
['text':' Copy the bytes of the table. ','line_number':876,'multiline':True]
['text':' Padd it out to a four byte boundary. ','line_number':888,'multiline':True]
['text':' End of loop for all tables ','line_number':899,'multiline':True]
['text':' Close the array. ','line_number':901,'multiline':True]
['text':' end of ttfont_sfnts() ','line_number':904,'multiline':True]
['text':'--------------------------------------------------------------
** Create the CharStrings dictionary which will translate
** PostScript character names to TrueType font character
** indexes.
**
** If we are creating a type 3 instead of a type 42 font,
** this array will instead convert PostScript character names
** to executable proceedures.
--------------------------------------------------------------','line_number':906,'multiline':True]
['text':'
** This routine is called by the one below.
** It is also called from pprdrv_tt2.c
','line_number':956,'multiline':True]
['text':' The 'post' table format number. ','line_number':969,'multiline':True]
['text':' We don't have a glyph name table, so generate a name.
           This generated name must match exactly the name that is
           generated by FT2Font in get_glyph_name ','line_number':974,'multiline':True]
['text':' If a standard Apple name, ','line_number':983,'multiline':True]
['text':' Otherwise, use one ','line_number':987,'multiline':True]
['text':' of the pascal strings. ','line_number':989,'multiline':True]
['text':' Set pointer to start of Pascal strings. ','line_number':992,'multiline':True]
['text':' Step thru the strings ','line_number':995,'multiline':True]
['text':' until we get to the one ','line_number':996,'multiline':True]
['text':' that we want. ','line_number':998,'multiline':True]
['text':' Copy the pascal string into ','line_number':1008,'multiline':True]
['text':' a buffer and make it ASCIIz. ','line_number':1009,'multiline':True]
['text':' end of ttfont_CharStrings_getname() ','line_number':1013,'multiline':True]
['text':'
** This is the central routine of this section.
','line_number':1015,'multiline':True]
['text':' The 'post' table format number. ','line_number':1022,'multiline':True]
['text':' Emmit the start of the PostScript code to define the dictionary. ','line_number':1025,'multiline':True]
['text':' Section 5.8.2 table 5.7 of the PS Language Ref says a CharStrings dictionary must contain an entry for .notdef ','line_number':1027,'multiline':True]
['text':' Emmit one key-value pair for each glyph. ','line_number':1030,'multiline':True]
['text':' type 42 ','line_number':1036,'multiline':True]
['text':' type 3 ','line_number':1040,'multiline':True]
['text':' "} bind def" ','line_number':1046,'multiline':True]
['text':' end of ttfont_CharStrings() ','line_number':1051,'multiline':True]
['text':'----------------------------------------------------------------
** Emmit the code to finish up the dictionary and turn
** it into a font.
----------------------------------------------------------------','line_number':1053,'multiline':True]
['text':' If we are generating a type 3 font, we need to provide ','line_number':1059,'multiline':True]
['text':' a BuildGlyph and BuildChar proceedures. ','line_number':1060,'multiline':True]
['text':' start font dictionary ','line_number':1067,'multiline':True]
['text':' This proceedure is for compatibility with ','line_number':1075,'multiline':True]
['text':' level 1 interpreters. ','line_number':1076,'multiline':True]
['text':' If we are generating a type 42 font, we need to check to see ','line_number':1085,'multiline':True]
['text':' if this PostScript interpreter understands type 42 fonts.  If ','line_number':1086,'multiline':True]
['text':' it doesn't, we will hope that the Apple TrueType rasterizer ','line_number':1087,'multiline':True]
['text':' has been loaded and we will adjust the font accordingly. ','line_number':1088,'multiline':True]
['text':' I found out how to do this by examining a TrueType font ','line_number':1089,'multiline':True]
['text':' generated by a Macintosh.  That is where the TrueType interpreter ','line_number':1090,'multiline':True]
['text':' setup instructions and part of BuildGlyph came from. ','line_number':1091,'multiline':True]
['text':' If we have no "resourcestatus" command, or FontType 42 ','line_number':1097,'multiline':True]
['text':' is unknown, leave "true" on the stack. ','line_number':1098,'multiline':True]
['text':' If true, execute code to produce an error message if ','line_number':1104,'multiline':True]
['text':' we can't find Apple's TrueDict in VM. ','line_number':1105,'multiline':True]
['text':' Since we are expected to use Apple's TrueDict TrueType ','line_number':1108,'multiline':True]
['text':' reasterizer, change the font type to 3. ','line_number':1109,'multiline':True]
['text':' Define a string to hold the state of the Apple ','line_number':1112,'multiline':True]
['text':' TrueType interpreter. ','line_number':1113,'multiline':True]
['text':' It looks like we get information about the resolution ','line_number':1116,'multiline':True]
['text':' of the printer and store it in the TrueState string. ','line_number':1117,'multiline':True]
['text':' This BuildGlyph procedure will look the name up in the ','line_number':1125,'multiline':True]
['text':' CharStrings array, and then check to see if what it gets ','line_number':1126,'multiline':True]
['text':' is a procedure.  If it is, it executes it, otherwise, it ','line_number':1127,'multiline':True]
['text':' lets the TrueType rasterizer loose on it. ','line_number':1128,'multiline':True]
['text':' When this proceedure is executed the stack contains ','line_number':1130,'multiline':True]
['text':' the font dictionary and the character name.  We ','line_number':1131,'multiline':True]
['text':' exchange arguments and move the dictionary to the ','line_number':1132,'multiline':True]
['text':' dictionary stack. ','line_number':1133,'multiline':True]
['text':' stack: charname ','line_number':1135,'multiline':True]
['text':' Put two copies of CharStrings on the stack and consume ','line_number':1137,'multiline':True]
['text':' one testing to see if the charname is defined in it, ','line_number':1138,'multiline':True]
['text':' leave the answer on the stack. ','line_number':1139,'multiline':True]
['text':' stack: charname CharStrings bool ','line_number':1141,'multiline':True]
['text':' Exchange the CharStrings dictionary and the charname, ','line_number':1143,'multiline':True]
['text':' but if the answer was false, replace the character name ','line_number':1144,'multiline':True]
['text':' with ".notdef". ','line_number':1145,'multiline':True]
['text':' stack: CharStrings charname ','line_number':1147,'multiline':True]
['text':' Get the value from the CharStrings dictionary and see ','line_number':1149,'multiline':True]
['text':' if it is executable. ','line_number':1150,'multiline':True]
['text':' stack: CharStrings_entry ','line_number':1152,'multiline':True]
['text':' If is a proceedure.  Execute according to RBIIp 277-278. ','line_number':1154,'multiline':True]
['text':' Is a TrueType character index, let the rasterizer at it. ','line_number':1157,'multiline':True]
['text':' Pop the font's dictionary off the stack. ','line_number':1162,'multiline':True]
['text':' This is the level 1 compatibility BuildChar procedure. ','line_number':1165,'multiline':True]
['text':' See RBIIp 281. ','line_number':1166,'multiline':True]
['text':' Here we close the condition which is true ','line_number':1172,'multiline':True]
['text':' if the printer has no built-in TrueType ','line_number':1173,'multiline':True]
['text':' rasterizer. ','line_number':1174,'multiline':True]
['text':' end of if Type 42 not understood. ','line_number':1177,'multiline':True]
['text':' stream.putline("%%EOF"); ','line_number':1180,'multiline':True]
['text':' end of ttfont_trailer() ','line_number':1181,'multiline':True]
['text':'------------------------------------------------------------------
** This is the externally callable routine which inserts the font.
------------------------------------------------------------------','line_number':1183,'multiline':True]
['text':' Decide what type of PostScript font we will be generating. ','line_number':1191,'multiline':True]
['text':' Save the file name for error messages. ','line_number':1224,'multiline':True]
['text':' Open the font file ','line_number':1227,'multiline':True]
['text':' Allocate space for the unvarying part of the offset table. ','line_number':1233,'multiline':True]
['text':' Read the first part of the offset table. ','line_number':1237,'multiline':True]
['text':' Determine how many directory entries there are. ','line_number':1243,'multiline':True]
['text':' Expand the memory block to hold the whole thing. ','line_number':1247,'multiline':True]
['text':' Read the rest of the table directory. ','line_number':1250,'multiline':True]
['text':' Extract information from the "Offset" table. ','line_number':1256,'multiline':True]
['text':' Load the "head" table and extract information from it. ','line_number':1259,'multiline':True]
['text':' font revision number ','line_number':1263,'multiline':True]
['text':' bounding box info ','line_number':1267,'multiline':True]
['text':' size of 'loca' data ','line_number':1271,'multiline':True]
['text':' Load information from the "name" table. ','line_number':1288,'multiline':True]
['text':' We need to have the PostScript table around. ','line_number':1291,'multiline':True]
['text':' If we are generating a Type 3 font, we will need to ','line_number':1296,'multiline':True]
['text':' have the 'loca' and 'glyf' tables arround while ','line_number':1297,'multiline':True]
['text':' we are generating the CharStrings. ','line_number':1298,'multiline':True]
['text':' We need only one value ','line_number':1301,'multiline':True]
['text':' end of insert_ttfont() ','line_number':1329,'multiline':True]
['text':' Write the header for the PostScript font. ','line_number':1338,'multiline':True]
['text':' Define the encoding. ','line_number':1341,'multiline':True]
['text':' Insert FontInfo dictionary. ','line_number':1344,'multiline':True]
['text':' If we are generating a type 42 font, ','line_number':1347,'multiline':True]
['text':' emmit the sfnts array. ','line_number':1348,'multiline':True]
['text':' Emmit the CharStrings array. ','line_number':1355,'multiline':True]
['text':' Send the font trailer. ','line_number':1358,'multiline':True]
['text':' end of insert_ttfont() ','line_number':1361,'multiline':True]
['text':' end of file ','line_number':1401,'multiline':True]
