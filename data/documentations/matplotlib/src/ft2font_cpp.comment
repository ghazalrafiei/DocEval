['text':' -*- mode: c++; c-basic-offset: 4 -*- ','line_number':1,'multiline':True]
['text':'*
 To improve the hinting of the fonts, this code uses a hack
 presented here:

 http://agg.sourceforge.net/antigrain.com/research/font_rasterization/index.html

 The idea is to limit the effect of hinting in the x-direction, while
 preserving hinting in the y-direction.  Since freetype does not
 support this directly, the dpi in the x-direction is set higher than
 in the y-direction, which affects the hinting grid.  Then, a global
 transform is placed on the font to shrink it back to the desired
 size.  While it is a bit surprising that the dpi setting affects
 hinting, whereas the global transform does not, this is documented
 behavior of FreeType, and therefore hopefully unlikely to change.
 The FreeType 2 tutorial says:

      NOTE: The transformation is applied to every glyph that is
      loaded through FT_Load_Glyph and is completely independent of
      any hinting process. This means that you won't get the same
      results if you load a glyph at the size of 24 pixels, or a glyph
      at the size at 12 pixels scaled by 2 through a transform,
      because the hints will have been computed differently (except
      you have disabled hints).
 ','line_number':21,'multiline':True]
['text':' FreeType error codes; loaded as per fterror.h.','line_number':48,'multiline':False]
['text':' Should not occur, but don't add another error from failed lookup.','line_number':62,'multiline':False]
['text':' ft_outline_decomposer should be passed to FT_Outline_Decompose.  On the','line_number':212,'multiline':False]
['text':' first pass, vertices and codes are set to NULL, and index is simply','line_number':213,'multiline':False]
['text':' incremented for each vertex that should be inserted, so that it is set, at','line_number':214,'multiline':False]
['text':' the end, to the total number of vertices.  On a second pass, vertices and','line_number':215,'multiline':False]
['text':' codes should point to correctly sized arrays, and index set again to zero,','line_number':216,'multiline':False]
['text':' to get fill vertices and codes with the outline decomposition.','line_number':217,'multiline':False]
['text':' Appending CLOSEPOLY is important to make patheffects work.','line_number':231,'multiline':False]
['text':' Don't append CLOSEPOLY to null glyphs.','line_number':314,'multiline':False]
['text':' set default kerning factor to 0, i.e., no kerning manipulation','line_number':353,'multiline':False]
['text':' set a default fontsize 12 pt at 72dpi','line_number':356,'multiline':False]
['text':' Set fallbacks','line_number':372,'multiline':False]
['text':' we do not know how to do kerning between different fonts','line_number':445,'multiline':False]
['text':' if left_ft_object is the same as right_ft_object,','line_number':448,'multiline':False]
['text':' do the exact same thing which set_text does.','line_number':449,'multiline':False]
['text':' transformation matrix ','line_number':483,'multiline':True]
['text':' this computes width and height in subpixels so we have to multiply by 64','line_number':487,'multiline':False]
['text':' render missing glyph tofu','line_number':517,'multiline':False]
['text':' come back to top-most font','line_number':518,'multiline':False]
['text':' retrieve kerning distance and move pen position','line_number':525,'multiline':False]
['text':' if both fonts are the same','line_number':526,'multiline':False]
['text':' if the font knows how to kern','line_number':527,'multiline':False]
['text':' and we really have 2 glyphs','line_number':528,'multiline':False]
['text':' extract glyph image and store it in our table','line_number':534,'multiline':False]
['text':' if this is parent FT2Font, cache will be filled in 2 ways:','line_number':567,'multiline':False]
['text':' 1. set_text was previously called','line_number':568,'multiline':False]
['text':' 2. set_text was not called and fallback was enabled','line_number':569,'multiline':False]
['text':' since it will be assigned to ft_object anyway','line_number':573,'multiline':False]
['text':'no fallback case','line_number':595,'multiline':False]
['text':' -1 means the host has the char and we do not need to fallback','line_number':618,'multiline':False]
['text':' TODO handle recursion somehow!','line_number':626,'multiline':False]
['text':' cache the result for future','line_number':666,'multiline':False]
['text':' need to store this for anytime a character is loaded from a parent','line_number':667,'multiline':False]
['text':' FT2Font object or to generate a mapping of individual characters to fonts','line_number':668,'multiline':False]
['text':' cache is only for parent FT2Font','line_number':694,'multiline':False]
['text':' fallback denotes whether we want to search fallback list.','line_number':720,'multiline':False]
['text':' should call set_text/load_char_with_fallback to parent FT2Font before','line_number':721,'multiline':False]
['text':' wanting to use fallback list here. (since that populates the cache)','line_number':722,'multiline':False]
['text':' set as self','line_number':725,'multiline':False]
['text':' now, draw to our target surface (convert position)','line_number':764,'multiline':False]
['text':' bitmap left and top in pixel, string bbox in subpixel','line_number':766,'multiline':False]
['text':' bitmap left and top in pixel, string bbox in subpixel','line_number':786,'multiline':False]
['text':' make sure the index is non-neg','line_number':789,'multiline':False]
['text':' int((xd - (double)x) * 64.0);','line_number':800,'multiline':False]
['text':' int((yd - (double)y) * 64.0);','line_number':801,'multiline':False]
['text':' additional translation','line_number':810,'multiline':False]
['text':' destroy image','line_number':811,'multiline':False]
['text':' cache is only for parent FT2Font','line_number':825,'multiline':False]
['text':' Note that this generated name must match the name that
           is generated by ttconv in ttfont_CharStrings_getname. ','line_number':831,'multiline':True]
