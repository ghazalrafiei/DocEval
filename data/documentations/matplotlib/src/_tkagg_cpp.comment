['text':' -*- mode: c++; c-basic-offset: 4 -*- ','line_number':1,'multiline':True]
['text':' Where is PIL?','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Many years ago, Matplotlib used to include code from PIL (the Python Imaging','line_number':5,'multiline':False]
['text':' Library).  Since then, the code has changed a lot - the organizing principle','line_number':6,'multiline':False]
['text':' and methods of operation are now quite different.  Because our review of','line_number':7,'multiline':False]
['text':' the codebase showed that all the code that came from PIL was removed or','line_number':8,'multiline':False]
['text':' rewritten, we have removed the PIL licensing information.  If you want PIL,','line_number':9,'multiline':False]
['text':' you can get it at https://python-pillow.org/','line_number':10,'multiline':False]
['text':' Windows 8.1','line_number':21,'multiline':False]
['text':'
 * Unfortunately cygwin's libdl inherits restrictions from the underlying
 * Windows OS, at least currently. Therefore, a symbol may be loaded from a
 * module by dlsym() only if it is really located in the given module,
 * dependencies are not included. So we have to use native WinAPI on Cygwin
 * also.
 ','line_number':35,'multiline':True]
['text':' Must be linked with 'psapi' library','line_number':53,'multiline':False]
['text':' Check for old headers that do not defined HiDPI functions and constants.','line_number':56,'multiline':False]
['text':' Include our own excerpts from the Tcl / Tk headers','line_number':66,'multiline':False]
['text':' Global vars for Tk functions.  We load these symbols from the tkinter','line_number':80,'multiline':False]
['text':' extension module or loaded Tk libraries at run-time.','line_number':81,'multiline':False]
['text':' Global vars for Tcl functions.  We load these symbols from the tkinter','line_number':84,'multiline':False]
['text':' extension module or loaded Tcl libraries at run-time.','line_number':85,'multiline':False]
['text':' Checks ndim and writeable flag.','line_number':100,'multiline':False]
['text':' Limited by Tk_PhotoPutBlock argument type.','line_number':105,'multiline':False]
['text':' Limited by Tk_PhotoImageBlock.pitch field.','line_number':110,'multiline':False]
['text':' This function is a subclassed window procedure, and so is run during','line_number':151,'multiline':False]
['text':' the Tcl/Tk event loop. Unfortunately, Tkinter has a *second* lock on','line_number':152,'multiline':False]
['text':' Tcl threading that is not exposed publicly, but is currently taken','line_number':153,'multiline':False]
['text':' while we're in the window procedure. So while we can take the GIL to','line_number':154,'multiline':False]
['text':' call Python code, we must not also call *any* Tk code from Python.','line_number':155,'multiline':False]
['text':' So stay with Tcl calls in C only.','line_number':156,'multiline':False]
['text':' This variable naming must match the name used in','line_number':158,'multiline':False]
['text':' lib/matplotlib/backends/_backend_tk.py:FigureManagerTk.','line_number':159,'multiline':False]
['text':' X is high word, Y is low word, but they are always equal.','line_number':163,'multiline':False]
['text':' Per monitor aware means we need to handle WM_DPICHANGED by wrapping','line_number':217,'multiline':False]
['text':' the Window Procedure, and the Python side needs to trace the Tk','line_number':218,'multiline':False]
['text':' window_dpi variable stored on interp.','line_number':219,'multiline':False]
['text':' Functions to fill global Tcl/Tk function pointers by dynamic loading.','line_number':230,'multiline':False]
['text':' Try to fill Tcl/Tk global vars with function pointers.  Return whether','line_number':235,'multiline':False]
['text':' all of them have been filled.','line_number':236,'multiline':False]
['text':' On Windows, we can't load the tkinter module to get the Tcl/Tk symbols,
 * because Windows does not load symbols into the library name-space of
 * importing modules. So, knowing that tkinter has already been imported by
 * Python, we scan all modules in the running process for the Tcl/Tk function
 * names.
 ','line_number':251,'multiline':True]
['text':' Pseudo-handle, doesn't need closing.','line_number':261,'multiline':False]
['text':' not Windows','line_number':280,'multiline':False]
['text':'
 * On Unix, we can get the Tk symbols from the tkinter module, because tkinter
 * uses these symbols, and the symbols are therefore visible in the tkinter
 * dynamic library (module).
 ','line_number':282,'multiline':True]
['text':' Load tkinter global funcs from tkinter compiled module.','line_number':291,'multiline':False]
['text':' Try loading from the main program namespace first.','line_number':293,'multiline':False]
['text':' We don't need to keep a reference open as the main program always exists.','line_number':296,'multiline':False]
['text':' Handle PyPy first, as that import will correctly fail on CPython.','line_number':305,'multiline':False]
['text':' PyPy','line_number':307,'multiline':False]
['text':' CPython','line_number':309,'multiline':False]
['text':' We don't need to keep a reference open as tkinter has been imported.','line_number':320,'multiline':False]
['text':' end not Windows','line_number':325,'multiline':False]
['text':' Always raise ImportError to interact properly with backend auto-fallback.','line_number':332,'multiline':False]
