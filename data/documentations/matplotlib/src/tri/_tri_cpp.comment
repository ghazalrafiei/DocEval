['text':' This file contains liberal use of asserts to assist code development and debugging.
 * Standard Matplotlib builds disable asserts so they cause no performance reduction. To
 * enable the asserts, you need to undefine the NDEBUG macro, which is achieved by
 * passing ``b_ndebug=false`` to the Meson configuration.
 ','line_number':1,'multiline':True]
['text':' Optional mask.','line_number':223,'multiline':False]
['text':' Optional edges.','line_number':229,'multiline':False]
['text':' Optional neighbors.','line_number':234,'multiline':False]
['text':' Ensure _neighbors has been created.','line_number':246,'multiline':False]
['text':' Create set of all boundary TriEdges, which are those which do not','line_number':248,'multiline':False]
['text':' have a neighbor triangle.','line_number':249,'multiline':False]
['text':' Take any boundary edge and follow the boundary until return to start','line_number':262,'multiline':False]
['text':' point, removing edges from boundary_edges as they are used.  At the same','line_number':263,'multiline':False]
['text':' time, initialise the _tri_edge_to_boundary_map.','line_number':264,'multiline':False]
['text':' Start of new boundary.','line_number':266,'multiline':False]
['text':' Move to next edge of current triangle.','line_number':279,'multiline':False]
['text':' Find start point index of boundary edge.','line_number':282,'multiline':False]
['text':' Find next TriEdge by traversing neighbors until find one','line_number':285,'multiline':False]
['text':' without a neighbor.','line_number':286,'multiline':False]
['text':' Reached beginning of this boundary, so finished it.','line_number':293,'multiline':False]
['text':' Create set of all edges, storing them with start point index less than','line_number':304,'multiline':False]
['text':' end point index.','line_number':305,'multiline':False]
['text':' Convert to python _edges array.','line_number':318,'multiline':False]
['text':' Create _neighbors array with shape (ntri,3) and initialise all to -1.','line_number':334,'multiline':False]
['text':' For each triangle edge (start to end point), find corresponding neighbor','line_number':342,'multiline':False]
['text':' edge from end to start point.  Do this by traversing all edges and','line_number':343,'multiline':False]
['text':' storing them in a map from edge to TriEdge.  If corresponding neighbor','line_number':344,'multiline':False]
['text':' edge is already in the map, don't need to store new edge as neighbor','line_number':345,'multiline':False]
['text':' already found.','line_number':346,'multiline':False]
['text':' No neighbor edge exists in the edge_to_tri_edge_map, so','line_number':357,'multiline':False]
['text':' add this edge to it.','line_number':358,'multiline':False]
['text':' Neighbor edge found, set the two elements of _neighbors','line_number':361,'multiline':False]
['text':' and remove edge from edge_to_tri_edge_map.','line_number':362,'multiline':False]
['text':' Note that remaining edges in the edge_to_tri_edge_map correspond to','line_number':371,'multiline':False]
['text':' boundary edges, but the boundaries are calculated separately elsewhere.','line_number':372,'multiline':False]
['text':' Equation of plane for all points r on plane is r.normal = p','line_number':398,'multiline':False]
['text':' where normal is vector normal to the plane, and p is a','line_number':399,'multiline':False]
['text':' constant.  Rewrite as','line_number':400,'multiline':False]
['text':' r_x*normal_x + r_y*normal_y + r_z*normal_z = p','line_number':401,'multiline':False]
['text':' and rearrange to give','line_number':402,'multiline':False]
['text':' r_z = (-normal_x/normal_z)*r_x + (-normal_y/normal_z)*r_y +','line_number':403,'multiline':False]
['text':'       p/normal_z','line_number':404,'multiline':False]
['text':' Normal is in x-y plane which means triangle consists of','line_number':415,'multiline':False]
['text':' colinear points. To avoid dividing by zero, we use the','line_number':416,'multiline':False]
['text':' Moore-Penrose pseudo-inverse.','line_number':417,'multiline':False]
['text':' x','line_number':427,'multiline':False]
['text':' y','line_number':428,'multiline':False]
['text':' constant','line_number':429,'multiline':False]
['text':' Triangle points are clockwise, so change them to anticlockwise.','line_number':447,'multiline':False]
['text':' Ensure _tri_edge_to_boundary_map has been created.','line_number':466,'multiline':False]
['text':' point is not in triangle.','line_number':486,'multiline':False]
['text':' Clear derived fields so they are recalculated when needed.','line_number':582,'multiline':False]
['text':' Clear _interiorVisited.','line_number':619,'multiline':False]
['text':' Initialise _boundaries_visited.','line_number':626,'multiline':False]
['text':' Initialise _boundaries_used.','line_number':632,'multiline':False]
['text':' Clear _boundaries_visited.','line_number':636,'multiline':False]
['text':' Clear _boundaries_used.','line_number':641,'multiline':False]
['text':' Convert all of the lines generated by a call to create_contour() into','line_number':648,'multiline':False]
['text':' their Python equivalents for return to the calling function.','line_number':649,'multiline':False]
['text':' A line is either a closed line loop (in which case the last point is','line_number':650,'multiline':False]
['text':' identical to the first) or an open line strip.  Two NumPy arrays are','line_number':651,'multiline':False]
['text':' created for each line:','line_number':652,'multiline':False]
['text':'   vertices is a double array of shape (npoints, 2) containing the (x, y)','line_number':653,'multiline':False]
['text':'     coordinates of the points in the line','line_number':654,'multiline':False]
['text':'   codes is a uint8 array of shape (npoints,) containing the 'kind codes'','line_number':655,'multiline':False]
['text':'     which are defined in the Path class','line_number':656,'multiline':False]
['text':' and they are appended to the Python lists vertices_list and codes_list','line_number':657,'multiline':False]
['text':' respectively for return to the Python calling function.','line_number':658,'multiline':False]
['text':' Closed line loop has identical first and last (x, y) points.','line_number':682,'multiline':False]
['text':' Convert all of the polygons generated by a call to','line_number':696,'multiline':False]
['text':' create_filled_contour() into their Python equivalents for return to the','line_number':697,'multiline':False]
['text':' calling function.  All of the polygons' points and kinds codes are','line_number':698,'multiline':False]
['text':' combined into single NumPy arrays for each; this avoids having','line_number':699,'multiline':False]
['text':' to determine which polygons are holes as this will be determined by the','line_number':700,'multiline':False]
['text':' renderer.  If there are ntotal points in all of the polygons, the two','line_number':701,'multiline':False]
['text':' NumPy arrays created are:','line_number':702,'multiline':False]
['text':'   vertices is a double array of shape (ntotal, 2) containing the (x, y)','line_number':703,'multiline':False]
['text':'     coordinates of the points in the polygons','line_number':704,'multiline':False]
['text':'   codes is a uint8 array of shape (ntotal,) containing the 'kind codes'','line_number':705,'multiline':False]
['text':'     which are defined in the Path class','line_number':706,'multiline':False]
['text':' and they are returned in the Python lists vertices_list and codes_list','line_number':707,'multiline':False]
['text':' respectively.','line_number':708,'multiline':False]
['text':' Find total number of points in all contour lines.','line_number':713,'multiline':False]
['text':' Create segs array for point coordinates.','line_number':718,'multiline':False]
['text':' Create kinds array for code types.','line_number':723,'multiline':False]
['text':' Traverse boundaries to find starting points for all contour lines that','line_number':785,'multiline':False]
['text':' intersect the boundaries.  For each starting point found, follow the','line_number':786,'multiline':False]
['text':' line to its end before continuing.','line_number':787,'multiline':False]
['text':' This boundary edge is the start point for a contour line,','line_number':803,'multiline':False]
['text':' so follow the line.','line_number':804,'multiline':False]
['text':' Traverse boundaries to find starting points for all contour lines that','line_number':818,'multiline':False]
['text':' intersect the boundaries.  For each starting point found, follow the','line_number':819,'multiline':False]
['text':' line to its end before continuing.','line_number':820,'multiline':False]
['text':' z values of start and end of this boundary edge.','line_number':827,'multiline':False]
['text':' Does this boundary edge's z increase through upper level','line_number':832,'multiline':False]
['text':' and/or decrease through lower level?','line_number':833,'multiline':False]
['text':' Start point for contour line, so follow it.','line_number':838,'multiline':False]
['text':' Traverse interior and boundaries until return to start.','line_number':844,'multiline':False]
['text':' Close polygon.','line_number':853,'multiline':False]
['text':' Add full boundaries that lie between the lower and upper levels.  These','line_number':860,'multiline':False]
['text':' are boundaries that have not been touched by an internal contour line','line_number':861,'multiline':False]
['text':' which are stored in _boundaries_used.','line_number':862,'multiline':False]
['text':' Close polygon.','line_number':874,'multiline':False]
['text':' Triangle has already been visited or is masked.','line_number':892,'multiline':False]
['text':' Determine edge via which to leave this triangle.','line_number':896,'multiline':False]
['text':' Contour does not pass through this triangle.','line_number':900,'multiline':False]
['text':' Found start of new contour line loop.','line_number':902,'multiline':False]
['text':' Close line loop','line_number':908,'multiline':False]
['text':' Have TriEdge to start at, need equivalent boundary edge.','line_number':922,'multiline':False]
['text':' z values of start and end points of boundary edge.','line_number':935,'multiline':False]
['text':' z increasing.','line_number':943,'multiline':False]
['text':' z decreasing.','line_number':952,'multiline':False]
['text':' Move to next boundary edge, adding point to contour line.','line_number':966,'multiline':False]
['text':' Initial point.','line_number':986,'multiline':False]
['text':' Check for end not on boundary.','line_number':994,'multiline':False]
['text':' Reached start point, so return.','line_number':996,'multiline':False]
['text':' Determine edge by which to leave this triangle.','line_number':998,'multiline':False]
['text':' Append new point to point set.','line_number':1004,'multiline':False]
['text':' Move to next triangle.','line_number':1008,'multiline':False]
['text':' Check if ending on a boundary.','line_number':1011,'multiline':False]
['text':' old trapezoid to the left.','line_number':1096,'multiline':False]
['text':' below trapezoid to the left.','line_number':1097,'multiline':False]
['text':' above trapezoid to the left.','line_number':1098,'multiline':False]
['text':' Iterate through trapezoids intersecting edge from left to right.','line_number':1100,'multiline':False]
['text':' Replace each old trapezoid with 2+ new trapezoids, and replace its','line_number':1101,'multiline':False]
['text':' corresponding nodes in the search tree with new nodes.','line_number':1102,'multiline':False]
['text':' old trapezoid to replace.','line_number':1105,'multiline':False]
['text':' Old trapezoid is replaced by up to 4 new trapezoids: left is to the','line_number':1111,'multiline':False]
['text':' left of the start point p, below/above are below/above the edge','line_number':1112,'multiline':False]
['text':' inserted, and right is to the right of the end point q.','line_number':1113,'multiline':False]
['text':' There are 4 different cases here depending on whether the old','line_number':1119,'multiline':False]
['text':' trapezoid in question is the start and/or end trapezoid of those','line_number':1120,'multiline':False]
['text':' that intersect the edge inserted.  There is some code duplication','line_number':1121,'multiline':False]
['text':' here but it is much easier to understand this way rather than','line_number':1122,'multiline':False]
['text':' interleave the 4 different cases with many more if-statements.','line_number':1123,'multiline':False]
['text':' Edge intersects a single trapezoid.','line_number':1125,'multiline':False]
['text':' Set pairs of trapezoid neighbours.','line_number':1133,'multiline':False]
['text':' Old trapezoid is the first of 2+ trapezoids that the edge','line_number':1157,'multiline':False]
['text':' intersects.','line_number':1158,'multiline':False]
['text':' Set pairs of trapezoid neighbours.','line_number':1164,'multiline':False]
['text':' Old trapezoid is the last of 2+ trapezoids that the edge','line_number':1180,'multiline':False]
['text':' intersects.','line_number':1181,'multiline':False]
['text':' Set pairs of trapezoid neighbours.','line_number':1199,'multiline':False]
['text':' Connect to new trapezoids replacing prevOld.','line_number':1211,'multiline':False]
['text':' Middle trapezoid.','line_number':1228,'multiline':False]
['text':' Old trapezoid is neither the first nor last of the 3+ trapezoids','line_number':1229,'multiline':False]
['text':' that the edge intersects.','line_number':1230,'multiline':False]
['text':' Connect to new trapezoids replacing prevOld.','line_number':1245,'multiline':False]
['text':' below is new.','line_number':1246,'multiline':False]
['text':' above is new.','line_number':1254,'multiline':False]
['text':' Create new nodes to add to search tree.  Below and above trapezoids','line_number':1266,'multiline':False]
['text':' may already have owning trapezoid nodes, in which case reuse them.','line_number':1267,'multiline':False]
['text':' Insert new_top_node in correct position or positions in search tree.','line_number':1277,'multiline':False]
['text':' old_node has been removed from all of its parents and is no longer','line_number':1284,'multiline':False]
['text':' needed.','line_number':1285,'multiline':False]
['text':' Clearing up.','line_number':1289,'multiline':False]
['text':' Prepare for next loop.','line_number':1291,'multiline':False]
['text':' Create integer array to return.','line_number':1321,'multiline':False]
['text':' Fill returned array.','line_number':1328,'multiline':False]
['text':' This is the FollowSegment algorithm of de Berg et al, with some extra','line_number':1348,'multiline':False]
['text':' checks to deal with simple colinear (i.e. invalid) triangles.','line_number':1349,'multiline':False]
['text':' Set up points array, which contains all of the points in the','line_number':1409,'multiline':False]
['text':' triangulation plus the 4 corners of the enclosing rectangle.','line_number':1410,'multiline':False]
['text':' Avoid problems with -0.0 values different from 0.0','line_number':1416,'multiline':False]
['text':' Last 4 points are corner points of enclosing rectangle.  Enclosing','line_number':1425,'multiline':False]
['text':' rectangle made slightly larger in case corner points are already in the','line_number':1426,'multiline':False]
['text':' triangulation.','line_number':1427,'multiline':False]
['text':' Any value > 0.0','line_number':1433,'multiline':False]
['text':' SW point.','line_number':1436,'multiline':False]
['text':' SE point.','line_number':1437,'multiline':False]
['text':' NW point.','line_number':1438,'multiline':False]
['text':' NE point.','line_number':1439,'multiline':False]
['text':' Set up edges array.','line_number':1441,'multiline':False]
['text':' First the bottom and top edges of the enclosing rectangle.','line_number':1442,'multiline':False]
['text':' Add all edges in the triangulation that point to the right.  Do not','line_number':1446,'multiline':False]
['text':' explicitly include edges that point to the left as the neighboring','line_number':1447,'multiline':False]
['text':' triangle will supply that, unless there is no such neighbor.','line_number':1448,'multiline':False]
['text':' Set triangle associated with start point if not already set.','line_number':1469,'multiline':False]
['text':' Initial trapezoid is enclosing rectangle.','line_number':1476,'multiline':False]
['text':' Randomly shuffle all edges other than first 2.','line_number':1481,'multiline':False]
['text':' Add edges, one at a time, to tree.','line_number':1485,'multiline':False]
['text':' Divide by zero is acceptable here.','line_number':1531,'multiline':False]
['text':' If edge is vertical, return lowest y from left point.','line_number':1540,'multiline':False]
['text':' Equation of line: left + lambda*(right - left) = xy.','line_number':1545,'multiline':False]
['text':' i.e. left.x + lambda(right.x - left.x) = x and similar for y.','line_number':1546,'multiline':False]
['text':' Check parents.','line_number':1641,'multiline':False]
['text':' Check children, and recurse.','line_number':1649,'multiline':False]
['text':' Type_TrapezoidNode:','line_number':1698,'multiline':False]
['text':' Type_TrapezoidNode:','line_number':1717,'multiline':False]
['text':' Type_TrapezoidNode:','line_number':1735,'multiline':False]
['text':' = 0 ','line_number':1754,'multiline':True]
['text':' Replace child of each parent with new_node.  As each has parent has its','line_number':1823,'multiline':False]
['text':' child replaced it is removed from the _parents collection.','line_number':1824,'multiline':False]
['text':' Type_TrapezoidNode:','line_number':1849,'multiline':False]
['text':' Coinciding left edge points.','line_number':1869,'multiline':False]
['text':' Coinciding right edge points.','line_number':1889,'multiline':False]
['text':' edge.left lies on _union.ynode.edge','line_number':1912,'multiline':False]
['text':' Type_TrapezoidNode:','line_number':1929,'multiline':False]
