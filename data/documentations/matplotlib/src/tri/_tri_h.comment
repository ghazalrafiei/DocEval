['text':'
 * Unstructured triangular grid functions, particularly contouring.
 *
 * There are two main classes: Triangulation and TriContourGenerator.
 *
 * Triangulation
 * -------------
 * Triangulation is an unstructured triangular grid with npoints and ntri
 * triangles.  It consists of point x and y coordinates, and information about
 * the triangulation stored in an integer array of shape (ntri,3) called
 * triangles.  Each triangle is represented by three point indices (in the
 * range 0 to npoints-1) that comprise the triangle, ordered anticlockwise.
 * There is an optional mask of length ntri which can be used to mask out
 * triangles and has the same result as removing those triangles from the
 * 'triangles' array.
 *
 * A particular edge of a triangulation is termed a TriEdge, which is a
 * triangle index and an edge index in the range 0 to 2.  TriEdge(tri,edge)
 * refers to the edge that starts at point index triangles(tri,edge) and ends
 * at point index triangles(tri,(edge+1)%3).
 *
 * Various derived fields are calculated when they are first needed.  The
 * triangle connectivity is stored in a neighbors array of shape (ntri,3) such
 * that neighbors(tri,edge) is the index of the triangle that adjoins the
 * TriEdge(tri,edge), or -1 if there is no such neighbor.
 *
 * A triangulation has one or more boundaries, each of which is a 1D array of
 * the TriEdges that comprise the boundary, in order following the boundary
 * with non-masked triangles on the left.
 *
 * TriContourGenerator
 * -------------------
 * A TriContourGenerator generates contours for a particular Triangulation.
 * The process followed is different for non-filled and filled contours, with
 * one and two contour levels respectively.  In both cases boundary contour
 * lines are found first, then interior lines.
 *
 * Boundary lines start and end on a boundary.  They are found by traversing
 * the triangulation boundary edges until a suitable start point is found, and
 * then the contour line is followed across the interior of the triangulation
 * until it ends on another boundary edge.  For a non-filled contour this
 * completes a line, whereas a filled contour continues by following the
 * boundary around until either another boundary start point is found or the
 * start of the contour line is reached.  Filled contour generation stores
 * boolean flags to indicate which boundary edges have already been traversed
 * so that they are not dealt with twice.  Similar flags are used to indicate
 * which triangles have been used when following interior lines.
 *
 * Interior lines do not intersect any boundaries.  They are found by
 * traversing all triangles that have not yet been visited until a suitable
 * starting point is found, and then the contour line is followed across the
 * interior of the triangulation until it returns to the start point.  For
 * filled contours this process is repeated for both lower and upper contour
 * levels, and the direction of traversal is reversed for upper contours.
 *
 * Working out in which direction a contour line leaves a triangle uses the
 * a lookup table.  A triangle has three points, each of which has a z-value
 * which is either less than the contour level or not.  Hence there are 8
 * configurations to deal with, 2 of which do not have a contour line (all
 * points below or above (including the same as) the contour level) and 6 that
 * do.  See the function get_exit_edge for details.
 ','line_number':1,'multiline':True]
['text':' An edge of a triangle consisting of an triangle index in the range 0 to
 * ntri-1 and an edge index in the range 0 to 2.  Edge i goes from the
 * triangle's point i to point (i+1)%3. ','line_number':78,'multiline':True]
['text':' 2D point with x,y coordinates.','line_number':93,'multiline':False]
['text':' Angle in radians with respect to x-axis.','line_number':98,'multiline':False]
['text':' z-component of cross product.','line_number':99,'multiline':False]
['text':' Compares x then y.','line_number':100,'multiline':False]
['text':' 3D point with x,y,z coordinates.','line_number':113,'multiline':False]
['text':' 2D bounding box, which may be empty.','line_number':125,'multiline':False]
['text':' Consider these member variables read-only.','line_number':133,'multiline':False]
['text':' A single line of a contour, which may be a closed line loop or an open line
 * strip.  Identical adjacent points are avoided using push_back(), and a closed
 * line loop should also not have identical first and last points. ','line_number':138,'multiline':True]
['text':' A Contour is a collection of zero or more ContourLines.','line_number':149,'multiline':False]
['text':' Debug contour writing function.','line_number':152,'multiline':False]
['text':' Triangulation with npoints points and ntri triangles.  Derived fields are
 * calculated when they are first needed. ','line_number':158,'multiline':True]
['text':' A single boundary is a vector of the TriEdges that make up that boundary
     * following it around with unmasked triangles on the left. ','line_number':170,'multiline':True]
['text':' Constructor with optional mask, edges and neighbors.  The latter two
     * are calculated when first needed.
     *   x: double array of shape (npoints) of points' x-coordinates.
     *   y: double array of shape (npoints) of points' y-coordinates.
     *   triangles: int array of shape (ntri,3) of triangle point indices.
     *              Those ordered clockwise are changed to be anticlockwise.
     *   mask: Optional bool array of shape (ntri) indicating which triangles
     *         are masked.
     *   edges: Optional int array of shape (?,2) of start and end point
     *          indices, each edge (start,end and end,start) appearing only
     *          once.
     *   neighbors: Optional int array of shape (ntri,3) indicating which
     *              triangles are the neighbors of which TriEdges, or -1 if
     *              there is no such neighbor.
     *   correct_triangle_orientations: Whether or not should correct triangle
     *                                  orientations so that vertices are
     *                                  ordered anticlockwise. ','line_number':175,'multiline':True]
['text':' Calculate plane equation coefficients for all unmasked triangles from
     * the point (x,y) coordinates and point z-array of shape (npoints) passed
     * in via the args.  Returned array has shape (npoints,3) and allows
     * z-value at (x,y) coordinates in triangle tri to be calculated using
     *      z = array[tri,0]*x + array[tri,1]*y + array[tri,2]. ','line_number':200,'multiline':True]
['text':' Return the boundaries collection, creating it if necessary.','line_number':207,'multiline':False]
['text':' Return which boundary and boundary edge the specified TriEdge is.','line_number':210,'multiline':False]
['text':' Return the edges array, creating it if necessary. ','line_number':215,'multiline':True]
['text':' Return the triangle index of the neighbor of the specified triangle
     * edge. ','line_number':218,'multiline':True]
['text':' Return the TriEdge that is the neighbor of the specified triangle edge,
     * or TriEdge(-1,-1) if there is no such neighbor. ','line_number':222,'multiline':True]
['text':' Return the neighbors array, creating it if necessary. ','line_number':226,'multiline':True]
['text':' Return the number of points in this triangulation.','line_number':229,'multiline':False]
['text':' Return the number of triangles in this triangulation.','line_number':232,'multiline':False]
['text':' Return the index of the point that is at the start of the specified
     * triangle edge. ','line_number':235,'multiline':True]
['text':' Return the coordinates of the specified point index.','line_number':240,'multiline':False]
['text':' Indicates if the specified triangle is masked or not.','line_number':243,'multiline':False]
['text':' Set or clear the mask array.  Clears various derived fields so they are
     * recalculated when next needed.
     *   mask: bool array of shape (ntri) indicating which triangles are
     *         masked, or an empty array to clear mask. ','line_number':246,'multiline':True]
['text':' Debug function to write boundaries.','line_number':252,'multiline':False]
['text':' An edge of a triangulation, composed of start and end point indices.','line_number':256,'multiline':False]
['text':' An edge of a boundary of a triangulation, composed of a boundary index
     * and an edge index within that boundary.  Used to index into the
     * boundaries collection to obtain the corresponding TriEdge. ','line_number':267,'multiline':True]
['text':' Calculate the boundaries collection.  Should normally be accessed via
     * get_boundaries(), which will call this function if necessary. ','line_number':278,'multiline':True]
['text':' Calculate the edges array.  Should normally be accessed via
     * get_edges(), which will call this function if necessary. ','line_number':282,'multiline':True]
['text':' Calculate the neighbors array. Should normally be accessed via
     * get_neighbors(), which will call this function if necessary. ','line_number':286,'multiline':True]
['text':' Correct each triangle so that the vertices are ordered in an
     * anticlockwise manner. ','line_number':290,'multiline':True]
['text':' Determine which edge index (0,1 or 2) the specified point index is in
     * the specified triangle, or -1 if the point is not in the triangle. ','line_number':294,'multiline':True]
['text':' Variables shared with python, always set.','line_number':305,'multiline':False]
['text':' double array (npoints).','line_number':306,'multiline':False]
['text':' int array (ntri,3) of triangle point indices,','line_number':307,'multiline':False]
['text':'     ordered anticlockwise.','line_number':308,'multiline':False]
['text':' Variables shared with python, may be unset (size == 0).','line_number':310,'multiline':False]
['text':' bool array (ntri).','line_number':311,'multiline':False]
['text':' Derived variables shared with python, may be unset (size == 0).','line_number':313,'multiline':False]
['text':' If unset, are recalculated when needed.','line_number':314,'multiline':False]
['text':' int array (?,2) of start & end point indices.','line_number':315,'multiline':False]
['text':' int array (ntri,3), neighbor triangle indices','line_number':316,'multiline':False]
['text':'     or -1 if no neighbor.','line_number':317,'multiline':False]
['text':' Variables internal to C++ only.','line_number':319,'multiline':False]
['text':' Map used to look up BoundaryEdges from TriEdges.  Normally accessed via','line_number':322,'multiline':False]
['text':' get_boundary_edge().','line_number':323,'multiline':False]
['text':' Contour generator for a triangulation.','line_number':330,'multiline':False]
['text':' Constructor.
     *   triangulation: Triangulation to generate contours for.
     *   z: Double array of shape (npoints) of z-values at triangulation
     *      points. ','line_number':338,'multiline':True]
['text':' Create and return a non-filled contour.
     *   level: Contour level.
     * Returns new python list [segs0, segs1, ...] where
     *   segs0: double array of shape (?,2) of point coordinates of first
     *   contour line, etc. ','line_number':345,'multiline':True]
['text':' Create and return a filled contour.
     *   lower_level: Lower contour level.
     *   upper_level: Upper contour level.
     * Returns new python tuple (segs, kinds) where
     *   segs: double array of shape (n_points,2) of all point coordinates,
     *   kinds: ubyte array of shape (n_points) of all point code types. ','line_number':352,'multiline':True]
['text':' Clear visited flags.
     *   include_boundaries: Whether to clear boundary flags or not, which are
     *                       only used for filled contours. ','line_number':365,'multiline':True]
['text':' Convert a non-filled Contour from C++ to Python.
     * Returns new python tuple ([segs0, segs1, ...], [kinds0, kinds1...])
     * where
     *   segs0: double array of shape (n_points,2) of point coordinates of first
     *   contour line, etc.
     *   kinds0: ubyte array of shape (n_points) of kinds codes of first contour
     *   line, etc. ','line_number':370,'multiline':True]
['text':' Convert a filled Contour from C++ to Python.
     * Returns new python tuple ([segs], [kinds]) where
     *   segs: double array of shape (n_points,2) of all point coordinates,
     *   kinds: ubyte array of shape (n_points) of all point code types. ','line_number':379,'multiline':True]
['text':' Return the point on the specified TriEdge that intersects the specified
     * level. ','line_number':385,'multiline':True]
['text':' Find and follow non-filled contour lines that start and end on a
     * boundary of the Triangulation.
     *   contour: Contour to add new lines to.
     *   level: Contour level. ','line_number':389,'multiline':True]
['text':' Find and follow filled contour lines at either of the specified contour
     * levels that start and end of a boundary of the Triangulation.
     *   contour: Contour to add new lines to.
     *   lower_level: Lower contour level.
     *   upper_level: Upper contour level. ','line_number':396,'multiline':True]
['text':' Find and follow lines at the specified contour level that are
     * completely in the interior of the Triangulation and hence do not
     * intersect any boundary.
     *   contour: Contour to add new lines to.
     *   level: Contour level.
     *   on_upper: Whether on upper or lower contour level.
     *   filled: Whether contours are filled or not. ','line_number':405,'multiline':True]
['text':' Follow contour line around boundary of the Triangulation from the
     * specified TriEdge to its end which can be on either the lower or upper
     * levels.  Only used for filled contours.
     *   contour_line: Contour line to append new points to.
     *   tri_edge: On entry, TriEdge to start from.  On exit, TriEdge that is
     *             finished on.
     *   lower_level: Lower contour level.
     *   upper_level: Upper contour level.
     *   on_upper: Whether starts on upper level or not.
     * Return true if finishes on upper level, false if lower. ','line_number':417,'multiline':True]
['text':' Follow contour line across interior of Triangulation.
     *   contour_line: Contour line to append new points to.
     *   tri_edge: On entry, TriEdge to start from.  On exit, TriEdge that is
     *             finished on.
     *   end_on_boundary: Whether this line ends on a boundary, or loops back
     *                    upon itself.
     *   level: Contour level to follow.
     *   on_upper: Whether following upper or lower contour level. ','line_number':433,'multiline':True]
['text':' Return the Triangulation boundaries.','line_number':447,'multiline':False]
['text':' Return the edge by which the a level leaves a particular triangle,
     * which is 0, 1 or 2 if the contour passes through the triangle or -1
     * otherwise.
     *   tri: Triangle index.
     *   level: Contour level to follow.
     *   on_upper: Whether following upper or lower contour level. ','line_number':450,'multiline':True]
['text':' Return the z-value at the specified point index.','line_number':458,'multiline':False]
['text':' Return the point at which the a level intersects the line connecting the
     * two specified point indices. ','line_number':461,'multiline':True]
['text':' Variables shared with python, always set.','line_number':467,'multiline':False]
['text':' double array (npoints).','line_number':469,'multiline':False]
['text':' Variables internal to C++ only.','line_number':471,'multiline':False]
['text':' Size 2*ntri','line_number':472,'multiline':False]
['text':' Only used for filled contours.','line_number':478,'multiline':False]
['text':' Only used for filled contours.','line_number':479,'multiline':False]
['text':' TriFinder class implemented using the trapezoid map algorithm from the book
 * "Computational Geometry, Algorithms and Applications", second edition, by
 * M. de Berg, M. van Kreveld, M. Overmars and O. Schwarzkopf.
 *
 * The domain of interest is composed of vertical-sided trapezoids that are
 * bounded to the left and right by points of the triangulation, and below and
 * above by edges of the triangulation.  Each triangle is represented by 1 or
 * more of these trapezoids.  Edges are inserted one a time in a random order.
 *
 * As the trapezoid map is created, a search tree is also created which allows
 * fast lookup O(log N) of the trapezoid containing the point of interest.
 * There are 3 types of node in the search tree: all leaf nodes represent
 * trapezoids and all branch nodes have 2 child nodes and are either x-nodes or
 * y-nodes.  X-nodes represent points in the triangulation, and their 2 children
 * refer to those parts of the search tree to the left and right of the point.
 * Y-nodes represent edges in the triangulation, and their 2 children refer to
 * those parts of the search tree below and above the edge.
 *
 * Nodes can be repeated throughout the search tree, and each is reference
 * counted through the multiple parent nodes it is a child of.
 *
 * The algorithm is only intended to work with valid triangulations, i.e. it
 * must not contain duplicate points, triangles formed from colinear points, or
 * overlapping triangles.  It does have some tolerance to triangles formed from
 * colinear points but only in the simplest of cases.  No explicit testing of
 * the validity of the triangulation is performed as this is a computationally
 * more complex task than the trifinding itself. ','line_number':484,'multiline':True]
['text':' Constructor.  A separate call to initialize() is required to initialize
     * the object before use.
     *   triangulation: Triangulation to find triangles in. ','line_number':517,'multiline':True]
['text':' Return an array of triangle indices.  Takes 1D arrays x and y of
     * point coordinates, and returns an array of the same size containing the
     * indices of the triangles at those points. ','line_number':524,'multiline':True]
['text':' Return a reference to a new python list containing the following
     * statistics about the tree:
     *   0: number of nodes (tree size)
     *   1: number of unique nodes (number of unique Node objects in tree)
     *   2: number of trapezoids (tree leaf nodes)
     *   3: number of unique trapezoids
     *   4: maximum parent count (max number of times a node is repeated in
     *          tree)
     *   5: maximum depth of tree (one more than the maximum number of
     *          comparisons needed to search through the tree)
     *   6: mean of all trapezoid depths (one more than the average number of
     *          comparisons needed to search through the tree) ','line_number':529,'multiline':True]
['text':' Initialize this object before use.  May be called multiple times, if,
     * for example, the triangulation is changed by setting the mask. ','line_number':543,'multiline':True]
['text':' Print the search tree as text to stdout; useful for debug purposes.','line_number':547,'multiline':False]
['text':' A Point consists of x,y coordinates as well as the index of a triangle
     * associated with the point, so that a search at this point's coordinates
     * can return a valid triangle index. ','line_number':551,'multiline':True]
['text':' An Edge connects two Points, left and right.  It is always true that
     * right->is_right_of(*left).  Stores indices of triangles below and above
     * the Edge which are used to map from trapezoid to triangle index.  Also
     * stores pointers to the 3rd points of the below and above triangles,
     * which are only used to disambiguate triangles with colinear points. ','line_number':563,'multiline':True]
['text':' Return -1 if point to left of edge, 0 if on edge, +1 if to right.','line_number':577,'multiline':False]
['text':' Return slope of edge, even if vertical (divide by zero is OK here).','line_number':580,'multiline':False]
['text':' Return y-coordinate of point on edge with specified x-coordinate.
         * x must be within the x-limits of this edge. ','line_number':583,'multiline':True]
['text':' Return true if the specified point is either of the edge end points.','line_number':587,'multiline':False]
['text':' Not owned.','line_number':600,'multiline':False]
['text':' Not owned.','line_number':601,'multiline':False]
['text':' Index of triangle below (to right of) Edge.','line_number':602,'multiline':False]
['text':' Index of triangle above (to left of) Edge.','line_number':603,'multiline':False]
['text':' Used only for resolving ambiguous cases;','line_number':604,'multiline':False]
['text':'     is 0 if corresponding triangle is -1','line_number':605,'multiline':False]
['text':' Forward declaration.','line_number':608,'multiline':False]
['text':' Helper structure used by TrapezoidMapTriFinder::get_tree_stats.','line_number':610,'multiline':False]
['text':' Forward declaration.','line_number':623,'multiline':False]
['text':' Node of the trapezoid map search tree.  There are 3 possible types:
     * Type_XNode, Type_YNode and Type_TrapezoidNode.  Data members are
     * represented using a union: an XNode has a Point and 2 child nodes
     * (left and right of the point), a YNode has an Edge and 2 child nodes
     * (below and above the edge), and a TrapezoidNode has a Trapezoid.
     * Each Node has multiple parents so it can appear in the search tree
     * multiple times without having to create duplicate identical Nodes.
     * The parent collection acts as a reference count to the number of times
     * a Node occurs in the search tree.  When the parent count is reduced to
     * zero a Node can be safely deleted. ','line_number':625,'multiline':True]
['text':' Type_XNode.','line_number':638,'multiline':False]
['text':' Type_YNode.','line_number':639,'multiline':False]
['text':' Type_TrapezoidNode.','line_number':640,'multiline':False]
['text':' Recurse through the search tree and assert that everything is valid.
         * Reduces to a no-op if NDEBUG is defined. ','line_number':646,'multiline':True]
['text':' Recurse through the tree to return statistics about it.','line_number':650,'multiline':False]
['text':' Return the index of the triangle corresponding to this node.','line_number':653,'multiline':False]
['text':' Recurse through the tree and print a textual representation to
         * stdout.  Argument depth used to indent for readability. ','line_number':660,'multiline':True]
['text':' Remove a parent from this Node.  Return true if no parents remain
         * so that this Node can be deleted. ','line_number':664,'multiline':True]
['text':' Replace this node with the specified new_node in all parents.','line_number':670,'multiline':False]
['text':' Recursive search through the tree to find the Node containing the
         * specified XY point. ','line_number':673,'multiline':True]
['text':' Recursive search through the tree to find the Trapezoid containing
         * the left endpoint of the specified Edge.  Return 0 if fails, which
         * can only happen if the triangulation is invalid. ','line_number':677,'multiline':True]
['text':' Copy constructor and assignment operator defined but not implemented
         * to prevent objects being copied. ','line_number':682,'multiline':True]
['text':' Not owned.','line_number':697,'multiline':False]
['text':' Owned.','line_number':698,'multiline':False]
['text':' Owned.','line_number':699,'multiline':False]
['text':' Not owned.','line_number':702,'multiline':False]
['text':' Owned.','line_number':703,'multiline':False]
['text':' Owned.','line_number':704,'multiline':False]
['text':' Owned.','line_number':706,'multiline':False]
['text':' Not owned.','line_number':710,'multiline':False]
['text':' A Trapezoid is bounded by Points to left and right, and Edges below and
     * above.  Has up to 4 neighboring Trapezoids to lower/upper left/right.
     * Lower left neighbor is Trapezoid to left that shares the below Edge, or
     * is 0 if there is no such Trapezoid (and similar for other neighbors).
     * To obtain the index of the triangle corresponding to a particular
     * Trapezoid, use the Edge member variables below.triangle_above or
     * above.triangle_below. ','line_number':713,'multiline':True]
['text':' Assert that this Trapezoid is valid.  Reduces to a no-op if NDEBUG
         * is defined. ','line_number':727,'multiline':True]
['text':' Return one of the 4 corner points of this Trapezoid.  Only used for
         * debugging purposes. ','line_number':731,'multiline':True]
['text':' Set one of the 4 neighbor trapezoids and the corresponding reverse
         * Trapezoid of the new neighbor (if it is not 0), so that they are
         * consistent. ','line_number':740,'multiline':True]
['text':' Copy constructor and assignment operator defined but not implemented
         * to prevent objects being copied. ','line_number':748,'multiline':True]
['text':' Not owned.','line_number':754,'multiline':False]
['text':' Not owned.','line_number':755,'multiline':False]
['text':' 4 neighboring trapezoids, can be 0, not owned.','line_number':759,'multiline':False]
['text':' Trapezoid to left  that shares below','line_number':760,'multiline':False]
['text':' Trapezoid to right that shares below','line_number':761,'multiline':False]
['text':' Trapezoid to left  that shares above','line_number':762,'multiline':False]
['text':' Trapezoid to right that shares above','line_number':763,'multiline':False]
['text':' Node that owns this Trapezoid.','line_number':765,'multiline':False]
['text':' Add the specified Edge to the search tree, returning true if successful.','line_number':769,'multiline':False]
['text':' Clear all memory allocated by this object.','line_number':772,'multiline':False]
['text':' Return the triangle index at the specified point, or -1 if no triangle.','line_number':775,'multiline':False]
['text':' Determine the trapezoids that the specified Edge intersects, returning
     * true if successful. ','line_number':778,'multiline':True]
['text':' Variables shared with python, always set.','line_number':785,'multiline':False]
['text':' Variables internal to C++ only.','line_number':788,'multiline':False]
['text':' Array of all points in triangulation plus corners of','line_number':789,'multiline':False]
['text':' enclosing rectangle.  Owned.','line_number':790,'multiline':False]
['text':' All Edges in triangulation plus bottom and top Edges of','line_number':793,'multiline':False]
['text':' enclosing rectangle.','line_number':794,'multiline':False]
['text':' Root node of the trapezoid map search tree.  Owned.','line_number':796,'multiline':False]
