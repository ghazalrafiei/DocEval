['text':' Proper way to check for the OS X version we are compiling for, from
 * https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/cross_development/Using/using.html

 * Renamed symbols cause deprecation warnings, so define macros for the new
 * names if we are compiling on an older SDK ','line_number':7,'multiline':True]
['text':' Various NSApplicationDefined event subtypes ','line_number':20,'multiline':True]
['text':' Keep track of number of windows present
   Needed to know when to stop the NSApp ','line_number':25,'multiline':True]
['text':' Keep track of modifier key states for flagsChanged
   to keep track of press vs release ','line_number':29,'multiline':True]
['text':' Keep track of whether this specific key modifier was pressed or not ','line_number':36,'multiline':True]
['text':' Keep track of the current mouse up/down state for open/closed cursor hand ','line_number':42,'multiline':True]
['text':' Keep track of whether stdin has been received ','line_number':44,'multiline':True]
['text':' Global variable to store the original SIGINT handler','line_number':47,'multiline':False]
['text':' Signal handler for SIGINT, only sets a flag to exit the run loop','line_number':50,'multiline':False]
['text':' Set up a SIGINT handler to interrupt the event loop if ctrl+c comes in too','line_number':60,'multiline':False]
['text':' Set the new handler and store the old one','line_number':63,'multiline':False]
['text':' Create an NSFileHandle for standard input','line_number':66,'multiline':False]
['text':' Register for data available notifications on standard input','line_number':69,'multiline':False]
['text':' Use the main queue','line_number':72,'multiline':False]
['text':' Mark that input has been received','line_number':74,'multiline':False]
['text':' Wait in the background for anything that happens to stdin','line_number':79,'multiline':False]
['text':' continuously run an event loop until the stdin_received flag is set to exit','line_number':82,'multiline':False]
['text':' We need to run the run loop for a short time to allow the','line_number':92,'multiline':False]
['text':' events to be processed and keep flushing them while we wait for stdin','line_number':93,'multiline':False]
['text':' Remove the input handler as an observer','line_number':96,'multiline':False]
['text':' Restore the original SIGINT handler upon exiting the function','line_number':99,'multiline':False]
['text':' ---------------------------- Cocoa classes ---------------------------- ','line_number':105,'multiline':True]
['text':' ---------------------------- Python classes ---------------------------- ','line_number':151,'multiline':True]
['text':' Acquire the GIL, call a method with no args, discarding the result and','line_number':153,'multiline':False]
['text':' printing any exception.','line_number':154,'multiline':False]
['text':' Run our own event loop while waiting for stdin on the Python side','line_number':202,'multiline':False]
['text':' this is needed to keep the application responsive while waiting for input','line_number':203,'multiline':False]
['text':' Post an event to trigger the actual stopping.','line_number':240,'multiline':False]
['text':' failure','line_number':269,'multiline':False]
['text':' On failure, return NULL with an exception set.','line_number':288,'multiline':False]
['text':' super(FigureCanvasMac, self).__init__(*args, **kwargs)','line_number':324,'multiline':False]
['text':' borrowed.','line_number':325,'multiline':False]
['text':' We run the app, matching any events that are waiting in the queue','line_number':381,'multiline':False]
['text':' to process, breaking out of the loop when no events remain and','line_number':382,'multiline':False]
['text':' displaying the canvas if needed.','line_number':383,'multiline':False]
['text':' OSX handles busy state itself so no need to set a cursor here ','line_number':415,'multiline':True]
['text':' docstring inherited','line_number':508,'multiline':False]
['text':' docstring inherited','line_number':512,'multiline':False]
['text':' docstring inherited','line_number':528,'multiline':False]
['text':' docstring inherited','line_number':532,'multiline':False]
['text':' sentinel','line_number':533,'multiline':False]
['text':' Something really weird going on ','line_number':567,'multiline':True]
['text':' x ','line_number':580,'multiline':True]
['text':' y ','line_number':580,'multiline':True]
['text':' system settings','line_number':612,'multiline':False]
['text':' 36 comes from hard-coded size of toolbar later in code','line_number':728,'multiline':False]
['text':' All docstrings are inherited.','line_number':751,'multiline':False]
['text':' sentinel','line_number':781,'multiline':False]
['text':' Specify that it is a template image so the content tint','line_number':937,'multiline':False]
['text':' color gets updated with the system theme (dark/light)','line_number':938,'multiline':False]
['text':' rect.origin.x is now at the far right edge of the buttons','line_number':956,'multiline':False]
['text':' we want the messagebox to take up the rest of the toolbar area','line_number':957,'multiline':False]
['text':' Make it a zero-width box if we don't have enough room','line_number':958,'multiline':False]
['text':' if selectable, the messagebox can become first responder,
     * which is not supposed to happen ','line_number':968,'multiline':True]
['text':' Adjust width and height with the window size and content','line_number':1004,'multiline':False]
['text':' Entire region to the right of the buttons','line_number':1007,'multiline':False]
['text':' We want to control the vertical position of','line_number':1010,'multiline':False]
['text':' the rect by the content size to center it vertically','line_number':1011,'multiline':False]
['text':' Disable cursorRects so that the cursor doesn't get updated by events','line_number':1017,'multiline':False]
['text':' in NSApp (like resizing TextViews), we want to handle the cursor','line_number':1018,'multiline':False]
['text':' changes from within MPL with set_cursor() ourselves','line_number':1019,'multiline':False]
['text':' All docstrings are inherited.','line_number':1036,'multiline':False]
['text':' sentinel','line_number':1040,'multiline':False]
['text':' Allow window sizes larger than the screen ','line_number':1085,'multiline':True]
['text':' This is needed for show(), which should exit from [NSApp run]
     * after all windows are closed.
     ','line_number':1104,'multiline':True]
['text':' For each new window, we have incremented the manager reference, so','line_number':1107,'multiline':False]
['text':' we need to bring that down during close and not just dealloc.','line_number':1108,'multiline':False]
['text':' red, green, blue, alpha ','line_number':1159,'multiline':True]
['text':' We use bezier paths so we can stroke the outside with a dash','line_number':1226,'multiline':False]
['text':' pattern alternating white/black with two separate paths offset','line_number':1227,'multiline':False]
['text':' in phase.','line_number':1228,'multiline':False]
['text':' Notify that there was a resize_event that took place','line_number':1258,'multiline':False]
['text':' If closed, the window has already been closed via the manager. ','line_number':1323,'multiline':True]
['text':' emulate a right-button click ','line_number':1368,'multiline':True]
['text':' emulate a middle-button click ','line_number':1371,'multiline':True]
['text':' Unknown mouse event ','line_number':1385,'multiline':True]
['text':' Unknown mouse event ','line_number':1413,'multiline':True]
['text':' The space we want to redraw is a union of the previous rubberband','line_number':1456,'multiline':False]
['text':' with the new rubberband and then expanded (negative inset) by one','line_number':1457,'multiline':False]
['text':' in each direction to account for the stroke linewidth.','line_number':1458,'multiline':False]
['text':' When control is the key that was pressed, return the full word','line_number':1474,'multiline':False]
['text':' If control is already pressed, return the shortened version','line_number':1477,'multiline':False]
['text':' Don't print caps_lock unless it was the key that got pressed','line_number':1486,'multiline':False]
['text':' flagsChanged event can't handle charactersIgnoringModifiers','line_number':1491,'multiline':False]
['text':' because it was a modifier key that was pressed/released','line_number':1492,'multiline':False]
['text':' Since it was a modifier event trim the final character of the string','line_number':1547,'multiline':False]
['text':' because we added in "+" earlier','line_number':1548,'multiline':False]
['text':' flagsChanged gets called whenever a  modifier key is pressed OR released','line_number':1613,'multiline':False]
['text':' so we need to handle both cases here','line_number':1614,'multiline':False]
['text':' true if key is pressed, false if key was released','line_number':1617,'multiline':False]
['text':' Each if clause tests the two cases for each of the keys we can handle','line_number':1619,'multiline':False]
['text':' 1. If the modifier flag "command key" is pressed and it was not previously','line_number':1620,'multiline':False]
['text':' 2. If the modifier flag "command key" is not pressed and it was previously','line_number':1621,'multiline':False]
['text':' !! converts the result of the bitwise & operator to a logical boolean,','line_number':1622,'multiline':False]
['text':' which allows us to then bitwise xor (^) the result with a boolean (lastCommand).','line_number':1623,'multiline':False]
['text':' Command pressed/released','line_number':1625,'multiline':False]
['text':' Control pressed/released','line_number':1630,'multiline':False]
['text':' Shift pressed/released','line_number':1635,'multiline':False]
['text':' Option pressed/released','line_number':1640,'multiline':False]
['text':' Capslock pressed/released','line_number':1645,'multiline':False]
['text':' flag we don't handle','line_number':1650,'multiline':False]
['text':' Reset the state for the key changes after handling the event','line_number':1660,'multiline':False]
['text':' hold a reference to the timer so we can invalidate/stop it later','line_number':1728,'multiline':False]
['text':' All docstrings are inherited.','line_number':1777,'multiline':False]
['text':' sentinel','line_number':1784,'multiline':False]
['text':' Sentinel ','line_number':1815,'multiline':True]
