['text':'!/usr/bin/env python3','line_number':1,'multiline':False]
['text':' Hardcode the PyTorch template map','line_number':59,'multiline':False]
['text':' Exception raised for errors in the input.','line_number':73,'multiline':False]
['text':' Color coding for printing','line_number':87,'multiline':False]
['text':' To the programmer, the output of hipify most likely are intermediates.','line_number':99,'multiline':False]
['text':' This class allows users of hipify to ask for a cleanup by running the','line_number':100,'multiline':False]
['text':' hipify and compilation in a with instantiating this context manager class','line_number':101,'multiline':False]
['text':' with keep_intermediates=False.','line_number':102,'multiline':False]
['text':' The main usecase is the cpp_extensions, specifically the load method.','line_number':103,'multiline':False]
['text':' It is a good idea to keep intermediates (in case of errors or to','line_number':104,'multiline':False]
['text':' not recompile unchanged files), but in cases where you don't want to','line_number':105,'multiline':False]
['text':' keep them (e.g. in the CI), this can be used to remove files.','line_number':106,'multiline':False]
['text':' This is a very rough heuristic; really, we want to avoid scanning','line_number':159,'multiline':False]
['text':' any file which is not checked into source control, but this script','line_number':160,'multiline':False]
['text':' needs to work even if you're in a Git or Hg checkout, so easier to','line_number':161,'multiline':False]
['text':' just block the biggest time sinks that won't matter in the','line_number':162,'multiline':False]
['text':' end.','line_number':163,'multiline':False]
['text':' Blah blah blah O(n) blah blah','line_number':167,'multiline':False]
['text':' We respect extensions, UNLESS you wrote the entire','line_number':178,'multiline':False]
['text':' filename verbatim, in which case we always accept it','line_number':179,'multiline':False]
['text':' for pytorch extensions, consider all files','line_number':185,'multiline':False]
['text':' Show what happened','line_number':209,'multiline':False]
['text':' Print the number of unsupported calls','line_number':221,'multiline':False]
['text':' Print the list of unsupported calls','line_number':224,'multiline':False]
['text':' Print the number of kernel launches','line_number':227,'multiline':False]
['text':' Concat the namespace with the kernel names. (Find cleaner way of doing this later).','line_number':271,'multiline':False]
['text':' The positions for relevant kernel components.','line_number':275,'multiline':False]
['text':' Count for balancing template','line_number':282,'multiline':False]
['text':' Status for whether we are parsing a certain item.','line_number':285,'multiline':False]
['text':' Parse the string character by character','line_number':293,'multiline':False]
['text':' Handle Templating Arguments','line_number':297,'multiline':False]
['text':' Handle Kernel Name','line_number':311,'multiline':False]
['text':' Case: Kernel name starts the string.','line_number':318,'multiline':False]
['text':' Finished','line_number':322,'multiline':False]
['text':' Potential ending point if we're already traversing a kernel's name.','line_number':326,'multiline':False]
['text':' Finished','line_number':330,'multiline':False]
['text':' Continue until we cannot find any more kernels anymore.','line_number':338,'multiline':False]
['text':' Get kernel starting position (starting from the previous ending point)','line_number':340,'multiline':False]
['text':' Get kernel ending position (adjust end point past the >>>)','line_number':343,'multiline':False]
['text':' Add to list of traversed kernels','line_number':348,'multiline':False]
['text':' Replace comments and string literals from the code so that find_kernel_bounds does not','line_number':354,'multiline':False]
['text':' wrongly capture kernels in comments and string literals.','line_number':355,'multiline':False]
['text':' This function replaces them with "x" to keep positions.','line_number':356,'multiline':False]
['text':' Outside comments','line_number':363,'multiline':False]
['text':' In // xxx','line_number':371,'multiline':False]
['text':' In /* xxx */','line_number':375,'multiline':False]
['text':' In ""','line_number':379,'multiline':False]
['text':' Grab positional ranges of all kernel launches','line_number':389,'multiline':False]
['text':' Replace each CUDA kernel with a HIP kernel.','line_number':393,'multiline':False]
['text':' Get kernel components','line_number':395,'multiline':False]
['text':' Find parenthesis after kernel launch','line_number':398,'multiline':False]
['text':' Extract cuda kernel','line_number':401,'multiline':False]
['text':' Keep number of kernel launch params consistent (grid dims, group dims, stream, dynamic shared size)','line_number':407,'multiline':False]
['text':' Replace cuda kernel with hip kernel','line_number':414,'multiline':False]
['text':' Update the statistics','line_number':417,'multiline':False]
['text':' Copy the input.','line_number':500,'multiline':False]
['text':' Check if one of the following headers is already included.','line_number':503,'multiline':False]
['text':' Rough logic to detect if we're inside device code','line_number':508,'multiline':False]
['text':' If device logic found, provide the necessary header.','line_number':515,'multiline':False]
['text':' At the moment, some PyTorch source files are HIPified in place.  The predicate','line_number':543,'multiline':False]
['text':' is_out_of_place tells us if this is the case or not.','line_number':544,'multiline':False]
['text':' Here's the plan:','line_number':552,'multiline':False]
['text':'','line_number':553,'multiline':False]
['text':' In general, we need to disambiguate the HIPified filename so that','line_number':554,'multiline':False]
['text':' it gets a different name from the original filename, so','line_number':555,'multiline':False]
['text':' that we don't overwrite the original file','line_number':556,'multiline':False]
['text':'','line_number':557,'multiline':False]
['text':' There's a lot of different naming conventions across PyTorch','line_number':558,'multiline':False]
['text':' and Caffe2, but the general recipe is to convert occurrences','line_number':559,'multiline':False]
['text':' of cuda/gpu to hip, and add hip if there are no occurrences','line_number':560,'multiline':False]
['text':' of cuda/gpu anywhere.','line_number':561,'multiline':False]
['text':'','line_number':562,'multiline':False]
['text':' Concretely, we do the following:','line_number':563,'multiline':False]
['text':'','line_number':564,'multiline':False]
['text':'   - If there is a directory component named "cuda", replace','line_number':565,'multiline':False]
['text':'     it with "hip", AND','line_number':566,'multiline':False]
['text':'','line_number':567,'multiline':False]
['text':'   - If the file name contains "CUDA", replace it with "HIP", AND','line_number':568,'multiline':False]
['text':'','line_number':569,'multiline':False]
['text':'   - ALWAYS replace '.cu' with '.hip', because those files','line_number':570,'multiline':False]
['text':'     contain CUDA kernels that needs to be hipified and processed with','line_number':571,'multiline':False]
['text':'     hip compiler','line_number':572,'multiline':False]
['text':'','line_number':573,'multiline':False]
['text':'   - If we are not hipifying a PyTorch extension, and the parent','line_number':574,'multiline':False]
['text':'     directory name did not change as a result of the above','line_number':575,'multiline':False]
['text':'     transformations, insert "hip" in the file path','line_number':576,'multiline':False]
['text':'     as the direct parent folder of the file','line_number':577,'multiline':False]
['text':'','line_number':578,'multiline':False]
['text':'   - If we are hipifying a PyTorch extension, and the parent directory','line_number':579,'multiline':False]
['text':'     name as well as the filename (incl. extension) did not change as','line_number':580,'multiline':False]
['text':'     a result of the above transformations, insert "_hip" in the filename','line_number':581,'multiline':False]
['text':'','line_number':582,'multiline':False]
['text':' This isn't set in stone; we might adjust this to support other','line_number':583,'multiline':False]
['text':' naming conventions.','line_number':584,'multiline':False]
['text':' Special case to handle caffe2/core/THCCachingAllocator','line_number':598,'multiline':False]
['text':' Keep this synchronized with includes/ignores in build_amd.py','line_number':622,'multiline':False]
['text':' don't use "special" mappings for this specific linalg cublas file','line_number':650,'multiline':False]
['text':' Cribbed from https://stackoverflow.com/questions/42742810/speed-up-millions-of-regex-replacements-in-python-3/42789508#42789508','line_number':663,'multiline':False]
['text':' In PyTorch, we map cuBLAS->rocBLAS and cuSPARSE->hipSPARSE. Note the prefix, roc versus hip.','line_number':730,'multiline':False]
['text':' The 'hip' APIs offer a more direct CUDA-friendly mapping, but calling rocBLAS directly has better performance.','line_number':731,'multiline':False]
['text':' Unfortunately, the roc* types and hip* types differ, i.e., rocblas_float_complex versus hipComplex.','line_number':732,'multiline':False]
['text':' In the case of SPARSE, we must use the hip types for complex instead of the roc types,','line_number':733,'multiline':False]
['text':' but the pytorch mappings assume roc. Therefore, we create a new SPARSE mapping that has a higher priority.','line_number':734,'multiline':False]
['text':' Its mappings will trigger first, and only when a miss occurs will the lower-priority pytorch mapping take place.','line_number':735,'multiline':False]
['text':' When a file contains "sparse" in the filename, a mapping marked with API_SPARSE is preferred over other choices.','line_number':736,'multiline':False]
['text':' Similarly, "linalg" files require rocBLAS -> hipSOLVER so they also need special handling.','line_number':737,'multiline':False]
['text':' if src is already in PYTORCH_MAP and dst belongs to API_SPECIAL','line_number':747,'multiline':False]
['text':' do not overwrite PYTORCH_MAP, store dst separately','line_number':748,'multiline':False]
['text':' be careful not to pick up .cuh','line_number':762,'multiline':False]
['text':' get_hip_file_path needs a relative path to work correctly','line_number':807,'multiline':False]
['text':' unsupported_calls statistics reporting is broken atm','line_number':812,'multiline':False]
['text':' checks SPECIAL map first, and if a miss occurs, falls back to pytorch mappings','line_number':817,'multiline':False]
['text':' Header rewrites','line_number':833,'multiline':False]
['text':' if filename is one of the files being hipified for this extension','line_number':849,'multiline':False]
['text':' If include_current_dir True, look first in same dir as the including source file','line_number':853,'multiline':False]
['text':' If not found, look in include dirs one by one and first match wins','line_number':860,'multiline':False]
['text':' If header file not found, keep as is','line_number':868,'multiline':False]
['text':' Hipify header file first if needed','line_number':871,'multiline':False]
['text':' get_hip_file_path needs a relative path to work correctly','line_number':880,'multiline':False]
['text':' CMakeLists.txt rewrites','line_number':898,'multiline':False]
['text':' Perform Kernel Launch Replacements','line_number':904,'multiline':False]
['text':' Replace std:: with non-std:: versions','line_number':908,'multiline':False]
['text':' Include header if device code is contained.','line_number':912,'multiline':False]
['text':' Replace the extern __shared__','line_number':915,'multiline':False]
['text':' NOTE: No longer needed after transition from hcc to hipclang.','line_number':916,'multiline':False]
['text':' output_source = replace_extern_shared(output_source)','line_number':917,'multiline':False]
['text':' Don't write out identical hipified files for extensions if dirpath has not changed','line_number':919,'multiline':False]
['text':' Add hipify breadcrumb for C-style files to avoid re-hipification','line_number':930,'multiline':False]
['text':' Search for final parenthesis','line_number':1010,'multiline':False]
['text':' Finished all arguments','line_number':1021,'multiline':False]
['text':' Add final argument','line_number':1023,'multiline':False]
['text':' Finished current argument','line_number':1027,'multiline':False]
['text':' Verify the project directory exists.','line_number':1068,'multiline':False]
['text':' If no output directory, provide a default one.','line_number':1073,'multiline':False]
['text':' Copy from project directory to output directory if not done already.','line_number':1082,'multiline':False]
['text':' List all files in header_include_paths to ensure they are hipified','line_number':1097,'multiline':False]
['text':' Preprocessing statistics.','line_number':1116,'multiline':False]
['text':' Show detailed summary','line_number':1125,'multiline':False]
