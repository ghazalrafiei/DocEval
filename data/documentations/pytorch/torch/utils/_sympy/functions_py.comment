['text':' precedence of mul  # noqa: F811','line_number':18,'multiline':False]
['text':' Default return type for SymPy assumptions.','line_number':20,'multiline':False]
['text':' https://docs.sympy.org/latest/guides/assumptions.html#implementing-assumptions-handlers','line_number':21,'multiline':False]
['text':' SymPy assumptions based on argument types.','line_number':37,'multiline':False]
['text':' Automatic evaluation.','line_number':44,'multiline':False]
['text':' https://docs.sympy.org/latest/guides/custom-functions.html#best-practices-for-eval','line_number':45,'multiline':False]
['text':' We don't provide the same error message as in Python because SymPy','line_number':58,'multiline':False]
['text':' makes it difficult to check the types.','line_number':59,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/108276','line_number':93,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/108276','line_number':124,'multiline':False]
['text':' workaround for https://github.com/openai/triton/issues/619,','line_number':136,'multiline':False]
['text':' if there are negative terms, // produces wrong result','line_number':137,'multiline':False]
['text':' TODO if https://github.com/openai/triton/issues/619 is fixed','line_number':138,'multiline':False]
['text':' this optimization would become valid','line_number':139,'multiline':False]
['text':' This was adapted from: sympy/core/mod.py','line_number':175,'multiline':False]
['text':' If either of them is NaN or infinite.','line_number':179,'multiline':False]
['text':' Three cases:','line_number':182,'multiline':False]
['text':'   1. p == 0','line_number':183,'multiline':False]
['text':'   2. p is either q or -q','line_number':184,'multiline':False]
['text':'   3. p is integer and q == 1','line_number':185,'multiline':False]
['text':' Evaluate if they are both literals.','line_number':189,'multiline':False]
['text':' If q == 2, it's a matter of whether p is odd or even.','line_number':193,'multiline':False]
['text':' If p is a multiple of q.','line_number':200,'multiline':False]
['text':' If p < q and its ratio is positive, then:','line_number':205,'multiline':False]
['text':'   - floor(p / q) = 0','line_number':206,'multiline':False]
['text':'   - p % q = p - floor(p / q) * q = p','line_number':207,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':214,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':217,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':220,'multiline':False]
['text':' Overloaded to be compatible with regular Python.','line_number':261,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/90900','line_number':262,'multiline':False]
['text':' Overloaded to be compatible with regular Python.','line_number':273,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/90900','line_number':274,'multiline':False]
['text':' TODO: As an indicator, this != 0 implies == 1 (and vice versa).','line_number':284,'multiline':False]
['text':' Because we do not have the ability to guard on the stride permutation','line_number':285,'multiline':False]
['text':' at the moment, it is hard to make further inferences when this is true,','line_number':286,'multiline':False]
['text':' as although we know the tensor is contiguous in *some* layout, we don't','line_number':287,'multiline':False]
['text':' know which one (however, you could, for example, make the inference that','line_number':288,'multiline':False]
['text':' reshaping this to a 1D tensor can be guard-free.)','line_number':289,'multiline':False]
['text':' TODO: it is possible to make progress evaluating this guard','line_number':297,'multiline':False]
['text':' even if not all of the inputs are known.  For example, a 2D','line_number':298,'multiline':False]
['text':' tensor with non-0/1 sizes but strides (0, 1) is definitely','line_number':299,'multiline':False]
['text':' false, because we know its numel > 1 but it's broadcasted','line_number':300,'multiline':False]
['text':' in dim 0.','line_number':301,'multiline':False]
['text':' sym_node imported in torch.__init__. Local import to avoid an import cycle','line_number':303,'multiline':False]
