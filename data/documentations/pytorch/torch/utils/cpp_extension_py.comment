['text':' The following values were taken from the following GitHub gist that','line_number':49,'multiline':False]
['text':' summarizes the minimum valid major versions of g++/clang++ for each supported','line_number':50,'multiline':False]
['text':' CUDA version: https://gist.github.com/ax3l/9489132','line_number':51,'multiline':False]
['text':' Or from include/crt/host_config.h in the CUDA SDK','line_number':52,'multiline':False]
['text':' The second value is the exclusive(!) upper bound, i.e. min <= version < max','line_number':53,'multiline':False]
['text':' Taken directly from python stdlib < 3.9','line_number':79,'multiline':False]
['text':' See https://github.com/pytorch/pytorch/issues/48617','line_number':80,'multiline':False]
['text':' Cover None-type','line_number':87,'multiline':False]
['text':' Guess #1','line_number':94,'multiline':False]
['text':' Guess #2','line_number':97,'multiline':False]
['text':' Guess #3','line_number':105,'multiline':False]
['text':' Guess #1','line_number':124,'multiline':False]
['text':' Guess #2','line_number':127,'multiline':False]
['text':' can be either <ROCM_HOME>/hip/bin/hipcc or <ROCM_HOME>/bin/hipcc','line_number':132,'multiline':False]
['text':' Guess #3','line_number':136,'multiline':False]
['text':' PyTorch releases have the version pattern major.minor.patch, whereas when','line_number':212,'multiline':False]
['text':' PyTorch is built from source, we append the git commit hash, which gives','line_number':213,'multiline':False]
['text':' it the below pattern.','line_number':214,'multiline':False]
['text':' gnu-c++ and gnu-cc are the conda gcc compilers','line_number':265,'multiline':False]
['text':' The file already contains the right thing!','line_number':278,'multiline':False]
['text':' Use os.path.realpath to resolve any symlinks, in particular from 'c++' to e.g. 'g++'.','line_number':313,'multiline':False]
['text':' Check the compiler name','line_number':315,'multiline':False]
['text':' If compiler wrapper is used try to infer the actual compiler by invoking it with -v flag','line_number':318,'multiline':False]
['text':' Don't localize output','line_number':320,'multiline':False]
['text':' Check for 'gcc' or 'g++' for sccache wrapper','line_number':323,'multiline':False]
['text':' Clang is also a supported compiler on Linux','line_number':327,'multiline':False]
['text':' Though on Ubuntu it's sometimes called "Ubuntu clang version"','line_number':328,'multiline':False]
['text':' On RHEL/CentOS c++ is a gcc compiler wrapper','line_number':331,'multiline':False]
['text':' Check for 'clang' or 'clang++'','line_number':336,'multiline':False]
['text':' First check if the compiler is one of the expected ones for the particular platform.','line_number':358,'multiline':False]
['text':' There is no particular minimum version we need for clang, so we're good here.','line_number':367,'multiline':False]
['text':' major/minor attributes are only available in setuptools>=49.4.0','line_number':410,'multiline':False]
['text':' Special case for 11.4.0, which has lower compiler bounds than 11.4.1','line_number':428,'multiline':False]
['text':' See below for why we inherit BuildExtension from object.','line_number':450,'multiline':False]
['text':' https://stackoverflow.com/questions/1713038/super-fails-with-error-typeerror-argument-1-must-be-type-not-classobj-when','line_number':451,'multiline':False]
['text':' type: ignore[misc, valid-type]','line_number':483,'multiline':False]
['text':' Test if we can use ninja. Fallback otherwise.','line_number':496,'multiline':False]
['text':' Ensure at least an empty list of flags for 'cxx' and 'nvcc' when','line_number':526,'multiline':False]
['text':' extra_compile_args is a dict. Otherwise, default torch flags do','line_number':527,'multiline':False]
['text':' not get passed. Necessary when only one of 'cxx' and 'nvcc' is','line_number':528,'multiline':False]
['text':' passed to extra_compile_args in CUDAExtension, i.e.','line_number':529,'multiline':False]
['text':'   CUDAExtension(..., extra_compile_args={'cxx': [...]})','line_number':530,'multiline':False]
['text':' or','line_number':531,'multiline':False]
['text':'   CUDAExtension(..., extra_compile_args={'nvcc': [...]})','line_number':532,'multiline':False]
['text':' See note [Pybind11 ABI constants]','line_number':539,'multiline':False]
['text':' Register .cu, .cuh, .hip, and .mm as valid source extensions.','line_number':550,'multiline':False]
['text':' Save the original _compile method for later.','line_number':554,'multiline':False]
['text':' NVCC does not allow multiple -std to be passed, so we avoid','line_number':563,'multiline':False]
['text':' overriding the option if the user explicitly passed it.','line_number':564,'multiline':False]
['text':' NVCC does not allow multiple -ccbin/--compiler-bindir to be passed, so we avoid','line_number':576,'multiline':False]
['text':' overriding the option if the user explicitly passed it.','line_number':577,'multiline':False]
['text':' Helper function. See Note [Absolute include_dirs]','line_number':588,'multiline':False]
['text':' Copy before we make any modifications.','line_number':595,'multiline':False]
['text':' Put the original compiler back in place.','line_number':616,'multiline':False]
['text':' NB: I copied some lines from self.compiler (which is an instance','line_number':628,'multiline':False]
['text':' of distutils.UnixCCompiler). See the following link.','line_number':629,'multiline':False]
['text':' https://github.com/python/cpython/blob/f03a8f8d5001963ad5b5b28dbd95497e9cc15596/Lib/distutils/ccompiler.py#L564-L567','line_number':630,'multiline':False]
['text':' This can be fragile, but a lot of other repos also do this','line_number':631,'multiline':False]
['text':' (see https://github.com/search?q=_setup_compile&type=Code)','line_number':632,'multiline':False]
['text':' so it is probably OK; we'll also get CI signal if/when','line_number':633,'multiline':False]
['text':' we update our python version (which is when distutils can be','line_number':634,'multiline':False]
['text':' upgraded)','line_number':635,'multiline':False]
['text':' Use absolute path for output_dir so that the object file paths','line_number':637,'multiline':False]
['text':' (`objects`) get generated with absolute paths.','line_number':638,'multiline':False]
['text':' See Note [Absolute include_dirs]','line_number':641,'multiline':False]
['text':' extra_postargs can be either:','line_number':652,'multiline':False]
['text':' - a dict mapping cxx/nvcc to extra flags','line_number':653,'multiline':False]
['text':' - a list of extra flags.','line_number':654,'multiline':False]
['text':' Return *all* object filenames, not just the ones we just built.','line_number':696,'multiline':False]
['text':' Using regex to match src, obj and include files','line_number':716,'multiline':False]
['text':' Note [Absolute include_dirs]','line_number':785,'multiline':False]
['text':' Convert relative path in self.compiler.include_dirs to absolute path if any,','line_number':786,'multiline':False]
['text':' For ninja build, the build location is not local, the build happens','line_number':787,'multiline':False]
['text':' in a in script created build folder, relative path lost their correctness.','line_number':788,'multiline':False]
['text':' To be consistent with jit extension, we allow user to enter relative include_dirs','line_number':789,'multiline':False]
['text':' in setuptools.setup, and we convert the relative path to absolute path here','line_number':790,'multiline':False]
['text':' extra_postargs can be either:','line_number':807,'multiline':False]
['text':' - a dict mapping cxx/nvcc to extra flags','line_number':808,'multiline':False]
['text':' - a list of extra flags.','line_number':809,'multiline':False]
['text':' Return *all* object filenames, not just the ones we just built.','line_number':855,'multiline':False]
['text':' Monkey-patch the _compile or compile method.','line_number':858,'multiline':False]
['text':' https://github.com/python/cpython/blob/dc0284ee8f7a270b6005467f26d8e5773d76e959/Lib/distutils/ccompiler.py#L511','line_number':859,'multiline':False]
['text':' Get the original shared library name. For Python 3, this name will be','line_number':874,'multiline':False]
['text':' suffixed with "<SOABI>.so", where <SOABI> will be something like','line_number':875,'multiline':False]
['text':' cpython-37m-x86_64-linux-gnu.','line_number':876,'multiline':False]
['text':' If `no_python_abi_suffix` is `True`, we omit the Python 3 ABI','line_number':878,'multiline':False]
['text':' component. This makes building shared libraries with setuptools that','line_number':879,'multiline':False]
['text':' aren't Python modules nicer.','line_number':880,'multiline':False]
['text':' The parts will be e.g. ["my_extension", "cpython-37m-x86_64-linux-gnu", "so"].','line_number':882,'multiline':False]
['text':' Omit the second to last element.','line_number':884,'multiline':False]
['text':' On some platforms, like Windows, compiler_cxx is not available.','line_number':890,'multiline':False]
['text':' Warn user if VC env is activated but `DISTUILS_USE_SDK` is not set.','line_number':896,'multiline':False]
['text':' pybind11 doesn't support dots in the names','line_number':913,'multiline':False]
['text':' so in order to support extensions in the packages','line_number':914,'multiline':False]
['text':' like torch._C, we take the last part of the string','line_number':915,'multiline':False]
['text':' as the library name','line_number':916,'multiline':False]
['text':' use the same CXX ABI as what PyTorch was compiled with','line_number':923,'multiline':False]
['text':' limit scope to build_dir only','line_number':1101,'multiline':False]
['text':' don't hipify everything in includes path','line_number':1105,'multiline':False]
['text':' setup() arguments must *always* be /-separated paths relative to the setup.py directory,','line_number':1113,'multiline':False]
['text':' *never* absolute paths','line_number':1114,'multiline':False]
['text':' Device Link Time Optimization started from cuda 11.2','line_number':1135,'multiline':False]
['text':' Remove this once torch/torch.h is officially no longer supported for C++ extensions.','line_number':1157,'multiline':False]
['text':' Some internal (old) Torch headers don't properly prefix their includes,','line_number':1159,'multiline':False]
['text':' so we need to pass -Itorch/lib/include/TH as well.','line_number':1160,'multiline':False]
['text':' if we have the Debian/Ubuntu packages for cuda, we get /usr as cuda home.','line_number':1169,'multiline':False]
['text':' but gcc doesn't like having /usr/include passed explicitly','line_number':1170,'multiline':False]
['text':' We need to link against libtorch.so','line_number':1188,'multiline':False]
['text':' 64-bit CUDA may be installed in 'lib' (see e.g. gh-16955)','line_number':1203,'multiline':False]
['text':' Note that it's also possible both don't exist (see','line_number':1204,'multiline':False]
['text':' _find_cuda_home) - in that case we stay with 'lib64'.','line_number':1205,'multiline':False]
['text':' Note [Pybind11 ABI constants]','line_number':1321,'multiline':False]
['text':'','line_number':1322,'multiline':False]
['text':' Pybind11 before 2.4 used to build an ABI strings using the following pattern:','line_number':1323,'multiline':False]
['text':' f"__pybind11_internals_v{PYBIND11_INTERNALS_VERSION}{PYBIND11_INTERNALS_KIND}{PYBIND11_BUILD_TYPE}__"','line_number':1324,'multiline':False]
['text':' Since 2.4 compier type, stdlib and build abi parameters are also encoded like this:','line_number':1325,'multiline':False]
['text':' f"__pybind11_internals_v{PYBIND11_INTERNALS_VERSION}{PYBIND11_INTERNALS_KIND}{PYBIND11_COMPILER_TYPE}{PYBIND11_STDLIB}{PYBIND11_BUILD_ABI}{PYBIND11_BUILD_TYPE}__"','line_number':1326,'multiline':False]
['text':'','line_number':1327,'multiline':False]
['text':' This was done in order to further narrow down the chances of compiler ABI incompatibility','line_number':1328,'multiline':False]
['text':' that can cause a hard to debug segfaults.','line_number':1329,'multiline':False]
['text':' For PyTorch extensions we want to relax those restrictions and pass compiler, stdlib and abi properties','line_number':1330,'multiline':False]
['text':' captured during PyTorch native library compilation in torch/csrc/Module.cpp','line_number':1331,'multiline':False]
['text':' Don't localize output','line_number':1349,'multiline':False]
['text':' Check for 'gcc' or 'g++' for sccache wrapper','line_number':1351,'multiline':False]
['text':' On RHEL/CentOS c++ is a gcc compiler wrapper','line_number':1357,'multiline':False]
['text':' initialize an empty string','line_number':1391,'multiline':False]
['text':' traverse in the string','line_number':1396,'multiline':False]
['text':' return string','line_number':1399,'multiline':False]
['text':' read all content of a file','line_number':1421,'multiline':False]
['text':' check if string present in a file','line_number':1423,'multiline':False]
['text':' Guard against race condition','line_number':1433,'multiline':False]
['text':' Python.h','line_number':1457,'multiline':False]
['text':' torch/all.h','line_number':1459,'multiline':False]
['text':' Using PreCompile Header('torch/extension.h') to reduce compile time.','line_number':1594,'multiline':False]
['text':' If `functions` is supplied, we create the pybind11 bindings for the user.','line_number':1599,'multiline':False]
['text':' Here, `functions` is (or becomes, after some processing) a map from','line_number':1600,'multiline':False]
['text':' function names to function docstrings.','line_number':1601,'multiline':False]
['text':' Make the function docstring the same as the function name.','line_number':1608,'multiline':False]
['text':' no need to hipify ROCm or PyTorch headers','line_number':1696,'multiline':False]
['text':' It would be better if we could tell users the name of the extension','line_number':1777,'multiline':False]
['text':' that failed to build but there isn't a good way to get it here.','line_number':1778,'multiline':False]
['text':' NOTE: Emitting a new ninja build file does not cause re-compilation if','line_number':1808,'multiline':False]
['text':' the sources did not change, so it's ok to re-emit (and it's fast).','line_number':1809,'multiline':False]
['text':' /INCLUDE is used to ensure torch_cuda is linked against in a project that relies on it.','line_number':1856,'multiline':False]
['text':' Related issue: https://github.com/pytorch/pytorch/issues/31611','line_number':1857,'multiline':False]
['text':' 64-bit CUDA may be installed in "lib"','line_number':1895,'multiline':False]
['text':' Note that it's also possible both don't exist (see _find_cuda_home) - in that case we stay with "lib64"','line_number':1896,'multiline':False]
['text':' If cflags is given, there may already be user-provided arch flags in it','line_number':1921,'multiline':False]
['text':' (from `extra_compile_args`)','line_number':1922,'multiline':False]
['text':' Note: keep combined names ("arch1+arch2") above single names, otherwise','line_number':1930,'multiline':False]
['text':' string replacement may not do the right thing','line_number':1931,'multiline':False]
['text':' The default is sm_30 for CUDA 9.x and 10.x','line_number':1951,'multiline':False]
['text':' First check for an env var (same as used by the main setup.py)','line_number':1952,'multiline':False]
['text':' Can be one or more architectures, e.g. "6.1" or "3.5;5.2;6.0;6.1;7.0+PTX"','line_number':1953,'multiline':False]
['text':' See cmake/Modules_CUDA_fix/upstream/FindCUDA/select_compute_arch.cmake','line_number':1954,'multiline':False]
['text':' If not given, determine what's best for the GPU / CUDA version that can be found','line_number':1957,'multiline':False]
['text':' the assumption is that the extension should run on any of the currently visible cards,','line_number':1960,'multiline':False]
['text':' which could be of different types - therefore all archs for visible cards should be included','line_number':1961,'multiline':False]
['text':' Capability of the device may be higher than what's supported by the user's','line_number':1967,'multiline':False]
['text':' NVCC, causing compilation error. User's NVCC is expected to match the one','line_number':1968,'multiline':False]
['text':' used to build pytorch, so we use the maximum supported capability of pytorch','line_number':1969,'multiline':False]
['text':' to clamp the capability.','line_number':1970,'multiline':False]
['text':' Deal with lists that are ' ' separated (only deal with ';' after)','line_number':1978,'multiline':False]
['text':' Expand named arches','line_number':1980,'multiline':False]
['text':' If cflags is given, there may already be user-provided arch flags in it','line_number':2000,'multiline':False]
['text':' (from `extra_compile_args`)','line_number':2001,'multiline':False]
['text':' Use same defaults as used for building PyTorch','line_number':2006,'multiline':False]
['text':' Allow env var to override, just like during initial cmake build.','line_number':2007,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':2026,'multiline':False]
['text':' This is like mkdir -p, i.e. will also create parent directories.','line_number':2040,'multiline':False]
['text':' Try to activate the vc env for the users','line_number':2066,'multiline':False]
['text':' Warning: don't pass stdout=None to subprocess.run to get output.','line_number':2083,'multiline':False]
['text':' subprocess.run assumes that sys.__stdout__ has not been modified and','line_number':2084,'multiline':False]
['text':' attempts to write to it by default.  However, when we call _run_ninja_build','line_number':2085,'multiline':False]
['text':' from ahead-of-time cpp extensions, the following happens:','line_number':2086,'multiline':False]
['text':' 1) If the stdout encoding is not utf-8, setuptools detachs __stdout__.','line_number':2087,'multiline':False]
['text':'    https://github.com/pypa/setuptools/blob/7e97def47723303fafabe48b22168bbc11bb4821/setuptools/dist.py#L1110','line_number':2088,'multiline':False]
['text':'    (it probably shouldn't do this)','line_number':2089,'multiline':False]
['text':' 2) subprocess.run (on POSIX, with no stdout override) relies on','line_number':2090,'multiline':False]
['text':'    __stdout__ not being detached:','line_number':2091,'multiline':False]
['text':'    https://github.com/python/cpython/blob/c352e6c7446c894b13643f538db312092b351789/Lib/subprocess.py#L1214','line_number':2092,'multiline':False]
['text':' To work around this, we pass in the fileno directly and hope that','line_number':2093,'multiline':False]
['text':' it is valid.','line_number':2094,'multiline':False]
['text':' Python 2 and 3 compatible way of getting the error object.','line_number':2104,'multiline':False]
['text':' error.output contains the stdout and stderr of the build attempt.','line_number':2106,'multiline':False]
['text':' `error` is a CalledProcessError (which has an `output`) attribute, but','line_number':2108,'multiline':False]
['text':' mypy thinks it's Optional[BaseException] and doesn't narrow','line_number':2109,'multiline':False]
['text':' type: ignore[union-attr]','line_number':2110,'multiline':False]
['text':' type: ignore[union-attr]','line_number':2111,'multiline':False]
['text':' https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path','line_number':2129,'multiline':False]
['text':' Turn into absolute paths so we can emit them into the ninja build','line_number':2154,'multiline':False]
['text':' file wherever it is.','line_number':2155,'multiline':False]
['text':' include_paths() gives us the location of torch/extension.h','line_number':2158,'multiline':False]
['text':' sysconfig.get_path('include') gives us the location of Python.h','line_number':2160,'multiline':False]
['text':' Explicitly specify 'posix_prefix' scheme on non-Windows platforms to workaround error on some MacOS','line_number':2161,'multiline':False]
['text':' installations where default `get_path` points to non-existing `/Library/Python/M.m/include` folder','line_number':2162,'multiline':False]
['text':' Windows does not understand `-isystem`.','line_number':2167,'multiline':False]
['text':' '/path/to/file.cpp' -> 'file'','line_number':2216,'multiline':False]
['text':' Use a different object filename in case a C++ and CUDA file have','line_number':2219,'multiline':False]
['text':' the same filename but different extension (.cpp vs. .cu).','line_number':2220,'multiline':False]
['text':' The darwin linker needs explicit consent to ignore unresolved symbols.','line_number':2229,'multiline':False]
['text':' Sanity checks...','line_number':2290,'multiline':False]
['text':' Version 1.3 is required for the `deps` directive.','line_number':2296,'multiline':False]
['text':' user can set nvcc compiler with ccache using the environment variable here','line_number':2301,'multiline':False]
['text':' Turn into absolute paths so we can emit them into the ninja build','line_number':2319,'multiline':False]
['text':' file wherever it is.','line_number':2320,'multiline':False]
['text':' See https://ninja-build.org/build.ninja.html for reference.','line_number':2323,'multiline':False]
['text':' --generate-dependencies-with-compile is not supported by ROCm','line_number':2338,'multiline':False]
['text':' Note: non-system deps with nvcc are only supported','line_number':2342,'multiline':False]
['text':' on Linux so use --generate-dependencies-with-compile','line_number':2343,'multiline':False]
['text':' to make this work on Windows too.','line_number':2344,'multiline':False]
['text':' Emit one build rule per source to enable incremental build.','line_number':2349,'multiline':False]
['text':' 'Blocks' should be separated by newlines, for visual benefit.','line_number':2389,'multiline':False]
['text':' Ninja requires a new lines at the end of the .ninja file','line_number':2395,'multiline':False]
