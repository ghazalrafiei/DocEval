['text':' Taking reference from official Python typing','line_number':1,'multiline':False]
['text':' https://github.com/python/cpython/blob/master/Lib/typing.py','line_number':2,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':12,'multiline':False]
['text':' TODO: Use TypeAlias when Python 3.6 is deprecated','line_number':15,'multiline':False]
['text':' Please check [Note: TypeMeta and TypeAlias]','line_number':16,'multiline':False]
['text':' In case of metaclass conflict due to ABCMeta or _ProtocolMeta','line_number':17,'multiline':False]
['text':' For Python 3.9, only Protocol in typing uses metaclass','line_number':18,'multiline':False]
['text':' type: ignore[attr-defined, no-redef]','line_number':20,'multiline':False]
['text':' type: ignore[no-redef]','line_number':22,'multiline':False]
['text':' Python 'type' object is not subscriptable','line_number':34,'multiline':False]
['text':' Tuple[int, List, dict] -> valid','line_number':35,'multiline':False]
['text':' tuple[int, list, dict] -> invalid','line_number':36,'multiline':False]
['text':' Map Python 'type' to abstract base class','line_number':37,'multiline':False]
['text':' Right-side type','line_number':72,'multiline':False]
['text':' Left-side type','line_number':81,'multiline':False]
['text':' all() will return True for empty variants','line_number':84,'multiline':False]
['text':' For T_co, __constraints__ is ()','line_number':96,'multiline':False]
['text':' Ignored: Generator has incompatible item type "object"; expected "Type[Any]"','line_number':104,'multiline':False]
['text':' type: ignore[misc]','line_number':105,'multiline':False]
['text':' [Note: Subtype for Union and TypeVar]','line_number':119,'multiline':False]
['text':' Python typing is able to flatten Union[Union[...]] or Union[TypeVar].','line_number':120,'multiline':False]
['text':' But it couldn't flatten the following scenarios:','line_number':121,'multiline':False]
['text':'   - Union[int, TypeVar[Union[...]]]','line_number':122,'multiline':False]
['text':'   - TypeVar[TypeVar[...]]','line_number':123,'multiline':False]
['text':' So, variant and each constraint may be a TypeVar or a Union.','line_number':124,'multiline':False]
['text':' In these cases, all of inner types from the variant are required to be','line_number':125,'multiline':False]
['text':' extraced and verified as a subtype of any constraint. And, all of','line_number':126,'multiline':False]
['text':' inner types from any constraint being a TypeVar or a Union are','line_number':127,'multiline':False]
['text':' also required to be extracted and verified if the variant belongs to','line_number':128,'multiline':False]
['text':' any of them.','line_number':129,'multiline':False]
['text':' Variant','line_number':131,'multiline':False]
['text':' Variant is TypeVar or Union','line_number':134,'multiline':False]
['text':' Variant is not TypeVar or Union','line_number':138,'multiline':False]
['text':' In Python-3.9 typing library untyped generics do not have args','line_number':141,'multiline':False]
['text':' Constraints','line_number':147,'multiline':False]
['text':' Constraint is TypeVar or Union','line_number':151,'multiline':False]
['text':' Constraint is not TypeVar or Union','line_number':155,'multiline':False]
['text':' __origin__ can be None for plain list, tuple, ... in Python 3.6','line_number':157,'multiline':False]
['text':' In Python-3.9 typing library untyped generics do not have args','line_number':163,'multiline':False]
['text':' Tuple[int] -> Tuple','line_number':170,'multiline':False]
['text':' In Python-3.9 typing library __args__ attribute is not defined for untyped generics','line_number':182,'multiline':False]
['text':' [Note: TypeMeta and TypeAlias]','line_number':204,'multiline':False]
['text':' In order to keep compatibility for Python 3.6, use Meta for the typing.','line_number':205,'multiline':False]
['text':' TODO: When PyTorch drops the support for Python 3.6, it can be converted','line_number':206,'multiline':False]
['text':' into the Alias system and using `__class_getitem__` for DataPipe. The','line_number':207,'multiline':False]
['text':' typing system will gain benefit of performance and resolving metaclass','line_number':208,'multiline':False]
['text':' conflicts as elaborated in https://www.python.org/dev/peps/pep-0560/','line_number':209,'multiline':False]
['text':' Default type for DataPipe without annotation','line_number':243,'multiline':False]
['text':' type: ignore[call-overload]','line_number':260,'multiline':False]
['text':' TODO: the statements below are not reachable by design as there is a bug and typing is low priority for now.','line_number':262,'multiline':False]
['text':' type: ignore[call-overload]','line_number':265,'multiline':False]
['text':'  For plain derived class without annotation','line_number':268,'multiline':False]
['text':' type: ignore[call-overload]','line_number':271,'multiline':False]
['text':' type: ignore[call-overload]','line_number':275,'multiline':False]
['text':' type: ignore[call-overload]','line_number':278,'multiline':False]
['text':' TODO: Fix isinstance bug','line_number':280,'multiline':False]
['text':' type: ignore[index]','line_number':296,'multiline':False]
['text':' Types are equal, fast path for inheritance','line_number':315,'multiline':False]
['text':' TODO: Fix isinstance bug','line_number':327,'multiline':False]
['text':' type: ignore[has-type]','line_number':331,'multiline':False]
['text':' type: ignore[has-type]','line_number':333,'multiline':False]
['text':' TODO: Fix isinstance bug','line_number':336,'multiline':False]
['text':' Reset `NotStarted` is necessary because the `source_datapipe` of a DataPipe might have','line_number':362,'multiline':False]
['text':' already begun iterating.','line_number':363,'multiline':False]
['text':' type: ignore[call-overload]','line_number':373,'multiline':False]
['text':' Add function for datapipe instance to reinforce the type','line_number':377,'multiline':False]
['text':' TODO:','line_number':380,'multiline':False]
['text':' - add global switch for type checking at compile-time','line_number':381,'multiline':False]
['text':' Ignore internal type class','line_number':383,'multiline':False]
['text':' Check if the string type is valid','line_number':387,'multiline':False]
['text':' Plain Return Hint for Python 3.6','line_number':401,'multiline':False]
