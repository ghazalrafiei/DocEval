['text':' type: ignore[attr-defined]','line_number':5,'multiline':False]
['text':' This file defines a variant of WeakKeyDictionary that overrides the hashing','line_number':17,'multiline':False]
['text':' behavior of the key to use object identity, rather than the builtin','line_number':18,'multiline':False]
['text':' __eq__/__hash__ functions.  This is useful for Tensor weak keys, as their','line_number':19,'multiline':False]
['text':' __eq__ implementation return a Tensor (elementwise equality), which means','line_number':20,'multiline':False]
['text':' you can't use them directly with the WeakKeyDictionary in standard library.','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':' Our implementation strategy is to create a wrapper weak key object, which we','line_number':23,'multiline':False]
['text':' use as a key in a stock Python dictionary.  This is similar to how weakref','line_number':24,'multiline':False]
['text':' implements WeakKeyDictionary, but instead of using weakref.ref as the','line_number':25,'multiline':False]
['text':' wrapper, we use a custom wrapper that has different __eq__ and __hash__','line_number':26,'multiline':False]
['text':' behavior.  Note that we subsequently store this weak key directly in an','line_number':27,'multiline':False]
['text':' ORDINARY dictionary, since the newly constructed WeakIdKey's only use would','line_number':28,'multiline':False]
['text':' be a dictionary so it would have no strong references.  Ensuring that','line_number':29,'multiline':False]
['text':' only live WeakIdKeys are in the map is handled by putting finalizers on the','line_number':30,'multiline':False]
['text':' original key object.','line_number':31,'multiline':False]
['text':' It is simpler to implement this with composition, but if we want to','line_number':34,'multiline':False]
['text':' directly reuse the callback mechanism on weakref, we need the weakref','line_number':35,'multiline':False]
['text':' and the key to be exactly the same object.  Reusing the callback mechanism','line_number':36,'multiline':False]
['text':' minimizes the divergence between our implementation and Lib/weakref.py','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' NB: Prefer using this when working with weakrefs of Tensors; e.g., do','line_number':39,'multiline':False]
['text':' WeakIdRef(tensor) rather than weakref.ref(tensor); it handles a number of','line_number':40,'multiline':False]
['text':' easy to get wrong cases transparently for you.','line_number':41,'multiline':False]
['text':' Unlike stock weakref, which preserves hash semantics of the','line_number':46,'multiline':False]
['text':' original object but lazily defers hash calls until the first','line_number':47,'multiline':False]
['text':' time the user attempts to hash the weakref, we can eagerly','line_number':48,'multiline':False]
['text':' cache the id of the key as we know this is definitely the hash','line_number':49,'multiline':False]
['text':' method','line_number':50,'multiline':False]
['text':' type: ignore[call-arg]','line_number':52,'multiline':False]
['text':' Special logic for Tensor PyObject resurrection','line_number':56,'multiline':False]
['text':' type: ignore[union-attr]','line_number':58,'multiline':False]
['text':' An attractive but wrong alternate implementation is to only test if','line_number':65,'multiline':False]
['text':' the stored _ids match.  This can lead to an ABA problem if you have:','line_number':66,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':'   a1 = A()','line_number':68,'multiline':False]
['text':'   w1 = WeakIdRef(a1)','line_number':69,'multiline':False]
['text':'   del a1','line_number':70,'multiline':False]
['text':'   a2 = A()  # suppose it gets the same ID as a1','line_number':71,'multiline':False]
['text':'   w2 = WeakIdRef(a2)','line_number':72,'multiline':False]
['text':'   print(w1 == w2)','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':' This should be False, as a1 and a2 are unrelated (and a1 is','line_number':75,'multiline':False]
['text':' dead anyway)','line_number':76,'multiline':False]
['text':' This is the same as WeakIdRef but equality is checked using hash() rather than id.','line_number':83,'multiline':False]
['text':' This will be equivalent to the one above except for classes where hash is not their id.','line_number':84,'multiline':False]
['text':' Unlike stock weakref, which preserves hash semantics of the','line_number':89,'multiline':False]
['text':' original object but lazily defers hash calls until the first','line_number':90,'multiline':False]
['text':' time the user attempts to hash the weakref, we can eagerly','line_number':91,'multiline':False]
['text':' cache the id of the key as we know this is definitely the hash','line_number':92,'multiline':False]
['text':' method','line_number':93,'multiline':False]
['text':' type: ignore[call-arg]','line_number':95,'multiline':False]
['text':' Special logic for Tensor PyObject resurrection','line_number':99,'multiline':False]
['text':' type: ignore[union-attr]','line_number':101,'multiline':False]
['text':' Use hash equality to determine ref equality.','line_number':108,'multiline':False]
['text':' ScriptObject implements __hash__ to return the wrapped IValue's id, so','line_number':109,'multiline':False]
['text':' this is equivalent to doing an identity comparison.','line_number':110,'multiline':False]
['text':' This is directly adapted from cpython/Lib/weakref.py','line_number':117,'multiline':False]
['text':' CHANGED','line_number':119,'multiline':False]
['text':' CHANGED','line_number':122,'multiline':False]
['text':' A list of dead weakrefs (keys to be removed)','line_number':135,'multiline':False]
['text':' NOTE: We don't need to call this method before mutating the dict,','line_number':143,'multiline':False]
['text':' because a dead weakref never compares equal to a live weakref,','line_number':144,'multiline':False]
['text':' even if they happened to refer to equal objects.','line_number':145,'multiline':False]
['text':' However, it means keys may already have been removed.','line_number':146,'multiline':False]
['text':' CHANGED','line_number':167,'multiline':False]
['text':' CHANGED','line_number':170,'multiline':False]
['text':' self._pending_removals may still contain keys which were','line_number':174,'multiline':False]
['text':' explicitly removed, we have to scrub them (see issue #21173).','line_number':175,'multiline':False]
['text':' CHANGED','line_number':183,'multiline':False]
['text':' CHANGED','line_number':207,'multiline':False]
['text':' CHANGED','line_number':211,'multiline':False]
['text':' CHANGED','line_number':260,'multiline':False]
['text':' CHANGED','line_number':263,'multiline':False]
['text':' CHANGED','line_number':271,'multiline':False]
['text':' Default Mapping equality will tests keys for equality, but','line_number':294,'multiline':False]
['text':' we want to test ids for equality','line_number':295,'multiline':False]
['text':' Convenience alias','line_number':301,'multiline':False]
['text':' TODO, add _fix_weakref type binding','line_number':319,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':320,'multiline':False]
