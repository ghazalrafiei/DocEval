['text':' Dict of node -> dict of arbitrary attributes','line_number':13,'multiline':False]
['text':' Nested dict of node -> successor node -> nothing.','line_number':15,'multiline':False]
['text':' (didn't implement edge data)','line_number':16,'multiline':False]
['text':' Nested dict of node -> predecessor node -> nothing.','line_number':18,'multiline':False]
['text':' Keep track of the order in which nodes are added to','line_number':21,'multiline':False]
['text':' the graph.','line_number':22,'multiline':False]
['text':' add nodes','line_number':47,'multiline':False]
['text':' add the edge','line_number':51,'multiline':False]
['text':' First compute forward transitive closure of src (all things reachable from src).','line_number':122,'multiline':False]
['text':' Second walk the reverse dependencies of dst, adding each node to','line_number':128,'multiline':False]
['text':' the output graph iff it is also present in forward_reachable_from_src.','line_number':129,'multiline':False]
['text':' we don't use backward_transitive_closures for optimization purposes','line_number':130,'multiline':False]
['text':' only explore further if its reachable from src','line_number':137,'multiline':False]
