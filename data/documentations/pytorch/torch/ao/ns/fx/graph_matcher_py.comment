['text':' for subgraphs which are single nodes, start_node == end_node','line_number':67,'multiline':False]
['text':' for subgraphs with more than one node, start node != end_node','line_number':68,'multiline':False]
['text':' Subgraphs like linear-relu have the base node as the start node.','line_number':70,'multiline':False]
['text':' Subgraphs like dequantize-linear-relu-to(torch.float16) have the','line_number':71,'multiline':False]
['text':'   base node as the second node.','line_number':72,'multiline':False]
['text':' The cur_base_op_node var will move to the actual node during','line_number':73,'multiline':False]
['text':'   the fusion matching later in this code block.','line_number':74,'multiline':False]
['text':' Check for potential fusions. For now, we are greedy','line_number':77,'multiline':False]
['text':' and always skip all non-base nodes of a fusion.  For example,','line_number':78,'multiline':False]
['text':' if we match linear-relu backwards, we will always skip the','line_number':79,'multiline':False]
['text':' relu node and attempt to match the linear node.  This can','line_number':80,'multiline':False]
['text':' be made configurable later if needed.','line_number':81,'multiline':False]
['text':' navigate to the base node','line_number':86,'multiline':False]
['text':' for now, assume that there are no other nodes','line_number':89,'multiline':False]
['text':' which need to be added to the stack','line_number':90,'multiline':False]
['text':' type: ignore[assignment]','line_number':91,'multiline':False]
['text':' if the base op index matches the current node, set it','line_number':92,'multiline':False]
['text':' add args of previous nodes to stack','line_number':100,'multiline':False]
['text':' skip unmatchable nodes','line_number':104,'multiline':False]
['text':' note: this check is done on the start_node, i.e.','line_number':105,'multiline':False]
['text':' if we are matching linear-relu in reverse, this would do the matchable','line_number':106,'multiline':False]
['text':' check on the linear','line_number':107,'multiline':False]
['text':' If an observer or a fake_quant was not matched as a part of','line_number':111,'multiline':False]
['text':' a pattern of multiple nodes, ignore it. One case where this is','line_number':112,'multiline':False]
['text':' relevant is an observer on a graph input, which was added because','line_number':113,'multiline':False]
['text':' it is necessary for the next node.','line_number':114,'multiline':False]
['text':' type: ignore[arg-type]','line_number':116,'multiline':False]
['text':' type: ignore[arg-type]','line_number':147,'multiline':False]
['text':' same type, known','line_number':161,'multiline':False]
['text':' example: F.linear and F.linear, or nn.Conv2d and nn.Conv2d','line_number':162,'multiline':False]
['text':' same type, but the type is not known to Numerical Suite','line_number':164,'multiline':False]
['text':' (user defined type, etc).','line_number':165,'multiline':False]
['text':' known, same subgraph_relationship set, but not the same type','line_number':167,'multiline':False]
['text':' example: F.linear and toq.linear','line_number':168,'multiline':False]
['text':' not related','line_number':170,'multiline':False]
['text':' TODO(next): make this code handle matching by what is before the base op','line_number':183,'multiline':False]
['text':' after this point, we are dealing with known types','line_number':199,'multiline':False]
['text':' TODO(future PR): check for matches start_op_node and base_op_node','line_number':211,'multiline':False]
['text':' for call_module, we need to look up the modules to do the type check','line_number':222,'multiline':False]
['text':' fetch the next subgraphs from a and b','line_number':394,'multiline':False]
['text':' look up types of a and b for useful error messages','line_number':405,'multiline':False]
['text':' check for results and determine what to do next','line_number':412,'multiline':False]
['text':' both nodes were fetched, check for subgraph_relationship','line_number':414,'multiline':False]
['text':' note: subgraph_relationship is checked on the start node, i.e.','line_number':415,'multiline':False]
['text':' if a linear-relu pattern is checked, we would check for subgraph_relationship','line_number':416,'multiline':False]
['text':' of the linear','line_number':417,'multiline':False]
['text':' skip matching but unknown types','line_number':430,'multiline':False]
['text':' we reached the end of both graphs','line_number':443,'multiline':False]
['text':' only one node was fetched, no match possible, throw error','line_number':446,'multiline':False]
['text':' The subgraph pairs are originally created by traversing the two graphs','line_number':455,'multiline':False]
['text':' from the outputs to the inputs. Reverse the results to return the','line_number':456,'multiline':False]
['text':' subgraphs in their order of execution.','line_number':457,'multiline':False]
