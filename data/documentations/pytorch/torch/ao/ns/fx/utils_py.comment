['text':' TODO(future PR): consider deleting this enum and using the torch types','line_number':23,'multiline':False]
['text':' directly.  This might be tricky because it is not a one to one mapping.','line_number':24,'multiline':False]
['text':' torch.float','line_number':26,'multiline':False]
['text':' torch.qint8 or torch.quint8','line_number':27,'multiline':False]
['text':' torch.float16','line_number':28,'multiline':False]
['text':' we cannot determine input/output dtype','line_number':29,'multiline':False]
['text':' TODO(future PR): while these functions can support multiple dtypes,','line_number':30,'multiline':False]
['text':'   for the purposes of numerical debugging we want to get the actual','line_number':31,'multiline':False]
['text':'   dtype used in the model. We will likely need some kind of dtype','line_number':32,'multiline':False]
['text':'   propagation to estimate this.','line_number':33,'multiline':False]
['text':' either torch.float or torch.quint8 or torch.qint8','line_number':34,'multiline':False]
['text':' TODO(future PRs): dynamic quant, fake quant, etc','line_number':35,'multiline':False]
['text':' TODO(future PR): clean this up','line_number':45,'multiline':False]
['text':' type: ignore[arg-type]','line_number':80,'multiline':False]
['text':' type: ignore[arg-type]','line_number':83,'multiline':False]
['text':' A logger or observer's input and output type is the output','line_number':86,'multiline':False]
['text':' type of the preceding node.','line_number':87,'multiline':False]
['text':' type: ignore[arg-type]','line_number':98,'multiline':False]
['text':' type: ignore[arg-type]','line_number':101,'multiline':False]
['text':' Dequantize is a special node because it allows multiple input types.','line_number':112,'multiline':False]
['text':' So, we look up the output type of the previous node and return that','line_number':113,'multiline':False]
['text':' as the input type of this node instance.','line_number':114,'multiline':False]
['text':' to is a special node because it allows multiple input types.','line_number':126,'multiline':False]
['text':' So, we look up the output type of the previous node and return that','line_number':127,'multiline':False]
['text':' as the input type of this node instance. We also look up the target','line_number':128,'multiline':False]
['text':' of to and return the correct output type.','line_number':129,'multiline':False]
['text':' quantize - read the args directly','line_number':189,'multiline':False]
['text':' TODO(future PR): handle more functionals','line_number':196,'multiline':False]
['text':' TODO(future PR): handle functional ops which inherit qparams from input','line_number':197,'multiline':False]
['text':' get type of the module','line_number':201,'multiline':False]
['text':' type: ignore[return-value]','line_number':233,'multiline':False]
['text':' type: ignore[arg-type]','line_number':236,'multiline':False]
['text':' type: ignore[arg-type]','line_number':258,'multiline':False]
['text':' code duplication intended, not worth refactoring','line_number':263,'multiline':False]
['text':' type: ignore[arg-type]','line_number':291,'multiline':False]
['text':' default is 1','line_number':295,'multiline':False]
['text':' TODO(future PR): use relationship map instead of hardcoding','line_number':314,'multiline':False]
['text':' Check in the first result to find any model with fqn entries defined.','line_number':390,'multiline':False]
['text':' for the purposes of this util, only handle floats','line_number':433,'multiline':False]
['text':' For convolutions, the shape of the quantized weight has one additional','line_number':487,'multiline':False]
['text':' dimension compared to the shape of the fp32 weight. Match the shapes','line_number':488,'multiline':False]
['text':' to enable cosine similarity comparison.','line_number':489,'multiline':False]
['text':' shadowing for ops with multiple tensor inputs is not implemented yet','line_number':497,'multiline':False]
['text':' note: in Python 3.7+ dicts are ordered','line_number':515,'multiline':False]
['text':' type: ignore[return-value]','line_number':520,'multiline':False]
['text':' type: ignore[return-value]','line_number':523,'multiline':False]
['text':' this RuntimeError happens when node argument normalization','line_number':525,'multiline':False]
['text':' requires typehints to proceed, such as for torch.add where','line_number':526,'multiline':False]
['text':' either the first, second or both arguments could be tensors','line_number':527,'multiline':False]
['text':' type: ignore[return-value]','line_number':530,'multiline':False]
['text':' type: ignore[return-value]','line_number':533,'multiline':False]
