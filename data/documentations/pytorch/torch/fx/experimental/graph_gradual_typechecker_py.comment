['text':' type: ignore[attr-defined]','line_number':12,'multiline':False]
['text':' if either type is Dyn, do nothing since the types are already consistent','line_number':46,'multiline':False]
['text':' We make the types the same length which is the first requirement','line_number':57,'multiline':False]
['text':' for consistency','line_number':58,'multiline':False]
['text':' we replace occurrences of "1" with each tensor with','line_number':67,'multiline':False]
['text':' the corresponding type from the other tensor','line_number':68,'multiline':False]
['text':' at this point our tensors should be consistent','line_number':75,'multiline':False]
['text':' and we can apply the element-wise operation and find the right dimension','line_number':76,'multiline':False]
['text':' for the output of the operation','line_number':77,'multiline':False]
['text':' handle scalar addition','line_number':126,'multiline':False]
['text':' handle scalar addition','line_number':131,'multiline':False]
['text':' we bring the new types to the point where','line_number':136,'multiline':False]
['text':' we can check for consistency','line_number':137,'multiline':False]
['text':' any inconsistency would not have been caused','line_number':138,'multiline':False]
['text':' by broadcasting at this point','line_number':139,'multiline':False]
['text':' we check for consistency between the new types','line_number':153,'multiline':False]
['text':' we return the less precise type because','line_number':155,'multiline':False]
['text':' broadcasting may have happened','line_number':156,'multiline':False]
['text':' for operands with shape [1,2,Dyn] and [1,2,1]','line_number':157,'multiline':False]
['text':' we have to assign the node [1,2,Dyn]','line_number':158,'multiline':False]
['text':' TODO. We leave it like this till we add a type to represent tensor sizes','line_number':184,'multiline':False]
['text':' if we do not know the original tensor dimension,','line_number':236,'multiline':False]
['text':' we return the required dimension','line_number':237,'multiline':False]
['text':' if any of the dimensions are unknown,','line_number':242,'multiline':False]
['text':' we check for divisibility','line_number':243,'multiline':False]
['text':' we check the conditions on the incoming argument','line_number':273,'multiline':False]
['text':' and any existing annotation','line_number':274,'multiline':False]
['text':' we also check for consistency between both annotations','line_number':275,'multiline':False]
['text':' we choose the more precise type','line_number':280,'multiline':False]
['text':' to be the node type','line_number':281,'multiline':False]
['text':' so if an incoming argument has more type information','line_number':282,'multiline':False]
['text':' we set this node's type to be the argument type','line_number':283,'multiline':False]
['text':' set the default start and end dims','line_number':515,'multiline':False]
['text':' type check every node with gradual type rules','line_number':549,'multiline':False]
['text':' if any node does not type check return false','line_number':550,'multiline':False]
['text':' type: ignore[arg-type]','line_number':577,'multiline':False]
['text':' by this point, we know that args1 and args2 are the same size.','line_number':692,'multiline':False]
['text':' we would be here in the second iteration where we establish equality','line_number':697,'multiline':False]
['text':' between operand type dimensions and the resulting type dimensions','line_number':698,'multiline':False]
