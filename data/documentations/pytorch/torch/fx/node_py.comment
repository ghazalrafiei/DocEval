['text':' Nodes represent a definition of a value in our graph of operators.','line_number':1,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':20,'multiline':False]
['text':' actually Argument, but mypy can't represent recursive types','line_number':25,'multiline':False]
['text':' actually Argument','line_number':26,'multiline':False]
['text':' actually Argument','line_number':27,'multiline':False]
['text':' Slice[Argument, Argument, Argument], but slice is not a templated type in typing','line_number':28,'multiline':False]
['text':' this is fixed on master, WAR for 1.5','line_number':54,'multiline':False]
['text':' Borrowed from CPython typing module','line_number':65,'multiline':False]
['text':' https://github.com/python/cpython/blob/f90dc36c15d7fee0efaf6d39e97be0bdf2683e93/Lib/typing.py#L156','line_number':66,'multiline':False]
['text':' things like getattr just appear in builtins','line_number':85,'multiline':False]
['text':' torch.Tensor.{fn}','line_number':88,'multiline':False]
['text':' For lambdas, try to get their defining name in the module','line_number':94,'multiline':False]
['text':' WAR for bug in how torch.ops assigns module','line_number':100,'multiline':False]
['text':' Fixup segment_reduce mismatch','line_number':101,'multiline':False]
['text':' unique name of value being created','line_number':187,'multiline':False]
['text':' the kind of operation = placeholder|call_method|call_module|call_function|get_attr','line_number':189,'multiline':False]
['text':' for method/module/function, the name of the method/module/function/attr','line_number':198,'multiline':False]
['text':' being invoked, e.g add, layer1, or torch.add','line_number':199,'multiline':False]
['text':' All `Node`-valued inputs. Key is the Node, value is don't-care.','line_number':201,'multiline':False]
['text':' The public API for this is `all_input_nodes`, this private attribute','line_number':202,'multiline':False]
['text':' should not be accessed directly.','line_number':203,'multiline':False]
['text':' type: ignore[arg-type]','line_number':205,'multiline':False]
['text':' All of the nodes that use the value produced by this Node','line_number':207,'multiline':False]
['text':' Note one user may correspond to several uses, e.g. the node fo ``x + x``','line_number':208,'multiline':False]
['text':' would appear once here, but represents two uses.','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' Is a dict to act as an "ordered set". Keys are significant, value dont-care','line_number':211,'multiline':False]
['text':' Type expression representing the output value of this node.','line_number':213,'multiline':False]
['text':' This should contain the same class of Type objects that would appear','line_number':214,'multiline':False]
['text':' as type annotations for function inputs/outputs.','line_number':215,'multiline':False]
['text':'','line_number':216,'multiline':False]
['text':' For placeholder nodes, this value will be used to type-annotate the','line_number':217,'multiline':False]
['text':' generated function parameters.','line_number':218,'multiline':False]
['text':' For the return node, this value will be used to type-annotate the','line_number':219,'multiline':False]
['text':' generated function return type. (Note this is a special case. ``return``','line_number':220,'multiline':False]
['text':' does not produce a value, it's more of a notation. Thus, this value','line_number':221,'multiline':False]
['text':' describes the type of args[0] in the ``return`` node.','line_number':222,'multiline':False]
['text':' If set, use this fn to print this node','line_number':228,'multiline':False]
['text':' Dictionary to store metadata passes need to do their','line_number':231,'multiline':False]
['text':' transformations. This metadata is preserved across node copies','line_number':232,'multiline':False]
['text':' DO NOT CALL `__update_args_kwargs` directly. The correct way to','line_number':313,'multiline':False]
['text':' set `args` is via direct assignment, i.e. `node.args = new_args`','line_number':314,'multiline':False]
['text':' type: ignore[arg-type]','line_number':315,'multiline':False]
['text':' DO NOT CALL `__update_args_kwargs` directly. The correct way to','line_number':336,'multiline':False]
['text':' set `args` is via direct assignment, i.e. `node.kwargs = new_kwargs`','line_number':337,'multiline':False]
['text':' type: ignore[arg-type]','line_number':338,'multiline':False]
['text':' Just to be defensive, if we don't have `__name__`, get the','line_number':459,'multiline':False]
['text':' qualname. Not sure if this happens for any members of `operator`','line_number':460,'multiline':False]
['text':' or `builtins`. This fallback path is not as good, since e.g.','line_number':461,'multiline':False]
['text':' things in `operator` have `_operator` as their __module__.','line_number':462,'multiline':False]
['text':' Check if an impure function.','line_number':591,'multiline':False]
['text':' Check if an impure module.','line_number':595,'multiline':False]
['text':' type: ignore[arg-type]','line_number':637,'multiline':False]
['text':' type: ignore[arg-type]','line_number':640,'multiline':False]
['text':' Support NamedTuple (if it has `_fields`) by repacking into original type.','line_number':687,'multiline':False]
