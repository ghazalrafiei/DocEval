['text':' Stores the placeholder nodes in `graph`.','line_number':45,'multiline':False]
['text':' Store the nodes in original graph that are placeholder in `graph`.','line_number':48,'multiline':False]
['text':' Store the nodes in original graph that are outputs in `graph`.','line_number':51,'multiline':False]
['text':' Mapping from get_attr node in original graph to get_attr node in `graph`.','line_number':54,'multiline':False]
['text':' Mapping from node in original module to node in created submodule.','line_number':132,'multiline':False]
['text':' Mapping from node in original module or created submodules to','line_number':135,'multiline':False]
['text':' corresponding component.','line_number':136,'multiline':False]
['text':' Mapping from tag to the corresponding component.','line_number':139,'multiline':False]
['text':' Stores all components.','line_number':142,'multiline':False]
['text':' Stores nodes that will be used in main graph.','line_number':145,'multiline':False]
['text':' Main graph after split.','line_number':148,'multiline':False]
['text':' Mapping from node in original module to node in main graph after split.','line_number':151,'multiline':False]
['text':' Output node of original module.','line_number':154,'multiline':False]
['text':' Create a component for each tag, we don't expect to create other components afterwards.','line_number':157,'multiline':False]
['text':' Traverse the nodes in original graph and take care of them.','line_number':163,'multiline':False]
['text':' Placeholders in the original graph get copied to main graph.','line_number':171,'multiline':False]
['text':' Get_attr nodes are ignored because we are not tagging them.','line_number':177,'multiline':False]
['text':' Instead, we copy them directly to the submodules use them afterwards.','line_number':178,'multiline':False]
['text':' Now we process callable nodes which are nodes with op of call_module,','line_number':182,'multiline':False]
['text':' call_function or call_method. Every callable nodes should be tagged.','line_number':183,'multiline':False]
['text':' Max order of upperstream components.','line_number':195,'multiline':False]
['text':' Expect the component for `node` has higher order then its upstream components.','line_number':198,'multiline':False]
['text':' Map a input of `node` to nodes in the component's graph.','line_number':201,'multiline':False]
['text':' If input is a get_attr node, copy it to current component's graph.','line_number':203,'multiline':False]
['text':' Returns the get_attr node in current component's graph.','line_number':204,'multiline':False]
['text':' If input is not a placeholder, it should have been put into a component','line_number':212,'multiline':False]
['text':' already. If it's the current component then we return the corresponding','line_number':213,'multiline':False]
['text':' node in the component.','line_number':214,'multiline':False]
['text':' If input is a placeholder or it's in other components, we want to make it','line_number':218,'multiline':False]
['text':' as a placeholder in current component's graph.','line_number':219,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':230,'multiline':False]
['text':' We don't need components mapping for nodes of type "get_attr"','line_number':239,'multiline':False]
['text':' that are consumed by the output. Only need to make sure we create','line_number':240,'multiline':False]
['text':' corresponding counterparts in the resulting graph.','line_number':241,'multiline':False]
['text':' All component results consumed by the output node should be','line_number':244,'multiline':False]
['text':' marked as "used in main".','line_number':245,'multiline':False]
['text':' If a node is used in main graph then we mark it as an output in the component','line_number':248,'multiline':False]
['text':' it belongs to.','line_number':249,'multiline':False]
['text':' Now we create a graphmodule for each component.','line_number':254,'multiline':False]
['text':' Take care of the args of FX output node. If there's a single','line_number':259,'multiline':False]
['text':' output then the output node args is like (output_single), else','line_number':260,'multiline':False]
['text':' if there're multiple outputs then the output node args is like','line_number':261,'multiline':False]
['text':' ((output_0, output_1, ...)).','line_number':262,'multiline':False]
['text':' Create a call_module node in main graph.','line_number':270,'multiline':False]
['text':' Use Proxy to record getitem access.','line_number':281,'multiline':False]
['text':' type: ignore[index]','line_number':282,'multiline':False]
['text':' If the output nodes consumes get_attr directly in the original graph,','line_number':287,'multiline':False]
['text':' then we need to make sure get_attr is copied to the new graph.','line_number':288,'multiline':False]
['text':' type: ignore[arg-type]','line_number':291,'multiline':False]
