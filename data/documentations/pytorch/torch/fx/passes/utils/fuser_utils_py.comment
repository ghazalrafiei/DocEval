['text':' sort nodes according to the topological order','line_number':15,'multiline':False]
['text':' verify the partition does't form a dependency cycle in the original graph','line_number':44,'multiline':False]
['text':' returns True for valid partition, False for invalid','line_number':45,'multiline':False]
['text':' external user node, need to expose as an output','line_number':53,'multiline':False]
['text':' Perform BFS on the partition outputs.','line_number':56,'multiline':False]
['text':' If it reaches a node within the partition, then it found a cycle.','line_number':57,'multiline':False]
['text':' This function takes the ownership of `root_nodes` and may modify it.','line_number':58,'multiline':False]
['text':' Set used to exclude nodes that have already been visited.','line_number':60,'multiline':False]
['text':' If a node has been visited, that node and all its children have','line_number':61,'multiline':False]
['text':' been checked for cycles.','line_number':62,'multiline':False]
['text':' Start with `root_nodes` and traverse through (toward child nodes)','line_number':65,'multiline':False]
['text':' their connected sub-graph. Nodes in `visited` won't be added','line_number':66,'multiline':False]
['text':' to `queue` again.','line_number':67,'multiline':False]
['text':' Started from partition's `output` nodes, and reached','line_number':73,'multiline':False]
['text':' another node in partition. Cycle!','line_number':74,'multiline':False]
['text':' `root_nodes` don't cause cycle.','line_number':80,'multiline':False]
['text':' Use all output nodes as roots to traverse','line_number':83,'multiline':False]
['text':' the graph to check cycles.','line_number':84,'multiline':False]
['text':' assumption: nodes are already sorted in topo order','line_number':115,'multiline':False]
['text':' validates partition doesn't introduce dependency circles in the graph','line_number':122,'multiline':False]
['text':' mapping of nodes from old graph to placeholder in new graph','line_number':127,'multiline':False]
['text':' mapping of nodes from old graph to new graph','line_number':128,'multiline':False]
['text':' handles inputs through graph.node_copy's arg_transform functions','line_number':130,'multiline':False]
['text':' TODO: do we really need copy the get_attr node into the graph?','line_number':133,'multiline':False]
['text':' do something here','line_number':134,'multiline':False]
['text':' x is inside subgraph, return the copied node','line_number':138,'multiline':False]
['text':' the node should have been copied aleady, as we are copying graph in the topological order','line_number':139,'multiline':False]
['text':' x is not in subgraph, create a new placeholder for subgraph','line_number':143,'multiline':False]
['text':' copy all meta fields, even if some fields might be irrelvant for the placeholder node','line_number':145,'multiline':False]
['text':' copy nodes in topological order','line_number':151,'multiline':False]
['text':' handles outputs','line_number':156,'multiline':False]
['text':' mapping from old output to new outputs','line_number':157,'multiline':False]
['text':' external user node, need to expose as an output','line_number':162,'multiline':False]
['text':' outs contain nodes in the new subgraph','line_number':165,'multiline':False]
['text':' Take care of the args of FX output node. If there's a single','line_number':168,'multiline':False]
['text':' output then the output node args is like (output_single), else','line_number':169,'multiline':False]
['text':' if there're multiple outputs then the output node args is like','line_number':170,'multiline':False]
['text':' ((output_0, output_1, ...)).','line_number':171,'multiline':False]
['text':' lint to ensure correctness','line_number':174,'multiline':False]
['text':' sub_gm's input nodes in the original module','line_number':179,'multiline':False]
['text':' sub_gm's outputs node in the original module','line_number':182,'multiline':False]
['text':' add sub_gm into gm','line_number':190,'multiline':False]
['text':' Create a call_module node in main graph.','line_number':194,'multiline':False]
['text':' main_remapping[comp.orig_outputs[0]] = module_node','line_number':201,'multiline':False]
['text':' Use Proxy to record getitem access.','line_number':205,'multiline':False]
['text':' type: ignore[index]','line_number':206,'multiline':False]
['text':' erase original nodes in inversed topological order','line_number':213,'multiline':False]
['text':' topological sort original gm with newly created sub_gm','line_number':230,'multiline':False]
