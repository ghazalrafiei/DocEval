['text':' noqa: F401','line_number':9,'multiline':False]
['text':' noqa: F401','line_number':60,'multiline':False]
['text':' type: ignore[import]','line_number':77,'multiline':False]
['text':' Borrowed from cPython implementation','line_number':83,'multiline':False]
['text':' https://github.com/python/cpython/blob/561612d8456cfab5672c9b445521113b847bd6b3/Lib/textwrap.py#L411#','line_number':84,'multiline':False]
['text':' NB: no specific token for AnnAssign','line_number':150,'multiline':False]
['text':' This has to be instantiated here so the ErrorReport is accurate to the','line_number':158,'multiline':False]
['text':' call stack when the FrontendError was raised','line_number':159,'multiline':False]
['text':' If we don't have a specific token, we default to length of 1','line_number':172,'multiline':False]
['text':' Any property that should not compiled must be in this list on the Module.','line_number':211,'multiline':False]
['text':' Create Property TreeView objects from inspected property objects.','line_number':214,'multiline':False]
['text':' Get defs for each method within the current class independently','line_number':252,'multiline':False]
['text':' TODO: proper overriding analysis when implementing class inheritance','line_number':253,'multiline':False]
['text':' Get and parse the source code for this class','line_number':265,'multiline':False]
['text':' Special case for dataclasses. In general we need access to the source code for','line_number':277,'multiline':False]
['text':' an object in order to JIT compile it. But the dataclasses module dynamically synthesizes','line_number':278,'multiline':False]
['text':' magic methods for classes, and we can't get the source code for these methods. As a','line_number':279,'multiline':False]
['text':' workaround, we synthesize TorchScript-friendly implementations ourselves.','line_number':280,'multiline':False]
['text':' Detect whether the user manually implemented any of the magic methods. If they did,','line_number':282,'multiline':False]
['text':' we don't want to synthesize/override them.','line_number':283,'multiline':False]
['text':' Is this a magic method we can synthesize?','line_number':291,'multiline':False]
['text':' Insert a statement that assigns the first argument to the class','line_number':337,'multiline':False]
['text':' Swap out the function signature and body if it is unused','line_number':341,'multiline':False]
['text':' kwarg/vararg not supported by `build_def`','line_number':354,'multiline':False]
['text':' Replace potentially unsupported type annotations by "Any"','line_number':357,'multiline':False]
['text':' Dropping potentially unsupported return type annotation for jit._drop','line_number':360,'multiline':False]
['text':' If MonkeyType is installed, get all the consolidated type traces','line_number':364,'multiline':False]
['text':' for the arguments from type_trace_db','line_number':365,'multiline':False]
['text':' TODO: more robust handling of recognizing ignore context manager','line_number':382,'multiline':False]
['text':' checks if the statement is torch.jit.ignore context manager','line_number':384,'multiline':False]
['text':' extract torch part','line_number':386,'multiline':False]
['text':' there should be at most two nested attributes (e.g torch.jit._IgnoreContextManager)','line_number':394,'multiline':False]
['text':' kw_defaults is a list of the values for the kwargs (which default to None),','line_number':456,'multiline':False]
['text':' so they don't actually have line numbers.','line_number':457,'multiline':False]
['text':' List of Tuple of args and type as inferred by profile directed typing','line_number':463,'multiline':False]
['text':' NB: In Python3 py_arg is a pair of (str arg, expr? annotation)','line_number':495,'multiline':False]
['text':' parse the context manager to figure out inputs and outputs','line_number':514,'multiline':False]
['text':' with their annotated types','line_number':515,'multiline':False]
['text':' TODO: add input, output validator','line_number':516,'multiline':False]
['text':' extension will be based on the full path filename plus','line_number':530,'multiline':False]
['text':' the line number of original context manager','line_number':531,'multiline':False]
['text':' build the replacement function str with given inputs and outputs','line_number':554,'multiline':False]
['text':' first create the functionDef object from just declaration','line_number':564,'multiline':False]
['text':' dump the body of context manager to dummy function','line_number':567,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':568,'multiline':False]
['text':' insert return statement to the function','line_number':570,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':572,'multiline':False]
['text':' registers the custom function in the global context','line_number':574,'multiline':False]
['text':' noqa: P204','line_number':577,'multiline':False]
['text':' build the statements as:','line_number':579,'multiline':False]
['text':' <out_1>, <out_2>, ... = torch.jit.frontend.<func>(<in_1>, <in_2>)','line_number':580,'multiline':False]
['text':' this function will be registered in torch.jit.frontend module by default','line_number':582,'multiline':False]
['text':' Get methods (except static methods because those are compiled separately as','line_number':618,'multiline':False]
['text':' if they were independent script functions).','line_number':619,'multiline':False]
['text':' Get method defaults. Property defaults do not need to be considered','line_number':627,'multiline':False]
['text':' because setters cannot be invoked without a value.','line_number':628,'multiline':False]
['text':' If a statement is a string literal expression,','line_number':672,'multiline':False]
['text':' then it is a docstring. Just ignore it.','line_number':673,'multiline':False]
['text':' Disallow type annotations on instance attributes outside of __init__','line_number':689,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':692,'multiline':False]
['text':' TODO: try to recover the location of else:? Python doesn't give us useful','line_number':755,'multiline':False]
['text':' annotations in this case','line_number':756,'multiline':False]
['text':' Handle ignore context manager','line_number':816,'multiline':False]
['text':' expr.attr is just a string, so it's not annotated in any way, so we have','line_number':873,'multiline':False]
['text':' to build the range manually','line_number':874,'multiline':False]
['text':' Skip whitespace','line_number':881,'multiline':False]
['text':' XXX: we could do a better job at figuring out the range for the name here','line_number':897,'multiline':False]
['text':' len("...") == 3','line_number':909,'multiline':False]
['text':' NB: `not in` is just `not( in )`, so we don't introduce new tree view','line_number':1026,'multiline':False]
['text':' but just make it a nested call in our tree view structure','line_number':1027,'multiline':False]
['text':' N-dimensional indexing using Tuple: x[(i, j, k)] is equivalent to x[i, j, k]','line_number':1088,'multiline':False]
['text':' XXX: Indexing using a list is **different**! It triggers advanced indexing.','line_number':1089,'multiline':False]
['text':' `col_offset` is an int, but `end_col_offset` is','line_number':1094,'multiline':False]
['text':' `Optional[int]`. The magic number is here to make','line_number':1095,'multiline':False]
['text':' sure we can parse `()` on any machine','line_number':1096,'multiline':False]
['text':' In Python3.9 array indicies are not wrapped in ast.Index','line_number':1114,'multiline':False]
['text':' N-dimensional indexing using Tuple: x[(i, j, k)] is equivalent to x[i, j, k]','line_number':1116,'multiline':False]
['text':' Special-case logic for `typing.Tuple[()]`','line_number':1123,'multiline':False]
['text':' See note above r.e. magic number','line_number':1125,'multiline':False]
['text':' Ellipsis (can only happen in Python 2)','line_number':1133,'multiline':False]
['text':' NB: this check has to happen before the int check because bool is','line_number':1173,'multiline':False]
['text':' a subclass of int','line_number':1174,'multiline':False]
['text':' Convert Generator expression to ListComp','line_number':1234,'multiline':False]
