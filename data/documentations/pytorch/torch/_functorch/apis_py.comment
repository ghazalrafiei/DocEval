['text':' NOTE: We allow Dynamo to see this file (via torch/_dynamo/skipfiles.py) so that it can','line_number':1,'multiline':False]
['text':'       trace through functorch transforms.','line_number':2,'multiline':False]
['text':'       Currently, we can't allow Dynamo to see `eager_transforms.py`/`vmap.py` as that break a lot of thing','line_number':3,'multiline':False]
['text':'       and there isn't a mechanism to selectively expose only some functions (eg. grad) from a file','line_number':4,'multiline':False]
['text':'       to Dynamo.','line_number':5,'multiline':False]
['text':' vmap(func)(inputs) wraps all Tensor inputs to be batched in BatchedTensors,','line_number':12,'multiline':False]
['text':' sends those into func, and then unwraps the output BatchedTensors. Operations','line_number':13,'multiline':False]
['text':' on BatchedTensors perform the batched operations that the user is asking for.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' vmap's randomness behavior differs from JAX's, which would require a PRNG key','line_number':16,'multiline':False]
['text':' to be passed everywhere.','line_number':17,'multiline':False]
['text':' @functools.wraps(func)','line_number':186,'multiline':False]
['text':' transpose chunk dim and flatten structure','line_number':245,'multiline':False]
['text':' chunks_flat_args is a list of flatten args','line_number':246,'multiline':False]
['text':' Chunk flat arguments','line_number':254,'multiline':False]
['text':' Apply vmap on chunks','line_number':257,'multiline':False]
['text':' To avoid cyclical dependency.','line_number':358,'multiline':False]
