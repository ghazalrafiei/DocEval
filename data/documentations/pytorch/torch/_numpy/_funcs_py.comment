['text':' _funcs_impl.py contains functions which mimic NumPy's eponymous equivalents,','line_number':7,'multiline':False]
['text':' and consume/return PyTorch tensors/dtypes.','line_number':8,'multiline':False]
['text':' They are also type annotated.','line_number':9,'multiline':False]
['text':' Pull these functions from _funcs_impl and decorate them with @normalizer, which','line_number':10,'multiline':False]
['text':' - Converts any input `np.ndarray`, `torch._numpy.ndarray`, list of lists, Python scalars, etc into a `torch.Tensor`.','line_number':11,'multiline':False]
['text':' - Maps NumPy dtypes to PyTorch dtypes','line_number':12,'multiline':False]
['text':' - If the input to the `axis` kwarg is an ndarray, it maps it into a tuple','line_number':13,'multiline':False]
['text':' - Implements the semantics for the `out=` arg','line_number':14,'multiline':False]
['text':' - Wraps back the outputs into `torch._numpy.ndarrays`','line_number':15,'multiline':False]
['text':' We fill in __all__ in the loop below','line_number':25,'multiline':False]
['text':' decorate implementer functions with argument normalizers and export to the top namespace','line_number':28,'multiline':False]
['text':' normalized manually','line_number':35,'multiline':False]
