['text':' NOTE: This is a placeholder for iterating on export serialization schema design.','line_number':1,'multiline':False]
['text':'       Anything is subject to change and no guarantee is provided at this point.','line_number':2,'multiline':False]
['text':' NOTE: Please update this value if any modifications are made to the schema','line_number':9,'multiline':False]
['text':' TODO (zhxchen17) Move to a separate file.','line_number':13,'multiline':False]
['text':' type: ignore[arg-type]','line_number':18,'multiline':False]
['text':' type: ignore[arg-type, misc]','line_number':21,'multiline':False]
['text':' type: ignore[arg-type]','line_number':25,'multiline':False]
['text':' type: ignore[arg-type]','line_number':31,'multiline':False]
['text':' This is for storing the symbolic expressions behind symints/symfloats/symbools','line_number':91,'multiline':False]
['text':' For example, we can get something like','line_number':92,'multiline':False]
['text':' SymExpr(expr_str="s0 + s1", hint=SymExprHint(as_int=4)','line_number':93,'multiline':False]
['text':' if we also have the hint that s0 and s1 are both 2.','line_number':94,'multiline':False]
['text':' In most cases we will use the "as_name" field to store arguments which are','line_number':124,'multiline':False]
['text':' SymInts.','line_number':125,'multiline':False]
['text':' The "as_int" field is used in the case where we have a list containing a mix','line_number':126,'multiline':False]
['text':' of SymInt and ints (ex. [1, s0, ...]). We will serialize this type of list to','line_number':127,'multiline':False]
['text':' be List[SymIntArgument] and map the SymInts to the "as_name" field, and ints','line_number':128,'multiline':False]
['text':' to the "as_int" field.','line_number':129,'multiline':False]
['text':' In most cases we will use the "as_name" field to store arguments which are','line_number':136,'multiline':False]
['text':' SymBools.','line_number':137,'multiline':False]
['text':' The "as_bool" field is used in the case where we have a list containing a mix','line_number':138,'multiline':False]
['text':' of SymBool and bools (ex. [True, i0, ...]). We will serialize this type of list to','line_number':139,'multiline':False]
['text':' be List[SymboolArgument] and map the SymBools to the "as_name" field, and bools','line_number':140,'multiline':False]
['text':' to the "as_bool" field.','line_number':141,'multiline':False]
['text':' This is use for storing the contents of a list which contain optional tensors','line_number':153,'multiline':False]
['text':' (Tensor?[], ex. [Tensor, None, ...]), where the list will be serialized to the','line_number':154,'multiline':False]
['text':' type List[OptionalTensorArgument], with tensor values seiralized to the','line_number':155,'multiline':False]
['text':' "as_tensor" field, and None values serialized to the "as_none" field.','line_number':156,'multiline':False]
['text':' This is actually a union type','line_number':174,'multiline':False]
['text':' Argument name from the operator schema','line_number':203,'multiline':False]
['text':' This is for deserializing the submodule graphs from higher order ops','line_number':224,'multiline':False]
['text':' (ex. cond, map) where single tensor returns will just return a single','line_number':225,'multiline':False]
['text':' tensor, rather than following export schema and returning a singleton','line_number':226,'multiline':False]
['text':' list.','line_number':227,'multiline':False]
['text':' Actually, only tensors and SymInts are allowed here','line_number':233,'multiline':False]
['text':' These are serialized by calling pytree.treespec_loads','line_number':317,'multiline':False]
['text':' And deserialized by calling pytree.treespec_dumps','line_number':318,'multiline':False]
['text':' This is used for unflattening, by tracking the calling structure of all of','line_number':333,'multiline':False]
['text':' the modules in order to unflatten the modules back to the eager calling','line_number':334,'multiline':False]
['text':' conventions.','line_number':335,'multiline':False]
['text':' Key is the opset namespace (ex. aten), and value is the version number','line_number':342,'multiline':False]
