['text':' Convert simple sympy Integers into concrete int','line_number':28,'multiline':False]
['text':' In general, we may have to deal the case such as: ret[1].shape[0].','line_number':88,'multiline':False]
['text':' We need first find out what symbols require assertion, then we need to follow the path','line_number':89,'multiline':False]
['text':' from ret to the symbol, construct the proxies along the way and construct the messages','line_number':90,'multiline':False]
['text':' piece-wise at the same time.','line_number':91,'multiline':False]
['text':'','line_number':92,'multiline':False]
['text':' We use post-order traversal to collect all the proxies callbacks needed, construct','line_number':93,'multiline':False]
['text':' the error message callbacks, and at the top-level traversal tree we execute all the callbacks.','line_number':94,'multiline':False]
['text':' We need the callbacks because, in order to call the function to create a proxy for shape[0], we','line_number':95,'multiline':False]
['text':' need the proxy for shape, which further requires the proxy for ret[1], etc.','line_number':96,'multiline':False]
['text':' We only care about unbacked symints for these inline','line_number':105,'multiline':False]
['text':' constraints, which are prefixed with 'i'','line_number':106,'multiline':False]
['text':' Add runtime asserts for inline constraints','line_number':139,'multiline':False]
['text':' Sometimes this pass would return a wrong graph where we have mismatched','line_number':142,'multiline':False]
['text':' node names in signature. Before we fix it, let's just skip it.','line_number':143,'multiline':False]
['text':' Populate the stack trace with dummy vals to respect IR','line_number':147,'multiline':False]
['text':' Add runtime asserts for input shape constraints. We do this after all','line_number':175,'multiline':False]
['text':' placeholder nodes so that we can handle both (unary) predicates and','line_number':176,'multiline':False]
['text':' (binary) relations.','line_number':177,'multiline':False]
['text':' it has to be a prim value','line_number':189,'multiline':False]
['text':' If the shape is dynamic, add range assertions','line_number':203,'multiline':False]
['text':' If no dynamism is specified, we assume all dimensions #','line_number':210,'multiline':False]
['text':' are specialized','line_number':211,'multiline':False]
['text':' Add runtime assertions on equality constraints on the inputs','line_number':217,'multiline':False]
['text':' TODO (tmanlaibaatar) we are making an assumption that graph generated for','line_number':262,'multiline':False]
['text':' input dim N >=2 generalizes to N < 2. Ideally we should check that:','line_number':263,'multiline':False]
['text':' 1. if we can generalize to N < 2, not add any assertion saying N >= 2','line_number':264,'multiline':False]
['text':' 2. If we can't generalize to N < 2, add an assertion saying N >= 2','line_number':265,'multiline':False]
['text':' Above can be achieved via a separate pass.','line_number':266,'multiline':False]
