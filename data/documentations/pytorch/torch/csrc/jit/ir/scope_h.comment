['text':' namespace utils','line_number':17,'multiline':False]
['text':' Scope is a node of a trie that represents the tree of nested scopes.','line_number':19,'multiline':False]
['text':' Individual scopes are pushed and popped from Graph, which holds a','line_number':20,'multiline':False]
['text':' pointer to the current scope. Each Node in Graph holds a pointer','line_number':21,'multiline':False]
['text':' to the scope that was current when the node was created.','line_number':22,'multiline':False]
['text':' The trie never needs to shrink, it only grows until it is disposed','line_number':23,'multiline':False]
['text':' of when Graph is deallocated. Hence, pointers to scopes held by nodes','line_number':24,'multiline':False]
['text':' will always be valid as long as Graph is alive.','line_number':25,'multiline':False]
['text':'*
 * ModuleInstanceInfo is a structure to include the module type and instance
 * name. It also provide public methods to get the pointer to module type and
 * instance name.
 *
 * This structure is mainly used as a private member in InlinedCallStack, such
 * that one can follow the callstack to find the relevant module hierarchy.
 ','line_number':61,'multiline':True]
['text':'*
 * InlinedCallStack is an element in a list representing callstack of functions
 * that have been inlined.
 *
 * Each such element holds info about the current callsite (Function and
 * SourceRange) and a pointer to the next element in the list. The last element
 * in the list represents the innermost function that was inlined.
 *
 * For instance, if a node has a callstack
 *    [foo, source_range1] -> [bar, source_range2]
 * it means that this node was originally from function 'bar' that was called
 * at 'source_range2' in function 'foo' that was called in the current function
 * at 'source_range1'.
 *
 * If a node did not come from any inlined function, its callstack will be
 * empty.
 *
 * The callstack lists only grow, we never remove elements from them, which
 * allows us to reuse same elements in different lists. For instance, if we
 * inline function 'bar' to 'foo' and then inline 'foo' to two functions 'ham'
 * and 'baz', the callstacks would look like:
 *
 *  [baz, source_range3]  --
 *                           \
 *                             --> [foo, source_range1] -> [bar, source_range2]
 *                           /
 *  [ham, source_range4]  --
 ','line_number':93,'multiline':True]
['text':' Reason for fn_name_ even though we have fn_','line_number':129,'multiline':False]
['text':' Serialized callstack is used in circustmances where InlinedCallstack','line_number':130,'multiline':False]
['text':' cannot be constructed during runtime, e.g. mobile runtime or','line_number':131,'multiline':False]
['text':' delegated backends.','line_number':132,'multiline':False]
['text':' Since in those cases we do not have Function* we store function name','line_number':133,'multiline':False]
['text':' fn_name does not give you access to the same information that Function*','line_number':134,'multiline':False]
['text':' does, however in mobile/delegated backend runtime we use InlindedCallStack','line_number':135,'multiline':False]
['text':' for exception stack and for that purpose fn_name_ suffices.','line_number':136,'multiline':False]
['text':' Constructor for a leaf callstack node.','line_number':143,'multiline':False]
['text':' Constructor for a leaf callstack node.','line_number':146,'multiline':False]
['text':' Constructor for a leaf callstack node.','line_number':152,'multiline':False]
['text':' Constructor for an inner callstack node.','line_number':159,'multiline':False]
['text':' Return next element in the callstack list.','line_number':178,'multiline':False]
['text':' Return module instance associated with the current element.','line_number':181,'multiline':False]
['text':' Returns the source range of the node','line_number':184,'multiline':False]
['text':' Return callstack as a vector of [Function, SourceRange] pairs.','line_number':191,'multiline':False]
['text':' No need to compare fn_, since source_range equivalence check','line_number':197,'multiline':False]
['text':' should suffice.','line_number':198,'multiline':False]
['text':' {source range, node name, InlinedCallStack}','line_number':211,'multiline':False]
['text':' We store node name because same debug infor will be used for','line_number':212,'multiline':False]
['text':' profiling as well, so we need to know op names as well.','line_number':213,'multiline':False]
['text':' namespace jit','line_number':219,'multiline':False]
['text':' namespace torch','line_number':220,'multiline':False]
