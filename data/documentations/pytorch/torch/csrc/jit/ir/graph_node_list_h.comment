['text':' Intrusive doubly linked lists with sane reverse iterators.','line_number':8,'multiline':False]
['text':' The header file is named generic_graph_node_list.h because it is ONLY','line_number':9,'multiline':False]
['text':' used for Graph's Node lists, and if you want to use it for other','line_number':10,'multiline':False]
['text':' things, you will have to do some refactoring.','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' At the moment, the templated type T must support a few operations:','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':'  - It must have a field: T* next_in_graph[2] = { nullptr, nullptr };','line_number':15,'multiline':False]
['text':'    which are used for the intrusive linked list pointers.','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':'  - It must have a method 'destroy()', which removes T from the','line_number':18,'multiline':False]
['text':'    list and frees a T.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' In practice, we are only using it with Node and const Node.  'destroy()'','line_number':21,'multiline':False]
['text':' needs to be renegotiated if you want to use this somewhere else.','line_number':22,'multiline':False]
['text':'','line_number':23,'multiline':False]
['text':' Regardless of the iteration direction, iterators always physically point','line_number':24,'multiline':False]
['text':' to the element they logically point to, rather than','line_number':25,'multiline':False]
['text':' the off-by-one behavior for all standard library reverse iterators like','line_number':26,'multiline':False]
['text':' std::list.','line_number':27,'multiline':False]
['text':' The list is includes two sentinel nodes, one at the beginning and one at the','line_number':29,'multiline':False]
['text':' end with a circular link between them. It is an error to insert nodes after','line_number':30,'multiline':False]
['text':' the end sentinel node but before the beginning node:','line_number':31,'multiline':False]
['text':' Visualization showing only the next() links:','line_number':33,'multiline':False]
['text':'  HEAD -> first -> second  -> ... -> last -> TAIL','line_number':34,'multiline':False]
['text':'   ^------------------------------------------','line_number':35,'multiline':False]
['text':' Visualization showing only the prev() links:','line_number':37,'multiline':False]
['text':'  HEAD <- first <- second  <- ... <- last <- TAIL','line_number':38,'multiline':False]
['text':'   ------------------------------------------^','line_number':39,'multiline':False]
['text':' erase cur without invalidating this iterator','line_number':96,'multiline':False]
['text':' named differently from destroy so that ->/. bugs do not','line_number':97,'multiline':False]
['text':' silently cause the wrong one to be called.','line_number':98,'multiline':False]
['text':' iterator will point to the previous entry after call','line_number':99,'multiline':False]
['text':' direction 0 is forward 1 is reverse, see next_in_graph','line_number':114,'multiline':False]
['text':' both head and tail are sentinel nodes','line_number':167,'multiline':False]
['text':' the first real node is head->next_in_graph[d]','line_number':168,'multiline':False]
['text':' the tail sentinel is head->next_in_graph[!d]','line_number':169,'multiline':False]
['text':' namespace jit','line_number':187,'multiline':False]
['text':' namespace torch','line_number':188,'multiline':False]
['text':' namespace std','line_number':201,'multiline':False]
