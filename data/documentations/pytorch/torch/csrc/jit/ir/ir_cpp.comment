['text':' namespace utils','line_number':49,'multiline':False]
['text':' Constants relating to maintaining the topological index of nodes.','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':' Lower and upper bounds of the index. Inclusive range.','line_number':55,'multiline':False]
['text':' How far away to space nodes that are appended to the graph.','line_number':60,'multiline':False]
['text':' should be 2^n, where:','line_number':61,'multiline':False]
['text':'   - n is the maximum number of repeated insertions without a re-index','line_number':62,'multiline':False]
['text':'   - 2^(64-n) is the maximum number of appends to the end without reindex','line_number':63,'multiline':False]
['text':' 2^40 ','line_number':64,'multiline':True]
['text':' namespace','line_number':98,'multiline':False]
['text':' NB: This overload will become ambiguous with the one Caffe2 provides in its','line_number':100,'multiline':False]
['text':' logging, if they ever intersect.','line_number':101,'multiline':False]
['text':' Can't make these two overloads directly a template, it'll be ambiguous with','line_number':122,'multiline':False]
['text':' the global printer for operator<<.','line_number':123,'multiline':False]
['text':' 1-elem tensors are usually boxed scalars, so print them like it','line_number':164,'multiline':False]
['text':' TODO: This is awful code.  Also it doesn't work on Windows.','line_number':177,'multiline':False]
['text':' Remove newlines','line_number':181,'multiline':False]
['text':' TODO(@anjali411): fix this','line_number':225,'multiline':False]
['text':' TODO: debugging mode to see the qualifier.  We definitely','line_number':282,'multiline':False]
['text':' don't want to print the qualifier since it should always','line_number':283,'multiline':False]
['text':' be attribute, but you might be able to track down a weird','line_number':284,'multiline':False]
['text':' bug by printing it out.','line_number':285,'multiline':False]
['text':' Suppress unused variable warning','line_number':302,'multiline':False]
['text':'ignore_subgraph=','line_number':322,'multiline':True]
['text':'ignore_subgraph=','line_number':328,'multiline':True]
['text':' In debug print, append file:line:col as a comment after each node','line_number':348,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':358,'multiline':False]
['text':'
  // Uncomment this to debug all_nodes issues
  {
    out << "\n";
    out << "all_nodes:\n";
    for (auto& n : all_nodes) {
      printNode(out, const_cast<Node*>(n), nullptr);
    }
  }
  ','line_number':405,'multiline':True]
['text':' These functions purposely operate on the internal members directly, to force','line_number':446,'multiline':False]
['text':' you to think about how the invariants change if you change the data','line_number':447,'multiline':False]
['text':' representation (even if the external API does not change.)','line_number':448,'multiline':False]
['text':' NB: This assert is written to assume you don't have any unattached','line_number':450,'multiline':False]
['text':' nodes.  Unattached nodes can occur while manipulations to the','line_number':451,'multiline':False]
['text':' graph are occurring.','line_number':452,'multiline':False]
['text':' Node invariants','line_number':454,'multiline':False]
['text':' - if node should live in list, nodes_iter is consistent','line_number':455,'multiline':False]
['text':' - Inputs are all marked as a use by the nodes they refer to','line_number':456,'multiline':False]
['text':' - Owning graph is non-null and consistent','line_number':457,'multiline':False]
['text':' - The "Select" invariant, when the node is MultiReturn','line_number':458,'multiline':False]
['text':'','line_number':459,'multiline':False]
['text':' The handle invariant:','line_number':460,'multiline':False]
['text':'    If a node takes a handle as an input, it is always the','line_number':461,'multiline':False]
['text':'    LAST input of the node.  There is at most one handle input.','line_number':462,'multiline':False]
['text':' WARNING: O(n^2)','line_number':467,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)','line_number':468,'multiline':False]
['text':' Use invariants','line_number':479,'multiline':False]
['text':' - Use is consistent with inputs','line_number':480,'multiline':False]
['text':' - Every user node is live (checked in Graph)','line_number':481,'multiline':False]
['text':' Node subclass invariants','line_number':486,'multiline':False]
['text':' Return uses is zero','line_number':492,'multiline':False]
['text':' Param inputs is zero','line_number':496,'multiline':False]
['text':' Python operator cconv is correct','line_number':500,'multiline':False]
['text':' TODO: add invariants','line_number':506,'multiline':False]
['text':' TODO: It's not good for these ops to be top-level, it makes cases','line_number':507,'multiline':False]
['text':' longer.','line_number':508,'multiline':False]
['text':' TODO: Typecheck the parameters','line_number':514,'multiline':False]
['text':' TODO: When lint fails, give better indication about which','line_number':520,'multiline':False]
['text':' instruction triggered the failure.','line_number':521,'multiline':False]
['text':' Graph invariants','line_number':523,'multiline':False]
['text':' Uncomment the following to see the graph','line_number':525,'multiline':False]
['text':' std::cout << *const_cast<Graph*>(this);','line_number':526,'multiline':False]
['text':' nodes','line_number':528,'multiline':False]
['text':' - nodes_ is a valid topological ordering for inputs','line_number':529,'multiline':False]
['text':' - No repeated nodes','line_number':530,'multiline':False]
['text':' - Params and return do NOT occur in nodes','line_number':531,'multiline':False]
['text':' - next_unique_ is greater than all uniques in graph','line_number':532,'multiline':False]
['text':' - uniques in all_nodes are unique','line_number':533,'multiline':False]
['text':' - every use will occur later in the toposort','line_number':534,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':553,'multiline':False]
['text':' Struct enables mutual recursion in linting methods.','line_number':560,'multiline':False]
['text':' Putting it inside Graph::lint enables access to private Graph members','line_number':561,'multiline':False]
['text':' NB: all_nodes is *unordered*','line_number':566,'multiline':False]
['text':' insertion took place','line_number':577,'multiline':False]
['text':' int default constructs to 0','line_number':583,'multiline':False]
['text':' we saw the anticipated user!','line_number':593,'multiline':False]
['text':' Check topological ordering','line_number':610,'multiline':False]
['text':' all_nodes','line_number':632,'multiline':False]
['text':' - inputs_, output_ and nodes_ are all included in all_nodes','line_number':633,'multiline':False]
['text':' - all_nodes does not contain dead nodes??? (likely to be temporarily','line_number':634,'multiline':False]
['text':' suspended).  Weaker: all_nodes contains all inputs and returns','line_number':635,'multiline':False]
['text':' - only one return node???','line_number':636,'multiline':False]
['text':' TODO: Make a more type safe std::includes wrapper which disallows use','line_number':641,'multiline':False]
['text':' on non-ordered containers','line_number':642,'multiline':False]
['text':' NB: all_nodes is *unordered*','line_number':653,'multiline':False]
['text':' we cannot destroy the output because it is used as the sentinel','line_number':744,'multiline':False]
['text':' for the nodes() list and has to remain valid for the loop','line_number':745,'multiline':False]
['text':' Empty strings are legal','line_number':839,'multiline':False]
['text':' Numbers are not legal','line_number':844,'multiline':False]
['text':' clear any old name from the map','line_number':859,'multiline':False]
['text':' allow "" to clear the uniquename','line_number':865,'multiline':False]
['text':' if someone else has this name, then rename the other value','line_number':870,'multiline':False]
['text':' Verify that new name is not used and find next usable name in case','line_number':890,'multiline':False]
['text':' suffix is used.','line_number':891,'multiline':False]
['text':' Protect 12345 integer from becoming "1,2345" if some other process sets','line_number':896,'multiline':False]
['text':' global locale For more details see','line_number':897,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/79583#issuecomment-1161260061','line_number':898,'multiline':False]
['text':' wrong name','line_number':1014,'multiline':False]
['text':' not enough inputs','line_number':1021,'multiline':False]
['text':' note: it is possible at this point that type variable matching has','line_number':1039,'multiline':False]
['text':' not resolved all type variables, e.g. if None was matched to Optional[T]','line_number':1040,'multiline':False]
['text':' we will not succeed at matching T. However None <: Optional[T] so this','line_number':1041,'multiline':False]
['text':' check can still succeed.','line_number':1042,'multiline':False]
['text':' too many inputs','line_number':1049,'multiline':False]
['text':' We can statically deduce this Node has returning None if:','line_number':1072,'multiline':False]
['text':' It's an AutogradZero node, or ...','line_number':1074,'multiline':False]
['text':' It has only one output and that output is NoneType, or ...','line_number':1076,'multiline':False]
['text':' It's a constant optional with no value in the attributes.','line_number':1078,'multiline':False]
['text':' note: some operators require the node to produce a runnable operation,','line_number':1143,'multiline':False]
['text':' which is why 'this' is passed here. getOperator() ensures that 'this'','line_number':1144,'multiline':False]
['text':' matches the schema of the returned operator.','line_number':1145,'multiline':False]
['text':' All aten ops are expecte to have a schema. However this is left as a','line_number':1154,'multiline':False]
['text':' warning instead of an assert to ensure that previous use cases do not','line_number':1155,'multiline':False]
['text':' break.','line_number':1156,'multiline':False]
['text':' It represents RPC message sent.','line_number':1186,'multiline':False]
['text':' It represents RPC message sent.','line_number':1187,'multiline':False]
['text':' It represents RPC message sent.','line_number':1188,'multiline':False]
['text':' It can represent RPC message received.','line_number':1189,'multiline':False]
['text':' TODO There is nothing in the system that relies on aten:: and prim::','line_number':1212,'multiline':False]
['text':' ops using AliasAnalysisKind::FROM_SCHEMA,','line_number':1213,'multiline':False]
['text':' AliasAnalysisKind::INTERNAL_SPECIAL_CASE, or','line_number':1214,'multiline':False]
['text':' AliasAnalysisKind::CONSERVATIVE but this is the intended behavior for all','line_number':1215,'multiline':False]
['text':' current ops and a good error check. We can consider lifting this','line_number':1216,'multiline':False]
['text':' constraint later if we have a use case for it.','line_number':1217,'multiline':False]
['text':' silence compiler warning','line_number':1238,'multiline':False]
['text':' Assign this node a topological position, to facilitate fast isBefore() and','line_number':1241,'multiline':False]
['text':' isAfter() queries. Must be called right after a node is inserted into the','line_number':1242,'multiline':False]
['text':' node list.','line_number':1243,'multiline':False]
['text':'','line_number':1244,'multiline':False]
['text':' The basic scheme is: assign every node a position (uint64_t).  The common','line_number':1245,'multiline':False]
['text':' case (appending to the end of the graph) is made more efficient by advancing','line_number':1246,'multiline':False]
['text':' a fixed interval past the previous node and placing `this` there. Otherwise,','line_number':1247,'multiline':False]
['text':' assign `this` a position at the midpoint between its prev() and next()','line_number':1248,'multiline':False]
['text':' nodes.','line_number':1249,'multiline':False]
['text':'','line_number':1250,'multiline':False]
['text':' If we ever run out of space (by, e.g. inserting too much in place), we','line_number':1251,'multiline':False]
['text':' reindex by spreading out all the nodes again.','line_number':1252,'multiline':False]
['text':' Append to the end of the graph','line_number':1260,'multiline':False]
['text':' the node list is empty, assign the first position','line_number':1263,'multiline':False]
['text':' we're running off the edge','line_number':1269,'multiline':False]
['text':' Prepend to the graph','line_number':1276,'multiline':False]
['text':' next() is the first element in the block list','line_number':1278,'multiline':False]
['text':' we're running off the edge','line_number':1280,'multiline':False]
['text':' insert between two existing nodes','line_number':1286,'multiline':False]
['text':' There was no room','line_number':1291,'multiline':False]
['text':' First we update the offsets for all existing inputs that will reside','line_number':1409,'multiline':False]
['text':' after the one we're inserting. Concretely, these are the inputs at','line_number':1410,'multiline':False]
['text':' indices [i, # input). Since we're inserting one input before all of','line_number':1411,'multiline':False]
['text':' these inputs, increment their use offsets for this value by 1','line_number':1412,'multiline':False]
['text':' See Note [User node does not uniquely identify use]','line_number':1414,'multiline':False]
['text':' Insert the actual input at the specified index','line_number':1418,'multiline':False]
['text':' Register the new use of the value we're inserted as an input.','line_number':1420,'multiline':False]
['text':' These nodes don't share a common block. Traverse the blockchains upward','line_number':1484,'multiline':False]
['text':' until we find the first common block.','line_number':1485,'multiline':False]
['text':' should never reach here, since both nodes are ultimately in the same graph','line_number':1504,'multiline':False]
['text':' everything after this input shifts left,','line_number':1555,'multiline':False]
['text':' so we need to update their use offsets to match','line_number':1556,'multiline':False]
['text':' O(N) on the use list, but unless we get nodes with +100 uses','line_number':1611,'multiline':False]
['text':' vector traversal still is probably faster than linked list','line_number':1612,'multiline':False]
['text':' n2 contains n1','line_number':1651,'multiline':False]
['text':' Now they are the same numer of blocks from the graph block,','line_number':1658,'multiline':False]
['text':' recurse upwards, checking if they are on the same block','line_number':1659,'multiline':False]
['text':' NB: Node constructor adds node to all_nodes','line_number':1698,'multiline':False]
['text':' Suppress unused variable warning','line_number':1783,'multiline':False]
['text':' Suppress unused variable warning','line_number':1832,'multiline':False]
['text':'num_outputs=','line_number':1872,'multiline':True]
['text':'num_outputs=','line_number':1880,'multiline':True]
['text':'num_outputs','line_number':1890,'multiline':True]
['text':'num_outputs','line_number':1896,'multiline':True]
['text':'num_outputs','line_number':1903,'multiline':True]
['text':' Unwrap the type to determine the number of dimensions.','line_number':1918,'multiline':False]
['text':' Encode the base element type as an integer.','line_number':1924,'multiline':False]
['text':' Pass in the number of dimensions and base element type as arguments','line_number':1941,'multiline':False]
['text':' to the op.','line_number':1942,'multiline':False]
['text':' n can be from a different graph','line_number':1980,'multiline':False]
['text':' small peephole optimization to ensure IntArrayRef attributes can still turn','line_number':2043,'multiline':False]
['text':' into constants e.g. in x.expand([3, 4])','line_number':2044,'multiline':False]
['text':' We updated the inlined callstack of new_node.','line_number':2091,'multiline':False]
['text':' Same must be done for the nodes of the blocks of new_node.','line_number':2092,'multiline':False]
['text':' For example If node's block otherwise is not annotated appropriately.','line_number':2093,'multiline':False]
['text':' This CallMethod must correspond to method of the same object','line_number':2123,'multiline':False]
['text':' to which this graph belongs.','line_number':2124,'multiline':False]
['text':' Not sure if it is possible to come here ever.','line_number':2128,'multiline':False]
['text':' TODO: Remove this else. Or add assert','line_number':2129,'multiline':False]
['text':' TODO: We might need to use nodes_map instead of value_map. Otherwise, we','line_number':2135,'multiline':False]
['text':' are missing nodes without outputs (e.g. prim::Print).','line_number':2136,'multiline':False]
['text':' Skip the old value if it is the graph input.
     * The reason is that, value_map contains values not all for the nodes of
     * the graph but primary inputs as well, and it will create duplicates when
     * the first inlined graph is input to the next one. To avoid this issue,
     * skip the old value when it is one of the
     * callee->optimized_graph()->inputs() or callee->graph()->inputs(), depends
     * on if it is inlined_optimized_graph
     ','line_number':2139,'multiline':True]
['text':' inline_optimized_graph argument is used in substitute function call for','line_number':2179,'multiline':False]
['text':' ONNX conversion','line_number':2180,'multiline':False]
['text':'=true','line_number':2184,'multiline':True]
['text':' if this was a peephole tuple unpack we can just get rid of','line_number':2200,'multiline':False]
['text':' the tuple construct here and prevent needing DCE','line_number':2201,'multiline':False]
['text':' namespace torch::jit','line_number':2324,'multiline':False]
