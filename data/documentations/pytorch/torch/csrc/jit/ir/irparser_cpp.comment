['text':'parse_complete_tensor_types','line_number':38,'multiline':True]
['text':' Parse string or numeric literal and return it along with its type.','line_number':168,'multiline':False]
['text':' Type literal','line_number':230,'multiline':False]
['text':' these values will be set with randomly initialized data in','line_number':249,'multiline':False]
['text':' a post processing pass;','line_number':250,'multiline':False]
['text':'* \brief Parse attribute and add it to the node N.
 *
 * The function determines the attribute type (string, int, float, complex, list
 * of strings, list of ints, list of floats, list of complex, and a list of
 * tensors (currently only for empty lists)). An attribute looks like the
 * following: AttrName=AttrValue Where AttrValue can be a list or a scalar
 * literal, e.g.: size = 27 name = "Bob" coefs = [1.2, 3.4, 0.6]
 ','line_number':291,'multiline':True]
['text':' list','line_number':303,'multiline':False]
['text':' ignore the annotations on the IValue constants, and instead recover','line_number':374,'multiline':False]
['text':' type from the Node output','line_number':375,'multiline':False]
['text':' Note: we could also use script_type_parser','line_number':376,'multiline':False]
['text':' expect an empty definition (note - this isn't always true)','line_number':379,'multiline':False]
['text':' scalar','line_number':390,'multiline':False]
['text':' initialized with random data later','line_number':409,'multiline':False]
['text':' If the name isn't valid, don't use it','line_number':443,'multiline':False]
['text':'* \brief Parse a block.
 *
 * It should look like the following:
 * blockName(input1, input2, input3, ...):
 *   op1
 *   op2
 *   ...
 *   opN
 *   -> (output1, output2, output3, ...)
 ','line_number':460,'multiline':True]
['text':' Block name is not used anywhere.','line_number':472,'multiline':False]
['text':'* \brief Parse a list of statements.
 *
 * It is expected to be delimited by TK_NEWLINE and end with TK_RETURN or
 * TK_ARROW.
 ','line_number':479,'multiline':True]
['text':'* \brief Parse a statement.
 *
 * It should look like the following:
 *   <outputs> = NodeName[<attributes>](<inputs>)
 *     <blocks>
 * Outputs, blocks and attributes are optional.
 ','line_number':499,'multiline':True]
['text':' Parse lefthand side.','line_number':507,'multiline':False]
['text':' Parse the name and create the corresponding node in the graph.','line_number':511,'multiline':False]
['text':' Parse attributes and inputs.','line_number':517,'multiline':False]
['text':' Register outputs.','line_number':522,'multiline':False]
['text':' Don't currently support checking against type variables','line_number':538,'multiline':False]
['text':' TODO: support?','line_number':539,'multiline':False]
['text':' Insert the new node into block B.','line_number':555,'multiline':False]
['text':' If the statement has nested blocks, parse them:','line_number':558,'multiline':False]
['text':' If the name isn't valid, don't use it','line_number':568,'multiline':False]
['text':'* \brief Parse return statement.
 *
 * It should look like the following:
 *   return (x : TypeX, y : TypeY, z, ...)
 ','line_number':575,'multiline':True]
['text':' Parse output names and types','line_number':583,'multiline':False]
['text':' Consume ending tokens','line_number':589,'multiline':False]
['text':'* \brief Parse entire graph.
 *
 * It should look like the following:
 *   graphName (input1, input2, ... inputN):
 *     op1
 *     op2
 *     ...
 *     opN
 *     return (output1, output2, ... outputN)
 ','line_number':596,'multiline':True]
['text':' Parse graph definition, it should look like the following:','line_number':607,'multiline':False]
['text':' graphName (input1, input2, ... inputN):','line_number':608,'multiline':False]
['text':' After the definition we should have a list of statements, parse it:','line_number':613,'multiline':False]
['text':' The last statement should be return, which specifies graph outputs','line_number':616,'multiline':False]
['text':' namespace torch::jit','line_number':675,'multiline':False]
