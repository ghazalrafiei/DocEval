['text':'*
 * \brief A class implementing an API for comparing subgraphs.
 ','line_number':11,'multiline':True]
['text':'*
   * \brief Compare matchGraph with the part of the graph denoted by a node \p
   * ANCHOR.
   *
   * The anchor node would be compared against the deepest node in the
   * match-graph. A node is considered matching if its number of inputs/outputs
   * is the same as in the corresponding matchGraph node, its type is the same,
   * and all nodes producing input-values also match.
   ','line_number':18,'multiline':True]
['text':'* \brief Return match map for nodes. ','line_number':29,'multiline':True]
['text':'* \brief Return match map for values. ','line_number':34,'multiline':True]
['text':'*
 * \brief A function to verify that \p PATTERN is valid. Concrete requirements
 * for validity can be found in subgraph_matcher.h.
 ','line_number':54,'multiline':True]
['text':' Verify that pattern graph has a single block.','line_number':59,'multiline':False]
['text':' TODO: Verify that nodes in the pattern don't alias.','line_number':66,'multiline':False]
['text':'*
 * Compare two Values. V1 is from pattern, V2 is from the actual graph.
 *
 * The values are considered matching if:
 * 1) the nodes defining them match
 * 2) they have the same number of uses, except they are entry or exit nodes.
 ','line_number':83,'multiline':True]
['text':' Check if we've already visited these values.','line_number':91,'multiline':False]
['text':' When V2 is ANCHOR, we're comparing exiting values, and when V1->node is','line_number':109,'multiline':False]
['text':' PARAM, we're comparing entering values - in these two cases the number of','line_number':110,'multiline':False]
['text':' uses don't need to be the same.','line_number':111,'multiline':False]
['text':' Add the values to the map before calling matchNodes to avoid infinite','line_number':122,'multiline':False]
['text':' recursion.','line_number':123,'multiline':False]
['text':' Other attributes types not supported yet','line_number':207,'multiline':False]
['text':'*
 * Compare two Nodes. N1 is from pattern, N2 is from the actual graph.
 *
 * The nodes are considered matching if:
 * 1) N1 and N2 are of the same kind.
 * 2) Number of inputs and outputs is the same.
 * 3) All input and output values match.
 *
 * A special case is when N1 is PARAM - this is considered outside the pattern,
 * so it matches everything.
 ','line_number':226,'multiline':True]
['text':' Check if we've already visited these nodes.','line_number':238,'multiline':False]
['text':' Param node in pattern graph matches everything.','line_number':243,'multiline':False]
['text':' We don't allow matches to span across blocks, so check if N2 is in the same','line_number':249,'multiline':False]
['text':' block as the first (anchor) node.','line_number':250,'multiline':False]
['text':' Special handling for matching modules','line_number':259,'multiline':False]
['text':' Add nodes to the map before calling matchValues to avoid infinite','line_number':296,'multiline':False]
['text':' recursion.','line_number':297,'multiline':False]
['text':'*
 * Recursively try to match pattern with the actual graph starting from the
 * exiting node in the pattern and anchor node in the actual graph.
 ','line_number':314,'multiline':True]
['text':' unnamed namespace','line_number':339,'multiline':False]
['text':' Main entry point for the subgraph matching.','line_number':341,'multiline':False]
['text':' Iterate over all nodes in the graph (including nodes in subblocks) trying','line_number':351,'multiline':False]
['text':' to match the pattern each node.','line_number':352,'multiline':False]
['text':' namespace torch::jit','line_number':369,'multiline':False]
