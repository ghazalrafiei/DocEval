['text':' A stringlike class backed by a vector of string_view','line_number':20,'multiline':False]
['text':' the string represented are logically the concatenation of  the string_views','line_number':21,'multiline':False]
['text':' This has advantage of not needing continues memory.','line_number':22,'multiline':False]
['text':' returns rest of the line of the current iterator','line_number':143,'multiline':False]
['text':' Source represents a code segment. It keeps track of:','line_number':182,'multiline':False]
['text':'  - text_view : the view into text of the code segment','line_number':183,'multiline':False]
['text':'  - filename (optional) : if present, represents the name of the file from','line_number':184,'multiline':False]
['text':'                          which the code segment originated.','line_number':185,'multiline':False]
['text':'  - starting_line_no : represents the line in the original file where the','line_number':186,'multiline':False]
['text':'                       code segment started.','line_number':187,'multiline':False]
['text':' Whether or not Source should copy the string passed in the constructor.','line_number':189,'multiline':False]
['text':' Given a line number (within source_), return the byte offset of the','line_number':223,'multiline':False]
['text':' beginning of that line.','line_number':224,'multiline':False]
['text':' Returns number of lines present.','line_number':229,'multiline':False]
['text':' Calculate the line (within the code segment) on which `offset` resides.','line_number':234,'multiline':False]
['text':' Calculate the line (within the original source file, if present) on which','line_number':241,'multiline':False]
['text':' `lineno` resides.','line_number':242,'multiline':False]
['text':' If filename_ is not present, starting_line_no_ is don't care','line_number':296,'multiline':False]
['text':' Starting offsets for lines into the source. e.g. line 0 starts at','line_number':298,'multiline':False]
['text':' line_starting_offsets_[0], etc.','line_number':299,'multiline':False]
['text':' A SourceRange is a reference to subset of a Source, specified by `start` and','line_number':305,'multiline':False]
['text':' `end` byte offsets into the source text.','line_number':306,'multiline':False]
['text':' Customizable version of 'highlight' method.','line_number':340,'multiline':False]
['text':' TODO: c10::optional<>::value returns an rvalue ref so can't use it here??','line_number':369,'multiline':False]
['text':' OwnedSourceRange is just like a SourceRange except that it owns a `Source`','line_number':401,'multiline':False]
['text':' instead of `Source`. Thus OwnedSourceRange owns a copy of source text.','line_number':402,'multiline':False]
['text':' A pair of (byte offset, SourceRange) describing a specific segment','line_number':435,'multiline':False]
['text':' of the output stream','line_number':436,'multiline':False]
['text':' namespace jit','line_number':447,'multiline':False]
['text':' namespace torch','line_number':448,'multiline':False]
['text':' namespace std','line_number':459,'multiline':False]
