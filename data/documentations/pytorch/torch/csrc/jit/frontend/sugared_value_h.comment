['text':' The AST can contain nodes like `self`, `self.b` or `python_fn` that','line_number':21,'multiline':False]
['text':' are not first-class values in the graph representation, but instead','line_number':22,'multiline':False]
['text':' will be desugared based on how they are used in the AST.','line_number':23,'multiline':False]
['text':' SugaredValue is used to temporarily represent these values in a way','line_number':25,'multiline':False]
['text':' that separates their behavior from the AST -> IR converter itself.','line_number':26,'multiline':False]
['text':' This allows us to keep dependencies on python minimal.','line_number':27,'multiline':False]
['text':' what is this node? for error reporting (e.g. Module, python function)','line_number':31,'multiline':False]
['text':' what can we do with this thing?','line_number':34,'multiline':False]
['text':' use it as a value e.g.  `this + 4`','line_number':35,'multiline':False]
['text':' select an attribute on it, e.g. `this.field`','line_number':40,'multiline':False]
['text':' assign an attribute on it, e.g. `this.field = newValue`','line_number':55,'multiline':False]
['text':' use it as a vector of values, e.g. a tuple of values as return value from','line_number':65,'multiline':False]
['text':' a method invocation','line_number':66,'multiline':False]
['text':' TODO @wconstab refactor to use ModuleValue::asTuple instead of new API','line_number':74,'multiline':False]
['text':' call it like a function, e.g. `outputs = this(inputs)`','line_number':87,'multiline':False]
['text':' note: names for args will be 'argument 0', 'argument 1', etc..','line_number':91,'multiline':False]
['text':' n_binders is always set to the number of variables an expression is','line_number':95,'multiline':False]
['text':' syntactically bound to:','line_number':96,'multiline':False]
['text':'     a = foo() # 1 binder (note in this case the single binder might be a','line_number':97,'multiline':False]
['text':'     tuple) a, * b = foo() # 1 binder a, b = foo() # 2 binders foo() # 0','line_number':98,'multiline':False]
['text':'     binders','line_number':99,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':' In subexpressions, like bar() in foo(bar()), n_binders is always set to','line_number':101,'multiline':False]
['text':' 1. n_binders is used as a hint to subexpressions to determine how many','line_number':102,'multiline':False]
['text':' values they should return when that number is ambiguous statically. In','line_number':103,'multiline':False]
['text':' particular it is currently used to decide how many tensors a call to a','line_number':104,'multiline':False]
['text':' python function will return. It is only a hint, functions do not have to','line_number':105,'multiline':False]
['text':' check that n_binders match the number of things they are returning, the','line_number':106,'multiline':False]
['text':' assignment logic will do that anyway.','line_number':107,'multiline':False]
['text':' This function is called when to convert a SugaredValue to its iterator.','line_number':112,'multiline':False]
['text':' For example, when iterating through a Dict we iterate over its keys','line_number':113,'multiline':False]
['text':' If we are iterating over a Sugared Value and it returns a value from this','line_number':120,'multiline':False]
['text':' function, then we emit an unrolled loop over the variable. This allows us','line_number':121,'multiline':False]
['text':' to support containers of Heterogenous types, like Module Containers &','line_number':122,'multiline':False]
['text':' Tuples','line_number':123,'multiline':False]
['text':' When iterating over this SugaredValue, should we emit the for loop as an','line_number':128,'multiline':False]
['text':' unrolled loop.','line_number':129,'multiline':False]
['text':' return length of this thing, if not then it can't be iterated.','line_number':134,'multiline':False]
['text':' If it does not have a statically-determinable length, then it cannot','line_number':135,'multiline':False]
['text':' be iterated over with a modulelist. If it does it must return a constant','line_number':136,'multiline':False]
['text':' Value *','line_number':137,'multiline':False]
['text':' expression for ith elemement for iterable value','line_number':143,'multiline':False]
['text':' most things in the environment are just simple value types','line_number':156,'multiline':False]
['text':' and not special python syntax sugar types','line_number':157,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.CallAndMessage)','line_number':162,'multiline':False]
['text':' note: names for args will be 'argument 0', 'argument 1', etc..','line_number':192,'multiline':False]
['text':' The symbol of the function (e.g. `aten::relu`).','line_number':219,'multiline':False]
['text':' if this is method, then this is the self argument.','line_number':222,'multiline':False]
['text':' try to create this builtin but if it doesn't exist or the self argument','line_number':234,'multiline':False]
['text':' cannot possibly match, then return nullptr. Use in situations where it is','line_number':235,'multiline':False]
['text':' not clear if it is a valid builtin','line_number':236,'multiline':False]
['text':' This function is called when a SugaredValue is used to convert a','line_number':289,'multiline':False]
['text':' SugaredValue to its iterator. For example, when iterating through a Dict we','line_number':290,'multiline':False]
['text':' iterate over its keys','line_number':291,'multiline':False]
['text':' Because this is used to contain SugaredValues of Heterogenous types,','line_number':297,'multiline':False]
['text':' we define staticLen() so that when this is iterated over it is emitted','line_number':298,'multiline':False]
['text':' as an unrolled loop.','line_number':299,'multiline':False]
['text':' When refering torch.autograd, it is also considered to be a','line_number':319,'multiline':False]
['text':' BuiltinModule and we will dispatch to the aten operators for the','line_number':320,'multiline':False]
['text':' methods under its module.','line_number':321,'multiline':False]
['text':' when we add operator versioning, emit this op as it exising at 'version'','line_number':331,'multiline':False]
['text':' if not set, use the latest version','line_number':332,'multiline':False]
['text':' Represents a class, analagous to `int` or `dict`. Instances of classes,','line_number':336,'multiline':False]
['text':' like `1` or `{"foo": 5}`, are represented as SimpleValues','line_number':337,'multiline':False]
['text':' Call the type's constructor, as in:','line_number':341,'multiline':False]
['text':'    n = Foo(constructor_arg)','line_number':342,'multiline':False]
['text':' TODO holding this thing is creepy','line_number':425,'multiline':False]
['text':' defines how a method obtained from a module/class/interface behaves in script','line_number':442,'multiline':False]
['text':' expressions like int(x)','line_number':504,'multiline':False]
['text':' these are the same as call prim::Int or equivalent except it','line_number':505,'multiline':False]
['text':' is a noop when the input is a subtype of 'type'','line_number':506,'multiline':False]
['text':'opname=','line_number':559,'multiline':True]
['text':'args=','line_number':560,'multiline':True]
['text':'kwargs=','line_number':561,'multiline':True]
['text':'range=','line_number':562,'multiline':True]
['text':' builtins operators and functions that call a method if it exists','line_number':570,'multiline':False]
['text':' on a class type, like 'len(x)' and 'x + y'','line_number':571,'multiline':False]
['text':' things that look like function applications, but','line_number':593,'multiline':False]
['text':' perform non-standard evaluation are represented','line_number':594,'multiline':False]
['text':' with SpecialFormValues, e.g.','line_number':595,'multiline':False]
['text':'   isinstance(x, int)','line_number':596,'multiline':False]
['text':'   fork(fn)','line_number':597,'multiline':False]
['text':'   annotate(int, 3)','line_number':598,'multiline':False]
['text':' The implementation of each value is handled by a case inside emitApplyExpr','line_number':599,'multiline':False]
['text':' matched against for special handling of range expressions','line_number':635,'multiline':False]
['text':' When Range is instantiated via enumerate(iterable_with_static_len),','line_number':655,'multiline':False]
['text':' then it takes the static length of the iterable','line_number':656,'multiline':False]
['text':' a flag to determine if it's a simple range() call with only end_ from','line_number':665,'multiline':False]
['text':' arguments If true, we will not insert length calculation and index','line_number':666,'multiline':False]
['text':' derivation nodes to simplify the graph and enable more possible','line_number':667,'multiline':False]
['text':' optimizations','line_number':668,'multiline':False]
['text':' Specialized Tree structure to matched against for special handling','line_number':673,'multiline':False]
['text':' of builtin functions iterables expressions like zip(), enumerate(), etc.','line_number':674,'multiline':False]
['text':' zip and enumerate can be modeled as a tree of SimpleValue/RangeValue:','line_number':675,'multiline':False]
['text':'    zip(x, y) ->  (x, y) with tuple assignment to each loop target','line_number':676,'multiline':False]
['text':'    enumerate(x) -> (range(0, math.inf, 1), x)','line_number':677,'multiline':False]
['text':' So a complicated expression like zip(a, enumerate(b), range(0, 100)) will be:','line_number':678,'multiline':False]
['text':' (a, (range(0, math.inf, 1), b), range(0, 100))','line_number':679,'multiline':False]
['text':' We use those base iterables to fill in the loop information like','line_number':680,'multiline':False]
['text':' max_trip_count and set the value table for loop targets','line_number':681,'multiline':False]
['text':' Iterables can contain lists of SugaredValues like ModuleLists. If it','line_number':682,'multiline':False]
['text':' does, then we emit it unrolled and require that all values it contains','line_number':683,'multiline':False]
['text':' have a statically-determinable length.','line_number':684,'multiline':False]
['text':' If this iterable contains a ModuleList or Tuple, then it will have a','line_number':713,'multiline':False]
['text':' static length, and we will emit it as an unrolled for loop.','line_number':714,'multiline':False]
['text':' given a IterableTree node, get all the base iterables/leaves under the','line_number':719,'multiline':False]
['text':' IterableTree node. This enables','line_number':720,'multiline':False]
['text':' us to get all the basic SugaredValues that contains valid loop information','line_number':721,'multiline':False]
['text':' with len() and getitem()','line_number':722,'multiline':False]
['text':' This is not a SimpleValue so it can not pass through the code paths that','line_number':758,'multiline':False]
['text':' expect a SimpleValue as a sugared value.','line_number':759,'multiline':False]
['text':' qualified python class name','line_number':774,'multiline':False]
['text':'attributes','line_number':795,'multiline':True]
['text':'n_binders','line_number':796,'multiline':True]
['text':' namespace jit','line_number':856,'multiline':False]
['text':' namespace torch','line_number':857,'multiline':False]
