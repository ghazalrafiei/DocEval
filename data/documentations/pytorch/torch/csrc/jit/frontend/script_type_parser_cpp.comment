['text':' namespace','line_number':28,'multiline':False]
['text':' `typing.Tuple` special cases syntax for empty tuple annotations,','line_number':36,'multiline':False]
['text':' i.e. `typing.Tuple[()]`. Allow for parsing an empty tuple literal','line_number':37,'multiline':False]
['text':' here. See https://docs.python.org/3/library/typing.html#typing.Tuple','line_number':38,'multiline':False]
['text':' Alias torch.nn._common_types._size_?_t to BroadcastingList?[int]','line_number':123,'multiline':False]
['text':' strlen("_size_X_t")','line_number':129,'multiline':False]
['text':' strlen("_size_");','line_number':130,'multiline':False]
['text':' handle the case where the BroadcastingList is wrapped in a Optional type','line_number':147,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':182,'multiline':False]
['text':' gets the base type name given namespaces where the types live','line_number':192,'multiline':False]
['text':' turns torch.Tensor -> Tensor, X -> X','line_number':193,'multiline':False]
['text':' Special case for torch.Tensor and its' subclasses','line_number':209,'multiline':False]
['text':' Otherwise, it's a fully qualified class name','line_number':224,'multiline':False]
['text':' the resolver needs to recursively resolve the expression, so to avoid','line_number':233,'multiline':False]
['text':' resolving all type expr subtrees we only use it for the top level','line_number':234,'multiline':False]
['text':' expression and base type names.','line_number':235,'multiline':False]
['text':' Check if the type is a custom class. This is done by checking','line_number':266,'multiline':False]
['text':' if type_name starts with "torch.classes."','line_number':267,'multiline':False]
['text':' `torch.cuda.Stream` and `torch.cuda.Event` are aliased as','line_number':273,'multiline':False]
['text':' custom classes of type torch.classes.cuda.Stream and','line_number':274,'multiline':False]
['text':' torch.classes.cuda.Event respectively. Return the respective','line_number':275,'multiline':False]
['text':' custom class types for these two cases.','line_number':276,'multiline':False]
['text':' To evaluate the default expressions, we create a graph with no inputs,','line_number':330,'multiline':False]
['text':' and whose returns are the default values we need.','line_number':331,'multiline':False]
['text':' We then run constant prop on this graph and check the results are','line_number':332,'multiline':False]
['text':' constant. This approach avoids having to have separate handling of','line_number':333,'multiline':False]
['text':' default arguments from standard expressions by piecing together existing','line_number':334,'multiline':False]
['text':' machinery for graph generation, constant propagation, and constant','line_number':335,'multiline':False]
['text':' extraction.','line_number':336,'multiline':False]
['text':'properties=','line_number':356,'multiline':True]
['text':'propResolvers=','line_number':357,'multiline':True]
['text':' XXX: We need to turn optimization off here because otherwise we try to','line_number':362,'multiline':False]
['text':' recursively initialize stuff in DecomposeOps.','line_number':363,'multiline':False]
['text':' gather any non-empty default arguments','line_number':381,'multiline':False]
['text':' We require explicit type-hints for default expressions.','line_number':387,'multiline':False]
['text':' If param doesn't have a type, we could default to "Tensor",','line_number':388,'multiline':False]
['text':' just like what happens in the Python frontend.','line_number':389,'multiline':False]
['text':' However here things are a bit more complicated, because','line_number':390,'multiline':False]
['text':' default expressions are evaluated using a custom-built','line_number':391,'multiline':False]
['text':' graph, and error messages coming out of that in case','line_number':392,'multiline':False]
['text':' the type doesn't match the value are quite obscure.','line_number':393,'multiline':False]
['text':' If this param doesn't have a type, default to "tensor"','line_number':412,'multiline':False]
['text':' BroadcastList list can only appear at the argument level','line_number':415,'multiline':False]
['text':'alias_info=','line_number':434,'multiline':True]
['text':' we represent no annoation on a return type as having no values in the','line_number':441,'multiline':False]
['text':' schema's return() list','line_number':442,'multiline':False]
['text':' in emitReturn we take the actual return value to be the value of the','line_number':443,'multiline':False]
['text':' return statement if no one was provided here','line_number':444,'multiline':False]
['text':'N =','line_number':458,'multiline':True]
['text':'default_value =','line_number':459,'multiline':True]
['text':'kwarg_only =','line_number':460,'multiline':True]
['text':' namespace torch::jit','line_number':507,'multiline':False]
