['text':' `TorchScript` offers a simple logging facility that can enabled by setting an','line_number':8,'multiline':False]
['text':' environment variable `PYTORCH_JIT_LOG_LEVEL`.','line_number':9,'multiline':False]
['text':' Logging is enabled on a per file basis. To enable logging in','line_number':11,'multiline':False]
['text':' `dead_code_elimination.cpp`, `PYTORCH_JIT_LOG_LEVEL` should be','line_number':12,'multiline':False]
['text':' set to `dead_code_elimination.cpp` or, simply, to `dead_code_elimination`','line_number':13,'multiline':False]
['text':' (i.e. `PYTORCH_JIT_LOG_LEVEL=dead_code_elimination`).','line_number':14,'multiline':False]
['text':' Multiple files can be logged by separating each file name with a colon `:` as','line_number':16,'multiline':False]
['text':' in the following example,','line_number':17,'multiline':False]
['text':' `PYTORCH_JIT_LOG_LEVEL=dead_code_elimination:guard_elimination`','line_number':18,'multiline':False]
['text':' There are 3 logging levels available for your use ordered by the detail level','line_number':20,'multiline':False]
['text':' from lowest to highest.','line_number':21,'multiline':False]
['text':' * `GRAPH_DUMP` should be used for printing entire graphs after optimization','line_number':23,'multiline':False]
['text':' passes','line_number':24,'multiline':False]
['text':' * `GRAPH_UPDATE` should be used for reporting graph transformations (i.e.','line_number':25,'multiline':False]
['text':' node deletion, constant folding, etc)','line_number':26,'multiline':False]
['text':' * `GRAPH_DEBUG` should be used for providing information useful for debugging','line_number':27,'multiline':False]
['text':'   the internals of a particular optimization pass or analysis','line_number':28,'multiline':False]
['text':' The default logging level is `GRAPH_DUMP` meaning that only `GRAPH_DUMP`','line_number':30,'multiline':False]
['text':' statements will be enabled when one specifies a file(s) in','line_number':31,'multiline':False]
['text':' `PYTORCH_JIT_LOG_LEVEL`.','line_number':32,'multiline':False]
['text':' `GRAPH_UPDATE` can be enabled by prefixing a file name with an `>` as in','line_number':34,'multiline':False]
['text':' `>alias_analysis`.','line_number':35,'multiline':False]
['text':' `GRAPH_DEBUG` can be enabled by prefixing a file name with an `>>` as in','line_number':36,'multiline':False]
['text':' `>>alias_analysis`.','line_number':37,'multiline':False]
['text':' `>>>` is also valid and **currently** is equivalent to `GRAPH_DEBUG` as there','line_number':38,'multiline':False]
['text':' is no logging level that is higher than `GRAPH_DEBUG`.','line_number':39,'multiline':False]
['text':' Prefix every line in a multiline string \p IN_STR with \p PREFIX.','line_number':67,'multiline':False]
['text':' tries to reconstruct original python source','line_number':93,'multiline':False]
['text':' use GRAPH_DUMP for dumping graphs after optimization passes','line_number':100,'multiline':False]
['text':' use GRAPH_UPDATE for reporting graph transformations (i.e. node deletion,','line_number':104,'multiline':False]
['text':' constant folding, CSE)','line_number':105,'multiline':False]
['text':' use GRAPH_DEBUG to provide information useful for debugging a particular opt','line_number':108,'multiline':False]
['text':' pass','line_number':109,'multiline':False]
['text':' use GRAPH_EXPORT to export a graph so that the IR can be loaded by a script','line_number':112,'multiline':False]
['text':' namespace jit','line_number':127,'multiline':False]
['text':' namespace torch','line_number':128,'multiline':False]
