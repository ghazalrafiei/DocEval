['text':' Pickled strings are memoized, so we can cache a mapping from','line_number':37,'multiline':False]
['text':' pointers to parsed OpCodes to speed up parsing.','line_number':38,'multiline':False]
['text':' We store as void* to emphasize that we care only about the','line_number':41,'multiline':False]
['text':' address and should not be dereferencing these pointers.','line_number':42,'multiline':False]
['text':' NOTE: I tried implementing the transpose heuristic here to','line_number':64,'multiline':False]
['text':' speed up the search, but it removed the benefit of this cache.','line_number':65,'multiline':False]
['text':' namespace','line_number':69,'multiline':False]
['text':' Find out if there is an upgrader for this operator','line_number':84,'multiline':False]
['text':' Loop all upgraders for this operator, and find out if there exists a','line_number':87,'multiline':False]
['text':' valid upgrader. Use iteration here instead of other faster search','line_number':88,'multiline':False]
['text':' algorithm, because the number of upgrader per operator will be just a','line_number':89,'multiline':False]
['text':' few and tend to keep the code light-weight from binary size concern.','line_number':90,'multiline':False]
['text':' If there exists a valid upgrader, change the instruction OP to','line_number':94,'multiline':False]
['text':' CALL, and the index will point to the according upgrader','line_number':95,'multiline':False]
['text':' function. All upgrader function are available in','line_number':96,'multiline':False]
['text':' function->get_code().functions_. It's a vector of function','line_number':97,'multiline':False]
['text':' pointer and they are initialized in the same order as the global','line_number':98,'multiline':False]
['text':' vector kUpgraderBytecode.','line_number':99,'multiline':False]
['text':' Instruction new_inst = inst;','line_number':100,'multiline':False]
['text':' new_inst.op = OpCode::CALL;','line_number':101,'multiline':False]
['text':' new_inst.X = upgrader.index;','line_number':102,'multiline':False]
['text':' code->instructions_[i] = new_inst;','line_number':103,'multiline':False]
['text':' NOTE: this won't perform particularly well if the ins_list IValue','line_number':146,'multiline':False]
['text':' didn't come from unpickler and thus have its strings','line_number':147,'multiline':False]
['text':' interned. Consider adding a flag to bypass the cache if that','line_number':148,'multiline':False]
['text':' becomes an important use case.','line_number':149,'multiline':False]
['text':' namespace mobile','line_number':197,'multiline':False]
['text':' namespace jit','line_number':198,'multiline':False]
['text':' namespace torch','line_number':199,'multiline':False]
