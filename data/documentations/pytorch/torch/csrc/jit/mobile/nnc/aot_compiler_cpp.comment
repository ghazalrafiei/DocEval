['text':' TODO: assert it's actually immediate','line_number':37,'multiline':False]
['text':' Construct input-specs vector from the inputs of the original graph','line_number':44,'multiline':False]
['text':' Graph inputs include scalar values for symbolic shapes, for which we','line_number':50,'multiline':False]
['text':' don't need input specs. These scalar values come last among the graph','line_number':51,'multiline':False]
['text':' inputs','line_number':52,'multiline':False]
['text':' Locate symbolic shapes in shapes of the inputs.','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':' For each symbolic shape we're trying to find the input from which it can be','line_number':75,'multiline':False]
['text':' extracted and the dimension index in that input.','line_number':76,'multiline':False]
['text':' For instance, if we have','line_number':77,'multiline':False]
['text':' graph(%x : Float(SS(-1), 10), %y : Long(20, SS(-2), %ss_1 : int, %ss_2 : int)','line_number':78,'multiline':False]
['text':' then we would need to find locations of two symbolic shapes: SS(-1) and','line_number':79,'multiline':False]
['text':' SS(-2). The first one corresponds to the first dimension of the first input,','line_number':80,'multiline':False]
['text':' the second one corresponds to the second dimension of the second input,','line_number':81,'multiline':False]
['text':' so we will return {{0, 0}, {1, 1}}.','line_number':82,'multiline':False]
['text':'','line_number':83,'multiline':False]
['text':' If a symbolic shape cannot be found among dimensions of inputs, we','line_number':84,'multiline':False]
['text':' will throw an error (this situation is possible when symbolic shape','line_number':85,'multiline':False]
['text':' corresponds to the size of an intermediate - we don't support this','line_number':86,'multiline':False]
['text':' case here yet).','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' If a symbolic shape can be found in several different positions, we','line_number':89,'multiline':False]
['text':' return the first one we find (TODO: maybe we should return all and','line_number':90,'multiline':False]
['text':' verify that they all match at runtime).','line_number':91,'multiline':False]
['text':' sizes.empty() needs to be handled as sizes can be empty for Scalar','line_number':139,'multiline':False]
['text':' Tensors','line_number':140,'multiline':False]
['text':' temp_sizes_;','line_number':152,'multiline':False]
['text':' TODO: implement prealloc optimization and fill in temp_sizes','line_number':153,'multiline':False]
['text':' TODO: assert the output is a buffer and not a scalar','line_number':163,'multiline':False]
['text':' Supporting only static qscale/qzero','line_number':166,'multiline':False]
['text':' TODO: calculate the version_token.','line_number':313,'multiline':False]
['text':' Preprocess the graph and returns the processed graph and','line_number':326,'multiline':False]
['text':' symbolic values if dynamic input shapes are specified','line_number':327,'multiline':False]
['text':' TODO: Remove annotateInputShapes pass when TraceGraph can also capture','line_number':355,'multiline':False]
['text':' input shapes','line_number':356,'multiline':False]
['text':' TODO(mvz): temporarily disable NNC backend in mobile builds.','line_number':444,'multiline':False]
['text':' static auto reg = torch::jit::backend_preprocess_register("nnc", preprocess);','line_number':445,'multiline':False]
['text':' namespace nnc','line_number':447,'multiline':False]
['text':' namespace mobile','line_number':448,'multiline':False]
['text':' namespace jit','line_number':449,'multiline':False]
['text':' namespace torch','line_number':450,'multiline':False]
