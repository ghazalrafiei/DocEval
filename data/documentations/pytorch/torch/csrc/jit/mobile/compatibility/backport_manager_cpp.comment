['text':' Current support bytecode version','line_number':22,'multiline':False]
['text':' namespace','line_number':30,'multiline':False]
['text':'********************* Utility Functions *********************','line_number':32,'multiline':True]
['text':' Utility function that can be reused by backport_vn_to_vn-1(). If any utility','line_number':34,'multiline':False]
['text':' function can be reused by other backport function, move it here.','line_number':35,'multiline':False]
['text':' Copy files from source to destination except the files and dirs','line_number':37,'multiline':False]
['text':' Don't copy archive in excluded_files, usually archive `version` and','line_number':45,'multiline':False]
['text':' `bytecode`. Archive `version` will be written when PyTorchStreamWriter is','line_number':46,'multiline':False]
['text':' going to finalize and run writeEndOfFile()','line_number':47,'multiline':False]
['text':' records is the list of all files names in the zip file, and each record','line_number':49,'multiline':False]
['text':' is one file with path to parent folder, the example records is:','line_number':50,'multiline':False]
['text':' data.pkl','line_number':51,'multiline':False]
['text':' code/__torch__/___torch_mangle_5.py','line_number':52,'multiline':False]
['text':' code/__torch__/___torch_mangle_5.py.debug_pkl','line_number':53,'multiline':False]
['text':' constants/140245072983168.storage','line_number':54,'multiline':False]
['text':' constants.pkl','line_number':55,'multiline':False]
['text':' bytecode.pkl','line_number':56,'multiline':False]
['text':' version','line_number':57,'multiline':False]
['text':' Skip dirs, find the last '/' and compare it with record','line_number':60,'multiline':False]
['text':' The write_archive_current function is used for bytecode from version v5 to','line_number':78,'multiline':False]
['text':' v7 (the latest bytecode version). pre-v5 we serialized things differently.','line_number':79,'multiline':False]
['text':' This write archive function may change in export_module.cpp, however we don't','line_number':80,'multiline':False]
['text':' have a way to keep the old export function in the codebase. To be able to','line_number':81,'multiline':False]
['text':' export the model in old format, we keep a record of the export function here.','line_number':82,'multiline':False]
['text':' Vector to capture the run-time class types during pickling the IValues','line_number':92,'multiline':False]
['text':' returns a string to use in picker.cpp as storage obj key','line_number':103,'multiline':False]
['text':' write out tensor data','line_number':118,'multiline':False]
['text':' storage has been serialzed already, skip','line_number':131,'multiline':False]
['text':'
inputs: 1) bytecode tuple from bytecode.pkl 2) the output bytecode version,
return: A boolean to indicate whether bytecode tuple is updated successfully
','line_number':141,'multiline':True]
['text':'
inputs: 1) input model stringstream 2) the output bytecode version,
return: model stringstream with updated bytecode version in bytecode.pkl

Example bytecode.pkl:
(${bytecode_version},
  ('__torch__.m.forward',
    (('instructions',
      (('STOREN', 1, 2),
       ('DROPR', 1, 0),
       ('MOVE', 2, 0),
       ('OP', 0, 0),
       ('RET', 0, 0))),
     ('operators', (('aten::Int', 'Tensor'),)),
     ('constants', ()),
     ('types', ()),
     ('register_size', 2))))
','line_number':155,'multiline':True]
['text':'archive_name=','line_number':207,'multiline':True]
['text':'archive_dir=','line_number':208,'multiline':True]
['text':'tensor_dir=','line_number':209,'multiline':True]
['text':'use_storage_context=','line_number':210,'multiline':True]
['text':'archive_name=','line_number':215,'multiline':True]
['text':'archive_dir=','line_number':216,'multiline':True]
['text':'tensor_dir=','line_number':217,'multiline':True]
['text':'use_storage_context=','line_number':218,'multiline':True]
['text':' namespace','line_number':223,'multiline':False]
['text':'******************* backport_v{i}_to_v{i-1} Functions *********************','line_number':225,'multiline':True]
['text':'
 To add next backport function, for example, backport_vn_to_vn-1, create an
 anonymous namespace with a backport_vn_to_vn-1 function + other necessary
 customized function. If a function can be reused by other backport functions,
 move it to the utility function group. It will be easier to split out
 backport_manager.cpp to smaller files when it grows too long.

 How to add backport_v{i}_to_v{i-1} ?
 There are two options:
 1) [Format change only, recommended] Constrcut a reader with the
 input_model_stream, modify the file, and use PyTorchWriter to write it to
 output_model_stream. See backport_v5_to_v4.

 2) [Both format and content change] ]Use torch.jit.load() to load the stream,
 and save it to output_model_stream.

 The first option is preferred, because it will be purely format change, and
 the model doesn't need to go through inline again and model content will
 remain the same.

 A note for manipulate stringstream, it's recommend to declare a new
 stringstream, tmp_stream, and swap it with the argument output_model_stream
 once it's ready, output_model_stream.swap(tmp_stream). Do not use
 output_model_stream.clear(). It only clears out error state flag
 (https://www.cplusplus.com/reference/ios/ios/clear/), while the content is the
 same. It's cleaner to just declare a new one and swap.

','line_number':227,'multiline':True]
['text':'
The following functions needed for backport model from v5 to v4.
Backport function bytecode v5 that deduplicate constanst table.
Previously, in v4, constant table will be exported twice, in both archive
bytecode and archive constants, and majority (almost all) are duplicates.
Currently, in v5, JIT and mobile will share archive constants, and all
constant tensors will be exported in this archive. The bump was needed
because the v5 bytecode export the tensor storage path in the schema, since
the runtime code is now able to query which archive this tensor is stored at
and query the correct archive.
For example, Previously, in v4, we deserialize tensor as without archive
path, and mobile will always read tensor from bytecode archive:
(torch._utils._rebuild_tensor_v2(pers.obj(('storage', torch.DoubleStorage,
'0', 'cpu', 8),),
   0,
   (2, 4),
   (4, 1),
   False,
   collections.OrderedDict()),
 1)),
 So, if the program defines: torch.add(x, h, out=x)
Currently, in v5, we deserialize the bytecode with the archive path, and
mobile can read tensor from the given path:
(torch._utils._rebuild_tensor_v2(pers.obj(('storage', torch.DoubleStorage,
'constants/0', 'cpu', 8),),
   0,
   (2, 4),
   (4, 1),
   False,
   collections.OrderedDict()),
 1)),
Thus, the backport is necessary such that the runtime can read tensor from
the correct archive.
','line_number':258,'multiline':True]
['text':' 1) read from archive `bytecode` archive','line_number':293,'multiline':False]
['text':' 2) Copy everything to new output, except some specific files and dirs','line_number':300,'multiline':False]
['text':' (usually version, bytecode.pkl and bytecode folder are skipped)','line_number':301,'multiline':False]
['text':' 3) write `bytecode` archive','line_number':320,'multiline':False]
['text':' Update the bytecode version in bytecode.pkl','line_number':321,'multiline':False]
['text':' Construct the list of ivalues to a big tuple','line_number':323,'multiline':False]
['text':' The export function to generate bytecode.pkl for version 4. After bytecode','line_number':326,'multiline':False]
['text':' version bump, the old export function doesn't exist anymore, so keep a copy','line_number':327,'multiline':False]
['text':' here for backport pupose.','line_number':328,'multiline':False]
['text':' Vector to capture the run-time class types during pickling the IValues','line_number':334,'multiline':False]
['text':' write `bytecode` archive','line_number':358,'multiline':False]
['text':' write `constants` archive','line_number':360,'multiline':False]
['text':'
Backport function bytecode v6 that introduced support for operators with default
arguments in mobile. Previously, in v5, there is no number of specified
arguments for operators in bytecode operator table. In v6, operators are aware
of the number of specified arguments being present in the schema.

The bump was needed because the v6 bytecode specifies number of specified
arguments for operators in the schema, since the runtime code is now able to
query the number of specified arguments and supports default arguments.

For example, aten::foo's schema in v5 is
foo(Tensor a, Tensor b) -> Tensor
and in v6, it's
foo(Tensor a, Tensor b, int groups=1) -> Tensor

Accordingly, the operator table in v5 is:
('operators', (('aten::foo', ''),))
and in v6, it's
('operators', (('aten::foo', '', 2),))

Thus, the backport is necessary such that the bytecode operator table contains
number of specified arguments.
','line_number':367,'multiline':True]
['text':' If there are debug info files in the original model file, it should also','line_number':395,'multiline':False]
['text':' show up in the backported model','line_number':396,'multiline':False]
['text':' extra_files are kept','line_number':399,'multiline':False]
['text':' Loading the TS module is required for this backport, because bytecode needs','line_number':409,'multiline':False]
['text':' to be re-emitted (refer to the comments below)','line_number':410,'multiline':False]
['text':' The RAII guard to change the flag, emitBytecodeDefaultInputs, to true, so','line_number':413,'multiline':False]
['text':' that TS stores the default argument values in the constant table, and emits','line_number':414,'multiline':False]
['text':' the instructions (LOADC, for example), to push the values to the stack. It','line_number':415,'multiline':False]
['text':' restores the behavior of V5 and before. For V6, the default arg values are','line_number':416,'multiline':False]
['text':' resolved at runtime init stage for better operator compatibility.','line_number':417,'multiline':False]
['text':'emit_default_input_instructions','line_number':421,'multiline':True]
['text':'enable_defaults_args_with_out_args','line_number':422,'multiline':True]
['text':'enable_emit_promoted_ops','line_number':423,'multiline':True]
['text':' Update the bytecode version (from 6 to 5)','line_number':428,'multiline':False]
['text':'
Backport function bytecode v7 that introduced support for operators with out
arguments. Previously, in v6, operators with out arguments forced the
serialization of all arguments in the schema, even when optional arguments
were not provided (as they had default values). Currently, in v7, operators
are aware of out arguments being present in the schema (always appended),
allowing the serialization of only required arguments (as default values will
be provided by the runtime).

The bump was needed because the v7 bytecode specifies less arguments for ops
with out arguments in the schema, since the runtime code is now able to query
whether an argument is of type "out" and insert the necessary default values in
the right order in the interpreter stack (i.e. before the out arguments).

For example schema is: torch.add(x, h, alpha=1.0, out=x) So, if the program
defines: torch.add(x, h, out=x) Previously, in v6, we serialized the bytecode to
contain all 4 arguments. Currently, in v7, we serialize the bytecode with only 3
arguments, since alpha is optional and has a default value that the runtime will
push in the stack. Thus, the backport is necessary such that the bytecode
contains all the arguments as before.
','line_number':434,'multiline':True]
['text':' If there are debug info files in the original model file, it should also','line_number':463,'multiline':False]
['text':' show up in the backported model','line_number':464,'multiline':False]
['text':' extra_files are kept','line_number':467,'multiline':False]
['text':' Loading the TS module is required for this backport, because bytecode needs','line_number':477,'multiline':False]
['text':' to be re-emitted (refer to the comments below)','line_number':478,'multiline':False]
['text':' The RAII guard to change the flag, emit_default_input_instructions, to','line_number':481,'multiline':False]
['text':' false to keep the same behavior in bytecode version 6. Change the flag,','line_number':482,'multiline':False]
['text':' enable_defaults_args_with_out_args, to deserialized the number of specified','line_number':483,'multiline':False]
['text':' operators which allowing both out arguments and default arguments to','line_number':484,'multiline':False]
['text':' #all_args, instead of (#all_args - #default_args)','line_number':485,'multiline':False]
['text':'emit_default_input_instructions','line_number':489,'multiline':True]
['text':'enable_defaults_args_with_out_args','line_number':490,'multiline':True]
['text':'enable_emit_promoted_ops','line_number':491,'multiline':True]
['text':' Update the bytecode version (from 7 to 6)','line_number':496,'multiline':False]
['text':' TODO(@pavithran) : Check if debug info is available and use load/save while','line_number':507,'multiline':False]
['text':' backporting hardcode debaug info to be false untill supported.','line_number':508,'multiline':False]
['text':'emit_default_input_instructions','line_number':512,'multiline':True]
['text':'enable_defaults_args_with_out_args','line_number':513,'multiline':True]
['text':'enable_emit_promoted_ops','line_number':514,'multiline':True]
['text':'use_flatbuffer=','line_number':519,'multiline':True]
['text':' Update the bytecode version (from 9 to 8)','line_number':521,'multiline':False]
['text':' extra_files are kept','line_number':532,'multiline':False]
['text':'emit_default_input_instructions','line_number':547,'multiline':True]
['text':'enable_defaults_args_with_out_args','line_number':548,'multiline':True]
['text':'enable_emit_promoted_ops','line_number':549,'multiline':True]
['text':' Update the bytecode version (from 8 to 7)','line_number':554,'multiline':False]
['text':' namespace','line_number':561,'multiline':False]
['text':'********************* BackportManager *********************','line_number':563,'multiline':True]
['text':' A generic contract for backport logic to the previous bytecode version.','line_number':565,'multiline':False]
['text':' Args:','line_number':566,'multiline':False]
['text':' * PyTorchStreamReader has access to the input model from N bytecode version.','line_number':567,'multiline':False]
['text':' * PyTorchStreamWriter has access to the output model backported to the','line_number':568,'multiline':False]
['text':' previous N-1 bytecode version. Returns true if successful, false otherwise.','line_number':569,'multiline':False]
['text':' The main function to run backport from version n to version i.','line_number':608,'multiline':False]
['text':' All models (file or buffer) will be converted stream first, and','line_number':609,'multiline':False]
['text':' istream_adapter has access to it. During the backport process,','line_number':610,'multiline':False]
['text':' the intermediate result will be stored with stream.','line_number':611,'multiline':False]
['text':' 1) Given an istream_adapter (an adapter with access to the input model, the','line_number':628,'multiline':False]
['text':' model can be from istream, file and etc), copy all model content to','line_number':629,'multiline':False]
['text':' stringstream','line_number':630,'multiline':False]
['text':' 2) backport model, backport_v{i}_to_v{i-1} function's argurment is','line_number':636,'multiline':False]
['text':' (input_model_stream and output_model_stream)','line_number':637,'multiline':False]
['text':' Swap input and output if it's not the first time and output_model_stream','line_number':639,'multiline':False]
['text':' has value.','line_number':640,'multiline':False]
['text':' reset output_model_stream','line_number':643,'multiline':False]
['text':' Keep backporting till request version','line_number':664,'multiline':False]
['text':' 3) Write the final output_model_stream to final_writer, final_writer has','line_number':683,'multiline':False]
['text':' access to the final model destination (file, ostream and etc)','line_number':684,'multiline':False]
['text':' namespace jit','line_number':699,'multiline':False]
['text':' namespace torch','line_number':700,'multiline':False]
