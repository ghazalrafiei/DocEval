['text':' Casting it back to check whether it overflew.','line_number':28,'multiline':False]
['text':' BailoutBlocks are used to temporarily store','line_number':37,'multiline':False]
['text':' instructions (typically, argument LOADs and TAIL_CALL)','line_number':38,'multiline':False]
['text':' generated for prim::BailOut nodes','line_number':39,'multiline':False]
['text':' before they are merged back into','line_number':40,'multiline':False]
['text':' CodeImpl._instructions_ by insertBailoutBlocks','line_number':41,'multiline':False]
['text':' this node gets patched to jump here on failure','line_number':43,'multiline':False]
['text':' ends in a TAIL_CALL','line_number':44,'multiline':False]
['text':' for keeping track of the current node','line_number':49,'multiline':False]
['text':' Expanded inlined stacks as pointers to values in inlined call stack.','line_number':76,'multiline':False]
['text':' same length as instructions.','line_number':79,'multiline':False]
['text':' what node in the graph cause this','line_number':80,'multiline':False]
['text':' instruction to be emitted?','line_number':81,'multiline':False]
['text':' map<(op name, num inputs), index in operator table>, to avoid duplicates,','line_number':88,'multiline':False]
['text':' not including vararg operators','line_number':89,'multiline':False]
['text':' We MUST hold onto graph here because some Operators stored in the','line_number':108,'multiline':False]
['text':' instruction lists have dependencies on meta-data stored in the graph','line_number':109,'multiline':False]
['text':' that would be dead otherwise.','line_number':110,'multiline':False]
['text':' It is also very useful for debugging interpreter problems to','line_number':111,'multiline':False]
['text':' keep this around.','line_number':112,'multiline':False]
['text':' map from unique of nodes to register in register table','line_number':118,'multiline':False]
['text':' map from operator name to specified arguments','line_number':121,'multiline':False]
['text':' Example: for a schema of aten::foo.str','line_number':122,'multiline':False]
['text':' aten::foo.str(arg0: str="default", arg1: int=0,','line_number':123,'multiline':False]
['text':'               arg2: bool=False, arg3: float=0.0)','line_number':124,'multiline':False]
['text':' If the usages in a graph is:','line_number':125,'multiline':False]
['text':'    aten::foo("somestr", arg1=0, arg2=True, arg3=0.0)','line_number':126,'multiline':False]
['text':'    aten::foo("somestr", arg1=1, arg2=False, arg3=0.0)','line_number':127,'multiline':False]
['text':' op_to_num_specified_args_["aten::foo.str"] = 3','line_number':128,'multiline':False]
['text':' This is because for all usages, at most 3 args are used.','line_number':129,'multiline':False]
['text':' running count of uses as we emit. When we reach use_count_[v] =','line_number':134,'multiline':False]
['text':' v.uses().size() we know it is the final use and we can move rather than','line_number':135,'multiline':False]
['text':' load.','line_number':136,'multiline':False]
['text':' used in creation of code to keep track','line_number':139,'multiline':False]
['text':' of node being emitted','line_number':140,'multiline':False]
['text':' out-of-line jumps for bailouts that are patched in at the end','line_number':143,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-optin.cplusplus.VirtualCall)','line_number':173,'multiline':False]
['text':' since subclass of CodeImpl needs to populate','line_number':180,'multiline':False]
['text':' op_to_num_specified_args, we separate the calls','line_number':181,'multiline':False]
['text':' that changes internals of CodeImpl into a separate','line_number':182,'multiline':False]
['text':' function.','line_number':183,'multiline':False]
['text':' we deferred the emission of bailout blocks so they appear at the end','line_number':187,'multiline':False]
['text':' emit them now and patch up the jumps','line_number':188,'multiline':False]
['text':' patching GUARD to FAIL_GUARD','line_number':202,'multiline':False]
['text':' check that we didn't accidentally emit nodes out of topological order','line_number':284,'multiline':False]
['text':' drop - if true, we are not actually going to use this thing','line_number':330,'multiline':False]
['text':' and we can short circuit doing many instructions here','line_number':331,'multiline':False]
['text':' by either clearing the register (DROPR) or just popping the stack','line_number':332,'multiline':False]
['text':' (DROP)','line_number':333,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':343,'multiline':False]
['text':' check if the node should be emitted as instruction or operator','line_number':449,'multiline':False]
['text':' __get_item__ overloaded operator for Dict','line_number':453,'multiline':False]
['text':' needs to be emitted an instruction','line_number':454,'multiline':False]
['text':' constants are just put in the constant table','line_number':465,'multiline':False]
['text':' dummy offset to be filled in','line_number':473,'multiline':False]
['text':' dummy offset','line_number':475,'multiline':False]
['text':' dummy offset','line_number':486,'multiline':False]
['text':' Check that TypeCheck has at least one input.','line_number':525,'multiline':False]
['text':' Emit the expected type.','line_number':530,'multiline':False]
['text':' unoptimized graph is at index 0','line_number':540,'multiline':False]
['text':' guarded input is at index 1','line_number':541,'multiline':False]
['text':' the rest of args follow','line_number':542,'multiline':False]
['text':' to be patched ','line_number':545,'multiline':True]
['text':' note, guaded input is already loaded onto the stack','line_number':552,'multiline':False]
['text':' for GUARD instruction','line_number':553,'multiline':False]
['text':' node ','line_number':704,'multiline':True]
['text':' NOLINTNEXTLINE(clang-analyzer-optin.cplusplus.VirtualCall)','line_number':712,'multiline':False]
['text':' emitOperator(node);','line_number':714,'multiline':False]
['text':'*
   * Add an operation to operator_table_ if not a duplicate and return its index
   ','line_number':888,'multiline':True]
['text':' NOLINTNEXTLINE(clang-analyzer-optin.cplusplus.VirtualCall)','line_number':953,'multiline':False]
['text':' we deferred the emission of bailout blocks so they appear at the end','line_number':961,'multiline':False]
['text':' emit them now and patch up the jumps','line_number':962,'multiline':False]
['text':' skip if schema has vararg','line_number':972,'multiline':False]
['text':' is_vararg ','line_number':1013,'multiline':True]
['text':' To support forward compatibility for bytecode version bump from v5 to v6','line_number':1052,'multiline':False]
['text':' To support forward compatibility for bytecode version bump from v6 to v7','line_number':1054,'multiline':False]
['text':' To support forward compatibility for bytecode version bump from v7 to v8','line_number':1056,'multiline':False]
['text':' namespace interpreter','line_number':1060,'multiline':False]
['text':' namespace torch::jit','line_number':1061,'multiline':False]
