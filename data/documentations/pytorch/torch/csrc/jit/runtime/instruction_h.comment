['text':' instruction look like:','line_number':8,'multiline':False]
['text':' op_code X, N','line_number':9,'multiline':False]
['text':' meaning of X, N depend on the op:','line_number':10,'multiline':False]
['text':' O - index into operator table','line_number':11,'multiline':False]
['text':' R - index into register table','line_number':12,'multiline':False]
['text':' I - literal integer','line_number':13,'multiline':False]
['text':' C - index into constant table','line_number':14,'multiline':False]
['text':' P - jump offset relative to beginning of current instruction','line_number':15,'multiline':False]
['text':' F - index into function table','line_number':16,'multiline':False]
['text':' T - index into the type table, used for guard instructions','line_number':17,'multiline':False]
['text':' S - index into object slots','line_number':18,'multiline':False]
['text':' C - index into code table','line_number':19,'multiline':False]
['text':' invoke operator X ','line_number':22,'multiline':True]
['text':' invoke vararg operator X with N arguments ','line_number':23,'multiline':True]
['text':' push a value from a register X ','line_number':24,'multiline':True]
['text':' push a value from register X, clearing the register ','line_number':25,'multiline':True]
['text':' store N values to registers [X, X+N) ','line_number':26,'multiline':True]
['text':' store 1 value to registers X ','line_number':27,'multiline':True]
['text':' drop 1 value from the top of the stack ','line_number':28,'multiline':True]
['text':' clear register X ','line_number':29,'multiline':True]
['text':' push the constant X ','line_number':30,'multiline':True]
['text':' pop the top of the stack, if false, branch to P ','line_number':31,'multiline':True]
['text':' unconditional branch to X ','line_number':32,'multiline':True]
['text':' perform a loop, X is where to branch if cond is false ','line_number':33,'multiline':True]
['text':' exit execution ','line_number':34,'multiline':True]
['text':' wait for a future to be complete ','line_number':35,'multiline':True]
['text':' call function X ','line_number':36,'multiline':True]
['text':' check a guard against type_table, true if passes ','line_number':37,'multiline':True]
['text':' check each type of input[i] against type_table[X+N] ','line_number':38,'multiline':True]
['text':' fail a guard, patch back to GUARD ','line_number':39,'multiline':True]
['text':' get a callback from profile_function_table at X ','line_number':40,'multiline':True]
['text':' replace current frame with function F ','line_number':41,'multiline':True]
['text':' call method X on the first argument (of N) ','line_number':42,'multiline':True]
['text':' get attribute from slot X in an Object ','line_number':43,'multiline':True]
['text':' set attribute to slot X in an Object ','line_number':44,'multiline':True]
['text':' unpack list expecting length I ','line_number':45,'multiline':True]
['text':' construct a tuple using X inputs ','line_number':46,'multiline':True]
['text':' construct a tuple of type X, using N inputs ','line_number':48,'multiline':True]
['text':' construct a list of type X, using N inputs ','line_number':49,'multiline':True]
['text':' construct a dict of type X, using N inputs ','line_number':50,'multiline':True]
['text':' create an object of type X ','line_number':51,'multiline':True]
['text':' check object is one of  types[X:X+N]  ','line_number':52,'multiline':True]
['text':' slice tup[X:(X+N)] ','line_number':53,'multiline':True]
['text':' get the value from a tuple at that index ','line_number':54,'multiline':True]
['text':' throws the exception from Python ','line_number':55,'multiline':True]
['text':' gets the value from the dict for given key ','line_number':56,'multiline':True]
['text':' perform an unchecked cast operation ','line_number':57,'multiline':True]
['text':' performs `is` operator from Python ','line_number':58,'multiline':True]
['text':' sets default values to variables that are uninitialized ','line_number':60,'multiline':True]
['text':' performs `is not` operator from Python  ','line_number':61,'multiline':True]
['text':' performs string format function `f strings` or `{}.format` \
                     the number of inputs in stored in X ','line_number':62,'multiline':True]
['text':' invokes aten::device for a Tensor ','line_number':64,'multiline':True]
['text':' invokes aten::dtype for a Tensor ','line_number':65,'multiline':True]
['text':' invokes aten::dim for a Tensor ','line_number':66,'multiline':True]
['text':' performs `not` operator from Python  ','line_number':67,'multiline':True]
['text':' convert the input to a list ','line_number':68,'multiline':True]
['text':' performs the conversion of a number/scalar to Tensor ','line_number':70,'multiline':True]
['text':' invokes aten::is_cuda for a Tensor ','line_number':71,'multiline':True]
['text':' launch a thread to run code entry x with N inputs  ','line_number':72,'multiline':True]
['text':' emit a warning with line information ','line_number':73,'multiline':True]
['text':' enter scope of a contextmanager ','line_number':74,'multiline':True]
['text':' exit the last entered contextmanager ','line_number':75,'multiline':True]
['text':' initialize await for code entry x with N inputs  ','line_number':76,'multiline':True]
['text':' TODO: check for overflow','line_number':89,'multiline':False]
['text':' namespace torch::jit','line_number':100,'multiline':False]
