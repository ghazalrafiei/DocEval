['text':' namespace','line_number':24,'multiline':False]
['text':' namespace','line_number':37,'multiline':False]
['text':' prepare inputs','line_number':62,'multiline':False]
['text':' run op','line_number':64,'multiline':False]
['text':' put output back','line_number':72,'multiline':False]
['text':' See [Borrowed IValue Outputs]','line_number':121,'multiline':False]
['text':' TODO: "aten::__getitem__.str(str s, int index) -> str",','line_number':147,'multiline':False]
['text':' TODO(T98581096): make __getitem__ work for other container types','line_number':178,'multiline':False]
['text':' prepare inputs','line_number':190,'multiline':False]
['text':' run op','line_number':192,'multiline':False]
['text':' put output back','line_number':197,'multiline':False]
['text':' error handling when step_val == 0 during runtime','line_number':303,'multiline':False]
['text':' self','line_number':472,'multiline':False]
['text':' dim','line_number':473,'multiline':False]
['text':' length','line_number':481,'multiline':False]
['text':' start being the end is valid, but','line_number':485,'multiline':False]
['text':' not a valid dim specification.','line_number':486,'multiline':False]
['text':' To mimick the behavior of the JIT interpreter, if both dtype','line_number':532,'multiline':False]
['text':' and copy are not set, we return self. Otherwise, we assume','line_number':533,'multiline':False]
['text':' that dtype is set.','line_number':534,'multiline':False]
['text':' See [Borrowed IValue Outputs]','line_number':638,'multiline':False]
['text':' Create an IValue that borrows the input Tensor in order to','line_number':779,'multiline':False]
['text':' save a refcount increment here and decrement in','line_number':780,'multiline':False]
['text':' MemoryPlanner::deallocate. MemoryPlanner knows about this','line_number':781,'multiline':False]
['text':' and will safely clean it up by using the corresponding','line_number':782,'multiline':False]
['text':' destroyBorrow method.','line_number':783,'multiline':False]
['text':' MemoryPlanner should have cleaned this up!','line_number':785,'multiline':False]
['text':' See [Create owned refs for special values]','line_number':908,'multiline':False]
['text':' namespace','line_number':935,'multiline':False]
['text':' If we are returning a tuple, we are either returning','line_number':981,'multiline':False]
['text':' multiple unpacked values or all of the values wrapped','line_number':982,'multiline':False]
['text':' in a single tuple. The second condition handles the','line_number':983,'multiline':False]
['text':' the latter case.','line_number':984,'multiline':False]
['text':' The first two inputs to the loop node are the max trip count','line_number':1030,'multiline':False]
['text':' and initial condition. We don't collect them here, since those','line_number':1031,'multiline':False]
['text':' are not inputs for the sub-block.','line_number':1032,'multiline':False]
['text':' First argument to the loop sub-block is always the loop counter, initially','line_number':1037,'multiline':False]
['text':' zero.','line_number':1038,'multiline':False]
['text':' namespace','line_number':1048,'multiline':False]
['text':'
  ForkedSubgraphSRLauncher is responsible for the execution of
  forked subgraph on new instance of static runtime. Once the
  execution is completed, future is marked as complete to
  indicate aten::wait() to proceed
','line_number':1051,'multiline':True]
['text':'
  helper function to create a future on return type
  of the graph outputs. This function is utilized by
  prim::fork and aten::wait operations for async
  execution of subgraphs
','line_number':1088,'multiline':True]
['text':' namespace','line_number':1106,'multiline':False]
['text':'
  prim::fork forks the execution of a subgraph. It returns a future on which
  the corresponding aten::wait op waits until future is marked complete
  Current implementation creates a instance of StaticModule uses it to
  create StaticRuntime instances on the fly during runtime to handle the
  execution of forked subgraph. Async execution is handled by
  aten::ParallelThreadPoolNative threadpool.
','line_number':1108,'multiline':True]
['text':'
  aten::wait waits on the future (present in corresponding fork)
  to be executed. Once the execution is complete, the future is marked
  completed and wait execution continues.
','line_number':1151,'multiline':True]
['text':' blocking call: waiting for the future to be completed','line_number':1167,'multiline':False]
['text':' Use std::runtime_error instead of c10::Error to be consistent with','line_number':1259,'multiline':False]
['text':' JIT','line_number':1260,'multiline':False]
['text':' See [Borrowed IValue Outputs]','line_number':1418,'multiline':False]
['text':' JIT does a check for requires_grad, but we skip it here since SR is','line_number':1489,'multiline':False]
['text':' inference only','line_number':1490,'multiline':False]
['text':'includeBool=','line_number':1495,'multiline':True]
['text':' namespace torch::jit','line_number':1538,'multiline':False]
