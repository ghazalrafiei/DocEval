['text':' The following class facilitates code reuse between ProcessedNodeInputWrapper','line_number':8,'multiline':False]
['text':' and ProcessedNodeOutputWrapper via CRTP','line_number':9,'multiline':False]
['text':' NB: to mimic the behavior of at::ArrayRef, both iterators are','line_number':68,'multiline':False]
['text':' the const version.','line_number':69,'multiline':False]
['text':' A ProcessedNodeWrapperBase lets us use ProcessedNode directly in a context','line_number':114,'multiline':False]
['text':' where a container of IValues is expected. This trick is handy for avoiding','line_number':115,'multiline':False]
['text':' refcount bumps in perf-sensitive native ops. For example, suppose we have an','line_number':116,'multiline':False]
['text':' op that takes a list of tensors as an argument and we've turned the op into a','line_number':117,'multiline':False]
['text':' variadic variant in static runtime. To use the PyTorch library implementation','line_number':118,'multiline':False]
['text':' of the op, we would have to pack the variadic arguments into a list:','line_number':119,'multiline':False]
['text':'   std::vector<Tensor> tensor_list;','line_number':120,'multiline':False]
['text':'   tensor_list.reserve(pnode->num_outputs());','line_number':121,'multiline':False]
['text':'   for (const auto i : c10::irange(pnode->num_inputs())','line_number':122,'multiline':False]
['text':'     tensor_list.push_back(pnode->Input(i).toTensor());','line_number':123,'multiline':False]
['text':'   op_impl(tensor_list);','line_number':124,'multiline':False]
['text':' Using ProcessedNodeWrapperBase, we can avoid this round of refcount bumps.','line_number':125,'multiline':False]
['text':' All we need to do is turn `op_impl` into a template and pass it','line_number':126,'multiline':False]
['text':' ProcessedNodeInputWrapper(*pnode)!','line_number':127,'multiline':False]
['text':' The last `back_elements_ignored` elements are not considered.','line_number':131,'multiline':False]
['text':' Same for the first `front_elements_ignored` elements.','line_number':132,'multiline':False]
['text':' This is useful for ops where','line_number':133,'multiline':False]
['text':' only the first N elements are tensors (N < inputs.size()).','line_number':134,'multiline':False]
['text':' For instance, the last argument to VarStack is an integer dimension.','line_number':135,'multiline':False]
['text':' Similar to ProcessedNodeInputWrapper, but wraps outputs and allows for','line_number':179,'multiline':False]
['text':' writing.','line_number':180,'multiline':False]
['text':' namespace torch::jit','line_number':211,'multiline':False]
