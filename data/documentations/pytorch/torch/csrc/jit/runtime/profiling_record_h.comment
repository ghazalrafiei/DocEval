['text':' We would like to assign each position/axis of a tensor an abstract size','line_number':15,'multiline':False]
['text':' * For each `tensor` we have a profiled `Value` of a `TensorType` describing','line_number':16,'multiline':False]
['text':' the properties of the `tensor`.','line_number':17,'multiline':False]
['text':' * `TensorType` has a property called `symbolic_sizes_` to describe observed','line_number':18,'multiline':False]
['text':' `tensor.sizes()`','line_number':19,'multiline':False]
['text':' * `symbolic_sizes_` is a vector of abstract sizes (or','line_number':20,'multiline':False]
['text':' `std::vector<ShapeSymbol>`) where','line_number':21,'multiline':False]
['text':'   * `ShapeSymbol`at `symbolic_sizes_[i]`  describes the size value','line_number':22,'multiline':False]
['text':'   (`Dimension`) at `tensor.sizes()[i]`','line_number':23,'multiline':False]
['text':' * We may see the same `Dimension` at different positions `i` in','line_number':24,'multiline':False]
['text':' `tensor.sizes()` or even in different `tensor`','line_number':25,'multiline':False]
['text':'   * First, we would like associate the same `ShapeSymbol` to the same','line_number':26,'multiline':False]
['text':'   `Dimension` across **one** profiling execution or run of a TorchScript','line_number':27,'multiline':False]
['text':'   function.','line_number':28,'multiline':False]
['text':'     * The same `ShapeSymbol`s in different positions of `symbolic_shapes_` in','line_number':29,'multiline':False]
['text':'     possibly different `TensorType`s (i.e. `TensorType`s for different','line_number':30,'multiline':False]
['text':'     profiled values) form an implicit set. The elements of such a set are','line_number':31,'multiline':False]
['text':'     called *dimension locations*.','line_number':32,'multiline':False]
['text':'     * These sets allow us to track how the shapes of input arguments of some','line_number':33,'multiline':False]
['text':'     operation relate to operation's output shapes as the input and output','line_number':34,'multiline':False]
['text':'     shapes might share the same `ShapeSymbol`s','line_number':35,'multiline':False]
['text':' * For **every** profiling run, we would like to maintain the invariant that','line_number':36,'multiline':False]
['text':' *the same `ShapeSymbol` is always associated with the same `Dimension`*.','line_number':37,'multiline':False]
['text':' * To maintain this invariant we merge the profiling information from all','line_number':38,'multiline':False]
['text':' profiling runs,','line_number':39,'multiline':False]
['text':'   * For every two runs, we iterate over all `symbic_shapes_`  and compare','line_number':40,'multiline':False]
['text':'   their `ShapeSymbol`s in the same position.','line_number':41,'multiline':False]
['text':'     * if we observe that for every dimension location that has','line_number':42,'multiline':False]
['text':'     the`ShapeSymbol S1`  in run #1 there is **only one** `ShapeSymbol S2` in','line_number':43,'multiline':False]
['text':'     the same dimension location in run #2, we conclude that the invariant','line_number':44,'multiline':False]
['text':'     holds.','line_number':45,'multiline':False]
['text':'     * However, if we observe some dimension locations in run #2 have','line_number':46,'multiline':False]
['text':'     `ShapeSymbol S2` and the other ones have `ShapeSymbol S3` we would like','line_number':47,'multiline':False]
['text':'     to partition the virtual set of dimension locations associated with','line_number':48,'multiline':False]
['text':'     `ShapeSymbol S1` into two new subsets, so the invariant holds.','line_number':49,'multiline':False]
['text':'     * The partitioning works by assigning a new symbol to the dimension','line_number':50,'multiline':False]
['text':'     locations (associated with `ShapeSymbol S1`) that have `ShapeSymbol S2`','line_number':51,'multiline':False]
['text':'     and another new symbol to the dimension locations that have `ShapeSymbol','line_number':52,'multiline':False]
['text':'     S3`. In other words,','line_number':53,'multiline':False]
['text':'       * Subset #1 will consist of the dimension locations that in run #2 have','line_number':54,'multiline':False]
['text':'       `ShapeSymbol S2`  and will have `ShapeSymbol S4`  in those dimension','line_number':55,'multiline':False]
['text':'       locations','line_number':56,'multiline':False]
['text':'       * Subset #2 will consist of the dimension locations that in run #2 have','line_number':57,'multiline':False]
['text':'       `ShapeSymbol S4`  and will have `ShapeSymbol S5`  in those dimension','line_number':58,'multiline':False]
['text':'       locations','line_number':59,'multiline':False]
['text':'     * The effective result of merging the profiling information from two runs','line_number':60,'multiline':False]
['text':'     is new `TensorTypes` whose `symbolic_sizes_` /dimension locations have','line_number':61,'multiline':False]
['text':'     either `ShapeSymbol S4` or `ShapeSymbol S5`.','line_number':62,'multiline':False]
['text':'     * Partitioning can be done even before we have seen all the dimension','line_number':63,'multiline':False]
['text':'     locations associated with `ShapeSymbol S1`','line_number':64,'multiline':False]
['text':'       * We use `getSymbolInSet` of `ShapeSymbolTable` to remember all','line_number':65,'multiline':False]
['text':'       `ShapeSymbols` from run #2 we observed in the dimension locations','line_number':66,'multiline':False]
['text':'       associated with `ShapeSymbol S1` .','line_number':67,'multiline':False]
['text':'       * For every `ShapeSymbol` from run #2 in the dimension location','line_number':68,'multiline':False]
['text':'       associated with `ShapeSymbol S1`  `getSymbolInSet` returns a symbol','line_number':69,'multiline':False]
['text':'       that we assign to the dimension location in a new TensorType.','line_number':70,'multiline':False]
['text':'         * It's important to point out that the same `ShapeSymbol S2` from run','line_number':71,'multiline':False]
['text':'         #2 in two dimension locations that have different `ShapeSymbol`s in','line_number':72,'multiline':False]
['text':'         run #1 are different! These dimension locations will belong to','line_number':73,'multiline':False]
['text':'         different subsets and have different `ShapeSymbol`s after merge.','line_number':74,'multiline':False]
['text':'         * On the other hand, for the same `ShapeSymbol S2` in two dimension','line_number':75,'multiline':False]
['text':'         locations that have `ShapeSymbol S1` in run #1`getSymbolInSet` will','line_number':76,'multiline':False]
['text':'         return the same symbol.','line_number':77,'multiline':False]
['text':' `SetPartitioningHelper` is used to maintain the following invariant:','line_number':88,'multiline':False]
['text':' For **every** profiling run, *the same `ShapeSymbol` is always associated','line_number':89,'multiline':False]
['text':' with the same `Dimension`*.','line_number':90,'multiline':False]
['text':' while merging the profiling information from multiple runs.','line_number':91,'multiline':False]
['text':' `partitionSetByDimension` partitions a virtual set','line_number':96,'multiline':False]
['text':' of dimension locations associated with ShapeSymbol `symbol` into subsets.','line_number':97,'multiline':False]
['text':' Partitioning is equivalent to giving (or renaming) a particular','line_number':98,'multiline':False]
['text':' dimension location a new `ShapeSymbol`.','line_number':99,'multiline':False]
['text':' The same `Dimension` value in different dimension locations','line_number':100,'multiline':False]
['text':' that used to have `symbol` will receive the same','line_number':101,'multiline':False]
['text':' new `ShapeSymbol`, effectively forming a new set.','line_number':102,'multiline':False]
['text':' N.B. adding a mapping { s.static_size(), s }','line_number':120,'multiline':False]
['text':' makes sure we preserve the fact that','line_number':121,'multiline':False]
['text':' some dimension values remain the same','line_number':122,'multiline':False]
['text':' across all profiled runs','line_number':123,'multiline':False]
['text':' ShapeSymbolTable is used by Interpreter','line_number':131,'multiline':False]
['text':' to assign dimension values to ShapeSymbols','line_number':132,'multiline':False]
['text':' and fail a guard if the same symbol','line_number':133,'multiline':False]
['text':' is assigned more than one dimension value.','line_number':134,'multiline':False]
['text':' N.B. we treat static symbols as always assigned','line_number':136,'multiline':False]
['text':' to themselves','line_number':137,'multiline':False]
['text':' N.B. we treat static symbols as always assigned','line_number':145,'multiline':False]
['text':' to themselves','line_number':146,'multiline':False]
['text':' Tries to assign dimension values from `new_sizes` to','line_number':158,'multiline':False]
['text':' `ShapeSymbol`s `sym_shapes`.','line_number':159,'multiline':False]
['text':' Returns `true` if every dimension value from `new_sizes`','line_number':160,'multiline':False]
['text':' can be assigned to the corresponding `ShapeSymbol` from','line_number':161,'multiline':False]
['text':' `sym_shapes`','line_number':162,'multiline':False]
['text':' A dimension value can be assigned to a `ShapeSymbol`','line_number':163,'multiline':False]
['text':' * if the symbol isn't assigned yet any dimension value','line_number':164,'multiline':False]
['text':' * if the symbol is assigned and its value is equal to','line_number':165,'multiline':False]
['text':' the dimension value from `new_sizes`','line_number':166,'multiline':False]
['text':' N.B. ProfilingRecord's copy and move c-tor are disabled, so we won't','line_number':173,'multiline':False]
['text':' end up accidentally copying or moving ProfilingRecords whose addresses','line_number':174,'multiline':False]
['text':' are captured in callbacks_','line_number':175,'multiline':False]
['text':' namespace torch::jit','line_number':205,'multiline':False]
