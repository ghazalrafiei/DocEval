['text':' A helper structure to maintain the mappings','line_number':24,'multiline':False]
['text':' between values from a scripted graph and','line_number':25,'multiline':False]
['text':' a traced graph','line_number':26,'multiline':False]
['text':' create a node in the traced graph that corresponds to `node`','line_number':36,'multiline':False]
['text':' in the scripted graph. Similar to how `cloneNode` works','line_number':37,'multiline':False]
['text':' old to new outputs','line_number':53,'multiline':False]
['text':' NOLINTNEXTLINE','line_number':59,'multiline':False]
['text':' The subtlety in `createPropNodeForIfBlock` is that we need to create','line_number':67,'multiline':False]
['text':' a "propagate" node that will propagate the mapping between the outputs','line_number':68,'multiline':False]
['text':' of a then/else block and the outputs in the traced graph onto the outputs','line_number':69,'multiline':False]
['text':' of the if node in the scripted node. Note, if nodes will disappear in the','line_number':70,'multiline':False]
['text':' the traced graph but they are still used in the scripted graph.','line_number':71,'multiline':False]
['text':' frame_id is unused','line_number':86,'multiline':False]
['text':' propagate a then-block or else-output to an if-output','line_number':91,'multiline':False]
['text':' uncomment for debugging','line_number':102,'multiline':False]
['text':' opt_pn->i_(Symbol::attr("propagate"), 1);','line_number':103,'multiline':False]
['text':' loop counter is implicit in the loop body outputs, we need to make','line_number':107,'multiline':False]
['text':' it explicit so it can used in 2+ iterations','line_number':108,'multiline':False]
['text':' frame_id is unused','line_number':116,'multiline':False]
['text':' uncomment for debugging','line_number':127,'multiline':False]
['text':' opt_pn->i_(Symbol::attr("loop_counter"), 1);','line_number':128,'multiline':False]
['text':' Similar to how we propagate the mappings for If nodes, we need to propagate','line_number':132,'multiline':False]
['text':' the mappings from the loop body to the beginning of the block in case we','line_number':133,'multiline':False]
['text':' run another iteration and to the outputs of the Loop node, for any logic','line_number':134,'multiline':False]
['text':' downstream that uses the output values of the loop node','line_number':135,'multiline':False]
['text':' this is a propagation node for block inputs (phi values)','line_number':139,'multiline':False]
['text':' these come from either `prim::Loop` inputs or loop body outputs','line_number':140,'multiline':False]
['text':' frame_id is unused','line_number':149,'multiline':False]
['text':' uncomment for debugging','line_number':167,'multiline':False]
['text':' opt_pn->i_(Symbol::attr("loop_entry"), 1);','line_number':168,'multiline':False]
['text':' this is a propagation node for loop outputs','line_number':177,'multiline':False]
['text':' opt_pn->i_(Symbol::attr("loop_propagate"), 1);','line_number':183,'multiline':False]
['text':' frame_id is unused','line_number':188,'multiline':False]
['text':' uncomment for debugging','line_number':207,'multiline':False]
['text':' opt_pn->i_(Symbol::attr("loop_exit"), 1);','line_number':208,'multiline':False]
['text':' walks all the nodes in a block and adds profiled nodes to each node','line_number':213,'multiline':False]
['text':' see the comment for `optional_profiler` below','line_number':214,'multiline':False]
['text':' we only use the `opt_pn->node()` to trigger the handler','line_number':238,'multiline':False]
['text':' we still capture the actual scripted node `n` we want to trace','line_number':239,'multiline':False]
['text':' we look at its inputs, map them to the inputs in the traced graph','line_number':240,'multiline':False]
['text':' and create a new node with `traceNode`','line_number':241,'multiline':False]
['text':' frame_id is unused','line_number':245,'multiline':False]
['text':' namespace','line_number':267,'multiline':False]
['text':' To trace graph we create a profile node for every one','line_number':269,'multiline':False]
['text':' in a scripted graph. When a profiled node handler runs','line_number':270,'multiline':False]
['text':' we insert a new traced node in a trace graph','line_number':271,'multiline':False]
['text':' If the profiled node handler is called in a loop','line_number':272,'multiline':False]
['text':' we will have multiple nodes.','line_number':273,'multiline':False]
['text':' We also maintain the mapping between the outputs of traced','line_number':274,'multiline':False]
['text':' nodes and the outputs of the node in the scripted graph.','line_number':275,'multiline':False]
['text':' There are a few subtleties with tracing Ifs and Loops','line_number':276,'multiline':False]
['text':' discussed above','line_number':277,'multiline':False]
['text':' Set type of the graph inputs using the inputs from the stack.','line_number':292,'multiline':False]
['text':' This needs to be done before running the interpreter because the stack','line_number':293,'multiline':False]
['text':' will only have the outputs after the run.','line_number':294,'multiline':False]
['text':' namespace torch::jit','line_number':316,'multiline':False]
