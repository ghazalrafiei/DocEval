['text':' it is possible after all the work we did to scan this aggregate,','line_number':13,'multiline':False]
['text':' we found no tensors or optionals to specialize. In this case, just','line_number':14,'multiline':False]
['text':' generate a skip for the whole aggregate.','line_number':15,'multiline':False]
['text':' the simple vm that scans instructions_ has a limited stack depth,','line_number':28,'multiline':False]
['text':' this prevents going deeper than that.','line_number':29,'multiline':False]
['text':' note that Optional[Tuple] or Optional[Class] will just register','line_number':41,'multiline':False]
['text':' as optional (previously they didn't at all, so it's not a regression).','line_number':42,'multiline':False]
['text':' it is only safe to specialize because someone might have written to it','line_number':58,'multiline':False]
['text':' this is a coarse-grained guarantee that the slots of a class will not be','line_number':71,'multiline':False]
['text':' modified by the function. It works fine for things that used be read-only','line_number':72,'multiline':False]
['text':' modules, but will be overly conservative when some classes are written to.','line_number':73,'multiline':False]
['text':' Doing alias analysis and looking for writes to the class would be more','line_number':74,'multiline':False]
['text':' accurate.','line_number':75,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':135,'multiline':False]
['text':' The stack of IValue lists','line_number':136,'multiline':False]
['text':' The stack gets initialized with the input list','line_number':137,'multiline':False]
['text':' offset to the top of the stack','line_number':139,'multiline':False]
['text':' consume a tensor optional and add to the argspec','line_number':143,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.uninitialized.Assign)','line_number':144,'multiline':False]
['text':' consume a tensor and add to the argspec','line_number':152,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.uninitialized.Assign)','line_number':153,'multiline':False]
['text':' consume a non-tensor optional and add to the argspec','line_number':157,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.uninitialized.Assign)','line_number':158,'multiline':False]
['text':' consume tuple','line_number':162,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.uninitialized.Assign)','line_number':163,'multiline':False]
['text':' push list of tuple elements to the stack','line_number':168,'multiline':False]
['text':' consume object','line_number':172,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.uninitialized.Assign)','line_number':173,'multiline':False]
['text':' push list of object elements to the stack','line_number':177,'multiline':False]
['text':' consume and skip an element','line_number':181,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.uninitialized.Assign)','line_number':182,'multiline':False]
['text':' For every input of a given graph, returns a most detailed type that can be','line_number':193,'multiline':False]
['text':' inferred for it based on this ArgumentSpec.','line_number':194,'multiline':False]
['text':' number of specialized tensors seen so far','line_number':206,'multiline':False]
['text':' number of specialized optionals seen so far','line_number':208,'multiline':False]
['text':' FIXME: by doing this only on the inputs, we only capture graph inputs and','line_number':268,'multiline':False]
['text':' not','line_number':269,'multiline':False]
['text':'        optionals in tuples or objects. For that to work, we would have','line_number':270,'multiline':False]
['text':'        to investigate the uses of the inputs in detail to change the','line_number':271,'multiline':False]
['text':'        accesses/ unwrapping','line_number':272,'multiline':False]
['text':' if an optional input hasn't been specialized above, it is None','line_number':277,'multiline':False]
['text':' so we disconnect the input here and replace its uses with','line_number':278,'multiline':False]
['text':' a constant','line_number':279,'multiline':False]
['text':' namespace torch::jit','line_number':289,'multiline':False]
