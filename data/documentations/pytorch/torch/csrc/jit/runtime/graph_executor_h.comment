['text':' Notice that those structs don't manage lifetime of their members.','line_number':36,'multiline':False]
['text':' They are only valid only right after you call getDebugState() and should','line_number':37,'multiline':False]
['text':' never be used again once another GraphExecutor function is called.','line_number':38,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':40,'multiline':False]
['text':' XXX: members of this field are optional','line_number':43,'multiline':False]
['text':' `remaining_bailout_depth` stands for the maximum number of profiled and','line_number':71,'multiline':False]
['text':' specialized recompilations allowed for the current `GraphExecutor`. if','line_number':72,'multiline':False]
['text':' remaining_bailout_depth is equal to 0, `GraphExecutor` won't perform any','line_number':73,'multiline':False]
['text':' profiling and specialization. This is also equivalent to the','line_number':74,'multiline':False]
['text':' SIMPLE_EXECUTOR mode. if remaining_bailout_depth is greater than 0,','line_number':75,'multiline':False]
['text':' `GraphExecutor` will profile and specialize its input graph based on the','line_number':76,'multiline':False]
['text':' profiled information whenever a bailout check is failed/triggered, a new','line_number':77,'multiline':False]
['text':' `GraphExecutor` will be created. This new `GraphExecutor`'s','line_number':78,'multiline':False]
['text':' remaining_bailout_depth will be reduced by 1.','line_number':79,'multiline':False]
['text':' If no bailout depth is passed, the depth will be initialized from the','line_number':80,'multiline':False]
['text':' current global fusion strategy settings.','line_number':81,'multiline':False]
['text':' These passes need to run before it is valid to pass to the interpreter','line_number':99,'multiline':False]
['text':' regardless of whether sizes have been specialized or not.','line_number':100,'multiline':False]
['text':' for debugging information we expose a way to get the last actually','line_number':134,'multiline':False]
['text':' run graph. Previous approaches allowed querying the GraphExecutor','line_number':135,'multiline':False]
['text':' for what graph it would run in certain circumstances (graphFor), but','line_number':136,'multiline':False]
['text':' this is fragile because we sometimes change how these decisions are made.','line_number':137,'multiline':False]
['text':' This interface still allows our tests to look at optimized graphs, but','line_number':138,'multiline':False]
['text':' with less plumbing.','line_number':139,'multiline':False]
['text':' namespace detail','line_number':140,'multiline':False]
['text':' namespace torch::jit','line_number':142,'multiline':False]
