['text':' [value refinement algorithm]','line_number':7,'multiline':False]
['text':' When a comparison like `cond = len(x) == 4` or `cond = len(x) != 4` is made,','line_number':9,'multiline':False]
['text':' `cond` value carries information (refinements) about the len of `x`.','line_number':10,'multiline':False]
['text':' When `cond` is used as the conditional of an if statement, the information','line_number':11,'multiline':False]
['text':' it carries for its true value can be inserted into the true block','line_number':12,'multiline':False]
['text':' and the same for its false value.','line_number':13,'multiline':False]
['text':' For something like `y = len(x) if len(x) == 1 else 1`, in the true branch','line_number':14,'multiline':False]
['text':' we can replace len(x) with 1 because the true refinements from `len(x) == 1`','line_number':15,'multiline':False]
['text':' will be present in the true block.','line_number':16,'multiline':False]
['text':' Additionally, we can optimize something like:','line_number':17,'multiline':False]
['text':' if len(x) != 4:','line_number':18,'multiline':False]
['text':'    raise Exception(...)','line_number':19,'multiline':False]
['text':' return len(x)','line_number':20,'multiline':False]
['text':' Because the true block always throws, whatever refinements exist in the false','line_number':21,'multiline':False]
['text':' block become present in the owning block of the if node. We can also merge','line_number':22,'multiline':False]
['text':' refinements carried by two different booleans across an if node join by','line_number':23,'multiline':False]
['text':' taking the intersections of their refinements.','line_number':24,'multiline':False]
['text':' if cond:','line_number':25,'multiline':False]
['text':'    z = len(x) == 4 and len(y) == 5','line_number':26,'multiline':False]
['text':' else:','line_number':27,'multiline':False]
['text':'    z = len(x) == 4','line_number':28,'multiline':False]
['text':' Here, z's true value will refine the len(x) to 4, but not len(y).','line_number':29,'multiline':False]
['text':' If the code was written as:','line_number':30,'multiline':False]
['text':' if cond:','line_number':31,'multiline':False]
['text':'    z = len(x) == 4 and len(y) == 5','line_number':32,'multiline':False]
['text':' else:','line_number':33,'multiline':False]
['text':'    z = False','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' Then z's true value would refine x and y, because if z is true it had to have','line_number':36,'multiline':False]
['text':' come from the true block. Code that is written with `and` or `or` will','line_number':37,'multiline':False]
['text':' desugar to something similar. Additionally, any True refinements that were','line_number':38,'multiline':False]
['text':' present on `cond` can also be associated with the if node True output value.','line_number':39,'multiline':False]
['text':' The intersection of the refinements is the Value* which are in both','line_number':41,'multiline':False]
['text':' refinements and are refined to the same length','line_number':42,'multiline':False]
['text':' in an example like:','line_number':43,'multiline':False]
['text':' if cond:','line_number':44,'multiline':False]
['text':'    x = len(a) == 4 and len(b) == 5','line_number':45,'multiline':False]
['text':' else:','line_number':46,'multiline':False]
['text':'    x = len(a) == 4','line_number':47,'multiline':False]
['text':' For the x output of the node we take the intersection between','line_number':48,'multiline':False]
['text':' the refinements stored on each block output, which will result','line_number':49,'multiline':False]
['text':' in only the refinement of len(a) == 4','line_number':50,'multiline':False]
['text':' To union, just take all refinements from both inputs. We do not need to worry','line_number':64,'multiline':False]
['text':' about len refinements disagreeing because a path like `if len(x) == 4 and','line_number':65,'multiline':False]
['text':' len(x) == 5` will never be taken','line_number':66,'multiline':False]
['text':' in an example like:','line_number':67,'multiline':False]
['text':' if len(a) == 5:','line_number':68,'multiline':False]
['text':'     x = len(b) == 4','line_number':69,'multiline':False]
['text':' else:','line_number':70,'multiline':False]
['text':'     x = False','line_number':71,'multiline':False]
['text':' For the output x Value, if is true then the refinements present in the true','line_number':72,'multiline':False]
['text':' block must also be true, so we take the union of `len(a) == 5` and len(b) ==','line_number':73,'multiline':False]
['text':' 4` and assign them to true refinements of the output x value. This is a very','line_number':74,'multiline':False]
['text':' common pattern in desugaring of `and` or `or` boolean expressions','line_number':75,'multiline':False]
['text':' if one block throws, the refinements for the other block','line_number':98,'multiline':False]
['text':' become present in the current block, and all bool outputs','line_number':99,'multiline':False]
['text':' of the if node take their refinements from non throwing block','line_number':100,'multiline':False]
['text':' output','line_number':101,'multiline':False]
['text':' if either block has a constant bool output, e.g. `true` on the','line_number':140,'multiline':False]
['text':' true block, then for the `false` value we can take the false','line_number':141,'multiline':False]
['text':' refinements present on the false block and from the other block','line_number':142,'multiline':False]
['text':' output value bc if the output is false it had to have come from the','line_number':143,'multiline':False]
['text':' false block. if len(a) == 5:','line_number':144,'multiline':False]
['text':'     x = len(b) == 4','line_number':145,'multiline':False]
['text':' else:','line_number':146,'multiline':False]
['text':'     x = False','line_number':147,'multiline':False]
['text':' if x is true, then we know both len(a) == 5 and len(b) == 4','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':' if neither block has a constant bool value, we just take the','line_number':150,'multiline':False]
['text':' intersection of the refinements from boolean outputs.','line_number':151,'multiline':False]
['text':' if cond:','line_number':152,'multiline':False]
['text':'    x = len(a) == 4 and len(b) == 5','line_number':153,'multiline':False]
['text':' else:','line_number':154,'multiline':False]
['text':'    x = len(a) == 4','line_number':155,'multiline':False]
['text':' here, we know if x is true, then len(a) == 4, but not len(b)','line_number':156,'multiline':False]
['text':' == 5, because that refinement is not present in the true block.','line_number':157,'multiline':False]
['text':' TODO: could also take intersection of refinements present in','line_number':158,'multiline':False]
['text':' both blocks, but it's not a real use case.','line_number':159,'multiline':False]
['text':' boolean_value_refinements[value] is safe to access because','line_number':161,'multiline':False]
['text':' BooleanRefinementMapping has a default constructor','line_number':162,'multiline':False]
['text':' __not__(inp) -> reverse refinements','line_number':205,'multiline':False]
['text':' value == False / value != True -> equivalent to __not__ value','line_number':224,'multiline':False]
['text':' value == True / value != False -> equivalent to value','line_number':225,'multiline':False]
['text':' namespace jit','line_number':241,'multiline':False]
['text':' namespace torch','line_number':242,'multiline':False]
