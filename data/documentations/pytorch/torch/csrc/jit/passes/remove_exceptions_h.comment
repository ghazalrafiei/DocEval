['text':' Considering prim::RaiseException nodes unreachable, simplify prim::If nodes','line_number':8,'multiline':False]
['text':' when one of the branches contains prim::RaiseException.','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' This pass is illegal in general case as the modified graph might not throw','line_number':11,'multiline':False]
['text':' an exception that the original graph would throw. The purpose of the pass is','line_number':12,'multiline':False]
['text':' to cleanup the graph in a "risky" way by removing pathways leading to','line_number':13,'multiline':False]
['text':' RaiseExceptions nodes. In some sense, this pass could be considered as a','line_number':14,'multiline':False]
['text':' "Release" mode, while the original graph was in a "Debug" mode.','line_number':15,'multiline':False]
['text':' The pass should only be used when such transformation is guaranteed to be','line_number':16,'multiline':False]
['text':' safe by some other mechanisms. For instance, when we know exact shapes of','line_number':17,'multiline':False]
['text':' tensors flowing through the graph and tensors with such shapes never cause','line_number':18,'multiline':False]
['text':' exceptions.','line_number':19,'multiline':False]
['text':' namespace jit','line_number':22,'multiline':False]
['text':' namespace torch','line_number':23,'multiline':False]
