['text':' Closure nodes are emitted as a tuple of (function %, context tuple %)','line_number':8,'multiline':False]
['text':' Inside the closure the closure is then unpacked so that all closed over','line_number':9,'multiline':False]
['text':' values are set. A function closing over a and b would look like:','line_number':10,'multiline':False]
['text':' def foo(context):','line_number':11,'multiline':False]
['text':'  a, b = context','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':' To fork the closure, we need to set each value in the context tuple','line_number':14,'multiline':False]
['text':' as an explicit input to the fork node, and then within the closure','line_number':15,'multiline':False]
['text':' subgraph, replace the context unpacking value with the new graph input.','line_number':16,'multiline':False]
['text':' fork(foo) ->','line_number':17,'multiline':False]
['text':' def foo(a, b):','line_number':18,'multiline':False]
['text':' namespace jit','line_number':85,'multiline':False]
['text':' namespace torch','line_number':86,'multiline':False]
