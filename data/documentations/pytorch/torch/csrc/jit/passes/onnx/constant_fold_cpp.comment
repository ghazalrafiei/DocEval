['text':' Only conversion of ONNX numeric types is included here.','line_number':35,'multiline':False]
['text':' Unsigned ONNX types are mapped to the next higher signed','line_number':36,'multiline':False]
['text':' ScalarType type.','line_number':37,'multiline':False]
['text':' index higher than dimension is treated as the end.','line_number':61,'multiline':False]
['text':' ONNX slice accepts negative starts and ends values.','line_number':94,'multiline':False]
['text':' ONNX slice accepts negative axis, fix this for aten op','line_number':96,'multiline':False]
['text':' Checking validity of 'starts' and 'ends' input','line_number':119,'multiline':False]
['text':' Number of elements of 'starts' and 'ends' 1-D input tensors should be the','line_number':128,'multiline':False]
['text':' same','line_number':129,'multiline':False]
['text':' Checking 'axes' input, if available.','line_number':132,'multiline':False]
['text':' Number of elements of 'axes' and 'ends' 1-D input tensors should be the','line_number':142,'multiline':False]
['text':' same','line_number':143,'multiline':False]
['text':' ONNX slice accepts negative axis, fix this for aten op','line_number':151,'multiline':False]
['text':' Checking 'steps' input, if available.','line_number':159,'multiline':False]
['text':' Number of elements of 'steps' and 'ends' 1-D input tensors should be','line_number':168,'multiline':False]
['text':' the same','line_number':169,'multiline':False]
['text':' Only steps == 1 are supported for constant-folding.','line_number':177,'multiline':False]
['text':' ONNX slice accepts negative starts and ends values.','line_number':190,'multiline':False]
['text':' Refer to AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_EXCEPT_COMPLEX_HALF','line_number':201,'multiline':False]
['text':' Need copy here','line_number':256,'multiline':False]
['text':' One example shows at::div(CPULongType, CPULongType) = CPUFloatType,','line_number':288,'multiline':False]
['text':' So we add a cast below.','line_number':289,'multiline':False]
['text':' Checking validity of 'axes' input','line_number':308,'multiline':False]
['text':' ONNX unsqueeze accepts negative axes','line_number':318,'multiline':False]
['text':' From https://pytorch.org/docs/stable/generated/torch.unsqueeze.html','line_number':319,'multiline':False]
['text':' Negative dim will correspond to unsqueeze() applied at dim = dim +','line_number':320,'multiline':False]
['text':' input.dim() + 1.','line_number':321,'multiline':False]
['text':' Squeeze version 13 input axes is optional, inputTensorValues.size() ==','line_number':353,'multiline':False]
['text':' 1 means axes equal to None','line_number':354,'multiline':False]
['text':' Checking validity of 'axes' input','line_number':357,'multiline':False]
['text':' ONNX Squeeze accepts negative axes','line_number':367,'multiline':False]
['text':' Set value of allowzero','line_number':415,'multiline':False]
['text':' All shape dim values should be >= -1','line_number':421,'multiline':False]
['text':' onnx::Reshape supports a shape dim value to be zero, in','line_number':422,'multiline':False]
['text':' which case the actual dim value remains unchanged. However,','line_number':423,'multiline':False]
['text':' at::reshape does not support shape dim value to be zero','line_number':424,'multiline':False]
['text':' default axis = 0','line_number':475,'multiline':False]
['text':' If axis attribute for onnx::Gather has a value less than 0,','line_number':480,'multiline':False]
['text':' It needs to be adjusted (+= dim sizes) for aten op','line_number':481,'multiline':False]
['text':' at::index_select only supports indices with rank <= 1.','line_number':485,'multiline':False]
['text':' See https://pytorch.org/docs/master/generated/torch.index_select.html','line_number':486,'multiline':False]
['text':' If the device of indices tensor is not the same with it of the input','line_number':490,'multiline':False]
['text':' tensor, move it to the device of the input tensor','line_number':491,'multiline':False]
['text':' If indices input for onnx::Gather has a value less than 0,','line_number':495,'multiline':False]
['text':' It needs to be adjusted (+= dim value) for aten op','line_number':496,'multiline':False]
['text':' If rank of indices is 0, rank of output tensor should be','line_number':501,'multiline':False]
['text':' rank_of_input - 1.','line_number':502,'multiline':False]
['text':' Checks val is a parameter and not a real input','line_number':551,'multiline':False]
['text':' Check other types?','line_number':554,'multiline':False]
['text':' If the parent of 'node' is an onnx::Constant node,','line_number':603,'multiline':False]
['text':' and 'node' is the only downstream node it serves (this','line_number':604,'multiline':False]
['text':' is important), then push it in the list to remove.','line_number':605,'multiline':False]
['text':' namespace onnx_constant_fold','line_number':613,'multiline':False]
['text':' This method updates the block in-place to fold all the one-time','line_number':615,'multiline':False]
['text':' constant-based computations/ops into an initializer node.','line_number':616,'multiline':False]
['text':'','line_number':617,'multiline':False]
['text':' NB: This is not constant folding in the traditional sense, as we','line_number':618,'multiline':False]
['text':' don't try particularly hard to evaluate operations on constant nodes.','line_number':619,'multiline':False]
['text':' This is more of a partial evaluation analysis, where operations on constant','line_number':620,'multiline':False]
['text':' nodes can be lifted so we run them earlier, before the usual parameters are','line_number':621,'multiline':False]
['text':' known.','line_number':622,'multiline':False]
['text':' Only the root block is constant-folded. Folding nested blocks is','line_number':632,'multiline':False]
['text':' not supported for now.','line_number':633,'multiline':False]
['text':' Constant folding for multiple-output nodes not supported. Skip it.','line_number':637,'multiline':False]
['text':' If all the inputs to this node are not either parameter or','line_number':641,'multiline':False]
['text':' onnx::Constant, then skip this node.','line_number':642,'multiline':False]
['text':' This is a terminal node with no inputs, such as onnx::Constant. Skip','line_number':649,'multiline':False]
['text':' it.','line_number':650,'multiline':False]
['text':' Constant folding is not supported for this op. Skip it.','line_number':656,'multiline':False]
['text':' Create a new input to the block (prim::Param node output). Add a','line_number':663,'multiline':False]
['text':' corresponding entry in valToParamMap. Replace the downstream inputs','line_number':664,'multiline':False]
['text':' with this value, and disconnect all the input values of the folded','line_number':665,'multiline':False]
['text':' node.','line_number':666,'multiline':False]
['text':' Next we remove the current node that has been replaced by','line_number':681,'multiline':False]
['text':' an initializer. But before we start de-wiring this node,','line_number':682,'multiline':False]
['text':' we check if any parents of this nodes were onnx::Constant','line_number':683,'multiline':False]
['text':' and remove them first, and then remove the current node.','line_number':684,'multiline':False]
['text':' If the parent was an initializer (not onnx::Constant) then','line_number':685,'multiline':False]
['text':' they are all removed by the eraseUnusedBlockInputs() call','line_number':686,'multiline':False]
['text':' (below) outside the loop.','line_number':687,'multiline':False]
['text':' namespace jit','line_number':710,'multiline':False]
['text':' namespace torch','line_number':711,'multiline':False]
