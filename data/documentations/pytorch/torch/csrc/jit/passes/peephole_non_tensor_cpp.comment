['text':'*
 * Check whether the arithmetic node is binary between integers, and return a
 * constant int value if there exists one.
 *
 * @pre node is integer arithmetic.
 * @post if there's one constant in two operands, then the second operand is
 *       constant.
 ','line_number':14,'multiline':True]
['text':'*
 * Remove a mul/floordiv node if it is multiplication or division by 1.
 *
 * @pre node is either aten::mul, aten::floordiv or aten::div
 ','line_number':38,'multiline':True]
['text':'*
 * Simplify an add/sub node with its input node, i.e. merge the constant parts
 * together.
 *
 * @pre node is either aten::add or aten::sub
 ','line_number':53,'multiline':True]
['text':' namespace','line_number':92,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-pass-by-value)','line_number':95,'multiline':False]
['text':' Any Value whose type is None should be replaced with a Constant','line_number':114,'multiline':False]
['text':' This can occur if a module has an optional attribute, and it is','line_number':115,'multiline':False]
['text':' initialized as None.','line_number':116,'multiline':False]
['text':' XXX: remember that if you want to simplify an expression by combining','line_number':124,'multiline':False]
['text':' multiple nodes into a different one, then you need to check that they','line_number':125,'multiline':False]
['text':' all belong to the given block','line_number':126,'multiline':False]
['text':' TODO: this doesn't work with Scalar-Tensor ops! We should','line_number':127,'multiline':False]
['text':' canonicalize those','line_number':128,'multiline':False]
['text':' this handles redundant short circuits like "x and True" or "x or','line_number':131,'multiline':False]
['text':' False"','line_number':132,'multiline':False]
['text':' if an if node's output equals its condition replace output with','line_number':141,'multiline':False]
['text':' condition','line_number':142,'multiline':False]
['text':' check for types that can be refined','line_number':154,'multiline':False]
['text':' common case of optional for now','line_number':156,'multiline':False]
['text':' if we are comparing a None value with a value that can't be None','line_number':173,'multiline':False]
['text':' replace the output with true if node is __isnot__ or false if node is','line_number':174,'multiline':False]
['text':' __is__','line_number':175,'multiline':False]
['text':' we are unwrapping an input that can't be None, remove the unwrap','line_number':195,'multiline':False]
['text':' unchecked_cast is not generated for tensor properties, so we are not','line_number':208,'multiline':False]
['text':' losing anything by calling unshapedType here','line_number':209,'multiline':False]
['text':' only handling common immutable types here because other types like','line_number':234,'multiline':False]
['text':' Tensor or list of Tensor might throw on aten::eq','line_number':235,'multiline':False]
['text':' namespace jit','line_number':287,'multiline':False]
['text':' namespace torch','line_number':288,'multiline':False]
