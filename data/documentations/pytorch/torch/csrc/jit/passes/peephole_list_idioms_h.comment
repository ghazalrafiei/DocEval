['text':' Peephole Optimizes List ops such as len(li) and li[1].','line_number':8,'multiline':False]
['text':' 1. Construct/Unpack optimizations','line_number':9,'multiline':False]
['text':' Given a function like this:','line_number':10,'multiline':False]
['text':'    def foo(a, b):','line_number':11,'multiline':False]
['text':'        li = [a, b]','line_number':12,'multiline':False]
['text':'        x, y = li','line_number':13,'multiline':False]
['text':'        return x, y','line_number':14,'multiline':False]
['text':' This pass produces (after dead code elimination):','line_number':15,'multiline':False]
['text':'    def foo(a, b):','line_number':16,'multiline':False]
['text':'        return a, b','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' This is only applied to lists that are not modified.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' 2. getitem optimizations','line_number':21,'multiline':False]
['text':' Given a function like this:','line_number':22,'multiline':False]
['text':'     def foo(a, b):','line_number':23,'multiline':False]
['text':'         li = [a, b]','line_number':24,'multiline':False]
['text':'         x = li[0]','line_number':25,'multiline':False]
['text':'         return x','line_number':26,'multiline':False]
['text':' This pass produces (after dead code elimination):','line_number':27,'multiline':False]
['text':'     def foo(a, b):','line_number':28,'multiline':False]
['text':'         return a','line_number':29,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':' This optimization can only happen if the list is not modified.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' 3. len optimizations','line_number':33,'multiline':False]
['text':' Given a function like this:','line_number':34,'multiline':False]
['text':'     def foo():','line_number':35,'multiline':False]
['text':'         li = [1, 2]','line_number':36,'multiline':False]
['text':'         return len(li)','line_number':37,'multiline':False]
['text':' This pass produces (after dead code elimination):','line_number':38,'multiline':False]
['text':'     def foo():','line_number':39,'multiline':False]
['text':'         return 2','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':' This has the same requirements as the getitem optimizations.','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':' 4. ListConstruct + ListConstruct','line_number':44,'multiline':False]
['text':' Given a function like this:','line_number':45,'multiline':False]
['text':'     def foo():','line_number':46,'multiline':False]
['text':'         return [1, 2] + [3, 4]','line_number':47,'multiline':False]
['text':' This pass produces (after dead code elimination):','line_number':48,'multiline':False]
['text':'     def foo():','line_number':49,'multiline':False]
['text':'         return [1, 2, 3, 4]','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':' This is only applied to lists that are not modified.','line_number':52,'multiline':False]
['text':'','line_number':53,'multiline':False]
['text':' 5. Slice','line_number':54,'multiline':False]
['text':' Given a function like this:','line_number':55,'multiline':False]
['text':'     def foo():','line_number':56,'multiline':False]
['text':'         return [1, 2, 3, 4, 5][0:2]','line_number':57,'multiline':False]
['text':' This pass produces (after deadcode elimination):','line_number':58,'multiline':False]
['text':'     def foo():','line_number':59,'multiline':False]
['text':'         return [1, 2]','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' Currently this is invoked as part of PeepholeOptimize','line_number':62,'multiline':False]
['text':' return true if graph is modified.','line_number':63,'multiline':False]
['text':' If `refine_list_len` is true will attempt to refine the len of lists through','line_number':64,'multiline':False]
['text':' len comparisons and assertions. This does not generally optimize pytorch','line_number':65,'multiline':False]
['text':' programs so it is not called by default in PeepholeOptimize.','line_number':66,'multiline':False]
['text':' namespace jit','line_number':71,'multiline':False]
['text':' namespace torch','line_number':72,'multiline':False]
