['text':'find_first','line_number':24,'multiline':True]
['text':' When merging a node into a subgraph, we wish to preserve all of the','line_number':28,'multiline':False]
['text':' aliasing properties of the node's outputs. It is difficult to track','line_number':29,'multiline':False]
['text':' the node or its contained nodes through all of the ir manipulation','line_number':30,'multiline':False]
['text':' involved in merging; it is pretty easy to uniquely identify the value','line_number':31,'multiline':False]
['text':' based on its uses. We can identify the value by its last use in the graph.','line_number':32,'multiline':False]
['text':' Values which do not have uses or which do not have a last use','line_number':33,'multiline':False]
['text':' outside of the subgraph to be merged into we do not need to track.','line_number':34,'multiline':False]
['text':' `to_merge` is the node we're merginginto a subgraph, `existing_subgraph` is','line_number':36,'multiline':False]
['text':' the subgraph node that we're merging into if it exists','line_number':37,'multiline':False]
['text':' temporary node to put the aliasing properties of the node before its','line_number':48,'multiline':False]
['text':' merged and destroyed','line_number':49,'multiline':False]
['text':'find_first','line_number':66,'multiline':True]
['text':' if it doesnt have a use it shouldnt have been added as output','line_number':67,'multiline':False]
['text':' existing outputs of the subgraph do not need to have alias db mappings','line_number':71,'multiline':False]
['text':' updated','line_number':72,'multiline':False]
['text':' When we merge a node into a subgraph, the new subgraph outputs','line_number':104,'multiline':False]
['text':' have the same aliasing properties as the original node's outputs.','line_number':105,'multiline':False]
['text':' Here we create a placeholder node, transfer the aliasing properties','line_number':106,'multiline':False]
['text':' to the placeholder, execute the merge, and transfer the aliasing','line_number':107,'multiline':False]
['text':' properties to the appropriate fusion group outputs','line_number':108,'multiline':False]
['text':' Combine the nodes in two subgraph together. The nodes will end up in','line_number':115,'multiline':False]
['text':' `mergeTo`, and `mergeFrom` is destroyed.','line_number':116,'multiline':False]
['text':' already visited, no need to visit descendants','line_number':166,'multiline':False]
['text':' namespace','line_number':211,'multiline':False]
['text':' Inline the graph, replace uses of node outputs and destroy the node','line_number':218,'multiline':False]
['text':' Map from values in the surrounding graph to inputs/outputs in the subgraph','line_number':294,'multiline':False]
['text':' Add n's inputs to the group's input list if we don't already have them','line_number':309,'multiline':False]
['text':' There are currently downstream usage that relies on a fixed ordering','line_number':319,'multiline':False]
['text':' of graph inputs. TODO: remove','line_number':320,'multiline':False]
['text':' Clone constants inside the subgraph instead of referencing them, to','line_number':336,'multiline':False]
['text':' enable more optimizations','line_number':337,'multiline':False]
['text':' The common case: this is a regular input, so just register it with','line_number':343,'multiline':False]
['text':' the group node and inner subgraph','line_number':344,'multiline':False]
['text':' Merge the node into the graph','line_number':353,'multiline':False]
['text':' If n's outputs were inputs to `group`, remove them since we just merged','line_number':358,'multiline':False]
['text':' n in.','line_number':359,'multiline':False]
['text':'','line_number':360,'multiline':False]
['text':' i.e.,','line_number':361,'multiline':False]
['text':' x = f(w); group(x, y, z) becomes group(w, y, z).','line_number':362,'multiline':False]
['text':' x, y, z = f(w); group(x, y, z) becomes group(w).','line_number':363,'multiline':False]
['text':' Add n's outputs to the group node and inner subgraph outputs.','line_number':376,'multiline':False]
['text':' Remove the original node now that the merge is complete','line_number':385,'multiline':False]
['text':' We wait till destroying `toMerge` before pruning subgraph outputs,','line_number':390,'multiline':False]
['text':' since destroying `toMerge` could cause a subgraph output to no longer','line_number':391,'multiline':False]
['text':' have any uses','line_number':392,'multiline':False]
['text':' unfuse in the reverse topo order','line_number':449,'multiline':False]
['text':' we have at least two aliased outputs','line_number':482,'multiline':False]
['text':' we skip the earliest node w.r.t. the topo order','line_number':483,'multiline':False]
['text':' NB. after some nodes are unfused, the outputs of some other nodes','line_number':484,'multiline':False]
['text':' may become the outputs of the subgraph and alias the remaining ones','line_number':485,'multiline':False]
['text':' so we have to re-run this function until there are no more changes','line_number':486,'multiline':False]
['text':' unfuse in the reverse topo order','line_number':496,'multiline':False]
['text':' collect output indices','line_number':505,'multiline':False]
['text':' these node inputs need to be added to subgraph's outputs','line_number':548,'multiline':False]
['text':' put them in vmap','line_number':549,'multiline':False]
['text':' this could happen if `n` uses two or more outputs','line_number':552,'multiline':False]
['text':' of a constant node and we already cloned the constant','line_number':553,'multiline':False]
['text':' into the outer graph and mapped its outputs','line_number':554,'multiline':False]
['text':' in case we have a multi-output const, map the rest of the outputs','line_number':562,'multiline':False]
['text':' so when we get to clone `n`, `n`'s clone will use the outputs of this','line_number':563,'multiline':False]
['text':' constant clone','line_number':564,'multiline':False]
['text':' If hash-string plus '_' can fit into maxlen, then truncate the original','line_number':610,'multiline':False]
['text':' string correspondingly so that the final string with the hash included fits','line_number':611,'multiline':False]
['text':' into maxlen. If that's not possible, at least truncate the original string','line_number':612,'multiline':False]
['text':' to maxlen (and append the hash to it).','line_number':613,'multiline':False]
['text':' namespace SubgraphUtils','line_number':637,'multiline':False]
['text':' namespace jit','line_number':638,'multiline':False]
['text':' namespace torch','line_number':639,'multiline':False]
