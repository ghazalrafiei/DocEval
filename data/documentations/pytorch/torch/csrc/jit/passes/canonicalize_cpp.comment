['text':' Canonicalize a graph, renumbering it so that all structurally equivalent','line_number':9,'multiline':False]
['text':' graphs have same numbers.','line_number':10,'multiline':False]
['text':' keep_unique_names: If false, canonicalizes unique names by removing them','line_number':11,'multiline':False]
['text':'   and replacing them with normal value names.','line_number':12,'multiline':False]
['text':'   Otherwise, ignores values with unique names.','line_number':13,'multiline':False]
['text':' Which index in b's owning Node is b','line_number':53,'multiline':False]
['text':'
 * This establishes a canonical ordering of nodes.
 * If n1 and n2 are in the same block, whichever node appears first
 * is before the other.
 * If n1 and n2 are contained in different blocks of an if node,
 * then whichever block is in the true block is ordered before the other.
 * If n1 contains n2, then n1 is before n2. This has the nice property that
 * whichever node appears first in a dump of the graph is before the other.
 * NB: this is not a topological index. Topologically, two nodes in
 * different blocks of an if node are not topologically < or > each other.
 ','line_number':65,'multiline':True]
['text':' Invalid to call with the same node as both args','line_number':77,'multiline':False]
['text':' Set n1 and n2 to be the number of blocks from the Graph block','line_number':80,'multiline':False]
['text':' n2 contains n1','line_number':86,'multiline':False]
['text':' n1 contains n2','line_number':94,'multiline':False]
['text':' Now they are the same numer of blocks from the graph block,','line_number':100,'multiline':False]
['text':' recurse upwards, checking if they are on the same block','line_number':101,'multiline':False]
['text':' take whichever node is in the earlier block','line_number':114,'multiline':False]
['text':' If two uses are the same node, we order on offset','line_number':126,'multiline':False]
['text':' initialize original index locations','line_number':168,'multiline':False]
['text':' Sort values based on canonical ordering of their first usage','line_number':174,'multiline':False]
['text':' if neither has any uses, use original ordering. Since the','line_number':176,'multiline':False]
['text':' only values that jitter are ones added by the compiler and are guaranteed','line_number':177,'multiline':False]
['text':' to have uses, original ordering is fine.','line_number':178,'multiline':False]
['text':' We iterate in reverse since ordering of a node's outputs is dependent on','line_number':208,'multiline':False]
['text':' the value use following it in the graph','line_number':209,'multiline':False]
['text':' Since an a control flow node's outputs are after','line_number':219,'multiline':False]
['text':' the values outputted within its blocks, first canonicalize','line_number':220,'multiline':False]
['text':' the nodes outputs and then recurse on its blocks','line_number':221,'multiline':False]
['text':' Canonicalize a graph's control flow node outputs. We do this to solve jitter','line_number':228,'multiline':False]
['text':' issues with outputs added to control flow nodes after the first pass of','line_number':229,'multiline':False]
['text':' compilation in ir_emitter.cpp','line_number':230,'multiline':False]
['text':' namespace jit','line_number':234,'multiline':False]
['text':' namespace torch','line_number':235,'multiline':False]
