['text':' Only looks for _convolution pattern.','line_number':50,'multiline':False]
['text':' Thus assumes that tracing will have always gotten rid of aten::conv2d or','line_number':51,'multiline':False]
['text':' aten::conv3d. If it did not, BN folding will fail.','line_number':52,'multiline':False]
['text':' We come here only if the bias was not present in the module.','line_number':76,'multiline':False]
['text':' In that case, the corresponding graph will not have getAttr("bias")','line_number':77,'multiline':False]
['text':' Insert that in the graph.','line_number':78,'multiline':False]
['text':' And change _convolution to take the new value.','line_number':79,'multiline':False]
['text':'*
   * In this step we find all Conv - BatchNorm patterns in the graph
   * and extract the corresponding parameters for these two modules,
   * and record informations for the modifications of the graph without
   * actually performing these modifications.
   ','line_number':120,'multiline':True]
['text':'*
   * In this step we perform all the modifications including
   * setting the attributes for conv module, rewriting values
   * and deleting nodes in the graph
   ','line_number':127,'multiline':True]
['text':' A map from graph to a list of tuple of paths of matched conv and bn module','line_number':143,'multiline':False]
['text':' e.g. if we have a graph `g` containing following code','line_number':144,'multiline':False]
['text':' x = self.sub.conv1(..)','line_number':145,'multiline':False]
['text':' x = self.sub.bn1(..)','line_number':146,'multiline':False]
['text':' x = self.sub.conv2(..)','line_number':147,'multiline':False]
['text':' x = self.sub.bn2(..)','line_number':148,'multiline':False]
['text':' then the value for graph `g` in this map will be:','line_number':149,'multiline':False]
['text':' [(['sub', 'conv1'], ['sub', 'bn1']), (['sub', 'conv2'], ['sub', 'bn2'])]','line_number':150,'multiline':False]
['text':' the first entry of the list is the paths to first conv-bn match','line_number':151,'multiline':False]
['text':' the second entry of the list is the path to second match','line_number':152,'multiline':False]
['text':' We will put submodules into this worklist and keep processing items from it','line_number':261,'multiline':False]
['text':' one by one. We start by just putting the top module there.','line_number':262,'multiline':False]
['text':' Queue submodules for processing','line_number':268,'multiline':False]
['text':' Process all method of the current module','line_number':273,'multiline':False]
['text':' This is to make sure we don't visit one graph multiple times','line_number':284,'multiline':False]
['text':' Get the conv and bn submodule','line_number':294,'multiline':False]
['text':' We are using a separate vector for saving Values we want to rewrite','line_number':315,'multiline':False]
['text':' to make sure that the order in which we perform these','line_number':316,'multiline':False]
['text':' transformations is deterministic. Iterating through keys of','line_number':317,'multiline':False]
['text':' rewrite_map would result in non-determinism that might not manifest','line_number':318,'multiline':False]
['text':' as a bug now, but can bite us later.','line_number':319,'multiline':False]
['text':' matches','line_number':337,'multiline':False]
['text':' conv_bn module','line_number':349,'multiline':False]
['text':' methods','line_number':350,'multiline':False]
['text':' while','line_number':351,'multiline':False]
['text':' Perform planned rewritings','line_number':362,'multiline':False]
['text':' Perform planned deletions','line_number':367,'multiline':False]
['text':' namespace','line_number':376,'multiline':False]
['text':' Conv2d + BatchNorm2d','line_number':383,'multiline':False]
['text':' Conv3d + BatchNorm3d','line_number':391,'multiline':False]
['text':' namespace jit','line_number':410,'multiline':False]
['text':' namespace torch','line_number':411,'multiline':False]
