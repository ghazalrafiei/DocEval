['text':' Counts the size of this block, stopping and returning once reaches limit','line_number':34,'multiline':False]
['text':' instructions.','line_number':35,'multiline':False]
['text':' XXX: This function can only be called with a loop that is guaranteed to','line_number':57,'multiline':False]
['text':' execute EXACTLY ONCE.','line_number':58,'multiline':False]
['text':' Loop node has extra (max_iters, initial_cond) inputs,','line_number':72,'multiline':False]
['text':' body has an extra (loop_counter) input.','line_number':73,'multiline':False]
['text':' XXX: it is extremely important to destroy the loop in here. DCE might not','line_number':88,'multiline':False]
['text':' be able to conclude that it's safe, because the loop might contain side','line_number':89,'multiline':False]
['text':' effects.','line_number':90,'multiline':False]
['text':' inserts a copy of body, passing inputs to the inputs of the block','line_number':94,'multiline':False]
['text':' it returns the a list of the Values for the output of the block','line_number':95,'multiline':False]
['text':' Suppress unused variable warning','line_number':133,'multiline':False]
['text':' It's likely that we have some dead nodes now - for example the "true"','line_number':141,'multiline':False]
['text':' constant that prevents the loop from breaking. We shouldn't wait too long','line_number':142,'multiline':False]
['text':' before removing them because they might artificially increase the loop size','line_number':143,'multiline':False]
['text':' and prevent outer loop unrolling.','line_number':144,'multiline':False]
['text':' Replaces the builtin loop counter with a "mutable" variable outside of the','line_number':148,'multiline':False]
['text':' loop.','line_number':149,'multiline':False]
['text':' We will be using a "mutable" counter outside of the loop instead of the','line_number':171,'multiline':False]
['text':' default one, because this will allow us to share it between the unrolled','line_number':172,'multiline':False]
['text':' loop and its epilogue. This is necessary only if the loop counter is','line_number':173,'multiline':False]
['text':' actually used in the body.','line_number':174,'multiline':False]
['text':' Some optimization for constant-length loops. If we know they won't run too','line_number':178,'multiline':False]
['text':' many times, then we can unroll them entirely.','line_number':179,'multiline':False]
['text':' Clone the loop before we unroll it. The clone will become the epilogue.','line_number':192,'multiline':False]
['text':' Change the iteration counts of both loops','line_number':204,'multiline':False]
['text':' XXX: unroll might destroy the current node, so we need to pre-increment','line_number':220,'multiline':False]
['text':' the iterator','line_number':221,'multiline':False]
['text':' anonymous namespace','line_number':244,'multiline':False]
['text':' we do a pre-order traversal to reduce the number','line_number':278,'multiline':False]
['text':' of peeled loops.','line_number':279,'multiline':False]
['text':' process child blocks','line_number':285,'multiline':False]
['text':' N.B. even though a caller may request to peel `times` iterations','line_number':327,'multiline':False]
['text':' `maxTripCount` of the original loop might be less than that','line_number':328,'multiline':False]
['text':' so we should take the minimum of the two','line_number':329,'multiline':False]
['text':' make the peeled clone','line_number':333,'multiline':False]
['text':' only run until the peeled count','line_number':339,'multiline':False]
['text':' subtract `maxTripCount` of the original loop by the number iterations','line_number':342,'multiline':False]
['text':' the peeled loop runs','line_number':343,'multiline':False]
['text':' update the termination condition','line_number':347,'multiline':False]
['text':' leave off the termination condition ','line_number':353,'multiline':True]
['text':' the induction variable also needs to be adjusted by the number of','line_number':358,'multiline':False]
['text':' iterations the peeled loop runs','line_number':359,'multiline':False]
['text':' we can't create the expression: `new_counter` = `old_counter` + 1 yet','line_number':362,'multiline':False]
['text':' because when we','line_number':363,'multiline':False]
['text':' run `old_counter->replaceAllUsesWith(new_counter)`, we will get','line_number':364,'multiline':False]
['text':' `new_counter = new_counter + 1`','line_number':365,'multiline':False]
['text':' namespace jit','line_number':392,'multiline':False]
['text':' namespace torch','line_number':393,'multiline':False]
