['text':' some names are valid identifiers but off limits because','line_number':41,'multiline':False]
['text':' they are keywords or namespaces used in the output','line_number':42,'multiline':False]
['text':' identifiers in the environment while parsing','line_number':44,'multiline':False]
['text':' avoid the confusing unnamed _','line_number':45,'multiline':False]
['text':' the python keywords','line_number':58,'multiline':False]
['text':' Helper to avoid duplicating class types','line_number':99,'multiline':False]
['text':' Despite doing the linear search below, we don't want to do','line_number':101,'multiline':False]
['text':' wasteful work and only try to insert each instance once.','line_number':102,'multiline':False]
['text':' Need to do actual equality comparison, not a pointer equality. This is','line_number':106,'multiline':False]
['text':' because for some types (e.g. FunctionType), we may have multiple','line_number':107,'multiline':False]
['text':' TypePtr's that represent the same underlying thing.','line_number':108,'multiline':False]
['text':' TODO: this should be really swapped for something more efficient','line_number':109,'multiline':False]
['text':' This prevents having redundant entries at the same offset,','line_number':146,'multiline':False]
['text':' which can happen for example in printValueList when begin','line_number':147,'multiline':False]
['text':' and end are the empty string.','line_number':148,'multiline':False]
['text':' This overload is here to prevent people from shooting themselves in the','line_number':170,'multiline':False]
['text':' foot. I would be highly surprised if someone actually wanted to write out','line_number':171,'multiline':False]
['text':' the address of a TaggedStringStream in the pretty print.','line_number':172,'multiline':False]
['text':' scanValue, scanNode, scanBlock:','line_number':202,'multiline':False]
['text':' decide if it is safe to omit the output of a temporary variable,','line_number':203,'multiline':False]
['text':' and inline the expression into its use','line_number':204,'multiline':False]
['text':' we only do this if','line_number':205,'multiline':False]
['text':' (1) it is a constant, or','line_number':206,'multiline':False]
['text':' (2) the temporary is unnamed, is single output, is used once,','line_number':207,'multiline':False]
['text':'     and would appear in the same order when the expression tree is','line_number':208,'multiline':False]
['text':'     reparsed.','line_number':209,'multiline':False]
['text':' The last case can be checked','line_number':210,'multiline':False]
['text':' because when we emit a expresion tree in the parser,','line_number':211,'multiline':False]
['text':' we do a left-to-right postorder traversal of the expression tree (emit','line_number':212,'multiline':False]
['text':' children, then emit op). The reverse of this is a right-to-left preorder','line_number':213,'multiline':False]
['text':' traversal of the tree. By doing a right-to-left preorder traversal of the','line_number':214,'multiline':False]
['text':' inputs of a node, while also scanning the list of emitted nodes backward,','line_number':215,'multiline':False]
['text':' we can see if they line up with what would happen when parsed the node as','line_number':216,'multiline':False]
['text':' an expression. While they line up we collapse them into an inline','line_number':217,'multiline':False]
['text':' expression.','line_number':218,'multiline':False]
['text':' The inductive step is that the right-most input should be produced by the','line_number':220,'multiline':False]
['text':' node immediatly before the current node if it is in tree order.','line_number':221,'multiline':False]
['text':' there must be only 1 values, otherwise we need an assignment to handle','line_number':225,'multiline':False]
['text':' the multiple outout values','line_number':226,'multiline':False]
['text':' if it is used more than once, then we need a variable','line_number':229,'multiline':False]
['text':' if it has a name set, then it was written as a variable so preserve that','line_number':233,'multiline':False]
['text':' unless it is being fed directly to the end of the block.','line_number':234,'multiline':False]
['text':' in which case it is not as useful to give it a name just to return it','line_number':235,'multiline':False]
['text':' don't try to inline control blocks','line_number':238,'multiline':False]
['text':' if it is a loop-carried input, we need a variable','line_number':241,'multiline':False]
['text':' otherwise the condition or trip count may be emitted in the wrong order','line_number':242,'multiline':False]
['text':' w.r.t. to it','line_number':243,'multiline':False]
['text':' subgraph may use this more than once, so disable inlining','line_number':247,'multiline':False]
['text':' isinstance appearing in an if expression','line_number':253,'multiline':False]
['text':' causes type refinement to occur, but we have','line_number':254,'multiline':False]
['text':' already handled the refinement and inserted cast','line_number':255,'multiline':False]
['text':' expressions. By not inlining it into the if condition,','line_number':256,'multiline':False]
['text':' we prevent it from happening again.','line_number':257,'multiline':False]
['text':' block_point is the current node in the reverse linear scan of the emitted','line_number':265,'multiline':False]
['text':' nodes v is the current value in the tree traversal that may match with','line_number':266,'multiline':False]
['text':' block_point's output.','line_number':267,'multiline':False]
['text':' the node must be at the expected point of the typical','line_number':273,'multiline':False]
['text':' tree traversal','line_number':274,'multiline':False]
['text':' recursively see if we can inline the inputs to this input','line_number':275,'multiline':False]
['text':' constant nodes can always be inlined, we will de-dup them on parsing','line_number':279,'multiline':False]
['text':' and put them at the top of the function regardless','line_number':280,'multiline':False]
['text':' don't bother to scan nodes we have already determined to be inline','line_number':293,'multiline':False]
['text':' XXX - N^2 warning. This code does the exact same thing as','line_number':316,'multiline':False]
['text':' ConstantPool, which is also N^2 in the size of the constants,','line_number':317,'multiline':False]
['text':' because it doesn't hash any information about the tensors.','line_number':318,'multiline':False]
['text':' We will probably need to optimize this at some point using hashing.','line_number':319,'multiline':False]
['text':' get a new name unique across calls to debugName() and','line_number':355,'multiline':False]
['text':' anything we have used.','line_number':356,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-string-concatenation)','line_number':364,'multiline':False]
['text':' unique names might not be valid identifiers,','line_number':374,'multiline':False]
['text':' force them to be by rewriting them','line_number':375,'multiline':False]
['text':' if we have to assign 'v' a name, what should it be?','line_number':388,'multiline':False]
['text':' use the debugName if it was set, otherwise generate a name.','line_number':389,'multiline':False]
['text':' map from Value to how it should be printed at each use','line_number':395,'multiline':False]
['text':' NB: we MUST pass around the shared pointers to these streams by value.','line_number':399,'multiline':False]
['text':' There is an interaction in splitLongInlines where the string value for','line_number':400,'multiline':False]
['text':' both the RHS and the LHS of an expression are live at the same time,','line_number':401,'multiline':False]
['text':' however the value for the RHS is overwritten in the table.','line_number':402,'multiline':False]
['text':' Ident refs take precedent over expression refs, since presence in','line_number':404,'multiline':False]
['text':' the ident ref table indicates we have already emitted a statement','line_number':405,'multiline':False]
['text':' assigning the given value.','line_number':406,'multiline':False]
['text':' indent to the current indent level','line_number':437,'multiline':False]
['text':' Suppress unused variable warning','line_number':440,'multiline':False]
['text':' We need to preserve Union/Optional type annotations, but only if','line_number':518,'multiline':False]
['text':' we're not assigning values as part of a tuple unpacking statement','line_number':519,'multiline':False]
['text':' (Python doesn't allow type annotations in multiple assignment)','line_number':520,'multiline':False]
['text':' or if value is being assigned to something of a union type','line_number':531,'multiline':False]
['text':' Print node contents','line_number':563,'multiline':False]
['text':' Loop carried dependencies are handled by assigning their initial','line_number':576,'multiline':False]
['text':' values to the node->outputs() before the loop,','line_number':577,'multiline':False]
['text':' and assign node->outputs() to the new values at the end of each trip.','line_number':578,'multiline':False]
['text':' Add aliases for loop-carried dependencies','line_number':591,'multiline':False]
['text':' Start at 1 to ignore trip count','line_number':593,'multiline':False]
['text':' Print initial assignments of loop node outputs = loop node inputs','line_number':599,'multiline':False]
['text':' Loop header','line_number':603,'multiline':False]
['text':' note: trip_count_in_block is unused because this is a while loop,','line_number':609,'multiline':False]
['text':' so we reuse the Value* as a stand-in for the loop condition','line_number':610,'multiline':False]
['text':' Loop body','line_number':615,'multiline':False]
['text':' Update block outputs to block inputs for next loop iteration','line_number':618,'multiline':False]
['text':' skip the assignment to the new condition in for loops because','line_number':619,'multiline':False]
['text':' the condition is always True','line_number':620,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':632,'multiline':False]
['text':' [reordering of inlines]','line_number':646,'multiline':False]
['text':' We inline anything that is semantically legal to inline, but sometimes','line_number':647,'multiline':False]
['text':' we find that these lines get too long. In that case we break the lines','line_number':648,'multiline':False]
['text':'/ and it  is important that we un-inline all the inputs preceeding the long','line_number':649,'multiline':False]
['text':'/ input:','line_number':650,'multiline':False]
['text':'   r = foo(x.add_(b), some_long + expression)','line_number':651,'multiline':False]
['text':'  wrong!','line_number':652,'multiline':False]
['text':'   _0 = some_long + expression','line_number':653,'multiline':False]
['text':'   r = foo(x.add_(b), _0) # wrong! _0 runs before mutating add_','line_number':654,'multiline':False]
['text':' legal!','line_number':655,'multiline':False]
['text':'   _0 = x.add_(b)','line_number':656,'multiline':False]
['text':'   _1 = some_long + expression','line_number':657,'multiline':False]
['text':'   r = foo(_0, _1)','line_number':658,'multiline':False]
['text':' -1 because the actual use is still being','line_number':687,'multiline':False]
['text':' emitted so it cannot be split','line_number':688,'multiline':False]
['text':' Print outputs','line_number':696,'multiline':False]
['text':' Recursively check contained types for any class dependencies','line_number':704,'multiline':False]
['text':' Check for class dependencies. If this node inputs or outputs a class','line_number':722,'multiline':False]
['text':' type, we need to add it to our table of dependencies.','line_number':723,'multiline':False]
['text':' noop','line_number':741,'multiline':False]
['text':' TODO (tugsuu) move this calculation into a separate step.','line_number':753,'multiline':False]
['text':' True means we solely calculate based on upgrader version','line_number':758,'multiline':False]
['text':' TupleUnpack(unpacked) turns into an assignment op that forces','line_number':802,'multiline':False]
['text':' the unpack to be inserted when parsed back in:','line_number':803,'multiline':False]
['text':' a, b, = unpacked','line_number':804,'multiline':False]
['text':' a, = unpacked # trailing comma forces an unpack to happen','line_number':805,'multiline':False]
['text':' the subgraph gets emitted as another function','line_number':821,'multiline':False]
['text':' the subgraph gets emitted as another function','line_number':835,'multiline':False]
['text':' If the previous node is a prim::Enter, the with block the generated','line_number':861,'multiline':False]
['text':' this Enter/Exit pair must have been empty.','line_number':862,'multiline':False]
['text':' we prevent long constants from inlining here.','line_number':903,'multiline':False]
['text':' it is not safe to do the same thing for non-constants here','line_number':904,'multiline':False]
['text':' because of [reordering of inlines]','line_number':905,'multiline':False]
['text':' this node is safe to inline, so assign the output value','line_number':910,'multiline':False]
['text':' to that expression directly','line_number':911,'multiline':False]
['text':' char's type is implementation designed signedness, likely','line_number':924,'multiline':False]
['text':' signed on x86 and unsigned on ARM. But as of C++11, it is','line_number':925,'multiline':False]
['text':' guaranteed to be twos complement. Therefore, converting to','line_number':926,'multiline':False]
['text':' signed char gives us a range of [-128, 127]. Thus, any','line_number':927,'multiline':False]
['text':' negative number is non-ascii.','line_number':928,'multiline':False]
['text':' print the namedtuple constructor and let rest of tuple printing','line_number':956,'multiline':False]
['text':' continue','line_number':957,'multiline':False]
['text':' Special overriding ops set that requires serializing differently to','line_number':969,'multiline':False]
['text':' preserve the original code semantics.','line_number':970,'multiline':False]
['text':' This will be more properly handled when we have namespace semantics','line_number':971,'multiline':False]
['text':' for serializing the ops, and it right now hard coded these ops to','line_number':972,'multiline':False]
['text':' ensure consistency and not breaking BC in the future.','line_number':973,'multiline':False]
['text':' special case aten -> torch because we want to rename','line_number':981,'multiline':False]
['text':' the aten namespace, but this change will take more time','line_number':982,'multiline':False]
['text':' doing it here ensures we do not have fix up archives later','line_number':983,'multiline':False]
['text':' Prints the RHS value of a Node, e.g. `aten.add(x, y)`','line_number':991,'multiline':False]
['text':' Empty lists must be annotated with their type so the compiler knows','line_number':1073,'multiline':False]
['text':' what type is supposed to be inside them','line_number':1074,'multiline':False]
['text':' If we can't infer the type based on what's inside, explicitly','line_number':1079,'multiline':False]
['text':' annotate it to disambiguate.','line_number':1080,'multiline':False]
['text':' This happens for List[Tensor] vs. List[Optional[Tensor]]','line_number':1081,'multiline':False]
['text':' Otherwise just print a list','line_number':1087,'multiline':False]
['text':' There are cases where we must annotate the dict with an explicit type','line_number':1094,'multiline':False]
['text':' to help the compiler out:','line_number':1095,'multiline':False]
['text':'   - the dict is empty','line_number':1096,'multiline':False]
['text':'   - the dict has potentially ambiguous element types','line_number':1097,'multiline':False]
['text':'       (e.g. Tensor vs. Optional[Tensor])','line_number':1098,'multiline':False]
['text':' Otherwise just print a dict','line_number':1106,'multiline':False]
['text':' we cannot recover the type of unwrap_optional(None),','line_number':1163,'multiline':False]
['text':' using normal schema matching, so we route around this by rewriting','line_number':1164,'multiline':False]
['text':' the call to unwrap_optional(annotated(Optional[T], None))','line_number':1165,'multiline':False]
['text':' unchecked_unwrap_optional is no longer generated by the compiler,','line_number':1176,'multiline':False]
['text':' but may end up here if it was first loaded from a old model and','line_number':1177,'multiline':False]
['text':' re-saved. On re-save we upgrade it to an unchecked_cast, which is an','line_number':1178,'multiline':False]
['text':' equivalent op','line_number':1179,'multiline':False]
['text':' check multiple things, e.g. (str, list, int)','line_number':1192,'multiline':False]
['text':' Note: This CAN NOT be printed as raw operator ops.prim.EnumValue','line_number':1213,'multiline':False]
['text':' because its return type depends on type of enum and must be further','line_number':1214,'multiline':False]
['text':' resolved, but ops.prim.EnumValue construction does not provide such','line_number':1215,'multiline':False]
['text':' functionality.','line_number':1216,'multiline':False]
['text':' calculate how many args are specified.','line_number':1226,'multiline':False]
['text':' see (https://github.com/pytorch/pytorch/pull/56079) for more','line_number':1227,'multiline':False]
['text':' details.','line_number':1228,'multiline':False]
['text':' we only want to do this extra logic only when necessary.','line_number':1231,'multiline':False]
['text':' calculate how many args are specified.','line_number':1233,'multiline':False]
['text':' see (https://github.com/pytorch/pytorch/pull/56079) for more','line_number':1234,'multiline':False]
['text':' details.','line_number':1235,'multiline':False]
['text':' print the kwarg name if it is a kwarg only argument.','line_number':1246,'multiline':False]
['text':' vararg functions like format can have extra arguments','line_number':1253,'multiline':False]
['text':' print out args','line_number':1259,'multiline':False]
['text':' figure out the corresponding input at this index','line_number':1264,'multiline':False]
['text':' pythons weird 'pass' syntax creates a bunch of places where we have to','line_number':1277,'multiline':False]
['text':' check if this block would be empty. But not everything in a block is a','line_number':1278,'multiline':False]
['text':' node. Sometimes if, loop, and return statements will follow this block','line_number':1279,'multiline':False]
['text':' and block_has_other_statements == true.','line_number':1280,'multiline':False]
['text':'print_const=','line_number':1287,'multiline':True]
['text':' Suppress unused variable warning','line_number':1297,'multiline':False]
['text':' handle broadcasting lists','line_number':1308,'multiline':False]
['text':' we always print constants at the top of the function, in the order','line_number':1326,'multiline':False]
['text':' in which they are used.','line_number':1327,'multiline':False]
['text':' current graph is used to de-dup names within a single graph','line_number':1331,'multiline':False]
['text':' Print initial constant table (most are just inlined into their use,','line_number':1335,'multiline':False]
['text':' but some like long strings do get emitted)','line_number':1336,'multiline':False]
['text':'print_const=','line_number':1338,'multiline':True]
['text':' Print body','line_number':1340,'multiline':False]
['text':'print_const=','line_number':1342,'multiline':True]
['text':' each graph can reuse local names','line_number':1352,'multiline':False]
['text':' the first argument may omit its type when it is implied by context','line_number':1363,'multiline':False]
['text':' the flag print_first_argument_type determines when to do this','line_number':1364,'multiline':False]
['text':'print_first_argument_type=','line_number':1389,'multiline':True]
['text':' If any of the methods are not Graph funtions, this indicates that','line_number':1404,'multiline':False]
['text':' this class is a custom-bound C++ class. Skip serialization','line_number':1405,'multiline':False]
['text':' of this class, we will depend on the ClassType being defined','line_number':1406,'multiline':False]
['text':' in the target process.','line_number':1407,'multiline':False]
['text':' For modules, we need to print special information about the module's','line_number':1424,'multiline':False]
['text':' attributes and parameters.','line_number':1425,'multiline':False]
['text':' Populate the __parameters__ field. This tells the importer which','line_number':1429,'multiline':False]
['text':' attributes are parameters.','line_number':1430,'multiline':False]
['text':' Handling for when the attribute name is not a valid Python','line_number':1480,'multiline':False]
['text':' identifier. This happens for, e.g. ModuleList.','line_number':1481,'multiline':False]
['text':' Initialize the annotations dict if necessary.','line_number':1484,'multiline':False]
['text':' Print out a direct manipulation of the annotations dict, like:','line_number':1488,'multiline':False]
['text':'   __annotations__["0"] = SomeType','line_number':1489,'multiline':False]
['text':' Otherwise: just emit a python 3 attribute annotation, like:','line_number':1494,'multiline':False]
['text':'   foo : SomeType','line_number':1495,'multiline':False]
['text':' TODO fields','line_number':1513,'multiline':False]
['text':' When printing this node, is it safe to write it inline (i.e. without','line_number':1605,'multiline':False]
['text':' assigning a temporary variable','line_number':1606,'multiline':False]
['text':' see [reordering of inlines]','line_number':1609,'multiline':False]
['text':' used to track parts of an inline statement we already scanned','line_number':1610,'multiline':False]
['text':' for splitting long lines, so that we do not revisit them causing n^2','line_number':1611,'multiline':False]
['text':' behavior. stores the maximum offset into inputs that has already been','line_number':1612,'multiline':False]
['text':' scanned for the node.','line_number':1613,'multiline':False]
['text':' what valid identifiers are in use for the current function','line_number':1616,'multiline':False]
['text':' constants are written to this table, and given then named CONSTANTS.cN','line_number':1619,'multiline':False]
['text':' where N is the index into this table.','line_number':1620,'multiline':False]
['text':' Any NamedTypes (classes, functions, NamedTuples) used are written to this','line_number':1623,'multiline':False]
['text':' table.','line_number':1624,'multiline':False]
['text':' We need to preserve Union/Optional type annotations, but we should','line_number':1627,'multiline':False]
['text':' only print the annotation on variable declaration (not on any','line_number':1628,'multiline':False]
['text':' following uses). This set tracks the Value*s that we've already','line_number':1629,'multiline':False]
['text':' printed with annotations','line_number':1630,'multiline':False]
['text':' A function that, given a named type, returns us the correct string to print','line_number':1633,'multiline':False]
['text':' for it.','line_number':1634,'multiline':False]
['text':' when we print this, should we error if the resulting output would','line_number':1637,'multiline':False]
['text':' not be able to be reparsed?','line_number':1638,'multiline':False]
['text':' The least version that supports all printed ops','line_number':1641,'multiline':False]
['text':' skip key because key cannot be an object','line_number':1701,'multiline':False]
['text':' output','line_number':1733,'multiline':False]
['text':' output','line_number':1734,'multiline':False]
['text':' Group by prefix; because every prefix is a file.','line_number':1742,'multiline':False]
['text':' note: PythonPrint may extend class_deps, so re-checking .size() is','line_number':1751,'multiline':False]
['text':' necessary','line_number':1752,'multiline':False]
['text':'enforce_importable=','line_number':1765,'multiline':True]
['text':' namespace torch::jit','line_number':1775,'multiline':False]
