['text':' IR Simplification
 *
 * Simplifies expressions in two stages:
 *  1. Recursively traverse the map combining similar operations into Terms
 * (interacted via Multiplication) and Polynomials (interacted via Addition). We
 * reorder the components of each Term or Polynomial into a consistent order to
 * allow combination or cancelling of like terms.
 *  2. Once the format of the tree is minimal, expand each Term into a sequence
 * of Muls, and each Polynomial into a sequence of Ads.
 ','line_number':13,'multiline':True]
['text':' A bunch of helpers for determine the Dtype of the output of a multi argument','line_number':28,'multiline':False]
['text':' Term or Polynomial.','line_number':29,'multiline':False]
['text':' Uses the evaluator to fold an Expression with constant terms.','line_number':90,'multiline':False]
['text':' E.g. evaluateOp(Add(3, 4)) => 7.','line_number':91,'multiline':False]
['text':' Expr v must not have any unbound Vars.','line_number':92,'multiline':False]
['text':' A Term represents a grouping of Exprs through multiplication.','line_number':112,'multiline':False]
['text':' E.g. product(scalar, *variables).','line_number':113,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':117,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':125,'multiline':False]
['text':' Convenience constructor from a map of hash -> var, used when merging Terms.','line_number':134,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':135,'multiline':False]
['text':' Produce a hash of just the variable components of this term, to determine','line_number':157,'multiline':False]
['text':' if it can be combined with another term.','line_number':158,'multiline':False]
['text':' Sort by hash to normalize order of components.','line_number':176,'multiline':False]
['text':' Polynomial represents a grouping of Exprs by addition.','line_number':180,'multiline':False]
['text':' E.g. sum(*variables, scalar).','line_number':181,'multiline':False]
['text':' This would better be called Expression, but, naming conflict...','line_number':182,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':186,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':194,'multiline':False]
['text':' Helper constructor for list of terms with no scalar component.','line_number':203,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':204,'multiline':False]
['text':' Convenience constructor for map of hash -> var, used when merging','line_number':213,'multiline':False]
['text':' Polynomials.','line_number':214,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':215,'multiline':False]
['text':' Sort by hash to normalize order of terms.','line_number':253,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':266,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':276,'multiline':False]
['text':' Uniquefy the terms using their hash.','line_number':316,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':323,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':333,'multiline':False]
['text':' Uniquefy the terms using their hash.','line_number':373,'multiline':False]
['text':' Context-sensitive IR simplification','line_number':377,'multiline':False]
['text':' Add boundary info for index variables in for-loops','line_number':383,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':395,'multiline':False]
['text':' Stmt simplification should occur in both modes.','line_number':400,'multiline':False]
['text':' Trivially factorize terms by GCD of scalar components.','line_number':411,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':419,'multiline':False]
['text':' Simplify the IR by combining arithmetic expressions over common terms.','line_number':423,'multiline':False]
['text':' Inserts term into the provided map, in the case of a hash collision','line_number':427,'multiline':False]
['text':' combines the term with the existing and updates the map.','line_number':428,'multiline':False]
['text':' Add Polynomial expressions, combining Terms representing the same','line_number':433,'multiline':False]
['text':' variables.','line_number':434,'multiline':False]
['text':' Insert a new Term into the provided polynomial. If the new term has','line_number':437,'multiline':False]
['text':' common variables to an existing term it is combined.','line_number':438,'multiline':False]
['text':' Merge and simplify addition.','line_number':441,'multiline':False]
['text':' Subtract one term from another, cancelling if necessary.','line_number':444,'multiline':False]
['text':' Subtract the RHS Polynomial from the LHS Polynomial, cancelling out where','line_number':447,'multiline':False]
['text':' possible.','line_number':448,'multiline':False]
['text':' Merge and simplify subtraction.','line_number':451,'multiline':False]
['text':' Multiply two terms together, usually creating a new term with the variable','line_number':454,'multiline':False]
['text':' lists concatenated.','line_number':455,'multiline':False]
['text':' Multiply a Polynomial by a Term.','line_number':458,'multiline':False]
['text':' Match a rounding pattern and create a RoundOff if found.','line_number':461,'multiline':False]
['text':' Inserts a new component into a term, simplifying if possible.','line_number':464,'multiline':False]
['text':' Merge and simplify multiplication.','line_number':467,'multiline':False]
['text':' Expands Terms and Polynomial expressions into primitive operations.','line_number':499,'multiline':False]
['text':' Does some simple factorization and reordering.','line_number':500,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':507,'multiline':False]
['text':' Expand Terms out to a series of Muls.','line_number':513,'multiline':False]
['text':' Expand Polynomials out to a series of Adds.','line_number':516,'multiline':False]
['text':' Expand MaxTerms to a series of Max ops.','line_number':519,'multiline':False]
['text':' Expand MinTerms to a series of Min ops.','line_number':522,'multiline':False]
['text':' Expand RoundOff to it's component: Mul(Div(lhs, rhs), rhs).','line_number':525,'multiline':False]
['text':' Eliminate zero length allocations.','line_number':528,'multiline':False]
['text':' Override to enable condition fusing.','line_number':532,'multiline':False]
['text':' Flattens the buf and performs the simplifier on the flattened dims.','line_number':547,'multiline':False]
['text':' Returns true if expressions A and B can be simplified to an equal expression.','line_number':549,'multiline':False]
['text':' namespace tensorexpr','line_number':552,'multiline':False]
['text':' namespace jit','line_number':553,'multiline':False]
['text':' namespace torch','line_number':554,'multiline':False]
