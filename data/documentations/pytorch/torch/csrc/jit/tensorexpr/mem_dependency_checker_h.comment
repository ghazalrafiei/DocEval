['text':' AccessInfo
 *
 * Represents a single bounded memory access to a buffer, for instance a Load or
 * a Store. Holds information relating to the specific access and links to
 * connected accesses in the dependency graph.
 ','line_number':33,'multiline':True]
['text':' Id is a unique int representing the order this access occurred in the','line_number':68,'multiline':False]
['text':' graph.','line_number':69,'multiline':False]
['text':' The type of the access (Load, Store, etc).','line_number':74,'multiline':False]
['text':' The enclosing Stmt this access represents. E.g. if this is a Store then','line_number':79,'multiline':False]
['text':' Stmt is the Store itself, while if the access is caused by an Expr, this is','line_number':80,'multiline':False]
['text':' the most immediate parent Stmt.','line_number':81,'multiline':False]
['text':' If the access is represented by an Expr (such as Load or Call) then this is','line_number':86,'multiline':False]
['text':' it, otherwise it's nullptr.','line_number':87,'multiline':False]
['text':' The Var representing the underlying Buffer.','line_number':92,'multiline':False]
['text':' A vector of Bounds representing the start and end expression for each','line_number':97,'multiline':False]
['text':' dimension.','line_number':98,'multiline':False]
['text':' Each access that this depends upon,','line_number':103,'multiline':False]
['text':' eg. if this is a Load, then it contains every Store that immediately','line_number':104,'multiline':False]
['text':' contributes to a load of the bounds.','line_number':105,'multiline':False]
['text':' or: if this is a Store, it contains all reads on the RHS of the Store.','line_number':106,'multiline':False]
['text':' Each access that depends on this one.','line_number':111,'multiline':False]
['text':' ie. this access is present in the dependencies map of all accesses that are','line_number':112,'multiline':False]
['text':' dependent.','line_number':113,'multiline':False]
['text':' Returns the symbolic expression of the indices of this access.','line_number':122,'multiline':False]
['text':' Establishes a dependency or dependent relationship with another access.','line_number':125,'multiline':False]
['text':' helper for checking dependencies.','line_number':129,'multiline':False]
['text':' Returns the set of all nodes that are direct (immediate) dependencies of','line_number':132,'multiline':False]
['text':' this access.','line_number':133,'multiline':False]
['text':' likewise, returns all nodes that directly depend on this one.','line_number':135,'multiline':False]
['text':' Returns the full list of all nodes in the graph that this access depends','line_number':138,'multiline':False]
['text':' on, and all nodes they depend on, and so forth, back to the inputs.','line_number':139,'multiline':False]
['text':' likewise, returns the full list of all nodes that depend on this node, and','line_number':141,'multiline':False]
['text':' all nodes that depend on those nodes and so on down to the outputs.','line_number':142,'multiline':False]
['text':' Does this access represent a read of memory (Load, ReduceOp, Call, etc).','line_number':145,'multiline':False]
['text':' Does this access represent a write of memory (Store, etc).','line_number':147,'multiline':False]
['text':' Helpers for dumping accesses in various formats.','line_number':150,'multiline':False]
['text':' Yes these should be sorted.','line_number':163,'multiline':False]
['text':' MemDependencyChecker analyses a IR fragment and builds a dependency graph of
 * accesses contained within.
 *
 * It's possible to retrieve the entire graph in node-object form, or can be
 * used as an oracle for answering dependency questions. e.g:
 *
 *  analyzer.hasIndirectDependency(BufA, BufB); or,
 *  analyzer.hasDirectDependency(LoadA, StoreB);
 ','line_number':170,'multiline':True]
['text':' Whether or not to allow loop execution order to influence dependency','line_number':193,'multiline':False]
['text':' calculation. If the loop may later be parallelized you don't want this.','line_number':194,'multiline':False]
['text':' Dependency Checking API.','line_number':197,'multiline':False]
['text':' The goal is to have enough overloads here so you don't really have to think','line_number':198,'multiline':False]
['text':' about it.','line_number':199,'multiline':False]
['text':' Returns true if any read in A has a direct dependence on a write in B.','line_number':201,'multiline':False]
['text':' Returns true of the output depends directly on a write contained in B.','line_number':205,'multiline':False]
['text':' Returns true if a read in A depends directly on the provided input.','line_number':208,'multiline':False]
['text':' Outputs/inputs cannot depend directly.','line_number':212,'multiline':False]
['text':' Returns true if the access A has B as an immediate dependency.','line_number':214,'multiline':False]
['text':' Returns true if any read in A has an ancestor write contained in B.','line_number':219,'multiline':False]
['text':' Returns true of the output depends indirectly on a write contained in B.','line_number':223,'multiline':False]
['text':' Returns true if a read in A depends indirectly on the provided input.','line_number':226,'multiline':False]
['text':' returns true if the output uses any load of the input.','line_number':230,'multiline':False]
['text':' Returns true if the access A has a dependency chain to access B.','line_number':233,'multiline':False]
['text':' Returns the AccessInfo','line_number':238,'multiline':False]
['text':' Returns all AccessInfos.','line_number':242,'multiline':False]
['text':' TODO: this will return only the AccessInfo for A. It's included for','line_number':245,'multiline':False]
['text':' completeness but be aware it wont return accesses used in the computation','line_number':246,'multiline':False]
['text':' of A.','line_number':247,'multiline':False]
['text':' Accesses relating to input and output buffers.','line_number':251,'multiline':False]
['text':' Returns the full history of reads and writes.','line_number':255,'multiline':False]
['text':' Dumps the dependency graph in DOT format.','line_number':258,'multiline':False]
['text':' Node visitors.','line_number':262,'multiline':False]
['text':' An internal struct holding the accesses found within a scope Block.','line_number':277,'multiline':False]
['text':' Finds all accesses that are reads within the scope of v.','line_number':303,'multiline':False]
['text':' Look for and insert accesses belonging to all nodes that act like','line_number':318,'multiline':False]
['text':' reads.','line_number':319,'multiline':False]
['text':' Finds all accesses that are writes within the scope of v.','line_number':326,'multiline':False]
['text':' Writes cannot occur in Exprs, so this is a little simpler.','line_number':327,'multiline':False]
['text':' writes just Store currently.','line_number':331,'multiline':False]
['text':' Templated helpers to work on either Exprs or Stmts.','line_number':344,'multiline':False]
['text':' Maps for inputs and outputs, since they aren't present directly in the IR.','line_number':379,'multiline':False]
['text':' Inserts accesses for Buf's: specifically for inputs and outputs.','line_number':384,'multiline':False]
['text':' Update the write history with a new write, adding dependencies and closing','line_number':389,'multiline':False]
['text':' any overlapped writes (if possible).','line_number':390,'multiline':False]
['text':' Merge a child scope into a parent scope, adding dependencies for open','line_number':398,'multiline':False]
['text':' writes in the parent to accesses in the child.','line_number':399,'multiline':False]
['text':' Binds symbolic vars in indices with the low and high bound for those vars.','line_number':405,'multiline':False]
['text':' namespace analysis','line_number':412,'multiline':False]
['text':' namespace tensorexpr','line_number':413,'multiline':False]
['text':' namespace jit','line_number':414,'multiline':False]
['text':' namespace torch','line_number':415,'multiline':False]
