['text':' The common base between all statement node.','line_number':15,'multiline':False]
['text':'
   * Make a deep copy of the given statement.
   *
   * All statements and expressions used in children of the statement are
   * cloned. Note that the variables are not deep-copied since they are
   * immutable.
   ','line_number':27,'multiline':True]
['text':' Concrete Stmt classes','line_number':64,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':68,'multiline':False]
['text':' Creates a new block by cloning `this` block and replacing the given','line_number':159,'multiline':False]
['text':' statement with a new statement. Note that `old_stmt` refers to a statement','line_number':160,'multiline':False]
['text':' in `this` block. If the `old_stmt` is not found, it will return `nullptr`.','line_number':161,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':168,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':170,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':214,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':263,'multiline':False]
['text':' returns the immediate child containing statement s.','line_number':289,'multiline':False]
['text':' If we get here, it's a bug, but we cannot throw an error from a','line_number':306,'multiline':False]
['text':' constructor. But IR verifier would catch this.','line_number':307,'multiline':False]
['text':' Allocate a buffer of given shapes and dtypes and bind it with the given','line_number':360,'multiline':False]
['text':' buffer var. The life span is at most through the current program, until it is','line_number':361,'multiline':False]
['text':' explicitly freed. An unfreed memory is likely considered an error.','line_number':362,'multiline':False]
['text':' TODO: add memory types.','line_number':393,'multiline':False]
['text':' PlacementAllocate is a variation of the Allocate operator in NNC IR. It does','line_number':396,'multiline':False]
['text':' not allocate memory but reuse the memory of another buffer for the given','line_number':397,'multiline':False]
['text':' buffer.','line_number':398,'multiline':False]
['text':' Free the specific buffer. It is an error.','line_number':432,'multiline':False]
['text':' GPU Block Index','line_number':581,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-avoid-c-arrays,cppcoreguidelines-avoid-c-arrays)','line_number':595,'multiline':False]
['text':' GPU Thread Index','line_number':624,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-avoid-c-arrays,cppcoreguidelines-avoid-c-arrays)','line_number':638,'multiline':False]
['text':' A backend specific IR Node that implements atomic-add.','line_number':839,'multiline':False]
['text':' This node could only shows up as an internal with GPU backends.','line_number':840,'multiline':False]
['text':' TODO: move to this an internal IR.','line_number':841,'multiline':False]
['text':' TODO: make IR nodes extensible.','line_number':842,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':845,'multiline':False]
['text':'
 * ExternalCall statement represents a call to an external function that would
 * compute the contents of the output buffer. An ExternalCall statement consists
 * of:
 *   1) output buffer - the buffer that'll be initialized by the call
 *   2) external function name - a key from the NNC function registry to lookup
 *      the actual function to call
 *   3) buffer arguments - the input buffers used by the function
 *   4) non-buffer arguments - scalar arguments to pass to the function
 *
 * An example:
 *   A = nnc_conv2d(buf_args={Input, Weight, Bias}, args={1})
 * Here 'A' is the output buffer, "nnc_conv2d" is the function name, the buffer
 * arguments are 'Input', 'Weight', and 'Bias', and there is a single non-buffer
 * argument - 1.
 *
 * The semantics of the scalar arguments is defined solely by the implementation
 * of the external function.
 ','line_number':895,'multiline':True]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':950,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':1004,'multiline':False]
['text':' namespace tensorexpr','line_number':1022,'multiline':False]
['text':' namespace jit','line_number':1023,'multiline':False]
['text':' namespace torch','line_number':1024,'multiline':False]
