['text':' Extract method names from these nodes.','line_number':42,'multiline':False]
['text':' Extract attribute names from these nodes.','line_number':79,'multiline':False]
['text':' namespace','line_number':105,'multiline':False]
['text':' If the name is unqualified, prepend a `__torch__`, similar to what Python','line_number':111,'multiline':False]
['text':' does with `__main__` for top-level code.','line_number':112,'multiline':False]
['text':'is_module=','line_number':119,'multiline':True]
['text':' first class mode runs models as first class objects,','line_number':146,'multiline':False]
['text':' and does not force inlining everywhere. This is experimental','line_number':147,'multiline':False]
['text':' as we bring up the system since it will degrade performance','line_number':148,'multiline':False]
['text':' and may introduce bugs. test_jit.py provides context managers','line_number':149,'multiline':False]
['text':' that enable it for specific tests.','line_number':150,'multiline':False]
['text':'device=','line_number':161,'multiline':True]
['text':'dtype=','line_number':165,'multiline':True]
['text':' Need to access the `at::Tensor` as a `Variable` here.','line_number':173,'multiline':False]
['text':' Use the data's original device or dtype if not supplied here.','line_number':174,'multiline':False]
['text':' self','line_number':201,'multiline':False]
['text':' self','line_number':208,'multiline':False]
['text':' call forward pre_hooks','line_number':241,'multiline':False]
['text':' call forward','line_number':254,'multiline':False]
['text':' call forward hooks','line_number':257,'multiline':False]
['text':' type remapping - when we copy method implementations from one module','line_number':272,'multiline':False]
['text':' singleton to another, we need to update the types of the self arguments','line_number':273,'multiline':False]
['text':' to match the new module.','line_number':274,'multiline':False]
['text':' XXX - this only handles modules that occur as variables, not modules','line_number':275,'multiline':False]
['text':' that appear in aggregate types. Currently this works fine because','line_number':276,'multiline':False]
['text':' we restrict how modules can be used during the lowering step. Eventually,','line_number':277,'multiline':False]
['text':' we will need to decide what it means for us to 'copy' a module.','line_number':278,'multiline':False]
['text':' For instance, we can copy just the state (parameters, attributes),','line_number':279,'multiline':False]
['text':' but share the code. Or we can copy the code. If we choose to copy the','line_number':280,'multiline':False]
['text':' code, what should we do about aggregate types that contain a module?','line_number':281,'multiline':False]
['text':' Create a new _ivalue in the same compilation unit.','line_number':346,'multiline':False]
['text':' Since now we have shared ClassType, we need to preserve the shared','line_number':347,'multiline':False]
['text':' ClassType during cloning, so we first need to check if the type','line_number':348,'multiline':False]
['text':' is already cloned, if so, we'll create a new module with the cloned','line_number':349,'multiline':False]
['text':' ClassType, if not, we'll create a new module and a new ClassType.','line_number':350,'multiline':False]
['text':' if we cloned the class type before, we'll reuse it','line_number':354,'multiline':False]
['text':' Copy slots. If a slot is a module - recursively clone it.','line_number':364,'multiline':False]
['text':' If this attribute is in the list of ignored attributes, skip it','line_number':370,'multiline':False]
['text':' (i.e. do not clone it).','line_number':371,'multiline':False]
['text':' NOTE: why do we need to manually setattr on object instead of using','line_number':383,'multiline':False]
['text':' register_module here? because the attr can be a module interface','line_number':384,'multiline':False]
['text':' type and hold a Module object still. register_module will not let us','line_number':385,'multiline':False]
['text':' correctly set up the type for this attr, so we had to do this manually.','line_number':386,'multiline':False]
['text':' In the case it's an interface type, the type will be shared by the new','line_number':387,'multiline':False]
['text':' cloned instance in the same compilation unit bc it only contains a list','line_number':388,'multiline':False]
['text':' of functionSchema','line_number':389,'multiline':False]
['text':' this adds new slot and creates a new attribute for the underlying type','line_number':394,'multiline':False]
['text':' if the type is not already cloned, otherwise it will only add a new','line_number':395,'multiline':False]
['text':' slot and typecheck','line_number':396,'multiline':False]
['text':' we'll deepcopy the IValue in non inplace option','line_number':400,'multiline':False]
['text':' only clone the methods if the ClassType is not cloned before','line_number':407,'multiline':False]
['text':' clone constants','line_number':409,'multiline':False]
['text':' clone methods, remapping the types to the cloned ones.','line_number':413,'multiline':False]
['text':' If this method is not in the list of ignored methods, clone it.','line_number':415,'multiline':False]
['text':' Execute __setstate__(__getstate__()) to initialize custom class members.','line_number':423,'multiline':False]
['text':' FIXME[T110620981]: This assert was broken (never asserted), and once','line_number':439,'multiline':False]
['text':' fixed it triggers test failures.  Fix me!','line_number':440,'multiline':False]
['text':' TORCH_INTERNAL_ASSERT(false, "'training' attribute not found"); ','line_number':441,'multiline':True]
['text':' Look up the class','line_number':447,'multiline':False]
['text':' Create a bare object with correct number of slots','line_number':457,'multiline':False]
['text':' Invoke the `__init__()` of the class with the arguments provided.','line_number':462,'multiline':False]
['text':' Note: following Python, `__init__()` modifies its first parameter in-place','line_number':467,'multiline':False]
['text':' and returns nothing.','line_number':468,'multiline':False]
['text':' namespace','line_number':495,'multiline':False]
['text':' if not frozen yet','line_number':500,'multiline':False]
['text':'return_module=','line_number':517,'multiline':True]
['text':'return_module=','line_number':520,'multiline':True]
['text':'recurse=','line_number':524,'multiline':True]
['text':'return_module=','line_number':524,'multiline':True]
['text':'recurse=','line_number':527,'multiline':True]
['text':'return_module=','line_number':527,'multiline':True]
['text':'recurse=','line_number':530,'multiline':True]
['text':'return_module=','line_number':530,'multiline':True]
['text':'recurse=','line_number':533,'multiline':True]
['text':'return_module=','line_number':533,'multiline':True]
['text':'return_module=','line_number':537,'multiline':True]
['text':'return_module=','line_number':540,'multiline':True]
['text':'return_module=','line_number':544,'multiline':True]
['text':'return_module=','line_number':547,'multiline':True]
['text':'recurse=','line_number':566,'multiline':True]
['text':'recurse=','line_number':575,'multiline':True]
['text':' We do 4 spaces here, because one level of indentation comes from','line_number':606,'multiline':False]
['text':' 'submodules' scope and the other one goes from a specific submodule we're','line_number':607,'multiline':False]
['text':' printing.','line_number':608,'multiline':False]
['text':' namespace torch::jit','line_number':629,'multiline':False]
['text':' namespace c10','line_number':640,'multiline':False]
