['text':' Get all types that are shared in the module hierarchy rooted at \p mod.','line_number':13,'multiline':False]
['text':' Maintain a set of all TypePtrs.','line_number':15,'multiline':False]
['text':' Maintain another set of TypePtrs that have been encountered more than once.','line_number':17,'multiline':False]
['text':' Iterate over all modules in the hierarchy, including the root.','line_number':20,'multiline':False]
['text':' Selectively lower \p mod to a backend. \p to_backend','line_number':33,'multiline':False]
['text':' is called to lower modules. \p modules_to_lower contains','line_number':34,'multiline':False]
['text':' qualified names of submodules of \p mod that should be lowered.','line_number':35,'multiline':False]
['text':' This map will be used later to remap types in ancestor module graphs for','line_number':41,'multiline':False]
['text':' all lowered submodules.','line_number':42,'multiline':False]
['text':' For each module that should be lowered:','line_number':45,'multiline':False]
['text':' Use QualifiedName to parse the qualified module names.','line_number':47,'multiline':False]
['text':' Search through the module hierarchy using the atoms of','line_number':51,'multiline':False]
['text':' qual_module_name until current points to the module to','line_number':52,'multiline':False]
['text':' be lowered and parent points to its parent.','line_number':53,'multiline':False]
['text':' Check that the parent type is not shared and therefore can be edited.','line_number':71,'multiline':False]
['text':' Call to_backend on the module that needs to be lowered. It needs to be','line_number':79,'multiline':False]
['text':' wrapped before doing so because _to_jit_backend accepts wrapped modules.','line_number':80,'multiline':False]
['text':' The result needs to be unwrapped in order to access its type below.','line_number':81,'multiline':False]
['text':' Adjust the parent's type so that the type of the submodule matches','line_number':87,'multiline':False]
['text':' the type of lowered_submodule.','line_number':88,'multiline':False]
['text':' Record the type mapping from old type -> lowered type.','line_number':95,'multiline':False]
['text':' Having lowered all of the modules that needed to be lowered, remap types in','line_number':99,'multiline':False]
['text':' all graphs in the hierarchy so that the graphs all use the new lowered','line_number':100,'multiline':False]
['text':' type.','line_number':101,'multiline':False]
['text':' modules() iterates over all modules in the hierarchy including the root.','line_number':109,'multiline':False]
['text':' Represents of a Type of Dict[str, Any].','line_number':126,'multiline':False]
['text':' Bind a function for lowering to each JIT backend. The name of the backend','line_number':136,'multiline':False]
['text':' must be the first argument. For example, to lower a Module to','line_number':137,'multiline':False]
['text':' "example_backend", declared as','line_number':138,'multiline':False]
['text':'','line_number':139,'multiline':False]
['text':'  static auto cls = torch::jit::backend<ExampleBackend>("example_backend");','line_number':140,'multiline':False]
['text':'','line_number':141,'multiline':False]
['text':' this function must be called like','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':'  torch._C._jit_to_backend("example_backend", module, spec)','line_number':144,'multiline':False]
['text':' Clone the Module to avoid editing types that are shared with','line_number':173,'multiline':False]
['text':' Modules in other instances outside this hierarchy.','line_number':174,'multiline':False]
['text':' Get all shared module types. Type sharing is only a problem if the','line_number':177,'multiline':False]
['text':' parent modules of the ones to lower are in this set.','line_number':178,'multiline':False]
['text':' Wrap the result in a RecursiveScriptModule because that's what','line_number':182,'multiline':False]
['text':' the caller passed in.','line_number':183,'multiline':False]
['text':' namespace jit','line_number':192,'multiline':False]
['text':' namespace torch','line_number':193,'multiline':False]
