['text':' length of the buffer','line_number':24,'multiline':False]
['text':' buffer for path','line_number':25,'multiline':False]
['text':' Checking whether the environment is already activated','line_number':90,'multiline':False]
['text':' Getting `ProgramFiles` through environment variable queries','line_number':95,'multiline':False]
['text':' Getting VS 2017 installation path through `vswhere`','line_number':104,'multiline':False]
['text':' Checking whether the activation script `vcvarsall.bat` exists','line_number':115,'multiline':False]
['text':' Determining current platform','line_number':126,'multiline':False]
['text':' Getting environment variables after activating VS development shell','line_number':133,'multiline':False]
['text':' Setting environment variables to the current environment','line_number':141,'multiline':False]
['text':' Getting the path of `cmd.exe`','line_number':150,'multiline':False]
['text':' Constructing the command line','line_number':155,'multiline':False]
['text':' Constructing the env array','line_number':158,'multiline':False]
['text':' If `env_list` is not empty, then add char pointers ending with nullptr.','line_number':159,'multiline':False]
['text':' Otherwise, it will be nullptr, which implies the default env.','line_number':160,'multiline':False]
['text':' Running the command','line_number':168,'multiline':False]
['text':' A single compiler config is accessed through getConfig() (below)','line_number':174,'multiline':False]
['text':' Controls compilation options and may be updated based on the result','line_number':175,'multiline':False]
['text':' of compilation attempts.','line_number':176,'multiline':False]
['text':' Set openmp to true only if PyTorch is compiled with OpenMP support','line_number':206,'multiline':False]
['text':' OpenMP is typically not available on MacOS platform','line_number':207,'multiline':False]
['text':' NB: -march=native not supported on PPC64 g++.  It's a bit annoying','line_number':220,'multiline':False]
['text':' to do a configure-style test to decide whether or not the g++','line_number':221,'multiline':False]
['text':' actually supports it or not, so we heuristically use the host','line_number':222,'multiline':False]
['text':' compiler to predict if the runtime compiler supports the option we','line_number':223,'multiline':False]
['text':' want.  This probably won't work if you're cross-compiling.','line_number':224,'multiline':False]
['text':' NB: -march=native is disabled because it has caused problems where','line_number':225,'multiline':False]
['text':' compiler and assembler do not agree on what native instruction they','line_number':226,'multiline':False]
['text':' understand for AVX512. When we need better CPU performance this','line_number':227,'multiline':False]
['text':' optimization can be re-enabled by tracking down the platforms where','line_number':228,'multiline':False]
['text':' this error occurs and only selectively disabling it.','line_number':229,'multiline':False]
['text':' According to https://stackoverflow.com/a/29178079, we are able to','line_number':231,'multiline':False]
['text':' detect which arch level is supported by the vectorizer using','line_number':232,'multiline':False]
['text':' the macro __isa_available. It is added during runtime.','line_number':233,'multiline':False]
['text':' The result of __isa_available and the corresponding arch:','line_number':234,'multiline':False]
['text':'  AVX       4','line_number':235,'multiline':False]
['text':'  AVX2      5','line_number':236,'multiline':False]
['text':'  AVX512    6','line_number':237,'multiline':False]
['text':'  "-march=native "','line_number':261,'multiline':False]
['text':' disable for future compiles','line_number':286,'multiline':False]
['text':' namespace cpu','line_number':360,'multiline':False]
['text':' namespace fuser','line_number':361,'multiline':False]
['text':' namespace jit','line_number':362,'multiline':False]
['text':' namespace torch','line_number':363,'multiline':False]
