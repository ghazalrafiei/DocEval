['text':' Save the previous node, since we might delete `curNode` in next block','line_number':16,'multiline':False]
['text':' Unmerge subgraph if we don't get every nodes of a partition','line_number':19,'multiline':False]
['text':' into the subgraph due to failed alias check','line_number':20,'multiline':False]
['text':' We need to run the rewriter multiple times in order to get all merge','line_number':33,'multiline':False]
['text':' opportunities. This is because moveBeforeTopologicalValid may reorder','line_number':34,'multiline':False]
['text':' nodes to be AFTER the current iteration point. In order to properly','line_number':35,'multiline':False]
['text':' consider those nodes for merging, we need run the pass until no changes','line_number':36,'multiline':False]
['text':' have been made.','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' Example:','line_number':39,'multiline':False]
['text':'   c = f(a, b)','line_number':40,'multiline':False]
['text':'   d = f(c)','line_number':41,'multiline':False]
['text':'   e = f(d)  <- iter is here, moving upward','line_number':42,'multiline':False]
['text':' After c.moveBeforeTopologicallyValid(e), we have:','line_number':43,'multiline':False]
['text':'   c = f(a, b)','line_number':44,'multiline':False]
['text':'   e = f(d)  <- iter still here','line_number':45,'multiline':False]
['text':'   d = f(c)  <- this was node moved on the other side.','line_number':46,'multiline':False]
['text':' see [workblocks]','line_number':47,'multiline':False]
['text':' Construct Subgraphs Recursively','line_number':63,'multiline':False]
['text':' [workblocks]','line_number':72,'multiline':False]
['text':' the IR has many nodes which can never be reordered around, such as a','line_number':73,'multiline':False]
['text':' prim::Bailout. if a node N is surrounded by two nodes which cannot be','line_number':74,'multiline':False]
['text':' reordered, A and B, then a fusion group that is created from N','line_number':75,'multiline':False]
['text':' can only contain nodes from (A, B) The nodes from A to B represent one','line_number':76,'multiline':False]
['text':' work block for the subgraph rewriter to work on. By creating these up','line_number':77,'multiline':False]
['text':' front, we avoid retraversing the whole graph block any time scanNode','line_number':78,'multiline':False]
['text':' returns','line_number':79,'multiline':False]
['text':' cannot reorder around side effectful nodes','line_number':84,'multiline':False]
['text':' Iterate through the workblock to merge nodes of the','line_number':103,'multiline':False]
['text':' same partition determined by LLGA graph helper.','line_number':104,'multiline':False]
['text':' Nodes like B and C do not share a common input but belong to a','line_number':105,'multiline':False]
['text':' same partition, and thus we cannot only scan the input nodes','line_number':106,'multiline':False]
['text':' to find merging opportunities. Instead, we have to scan through','line_number':107,'multiline':False]
['text':' the whole workblock, which might lead to O^2 accesses in worst case','line_number':108,'multiline':False]
['text':'              A','line_number':109,'multiline':False]
['text':'      + - - / - \ - - +','line_number':110,'multiline':False]
['text':'      |    B     C    |','line_number':111,'multiline':False]
['text':'      |    |     |    |','line_number':112,'multiline':False]
['text':'      |    D     E    |','line_number':113,'multiline':False]
['text':'      + - - \ - / - - +','line_number':114,'multiline':False]
['text':'              F','line_number':115,'multiline':False]
['text':' we successfully merged, so the new group's `inputs` may have','line_number':119,'multiline':False]
['text':' changed. So rescan the new group for more merging opportunities.','line_number':120,'multiline':False]
['text':' Try to merge `producer` into `consumer`. If successful, this destroys','line_number':128,'multiline':False]
['text':' `producer` and returns the `consumer` group.','line_number':129,'multiline':False]
['text':' namespace onednn','line_number':141,'multiline':False]
['text':' namespace fuser','line_number':142,'multiline':False]
['text':' namespace jit','line_number':143,'multiline':False]
['text':' namespace torch','line_number':144,'multiline':False]
