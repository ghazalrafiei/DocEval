['text':' Identity is a complex concept in PyTorch. A Tensor might not have a','line_number':14,'multiline':False]
['text':' an associated storage, multiple Tensors might share the same underlying','line_number':15,'multiline':False]
['text':' storage, the storage of a Tensor might change over time, etc.','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':' For the purpose of profiling we're mostly interested in data flow','line_number':18,'multiline':False]
['text':' analysis. As a result, we can take an expansive view of identity:','line_number':19,'multiline':False]
['text':' Tensors share an ID if they share a TensorImpl or storage data.','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' This identity equality is transitive; If Tensors T0 and T1 share a storage','line_number':22,'multiline':False]
['text':' S0 and T1 later points to a different storage S1 then all Tensors which','line_number':23,'multiline':False]
['text':' point to either S0 or S1 are considered to have the same identity. (Since','line_number':24,'multiline':False]
['text':' profiler cannot reason beyond that.)','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':' The profiler will handle lifetime analysis to ensure that identities do','line_number':27,'multiline':False]
['text':' not run afoul of the ABA problem. This does, however, mean that identities','line_number':28,'multiline':False]
['text':' can only be assigned when memory profiling is enabled.','line_number':29,'multiline':False]
['text':' Uniquely identifies an allocation. (Generally a StorageImpl's data ptr.)','line_number':32,'multiline':False]
['text':' We use a Tensor's TensorImpl adress and StorageImpl data start to build the','line_number':40,'multiline':False]
['text':' data flow graph. We do not hold an owning reference so we wrap them in strong','line_number':41,'multiline':False]
['text':' types to prevent direct access.','line_number':42,'multiline':False]
['text':' ============================================================================','line_number':57,'multiline':False]
['text':' == weak_intrusive_ptr and the ABA problem for TensorImpl* ==================','line_number':58,'multiline':False]
['text':' ============================================================================','line_number':59,'multiline':False]
['text':' Tracking `TensorImpl`s is an important part of identity tracking, because','line_number':60,'multiline':False]
['text':' a Tensor might change storage; however when it does we want to retain the','line_number':61,'multiline':False]
['text':' fact that the old and new storage belong to the same logical Tensor. We','line_number':62,'multiline':False]
['text':' cannot take an owning reference to the Tensor because that would change','line_number':63,'multiline':False]
['text':' program semantics by extending the lifetime of the Tensor. However if we','line_number':64,'multiline':False]
['text':' store a raw TensorImpl* pointer the TensorImpl might be deleted and a new','line_number':65,'multiline':False]
['text':' TensorImpl might be created that reuses the address. (ABA problem)','line_number':66,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':' Fortunately, there is a feature of `c10::intrusive_ptr` that we can use to','line_number':68,'multiline':False]
['text':' prevent address reuse for the duration of profiling: the weak intrusive ptr.','line_number':69,'multiline':False]
['text':' When a Tensor's refcount reaches zero but there are outstanding weak','line_number':70,'multiline':False]
['text':' references (`weakcount_ > 0`) it will free the underlying managed resources','line_number':71,'multiline':False]
['text':' by calling `target_->release_resources()`, but it will not call `delete`.','line_number':72,'multiline':False]
['text':' (Instead, `delete` is called when the last weak reference is destroyed.)','line_number':73,'multiline':False]
['text':' This means that we can safely use address identity to track `TensorImpls`.','line_number':74,'multiline':False]
['text':' namespace impl','line_number':92,'multiline':False]
['text':' namespace profiler','line_number':93,'multiline':False]
['text':' namespace torch','line_number':94,'multiline':False]
