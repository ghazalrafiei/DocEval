['text':' promptly trigger delayed frees since we have GIL','line_number':33,'multiline':False]
['text':' tp_name ','line_number':41,'multiline':True]
['text':' tp_basicsize ','line_number':42,'multiline':True]
['text':' tp_itemsize ','line_number':43,'multiline':True]
['text':' tp_dealloc ','line_number':44,'multiline':True]
['text':' tp_vectorcall_offset ','line_number':45,'multiline':True]
['text':' tp_getattr ','line_number':46,'multiline':True]
['text':' tp_setattr ','line_number':47,'multiline':True]
['text':' tp_reserved ','line_number':48,'multiline':True]
['text':' tp_repr ','line_number':49,'multiline':True]
['text':' tp_as_number ','line_number':50,'multiline':True]
['text':' tp_as_sequence ','line_number':51,'multiline':True]
['text':' tp_as_mapping ','line_number':52,'multiline':True]
['text':' tp_hash  ','line_number':53,'multiline':True]
['text':' tp_call ','line_number':54,'multiline':True]
['text':' tp_str ','line_number':55,'multiline':True]
['text':' tp_getattro ','line_number':56,'multiline':True]
['text':' tp_setattro ','line_number':57,'multiline':True]
['text':' tp_as_buffer ','line_number':58,'multiline':True]
['text':' NOLINTNEXTLINE(misc-redundant-expression)','line_number':59,'multiline':False]
['text':' tp_flags ','line_number':60,'multiline':True]
['text':' tp_doc ','line_number':61,'multiline':True]
['text':' tp_traverse ','line_number':62,'multiline':True]
['text':' tp_clear ','line_number':63,'multiline':True]
['text':' tp_richcompare ','line_number':64,'multiline':True]
['text':' tp_weaklistoffset ','line_number':65,'multiline':True]
['text':' tp_iter ','line_number':66,'multiline':True]
['text':' tp_iternext ','line_number':67,'multiline':True]
['text':' tp_methods ','line_number':68,'multiline':True]
['text':' tp_members ','line_number':69,'multiline':True]
['text':' tp_getset ','line_number':70,'multiline':True]
['text':' tp_base ','line_number':71,'multiline':True]
['text':' tp_dict ','line_number':72,'multiline':True]
['text':' tp_descr_get ','line_number':73,'multiline':True]
['text':' tp_descr_set ','line_number':74,'multiline':True]
['text':' tp_dictoffset ','line_number':75,'multiline':True]
['text':' tp_init ','line_number':76,'multiline':True]
['text':' tp_alloc ','line_number':77,'multiline':True]
['text':' tp_new ','line_number':78,'multiline':True]
['text':' policy ','line_number':101,'multiline':True]
['text':' parent ','line_number':102,'multiline':True]
['text':' namespace detail','line_number':109,'multiline':False]
['text':' namespace pybind11','line_number':110,'multiline':False]
['text':' [NOTE: RecordFunctionFast]
 * This is an alternate way to call record_function from python.
 * The torch.profiler.record_function context manager is slow (~14us on
 * benchmarks in Aug 2023), which is usually fine for module-level annotations
 * in python, but slow for per-op annotations. Part of the reason it is slow is
 * because the calls go through the dispatcher, in order to make the
 * record_function calls work with torchscript.
 *
 * This implementation doesn't go through the dispatcher and so it won't work
 * with any feature relying on the dispatcher (e.g. torchscript or
 * torch.compile)
 *
 * An alternate solution would be to implement a python context manager that
 * calls into C++ for the enter/exit function:
 *    @contextlib.contextmanager
 *    def record_function_fast(name):
 *      rf = torch._C._record_function_fast_enter(name)
 *      try:
 *        yield
 *      finally:
 *        torch._C._record_function_fast_exit(rf)
 * The C++ implementation here is faster by ~0.2-0.4us per context manager.
 ','line_number':115,'multiline':True]
['text':' NOLINTNEXTLINE(*-c-arrays*)','line_number':162,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)','line_number':169,'multiline':False]
['text':' namespace','line_number':220,'multiline':False]
['text':' profiler_metrics ','line_number':268,'multiline':True]
['text':' profiler_measure_per_kernel ','line_number':269,'multiline':True]
['text':' verbose ','line_number':270,'multiline':True]
['text':' performance_events  ','line_number':271,'multiline':True]
['text':' enable_cuda_sync_events ','line_number':272,'multiline':True]
['text':' __getstate__','line_number':292,'multiline':False]
['text':' Return a tuple that fully encodes the state of the config ','line_number':303,'multiline':True]
['text':' __setstate__','line_number':311,'multiline':False]
['text':' report_input_shapes ','line_number':343,'multiline':True]
['text':' profile_memory ','line_number':344,'multiline':True]
['text':' with_stack ','line_number':345,'multiline':True]
['text':' with_flops ','line_number':346,'multiline':True]
['text':' with_modules ','line_number':347,'multiline':True]
['text':' experimental_config ','line_number':348,'multiline':True]
['text':' NOLINTNEXTLINE(bugprone-unused-raii)','line_number':407,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-unused-raii)','line_number':409,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-unused-raii)','line_number':469,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-unused-raii)','line_number':473,'multiline':False]
['text':' PyTorch profiler execution trace internal interface.','line_number':503,'multiline':False]
['text':' NOLINTNEXTLINE(*-c-arrays*)','line_number':546,'multiline':False]
['text':' namespace profiler','line_number':577,'multiline':False]
['text':' namespace torch','line_number':578,'multiline':False]
