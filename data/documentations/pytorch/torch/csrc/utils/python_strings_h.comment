['text':' Utilities for handling Python strings. Note that PyString, when defined, is','line_number':9,'multiline':False]
['text':' the same as PyBytes.','line_number':10,'multiline':False]
['text':' Returns true if obj is a bytes/str or unicode object','line_number':12,'multiline':False]
['text':' As of Python 3.6, this does not require the GIL','line_number':13,'multiline':False]
['text':' Unpacks PyBytes (PyString) or PyUnicode as std::string','line_number':18,'multiline':False]
['text':' PyBytes are unpacked as-is. PyUnicode is unpacked as UTF-8.','line_number':19,'multiline':False]
['text':' NOTE: this method requires the GIL','line_number':20,'multiline':False]
['text':' Unpacks PyBytes (PyString) or PyUnicode as c10::string_view','line_number':37,'multiline':False]
['text':' PyBytes are unpacked as-is. PyUnicode is unpacked as UTF-8.','line_number':38,'multiline':False]
['text':' NOTE: If `obj` is destroyed, then the non-owning c10::string_view will','line_number':39,'multiline':False]
['text':'   become invalid. If the string needs to be accessed at any point after','line_number':40,'multiline':False]
['text':'   `obj` is destroyed, then the c10::string_view should be copied into','line_number':41,'multiline':False]
['text':'   a std::string, or another owning object, and kept alive. For an example,','line_number':42,'multiline':False]
['text':'   look at how IValue and autograd nodes handle c10::string_view arguments.','line_number':43,'multiline':False]
['text':' NOTE: this method requires the GIL','line_number':44,'multiline':False]
['text':' Precondition: THPUtils_checkString(obj) must be true','line_number':73,'multiline':False]
['text':' Precondition: THPUtils_checkString(obj) must be true','line_number':78,'multiline':False]
['text':'
 * Reference:
 * https://github.com/numpy/numpy/blob/f4c497c768e0646df740b647782df463825bfd27/numpy/core/src/common/get_attr_string.h#L42
 *
 * Stripped down version of PyObject_GetAttrString,
 * avoids lookups for None, tuple, and List objects,
 * and doesn't create a PyErr since this code ignores it.
 *
 * This can be much faster then PyObject_GetAttrString where
 * exceptions are not used by caller.
 *
 * 'obj' is the object to search for attribute.
 *
 * 'name' is the attribute to search for.
 *
 * Returns a py::object wrapping the return value. If the attribute lookup
 * failed the value will be NULL.
 *
 ','line_number':83,'multiline':True]
['text':' NOLINTNEXTLINE(clang-diagnostic-unused-function)','line_number':103,'multiline':False]
['text':' Attribute referenced by (char *)name ','line_number':108,'multiline':True]
['text':' This is OK per https://bugs.python.org/issue39620','line_number':110,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)','line_number':111,'multiline':False]
['text':' Attribute referenced by (PyObject *)name ','line_number':117,'multiline':True]
