['text':' cuda_lazy_init() is always compiled, even for CPU-only builds.','line_number':5,'multiline':False]
['text':' Thus, it does not live in the cuda/ folder.','line_number':6,'multiline':False]
['text':' The INVARIANT is that this function MUST be called before you attempt','line_number':11,'multiline':False]
['text':' to get a CUDA Type object from ATen, in any way.  Here are some common','line_number':12,'multiline':False]
['text':' ways that a Type object may be retrieved:','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':'    - You call getNonVariableType or getNonVariableTypeOpt','line_number':15,'multiline':False]
['text':'    - You call toBackend() on a Type','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':' It's important to do this correctly, because if you forget to add it','line_number':18,'multiline':False]
['text':' you'll get an oblique error message about "Cannot initialize CUDA without','line_number':19,'multiline':False]
['text':' ATen_cuda library" if you try to use CUDA functionality from a CPU-only','line_number':20,'multiline':False]
['text':' build, which is not good UX.','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':' namespace utils','line_number':32,'multiline':False]
['text':' namespace torch','line_number':33,'multiline':False]
