['text':' Parse arguments to Python functions implemented in C++','line_number':3,'multiline':False]
['text':' This is similar to PyArg_ParseTupleAndKeywords(), but specifically handles','line_number':4,'multiline':False]
['text':' the types relevant to PyTorch and distinguishes between overloaded function','line_number':5,'multiline':False]
['text':' signatures.','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' Example:','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'   static PythonArgParser parser({','line_number':10,'multiline':False]
['text':'     "norm(Scalar p, int64_t dim, bool keepdim=False)",','line_number':11,'multiline':False]
['text':'     "norm(Scalar p=2)",','line_number':12,'multiline':False]
['text':'   });','line_number':13,'multiline':False]
['text':'   ParsedArgs<3> parsed_args;','line_number':14,'multiline':False]
['text':'   auto r = parser.parse(args, kwargs, parsed_args);','line_number':15,'multiline':False]
['text':'   if (r.idx == 0) {','line_number':16,'multiline':False]
['text':'     norm(r.scalar(0), r.int64(1), r.bool(0));','line_number':17,'multiline':False]
['text':'   } else {','line_number':18,'multiline':False]
['text':'     norm(r.scalar(0));','line_number':19,'multiline':False]
['text':'   }','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' We auto-generate most uses of PythonArgParser; the generated files','line_number':22,'multiline':False]
['text':' are torch/csrc/autograd/generated/python_*.cpp','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':' Some gotchas that you should watch out for:','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':'    - Note [Order of overloads matters]','line_number':27,'multiline':False]
['text':'      Order of overloads matters.  A set of input arguments may','line_number':28,'multiline':False]
['text':'      bind to multiple argument specs; we will always pick the','line_number':29,'multiline':False]
['text':'      first one in PythonArgParser.  However, when you are writing','line_number':30,'multiline':False]
['text':'      overloads in, e.g., native_functions.yaml, you don't have to','line_number':31,'multiline':False]
['text':'      worry about what order you write them, because the code','line_number':32,'multiline':False]
['text':'      generation logic always gives the overloads a canonical','line_number':33,'multiline':False]
['text':'      order, where Tensor overloads come first, before Scalar overloads.','line_number':34,'multiline':False]
['text':'      This logic is in sort_declarations in','line_number':35,'multiline':False]
['text':'      tools/autograd/gen_python_functions.py','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':'    - Zero-dim tensors (e.g., torch.tensor(2)) bind to both','line_number':38,'multiline':False]
['text':'      Scalar and Tensor, UNLESS they require grad (in which case','line_number':39,'multiline':False]
['text':'      they only bind to Tensor).','line_number':40,'multiline':False]
['text':' Contains bound Python arguments in declaration order','line_number':132,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':136,'multiline':False]
['text':' A PythonArgParser contains a list of valid signatures. Instances are','line_number':140,'multiline':False]
['text':' typically global variables and should be immutable.','line_number':141,'multiline':False]
['text':' meant only for `torch` functions.','line_number':147,'multiline':False]
['text':' Formatted strings of non-hidden signatures','line_number':160,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':168,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':175,'multiline':False]
['text':' FunctionSignature represents a single valid signature for a Python function.','line_number':184,'multiline':False]
['text':' It is immutable once constructed. The contained data can be concurrently','line_number':185,'multiline':False]
['text':' accessed by multiple calls.','line_number':186,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':194,'multiline':False]
['text':' PythonArgs contains bound Python arguments for an actual invocation','line_number':211,'multiline':False]
['text':' along with references to the matched signature.','line_number':212,'multiline':False]
['text':' NOTE: borrowed references','line_number':229,'multiline':False]
['text':' FunctionParameter is a single formal parameter of a Python function.','line_number':311,'multiline':False]
['text':' It is immutable once constructed.','line_number':312,'multiline':False]
['text':' having this as a raw PyObject * will presumably leak it, but these are only','line_number':332,'multiline':False]
['text':' held by static objects anyway, and Py_Finalize can already be called when','line_number':333,'multiline':False]
['text':' this is destructed.','line_number':334,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':336,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':345,'multiline':False]
['text':' see Scalar','line_number':346,'multiline':False]
['text':' TODO: this can return MaybeOwned','line_number':387,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':397,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':416,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':446,'multiline':False]
['text':' This is checked by the argument parser so it's safe to cast without','line_number':452,'multiline':False]
['text':' checking if this is a tensor first','line_number':453,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':465,'multiline':False]
['text':' This is checked by the argument parser so it's safe to cast without','line_number':472,'multiline':False]
['text':' checking if this is a tensor first','line_number':473,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':486,'multiline':False]
['text':' This is checked by the argument parser so it's safe to cast without','line_number':494,'multiline':False]
['text':' checking if this is a tensor first','line_number':495,'multiline':False]
['text':'include_bool','line_number':555,'multiline':True]
['text':'include bool','line_number':557,'multiline':True]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':564,'multiline':False]
['text':' Elements of torch.Size are tensors during tracing, and we need to','line_number':572,'multiline':False]
['text':' record extra information before they are turned into an IntArrayRef','line_number':573,'multiline':False]
['text':' convert tensor to scalar outside of try / catch,','line_number':586,'multiline':False]
['text':' so that Tensor subclass exceptions will not be caught.','line_number':587,'multiline':False]
['text':' Fast path for plain numbers','line_number':589,'multiline':False]
['text':'include_bool','line_number':599,'multiline':True]
['text':'include bool','line_number':603,'multiline':True]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':638,'multiline':False]
['text':' Elements of torch.Size are tensors during tracing, and we need to','line_number':644,'multiline':False]
['text':' record extra information before they are turned into an IntArrayRef','line_number':645,'multiline':False]
['text':' convert tensor to scalar outside of try / catch,','line_number':657,'multiline':False]
['text':' so that Tensor subclass exceptions will not be caught.','line_number':658,'multiline':False]
['text':' Fast path for plain numbers','line_number':660,'multiline':False]
['text':'include_bool','line_number':673,'multiline':True]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':706,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':855,'multiline':False]
['text':' convert FakeTensor to SymInt','line_number':974,'multiline':False]
['text':' expect empty sizes, numel = 1','line_number':975,'multiline':False]
['text':' and ScalarType::Int','line_number':976,'multiline':False]
['text':'include_bool','line_number':982,'multiline':True]
['text':'include bool','line_number':992,'multiline':True]
['text':'
 *
 * Handle __torch_function__ overrides if we know that there are overloaded
 * arguments.  All objects stored in r.overloaded_args must have a
 * __torch_function__ implementation and the arguments must be ordered in order
 * of precedence. Precedence goes from left to right in the order of the
 * signature of the function the overloaded arguments were passed to, except
 * subclasses are always considered before superclasses.
 *
 * If the result of calling __torch_function__ is NotImplemented, the
 * next implementation in the precedence order is called. If all
 * arguments return NotImplemented from their __torch_function__
 * implementation, a TypeError is raised in Python.
 *
 * Assumes overloaded_args has at least one entry. All entries must have
 * a __torch_function__ attribute that resolves to a callable that
 * accepts a torch API function, a tuple of arguments, and a dict of
 * keyword arguments for the torch API function.
 *
 * It is sufficient to call PythonArgs::has_torch_function before
 * calling this function to verify that there are valid arguments
 * present. If that is not done then special care must be taken to
 * ensure there are arguments that are overloaded with
 * __torch_function__.
 *
 * See torch._overrides.handle_torch_function for the equivalent
 * code in the pure-python implementation.
 *
 * 'r' is a parsed PythonArgs instance, returned from
 * PythonArgParser::parse.
 *
 * 'args' is a reference to the python tuple of arguments to the torch
 * API function.
 *
 * 'kwargs' is a reference to the python dict of keyword arguments to
 * the torch API function.
 *
 * 'torch_api' is a reference to a python torch API namespace.
 *
 * 'torch_api_function' is the reference to the original torch method, usually,
 * we can use torch_api and func_name to get torch_api_function. In some cases,
 * e.g., torch custom op, we create the function in C++, if we still use
 * torch_api and func_name to fetch original api, a cyclic call will happen.
 *
 * 'overloaded_args' is the args which have overloaded __torch_function__.
 *
 * 'func_name' is the named of the original torch method.
 *
 * TODO: we could use different names for the following 'handle_torch_function'
 * instead of overloading.
 *
 ','line_number':1147,'multiline':True]
['text':' Used for Tensor methods with arguments.','line_number':1199,'multiline':False]
['text':' Used for functions which needs to parse python args.','line_number':1209,'multiline':False]
['text':' Used for functions that have no argument parsing.','line_number':1218,'multiline':False]
['text':' Used for functions created in C++, e.g., C++ custom op, which doesn't use','line_number':1227,'multiline':False]
['text':' PythonArgParser to get overloaded_args.','line_number':1228,'multiline':False]
['text':' Used for getters of Tensor properties','line_number':1241,'multiline':False]
['text':' Used for setters of Tensor properties.','line_number':1246,'multiline':False]
['text':' Used for __getitem__ and __setitem__','line_number':1252,'multiline':False]
['text':'
 * Check if the input obj is Tensor type, including its subclass, or overloaded
 * type. If the type defines __torch_function__, it also returns true.
 * Otherwise returns flase. If the class is not torch.Tensor, and it defines
 * __torch_function__, we append obj to overloaded_args.
 *
 * 'obj': the input argument to be checked
 * 'overloaded_args': the vector to append the overloaded args.
 ','line_number':1258,'multiline':True]
['text':'
 * Check if the input obj is Tensor List or Tensor Tuple type. First check
 * whether obj is Tuple or List type, if true, iterate over each element and
 * check whether it is Tensor type, including its subclass or overloaded type.
 * At the same time, the overloaded arg is appended to the overloaded_args.
 *
 * 'obj': the input argument to be checked
 * 'overloaded_args': the vector to append the overloaded args.
 * 'argnum': the number of total arguments of the function being checked.
 * 'throw_error': whether throw error if any element in the list or tuple is
 *                not tensor type or overloaded.
 ','line_number':1271,'multiline':True]
['text':' Given an argument that is definitely a tensor and is definitely overloaded,
 * append it to the overloaded arguments list.  Use this instead of
 * is_tensor_and_append_overloaded in situations where you have a PyObject
 * and you know it definitely is a Tensor and it is definitely overloaded.
 *
 * 'overloaded_args': the vector to append the overloaded args
 * 'obj': the input tensor that is overloaded
 ','line_number':1289,'multiline':True]
['text':' Given an argument that is definitely a type and is definitely overloaded,
 * append it to the overloaded arguments list. Use this only with
 * __torch_dispatch__, where we operate on classes that have a
 * __torch_dispatch__ classmethod.
 *
 * 'overloaded_args': the vector to append the overloaded type
 * 'obj': the input class that has a __torch_dispatch__ classmethod.
 ','line_number':1301,'multiline':True]
['text':' namespace torch','line_number':1313,'multiline':False]
