['text':' namespace torch','line_number':33,'multiline':False]
['text':' Type-specific fields go here. ','line_number':37,'multiline':True]
['text':' NOLINT','line_number':67,'multiline':False]
['text':' tp_name ','line_number':75,'multiline':True]
['text':' tp_basicsize ','line_number':76,'multiline':True]
['text':' tp_itemsize ','line_number':77,'multiline':True]
['text':' tp_dealloc ','line_number':78,'multiline':True]
['text':' tp_vectorcall_offset ','line_number':79,'multiline':True]
['text':' tp_getattr ','line_number':80,'multiline':True]
['text':' tp_setattr ','line_number':81,'multiline':True]
['text':' tp_reserved ','line_number':82,'multiline':True]
['text':' tp_repr ','line_number':83,'multiline':True]
['text':' tp_as_number ','line_number':84,'multiline':True]
['text':' tp_as_sequence ','line_number':85,'multiline':True]
['text':' tp_as_mapping ','line_number':86,'multiline':True]
['text':' tp_hash  ','line_number':87,'multiline':True]
['text':' tp_call ','line_number':88,'multiline':True]
['text':' tp_str ','line_number':89,'multiline':True]
['text':' tp_getattro ','line_number':90,'multiline':True]
['text':' tp_setattro ','line_number':91,'multiline':True]
['text':' tp_as_buffer ','line_number':92,'multiline':True]
['text':' tp_flags ','line_number':93,'multiline':True]
['text':' tp_doc ','line_number':94,'multiline':True]
['text':' tp_traverse ','line_number':95,'multiline':True]
['text':' tp_clear ','line_number':96,'multiline':True]
['text':' tp_richcompare ','line_number':97,'multiline':True]
['text':' tp_weaklistoffset ','line_number':98,'multiline':True]
['text':' tp_iter ','line_number':99,'multiline':True]
['text':' tp_iternext ','line_number':100,'multiline':True]
['text':' tp_methods ','line_number':101,'multiline':True]
['text':' tp_members ','line_number':102,'multiline':True]
['text':' tp_getset ','line_number':103,'multiline':True]
['text':' tp_base ','line_number':104,'multiline':True]
['text':' tp_dict ','line_number':105,'multiline':True]
['text':' tp_descr_get ','line_number':106,'multiline':True]
['text':' tp_descr_set ','line_number':107,'multiline':True]
['text':' tp_dictoffset ','line_number':108,'multiline':True]
['text':' tp_init ','line_number':109,'multiline':True]
['text':' tp_alloc ','line_number':110,'multiline':True]
['text':' tp_new ','line_number':111,'multiline':True]
['text':' Type-specific fields go here. ','line_number':124,'multiline':True]
['text':' NOLINT','line_number':142,'multiline':False]
['text':' tp_name ','line_number':150,'multiline':True]
['text':' tp_basicsize ','line_number':151,'multiline':True]
['text':' tp_itemsize ','line_number':152,'multiline':True]
['text':' tp_dealloc ','line_number':153,'multiline':True]
['text':' tp_vectorcall_offset ','line_number':154,'multiline':True]
['text':' tp_getattr ','line_number':155,'multiline':True]
['text':' tp_setattr ','line_number':156,'multiline':True]
['text':' tp_reserved ','line_number':157,'multiline':True]
['text':' tp_repr ','line_number':158,'multiline':True]
['text':' tp_as_number ','line_number':159,'multiline':True]
['text':' tp_as_sequence ','line_number':160,'multiline':True]
['text':' tp_as_mapping ','line_number':161,'multiline':True]
['text':' tp_hash  ','line_number':162,'multiline':True]
['text':' tp_call ','line_number':163,'multiline':True]
['text':' tp_str ','line_number':164,'multiline':True]
['text':' tp_getattro ','line_number':165,'multiline':True]
['text':' tp_setattro ','line_number':166,'multiline':True]
['text':' tp_as_buffer ','line_number':167,'multiline':True]
['text':' tp_flags ','line_number':168,'multiline':True]
['text':' tp_doc ','line_number':169,'multiline':True]
['text':' tp_traverse ','line_number':170,'multiline':True]
['text':' tp_clear ','line_number':171,'multiline':True]
['text':' tp_richcompare ','line_number':172,'multiline':True]
['text':' tp_weaklistoffset ','line_number':173,'multiline':True]
['text':' tp_iter ','line_number':174,'multiline':True]
['text':' tp_iternext ','line_number':175,'multiline':True]
['text':' tp_methods ','line_number':176,'multiline':True]
['text':' tp_members ','line_number':177,'multiline':True]
['text':' tp_getset ','line_number':178,'multiline':True]
['text':' tp_base ','line_number':179,'multiline':True]
['text':' tp_dict ','line_number':180,'multiline':True]
['text':' tp_descr_get ','line_number':181,'multiline':True]
['text':' tp_descr_set ','line_number':182,'multiline':True]
['text':' tp_dictoffset ','line_number':183,'multiline':True]
['text':' tp_init ','line_number':184,'multiline':True]
['text':' tp_alloc ','line_number':185,'multiline':True]
['text':' tp_new ','line_number':186,'multiline':True]
['text':' These are all C-API calls so no exceptions will be raised','line_number':216,'multiline':False]
['text':' and therefore no need for RAII approach to storing','line_number':217,'multiline':False]
['text':' the old value.','line_number':218,'multiline':False]
['text':' kwargs can safely be nullptr here.','line_number':224,'multiline':False]
['text':' This implementation is not completely correct.  The moral','line_number':250,'multiline':False]
['text':' meaning of this function is that we should do a redispatch','line_number':251,'multiline':False]
['text':' "after" PythonKey, aka a redispatch() call.  But we don't have a','line_number':252,'multiline':False]
['text':' dispatcher call here; we have an opaque Python object.','line_number':253,'multiline':False]
['text':'','line_number':254,'multiline':False]
['text':' What we have here is a close approximation: instead of redispatch(), we','line_number':255,'multiline':False]
['text':' just exclude Python and all the keys before it, so that we will go','line_number':256,'multiline':False]
['text':' to the next key after Python.  The difference, however, is we are','line_number':257,'multiline':False]
['text':' now PERMANENTLY after Python.  We don't think there are any legitimate','line_number':258,'multiline':False]
['text':' cases where we want to go for another round on the entire dispatcher key','line_number':259,'multiline':False]
['text':' set, but if there are, then we will have to do something else here.','line_number':260,'multiline':False]
['text':' TODO: add constructor for this specifically','line_number':262,'multiline':False]
['text':' NB: off by one hazard here, but it works out: python key is not','line_number':266,'multiline':False]
['text':' included in AFTER, so it is included in the negation (and that's','line_number':267,'multiline':False]
['text':' correct: we want to exclude Python key and everything BEFORE it.)','line_number':268,'multiline':False]
['text':' Makes sure that we don't check for __torch_function__ on basic Python types','line_number':277,'multiline':False]
['text':' Basic number types ','line_number':280,'multiline':True]
['text':' Basic sequence types ','line_number':285,'multiline':True]
['text':' other builtins ','line_number':290,'multiline':True]
['text':' sentinel to swallow trailing || ','line_number':295,'multiline':True]
['text':' namespace torch','line_number':314,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':317,'multiline':False]
['text':' NOLINT(cppcoreguidelines-init-variables)','line_number':338,'multiline':False]
['text':' Fast path:','line_number':340,'multiline':False]
['text':'   If we know that we have a tuple or list, we can skip an INCREF and','line_number':341,'multiline':False]
['text':'   DECREF from PySequence_Fast. Core functions will always follow this','line_number':342,'multiline':False]
['text':'   convention (almost always tuples), and it shaves ~3.5% off the cost of','line_number':343,'multiline':False]
['text':'   the check.','line_number':344,'multiline':False]
['text':' Special case `THPModule_has_torch_function` for the single arg case.','line_number':362,'multiline':False]
