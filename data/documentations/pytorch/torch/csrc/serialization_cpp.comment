['text':' Try to use fildes.readinto() instead of fildes.read()','line_number':38,'multiline':False]
['text':' because it is more memory efficient.','line_number':39,'multiline':False]
['text':' TODO: Stop calling PyObject_HasAttrString() in a loop on our read loop','line_number':40,'multiline':False]
['text':' Call Python fildes.read(nbytes) and copy it to buf.','line_number':71,'multiline':False]
['text':' If we request a large amount of data, f.read() will internally try to','line_number':76,'multiline':False]
['text':' allocate a buffer of that size.  This is counterproductive, because','line_number':77,'multiline':False]
['text':' it's not the buffer we ultimately want to write the data into.  Read','line_number':78,'multiline':False]
['text':' less than that and avoid allocating too much extra memory.','line_number':79,'multiline':False]
['text':' TODO: Maybe 260 KB is a bit small...','line_number':80,'multiline':False]
['text':' 2^18 (~260 KB)','line_number':81,'multiline':False]
['text':' we read EOF','line_number':90,'multiline':False]
['text':' Slurp it into the buffer we actually want','line_number':95,'multiline':False]
['text':' Either does fildes.readinto(buf) or fildes.write(buf)','line_number':101,'multiline':False]
['text':' fildes.readinto can return UnsupportedOperation so fall back to','line_number':123,'multiline':False]
['text':' fildes.read.','line_number':124,'multiline':False]
['text':' Call Python fildes.readinto(buf)','line_number':132,'multiline':False]
['text':' is_read ','line_number':137,'multiline':True]
['text':' Call Python fildes.write(buf)','line_number':140,'multiline':False]
['text':' is_read ','line_number':145,'multiline':True]
['text':' Requires that we read EXACTLY nbytes; fails if we don't.','line_number':148,'multiline':False]
['text':' doPartialRead may not set errno','line_number':153,'multiline':False]
['text':' we read in 1GB blocks to avoid bugs on Mac OS X Lion','line_number':154,'multiline':False]
['text':' see https://github.com/pytorch/pytorch/issues/1031 for more details','line_number':155,'multiline':False]
['text':' This is guaranteed by POSIX, but I just want to be double-sure','line_number':176,'multiline':False]
['text':' to not underflow a signed integer.','line_number':177,'multiline':False]
['text':' doPartialWrite may not set errno','line_number':193,'multiline':False]
['text':' we write in 1GB blocks to avoid bugs on Mac OS X Lion','line_number':194,'multiline':False]
['text':' see https://github.com/pytorch/pytorch/issues/1031 for more details','line_number':195,'multiline':False]
['text':' save_save is necessary since the old eager format saved storages as','line_number':219,'multiline':False]
['text':' [size + data], but the v1.5 eager format removes this since size is saved in','line_number':220,'multiline':False]
['text':' the filesize.','line_number':221,'multiline':False]
['text':' We are using a mutable pointer here because we're ultimately','line_number':234,'multiline':False]
['text':' calling into a Python API that requires that, even though it','line_number':235,'multiline':False]
['text':' won't mutate the data.','line_number':236,'multiline':False]
['text':' Here we use a tensor.to() to impl D2H for all non-CPU device.','line_number':239,'multiline':False]
['text':' convert big endian cpu to little endian storage','line_number':255,'multiline':False]
['text':' fast track for bytes and little endian','line_number':264,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':271,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':276,'multiline':False]
['text':' convert little endian storage to big endian cpu','line_number':325,'multiline':False]
['text':'resizable=','line_number':334,'multiline':True]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':344,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':351,'multiline':False]
['text':' fast track for bytes and little endian','line_number':356,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':363,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':371,'multiline':False]
['text':' Here we use a tensor.copy_() to impl H2D for all non-CPU device.','line_number':386,'multiline':False]
