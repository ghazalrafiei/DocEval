['text':' NOLINTNEXTLINE(bugprone-exception-escape)','line_number':10,'multiline':False]
['text':' Precondition: obj is an interned python string.','line_number':18,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-exception-escape)','line_number':27,'multiline':False]
['text':' If python is already dead, leak the wrapped python objects','line_number':29,'multiline':False]
['text':' See Note [References to python interned strings]','line_number':35,'multiline':False]
['text':' Note [References to python interned strings]','line_number':50,'multiline':False]
['text':' If a Python interned string has no references to it, then it gets','line_number':51,'multiline':False]
['text':' deallocated, invalidating this mapping. Let's immortalize the string by','line_number':52,'multiline':False]
['text':' holding a refcount to it and releasing it in the destructor','line_number':53,'multiline':False]
['text':' namespace torch','line_number':58,'multiline':False]
['text':' To avoid ambiguity with IntArrayRef, we parse obj as a DimnameList if','line_number':64,'multiline':False]
['text':' it is a list or tuple and its first elt is a Dimname','line_number':65,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':71,'multiline':False]
['text':' internStringInPlace decrefs obj and increfs the result. Because we're','line_number':93,'multiline':False]
['text':' not actually returning the result to the user, we need to undo these.','line_number':94,'multiline':False]
['text':' See','line_number':95,'multiline':False]
['text':' https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_InternInPlace','line_number':96,'multiline':False]
