['text':'/ Options for the `LayerNorm` module.','line_number':11,'multiline':False]
['text':'/','line_number':12,'multiline':False]
['text':'/ Example:','line_number':13,'multiline':False]
['text':'/ ```','line_number':14,'multiline':False]
['text':'/ LayerNorm model(LayerNormOptions({2,','line_number':15,'multiline':False]
['text':'/ 2}).elementwise_affine(false).eps(2e-5));','line_number':16,'multiline':False]
['text':'/ ```','line_number':17,'multiline':False]
['text':' implicit ','line_number':19,'multiline':True]
['text':'/ input shape from an expected input.','line_number':20,'multiline':False]
['text':'/ a value added to the denominator for numerical stability. ``Default:','line_number':22,'multiline':False]
['text':'/ 1e-5``.','line_number':23,'multiline':False]
['text':'/ a boolean value that when set to ``true``, this module','line_number':25,'multiline':False]
['text':'/ has learnable per-element affine parameters initialized to ones (for','line_number':26,'multiline':False]
['text':'/ weights) and zeros (for biases). ``Default: true``.','line_number':27,'multiline':False]
['text':' ============================================================================','line_number':31,'multiline':False]
['text':'/ Options for `torch::nn::functional::layer_norm`.','line_number':35,'multiline':False]
['text':'/','line_number':36,'multiline':False]
['text':'/ Example:','line_number':37,'multiline':False]
['text':'/ ```','line_number':38,'multiline':False]
['text':'/ namespace F = torch::nn::functional;','line_number':39,'multiline':False]
['text':'/ F::layer_norm(input, F::LayerNormFuncOptions({2, 2}).eps(2e-5));','line_number':40,'multiline':False]
['text':'/ ```','line_number':41,'multiline':False]
['text':' implicit ','line_number':43,'multiline':True]
['text':'/ input shape from an expected input.','line_number':44,'multiline':False]
['text':'/ a value added to the denominator for numerical stability. ``Default:','line_number':51,'multiline':False]
['text':'/ 1e-5``.','line_number':52,'multiline':False]
['text':' namespace functional','line_number':56,'multiline':False]
['text':' ============================================================================','line_number':58,'multiline':False]
['text':'/ Options for the `LocalResponseNorm` module.','line_number':60,'multiline':False]
['text':'/','line_number':61,'multiline':False]
['text':'/ Example:','line_number':62,'multiline':False]
['text':'/ ```','line_number':63,'multiline':False]
['text':'/ LocalResponseNorm','line_number':64,'multiline':False]
['text':'/ model(LocalResponseNormOptions(2).alpha(0.0002).beta(0.85).k(2.));','line_number':65,'multiline':False]
['text':'/ ```','line_number':66,'multiline':False]
['text':' implicit ','line_number':68,'multiline':True]
['text':'/ amount of neighbouring channels used for normalization','line_number':69,'multiline':False]
['text':'/ multiplicative factor. Default: 1e-4','line_number':72,'multiline':False]
['text':'/ exponent. Default: 0.75','line_number':75,'multiline':False]
['text':'/ additive factor. Default: 1','line_number':78,'multiline':False]
['text':'/ Options for `torch::nn::functional::local_response_norm`.','line_number':83,'multiline':False]
['text':'/','line_number':84,'multiline':False]
['text':'/ See the documentation for `torch::nn::LocalResponseNormOptions` class to','line_number':85,'multiline':False]
['text':'/ learn what arguments are supported.','line_number':86,'multiline':False]
['text':'/','line_number':87,'multiline':False]
['text':'/ Example:','line_number':88,'multiline':False]
['text':'/ ```','line_number':89,'multiline':False]
['text':'/ namespace F = torch::nn::functional;','line_number':90,'multiline':False]
['text':'/ F::local_response_norm(x, F::LocalResponseNormFuncOptions(2));','line_number':91,'multiline':False]
['text':'/ ```','line_number':92,'multiline':False]
['text':' namespace functional','line_number':94,'multiline':False]
['text':' ============================================================================','line_number':96,'multiline':False]
['text':'/ Options for the `CrossMapLRN2d` module.','line_number':98,'multiline':False]
['text':'/','line_number':99,'multiline':False]
['text':'/ Example:','line_number':100,'multiline':False]
['text':'/ ```','line_number':101,'multiline':False]
['text':'/ CrossMapLRN2d model(CrossMapLRN2dOptions(3).alpha(1e-5).beta(0.1).k(10));','line_number':102,'multiline':False]
['text':'/ ```','line_number':103,'multiline':False]
['text':' ============================================================================','line_number':116,'multiline':False]
['text':'/ Options for `torch::nn::functional::normalize`.','line_number':120,'multiline':False]
['text':'/','line_number':121,'multiline':False]
['text':'/ Example:','line_number':122,'multiline':False]
['text':'/ ```','line_number':123,'multiline':False]
['text':'/ namespace F = torch::nn::functional;','line_number':124,'multiline':False]
['text':'/ F::normalize(input, F::NormalizeFuncOptions().p(1).dim(-1));','line_number':125,'multiline':False]
['text':'/ ```','line_number':126,'multiline':False]
['text':'/ The exponent value in the norm formulation. Default: 2.0','line_number':128,'multiline':False]
['text':'/ The dimension to reduce. Default: 1','line_number':130,'multiline':False]
['text':'/ Small value to avoid division by zero. Default: 1e-12','line_number':132,'multiline':False]
['text':'/ the output tensor. If `out` is used, this','line_number':134,'multiline':False]
['text':'/ operation won't be differentiable.','line_number':135,'multiline':False]
['text':' namespace functional','line_number':139,'multiline':False]
['text':' ============================================================================','line_number':141,'multiline':False]
['text':'/ Options for the `GroupNorm` module.','line_number':143,'multiline':False]
['text':'/','line_number':144,'multiline':False]
['text':'/ Example:','line_number':145,'multiline':False]
['text':'/ ```','line_number':146,'multiline':False]
['text':'/ GroupNorm model(GroupNormOptions(2, 2).eps(2e-5).affine(false));','line_number':147,'multiline':False]
['text':'/ ```','line_number':148,'multiline':False]
['text':' implicit ','line_number':150,'multiline':True]
['text':'/ number of groups to separate the channels into','line_number':152,'multiline':False]
['text':'/ number of channels expected in input','line_number':154,'multiline':False]
['text':'/ a value added to the denominator for numerical stability. Default: 1e-5','line_number':156,'multiline':False]
['text':'/ a boolean value that when set to ``true``, this module','line_number':158,'multiline':False]
['text':'/ has learnable per-channel affine parameters initialized to ones (for','line_number':159,'multiline':False]
['text':'/ weights) and zeros (for biases). Default: ``true``.','line_number':160,'multiline':False]
['text':' ============================================================================','line_number':164,'multiline':False]
['text':'/ Options for `torch::nn::functional::group_norm`.','line_number':168,'multiline':False]
['text':'/','line_number':169,'multiline':False]
['text':'/ Example:','line_number':170,'multiline':False]
['text':'/ ```','line_number':171,'multiline':False]
['text':'/ namespace F = torch::nn::functional;','line_number':172,'multiline':False]
['text':'/ F::group_norm(input, F::GroupNormFuncOptions(2).eps(2e-5));','line_number':173,'multiline':False]
['text':'/ ```','line_number':174,'multiline':False]
['text':' implicit ','line_number':176,'multiline':True]
['text':'/ number of groups to separate the channels into','line_number':178,'multiline':False]
['text':'/ a value added to the denominator for numerical stability. Default: 1e-5','line_number':185,'multiline':False]
['text':' namespace functional','line_number':189,'multiline':False]
['text':' namespace nn','line_number':191,'multiline':False]
['text':' namespace torch','line_number':192,'multiline':False]
