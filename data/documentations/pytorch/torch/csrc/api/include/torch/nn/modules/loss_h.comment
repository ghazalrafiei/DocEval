['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ L1Loss ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':18,'multiline':False]
['text':'/ Creates a criterion that measures the mean absolute error (MAE) between each','line_number':20,'multiline':False]
['text':'/ element in the input : math :`x` and target : `y`.','line_number':21,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.L1Loss to learn','line_number':22,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':23,'multiline':False]
['text':'/','line_number':24,'multiline':False]
['text':'/ See the documentation for `torch::nn::L1LossOptions` class to learn what','line_number':25,'multiline':False]
['text':'/ constructor arguments are supported for this module.','line_number':26,'multiline':False]
['text':'/','line_number':27,'multiline':False]
['text':'/ Example:','line_number':28,'multiline':False]
['text':'/ ```','line_number':29,'multiline':False]
['text':'/ L1Loss model(L1LossOptions(torch::kNone));','line_number':30,'multiline':False]
['text':'/ ```','line_number':31,'multiline':False]
['text':'/ Pretty prints the `L1Loss` module into the given `stream`.','line_number':37,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':42,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `L1LossImpl`.','line_number':46,'multiline':False]
['text':'/ See the documentation for `L1LossImpl` class to learn what methods it','line_number':47,'multiline':False]
['text':'/ provides, and examples of how to use `L1Loss` with','line_number':48,'multiline':False]
['text':'/ `torch::nn::L1LossOptions`. See the documentation for `ModuleHolder` to','line_number':49,'multiline':False]
['text':'/ learn about PyTorch's module storage semantics.','line_number':50,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ KLDivLoss','line_number':53,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':54,'multiline':False]
['text':'/ The Kullback-Leibler divergence loss measure','line_number':56,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.KLDivLoss to learn','line_number':57,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':58,'multiline':False]
['text':'/','line_number':59,'multiline':False]
['text':'/ See the documentation for `torch::nn::KLDivLossOptions` class to learn what','line_number':60,'multiline':False]
['text':'/ constructor arguments are supported for this module.','line_number':61,'multiline':False]
['text':'/','line_number':62,'multiline':False]
['text':'/ Example:','line_number':63,'multiline':False]
['text':'/ ```','line_number':64,'multiline':False]
['text':'/ KLDivLoss model(KLDivLossOptions().reduction(torch::kNone));','line_number':65,'multiline':False]
['text':'/ ```','line_number':66,'multiline':False]
['text':'/ Pretty prints the `KLDivLoss` module into the given `stream`.','line_number':72,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':77,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `KLDivLossImpl`.','line_number':81,'multiline':False]
['text':'/ See the documentation for `KLDivLossImpl` class to learn what methods it','line_number':82,'multiline':False]
['text':'/ provides, and examples of how to use `KLDivLoss` with','line_number':83,'multiline':False]
['text':'/ `torch::nn::KLDivLossOptions`. See the documentation for `ModuleHolder` to','line_number':84,'multiline':False]
['text':'/ learn about PyTorch's module storage semantics.','line_number':85,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MSELoss ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':88,'multiline':False]
['text':'/ Creates a criterion that measures the mean squared error (squared L2 norm)','line_number':90,'multiline':False]
['text':'/ between each element in the input :math:`x` and target :math:`y`.','line_number':91,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.MSELoss to learn','line_number':92,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':93,'multiline':False]
['text':'/','line_number':94,'multiline':False]
['text':'/ See the documentation for `torch::nn::MSELossOptions` class to learn what','line_number':95,'multiline':False]
['text':'/ constructor arguments are supported for this module.','line_number':96,'multiline':False]
['text':'/','line_number':97,'multiline':False]
['text':'/ Example:','line_number':98,'multiline':False]
['text':'/ ```','line_number':99,'multiline':False]
['text':'/ MSELoss model(MSELossOptions(torch::kNone));','line_number':100,'multiline':False]
['text':'/ ```','line_number':101,'multiline':False]
['text':'/ Pretty prints the `MSELoss` module into the given `stream`.','line_number':107,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':112,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `MSELossImpl`.','line_number':116,'multiline':False]
['text':'/ See the documentation for `MSELossImpl` class to learn what methods it','line_number':117,'multiline':False]
['text':'/ provides, and examples of how to use `MSELoss` with','line_number':118,'multiline':False]
['text':'/ `torch::nn::MSELossOptions`. See the documentation for `ModuleHolder` to','line_number':119,'multiline':False]
['text':'/ learn about PyTorch's module storage semantics.','line_number':120,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BCELoss ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':123,'multiline':False]
['text':'/ Creates a criterion that measures the Binary Cross Entropy','line_number':125,'multiline':False]
['text':'/ between the target and the output.','line_number':126,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.BCELoss to learn','line_number':127,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':128,'multiline':False]
['text':'/','line_number':129,'multiline':False]
['text':'/ See the documentation for `torch::nn::BCELossOptions` class to learn what','line_number':130,'multiline':False]
['text':'/ constructor arguments are supported for this module.','line_number':131,'multiline':False]
['text':'/','line_number':132,'multiline':False]
['text':'/ Example:','line_number':133,'multiline':False]
['text':'/ ```','line_number':134,'multiline':False]
['text':'/ BCELoss model(BCELossOptions().reduction(torch::kNone).weight(weight));','line_number':135,'multiline':False]
['text':'/ ```','line_number':136,'multiline':False]
['text':'/ Pretty prints the `BCELoss` module into the given `stream`.','line_number':142,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':147,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `BCELossImpl`.','line_number':151,'multiline':False]
['text':'/ See the documentation for `BCELossImpl` class to learn what methods it','line_number':152,'multiline':False]
['text':'/ provides, and examples of how to use `BCELoss` with','line_number':153,'multiline':False]
['text':'/ `torch::nn::BCELossOptions`. See the documentation for `ModuleHolder` to','line_number':154,'multiline':False]
['text':'/ learn about PyTorch's module storage semantics.','line_number':155,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HingeEmbeddingLoss','line_number':158,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':159,'multiline':False]
['text':'/ Creates a criterion that measures the loss given an input tensor :math:`x`','line_number':161,'multiline':False]
['text':'/ and a labels tensor :math:`y` (containing 1 or -1).','line_number':162,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.HingeEmbeddingLoss to','line_number':163,'multiline':False]
['text':'/ learn about the exact behavior of this module.','line_number':164,'multiline':False]
['text':'/','line_number':165,'multiline':False]
['text':'/ See the documentation for `torch::nn::HingeEmbeddingLossOptions` class to','line_number':166,'multiline':False]
['text':'/ learn what constructor arguments are supported for this module.','line_number':167,'multiline':False]
['text':'/','line_number':168,'multiline':False]
['text':'/ Example:','line_number':169,'multiline':False]
['text':'/ ```','line_number':170,'multiline':False]
['text':'/ HingeEmbeddingLoss','line_number':171,'multiline':False]
['text':'/ model(HingeEmbeddingLossOptions().margin(4).reduction(torch::kNone));','line_number':172,'multiline':False]
['text':'/ ```','line_number':173,'multiline':False]
['text':'/ Pretty prints the `HingeEmbeddingLoss` module into the given `stream`.','line_number':179,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':184,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `HingeEmbeddingLossImpl`.','line_number':188,'multiline':False]
['text':'/ See the documentation for `HingeEmbeddingLossImpl` class to learn what','line_number':189,'multiline':False]
['text':'/ methods it provides, and examples of how to use `HingeEmbeddingLoss` with','line_number':190,'multiline':False]
['text':'/ `torch::nn::HingeEmbeddingLossOptions`. See the documentation for','line_number':191,'multiline':False]
['text':'/ `ModuleHolder` to learn about PyTorch's module storage semantics.','line_number':192,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MultiMarginLoss','line_number':195,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':196,'multiline':False]
['text':'/ Creates a criterion that optimizes a multi-class classification hinge','line_number':198,'multiline':False]
['text':'/ loss (margin-based loss) between input :math:`x` (a 2D mini-batch `Tensor`)','line_number':199,'multiline':False]
['text':'/ and output :math:`y` (which is a 1D tensor of target class indices, :math:`0','line_number':200,'multiline':False]
['text':'/ \leq y \leq \text{x.size}(1)-1`). See','line_number':201,'multiline':False]
['text':'/ https://pytorch.org/docs/master/nn.html#torch.nn.MultiMarginLoss to learn','line_number':202,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':203,'multiline':False]
['text':'/','line_number':204,'multiline':False]
['text':'/ See the documentation for `torch::nn::MultiMarginLossOptions` class to learn','line_number':205,'multiline':False]
['text':'/ what constructor arguments are supported for this module.','line_number':206,'multiline':False]
['text':'/','line_number':207,'multiline':False]
['text':'/ Example:','line_number':208,'multiline':False]
['text':'/ ```','line_number':209,'multiline':False]
['text':'/ MultiMarginLoss model(MultiMarginLossOptions().margin(2).weight(weight));','line_number':210,'multiline':False]
['text':'/ ```','line_number':211,'multiline':False]
['text':'/ Pretty prints the `MultiMarginLoss` module into the given `stream`.','line_number':217,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':222,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `MultiMarginLossImpl`.','line_number':226,'multiline':False]
['text':'/ See the documentation for `MultiMarginLossImpl` class to learn what methods','line_number':227,'multiline':False]
['text':'/ it provides, and examples of how to use `MultiMarginLoss` with','line_number':228,'multiline':False]
['text':'/ `torch::nn::MultiMarginLossOptions`. See the documentation for','line_number':229,'multiline':False]
['text':'/ `ModuleHolder` to learn about PyTorch's module storage semantics.','line_number':230,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CosineEmbeddingLoss','line_number':233,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':234,'multiline':False]
['text':'/ Creates a criterion that measures the loss given input tensors','line_number':236,'multiline':False]
['text':'/ `input1`, `input2`, and a `Tensor` label `target` with values 1 or','line_number':237,'multiline':False]
['text':'/ -1. This is used for measuring whether two inputs are similar or','line_number':238,'multiline':False]
['text':'/ dissimilar, using the cosine distance, and is typically used for learning','line_number':239,'multiline':False]
['text':'/ nonlinear embeddings or semi-supervised learning.','line_number':240,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.CosineEmbeddingLoss to','line_number':241,'multiline':False]
['text':'/ learn about the exact behavior of this module.','line_number':242,'multiline':False]
['text':'/','line_number':243,'multiline':False]
['text':'/ See the documentation for `torch::nn::CosineEmbeddingLossOptions` class to','line_number':244,'multiline':False]
['text':'/ learn what constructor arguments are supported for this module.','line_number':245,'multiline':False]
['text':'/','line_number':246,'multiline':False]
['text':'/ Example:','line_number':247,'multiline':False]
['text':'/ ```','line_number':248,'multiline':False]
['text':'/ CosineEmbeddingLoss model(CosineEmbeddingLossOptions().margin(0.5));','line_number':249,'multiline':False]
['text':'/ ```','line_number':250,'multiline':False]
['text':'/ Pretty prints the `CosineEmbeddingLoss` module into the given `stream`.','line_number':257,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':265,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `CosineEmbeddingLossImpl`.','line_number':269,'multiline':False]
['text':'/ See the documentation for `CosineEmbeddingLossImpl` class to learn what','line_number':270,'multiline':False]
['text':'/ methods it provides, and examples of how to use `CosineEmbeddingLoss` with','line_number':271,'multiline':False]
['text':'/ `torch::nn::CosineEmbeddingLossOptions`. See the documentation for','line_number':272,'multiline':False]
['text':'/ `ModuleHolder` to learn about PyTorch's module storage semantics.','line_number':273,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SmoothL1Loss','line_number':276,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':277,'multiline':False]
['text':'/ Creates a criterion that uses a squared term if the absolute','line_number':279,'multiline':False]
['text':'/ element-wise error falls below beta and an L1 term otherwise.','line_number':280,'multiline':False]
['text':'/ It is less sensitive to outliers than the `MSELoss` and in some cases','line_number':281,'multiline':False]
['text':'/ prevents exploding gradients (e.g. see the paper `Fast R-CNN` by Ross','line_number':282,'multiline':False]
['text':'/ Girshick). See https://pytorch.org/docs/master/nn.html#torch.nn.SmoothL1Loss','line_number':283,'multiline':False]
['text':'/ to learn about the exact behavior of this module.','line_number':284,'multiline':False]
['text':'/','line_number':285,'multiline':False]
['text':'/ See the documentation for `torch::nn::SmoothL1LossOptions` class to learn','line_number':286,'multiline':False]
['text':'/ what constructor arguments are supported for this module.','line_number':287,'multiline':False]
['text':'/','line_number':288,'multiline':False]
['text':'/ Example:','line_number':289,'multiline':False]
['text':'/ ```','line_number':290,'multiline':False]
['text':'/ SmoothL1Loss model(SmoothL1LossOptions().reduction(torch::kNone).beta(0.5));','line_number':291,'multiline':False]
['text':'/ ```','line_number':292,'multiline':False]
['text':'/ Pretty prints the `L1Loss` module into the given `stream`.','line_number':298,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':303,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `SmoothL1LossImpl`.','line_number':307,'multiline':False]
['text':'/ See the documentation for `SmoothL1LossImpl` class to learn what methods it','line_number':308,'multiline':False]
['text':'/ provides, and examples of how to use `SmoothL1Loss` with','line_number':309,'multiline':False]
['text':'/ `torch::nn::SmoothL1LossOptions`. See the documentation for `ModuleHolder`','line_number':310,'multiline':False]
['text':'/ to learn about PyTorch's module storage semantics.','line_number':311,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HuberLoss','line_number':314,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':315,'multiline':False]
['text':'/ Creates a criterion that uses a squared term if the absolute','line_number':317,'multiline':False]
['text':'/ element-wise error falls below delta and a delta-scaled L1 term otherwise.','line_number':318,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.HuberLoss to learn','line_number':319,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':320,'multiline':False]
['text':'/','line_number':321,'multiline':False]
['text':'/ See the documentation for `torch::nn::HuberLossOptions` class to learn what','line_number':322,'multiline':False]
['text':'/ constructor arguments are supported for this module.','line_number':323,'multiline':False]
['text':'/','line_number':324,'multiline':False]
['text':'/ Example:','line_number':325,'multiline':False]
['text':'/ ```','line_number':326,'multiline':False]
['text':'/ HuberLoss model(HuberLossOptions().reduction(torch::kNone).delta(0.5));','line_number':327,'multiline':False]
['text':'/ ```','line_number':328,'multiline':False]
['text':'/ Pretty prints the `HuberLoss` module into the given `stream`.','line_number':334,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':339,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `HuberLossImpl`.','line_number':343,'multiline':False]
['text':'/ See the documentation for `HuberLossImpl` class to learn what methods it','line_number':344,'multiline':False]
['text':'/ provides, and examples of how to use `HuberLoss` with','line_number':345,'multiline':False]
['text':'/ `torch::nn::HuberLossOptions`. See the documentation for `ModuleHolder` to','line_number':346,'multiline':False]
['text':'/ learn about PyTorch's module storage semantics.','line_number':347,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MultiLabelMarginLoss','line_number':350,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':351,'multiline':False]
['text':'/ Creates a criterion that optimizes a multi-class multi-classification','line_number':353,'multiline':False]
['text':'/ hinge loss (margin-based loss) between input :math:`x` (a 2D mini-batch','line_number':354,'multiline':False]
['text':'/ `Tensor`) and output :math:`y` (which is a 2D `Tensor` of target class','line_number':355,'multiline':False]
['text':'/ indices). See','line_number':356,'multiline':False]
['text':'/ https://pytorch.org/docs/master/nn.html#torch.nn.MultiLabelMarginLoss to','line_number':357,'multiline':False]
['text':'/ learn about the exact behavior of this module.','line_number':358,'multiline':False]
['text':'/','line_number':359,'multiline':False]
['text':'/ See the documentation for `torch::nn::MultiLabelMarginLossOptions` class to','line_number':360,'multiline':False]
['text':'/ learn what constructor arguments are supported for this module.','line_number':361,'multiline':False]
['text':'/','line_number':362,'multiline':False]
['text':'/ Example:','line_number':363,'multiline':False]
['text':'/ ```','line_number':364,'multiline':False]
['text':'/ MultiLabelMarginLoss model(MultiLabelMarginLossOptions(torch::kNone));','line_number':365,'multiline':False]
['text':'/ ```','line_number':366,'multiline':False]
['text':'/ Pretty prints the `L1Loss` module into the given `stream`.','line_number':373,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':378,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `MultiLabelMarginLossImpl`.','line_number':382,'multiline':False]
['text':'/ See the documentation for `MultiLabelMarginLossImpl` class to learn what','line_number':383,'multiline':False]
['text':'/ methods it provides, and examples of how to use `MultiLabelMarginLoss` with','line_number':384,'multiline':False]
['text':'/ `torch::nn::MultiLabelMarginLossOptions`. See the documentation for','line_number':385,'multiline':False]
['text':'/ `ModuleHolder` to learn about PyTorch's module storage semantics.','line_number':386,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SoftMarginLoss','line_number':389,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':390,'multiline':False]
['text':'/ Creates a criterion that optimizes a two-class classification','line_number':392,'multiline':False]
['text':'/ logistic loss between input tensor :math:`x` and target tensor :math:`y`','line_number':393,'multiline':False]
['text':'/ (containing 1 or -1).','line_number':394,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.SoftMarginLoss to learn','line_number':395,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':396,'multiline':False]
['text':'/','line_number':397,'multiline':False]
['text':'/ See the documentation for `torch::nn::SoftMarginLossOptions` class to learn','line_number':398,'multiline':False]
['text':'/ what constructor arguments are supported for this module.','line_number':399,'multiline':False]
['text':'/','line_number':400,'multiline':False]
['text':'/ Example:','line_number':401,'multiline':False]
['text':'/ ```','line_number':402,'multiline':False]
['text':'/ SoftMarginLoss model(SoftMarginLossOptions(torch::kNone));','line_number':403,'multiline':False]
['text':'/ ```','line_number':404,'multiline':False]
['text':'/ Pretty prints the `SoftMarginLoss` module into the given `stream`.','line_number':408,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':415,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `SoftMarginLossImpl`.','line_number':419,'multiline':False]
['text':'/ See the documentation for `SoftMarginLossImpl` class to learn what methods','line_number':420,'multiline':False]
['text':'/ it provides, and examples of how to use `SoftMarginLoss` with','line_number':421,'multiline':False]
['text':'/ `torch::nn::SoftMarginLossOptions`. See the documentation for `ModuleHolder`','line_number':422,'multiline':False]
['text':'/ to learn about PyTorch's module storage semantics.','line_number':423,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MultiLabelSoftMarginLoss','line_number':426,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':427,'multiline':False]
['text':'/ Creates a criterion that optimizes a multi-label one-versus-all','line_number':429,'multiline':False]
['text':'/ loss based on max-entropy, between input :math:`x` and target :math:`y` of','line_number':430,'multiline':False]
['text':'/ size :math:`(N, C)`. See','line_number':431,'multiline':False]
['text':'/ https://pytorch.org/docs/master/nn.html#torch.nn.MultiLabelSoftMarginLoss to','line_number':432,'multiline':False]
['text':'/ learn about the exact behavior of this module.','line_number':433,'multiline':False]
['text':'/','line_number':434,'multiline':False]
['text':'/ See the documentation for `torch::nn::MultiLabelSoftMarginLossOptions` class','line_number':435,'multiline':False]
['text':'/ to learn what constructor arguments are supported for this module.','line_number':436,'multiline':False]
['text':'/','line_number':437,'multiline':False]
['text':'/ Example:','line_number':438,'multiline':False]
['text':'/ ```','line_number':439,'multiline':False]
['text':'/ MultiLabelSoftMarginLoss','line_number':440,'multiline':False]
['text':'/ model(MultiLabelSoftMarginLossOptions().reduction(torch::kNone).weight(weight));','line_number':441,'multiline':False]
['text':'/ ```','line_number':442,'multiline':False]
['text':'/ Pretty prints the `MultiLabelSoftMarginLoss` module into the given','line_number':448,'multiline':False]
['text':'/ `stream`.','line_number':449,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':456,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `MultiLabelSoftMarginLossImpl`.','line_number':460,'multiline':False]
['text':'/ See the documentation for `MultiLabelSoftMarginLossImpl` class to learn what','line_number':461,'multiline':False]
['text':'/ methods it provides, and examples of how to use `MultiLabelSoftMarginLoss`','line_number':462,'multiline':False]
['text':'/ with `torch::nn::MultiLabelSoftMarginLossOptions`. See the documentation for','line_number':463,'multiline':False]
['text':'/ `ModuleHolder` to learn about PyTorch's module storage semantics.','line_number':464,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TripletMarginLoss','line_number':467,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':468,'multiline':False]
['text':'/ Creates a criterion that measures the triplet loss given an input','line_number':470,'multiline':False]
['text':'/ tensors :math:`x1`, :math:`x2`, :math:`x3` and a margin with a value greater','line_number':471,'multiline':False]
['text':'/ than :math:`0`. This is used for measuring a relative similarity between','line_number':472,'multiline':False]
['text':'/ samples. A triplet is composed by `a`, `p` and `n` (i.e., `anchor`,','line_number':473,'multiline':False]
['text':'/ `positive examples` and `negative examples` respectively). The','line_number':474,'multiline':False]
['text':'/ shapes of all input tensors should be :math:`(N, D)`.','line_number':475,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.TripletMarginLoss to','line_number':476,'multiline':False]
['text':'/ learn about the exact behavior of this module.','line_number':477,'multiline':False]
['text':'/','line_number':478,'multiline':False]
['text':'/ See the documentation for `torch::nn::TripletMarginLossOptions` class to','line_number':479,'multiline':False]
['text':'/ learn what constructor arguments are supported for this module.','line_number':480,'multiline':False]
['text':'/','line_number':481,'multiline':False]
['text':'/ Example:','line_number':482,'multiline':False]
['text':'/ ```','line_number':483,'multiline':False]
['text':'/ TripletMarginLoss','line_number':484,'multiline':False]
['text':'/ model(TripletMarginLossOptions().margin(3).p(2).eps(1e-06).swap(false));','line_number':485,'multiline':False]
['text':'/ ```','line_number':486,'multiline':False]
['text':'/ Pretty prints the `TripletMarginLoss` module into the given `stream`.','line_number':493,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':501,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `TripletMarginLossImpl`.','line_number':505,'multiline':False]
['text':'/ See the documentation for `TripletMarginLossImpl` class to learn what','line_number':506,'multiline':False]
['text':'/ methods it provides, and examples of how to use `TripletMarginLoss` with','line_number':507,'multiline':False]
['text':'/ `torch::nn::TripletMarginLossOptions`. See the documentation for','line_number':508,'multiline':False]
['text':'/ `ModuleHolder` to learn about PyTorch's module storage semantics.','line_number':509,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TripletMarginWithDistanceLoss','line_number':512,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':513,'multiline':False]
['text':'/ Creates a criterion that measures the triplet loss given input','line_number':515,'multiline':False]
['text':'/ tensors :math:`a`, :math:`p`, and :math:`n` (representing anchor,','line_number':516,'multiline':False]
['text':'/ positive, and negative examples, respectively); and a nonnegative,','line_number':517,'multiline':False]
['text':'/ real-valued function','line_number':518,'multiline':False]
['text':'/ ("distance function") used to compute the relationships between the anchor','line_number':519,'multiline':False]
['text':'/ and positive example ("positive distance") and the anchor and negative','line_number':520,'multiline':False]
['text':'/ example ("negative distance").','line_number':521,'multiline':False]
['text':'/ See','line_number':522,'multiline':False]
['text':'/ https://pytorch.org/docs/master/nn.html#torch.nn.TripletMarginWithDistanceLoss','line_number':523,'multiline':False]
['text':'/ to learn about the exact behavior of this module.','line_number':524,'multiline':False]
['text':'/','line_number':525,'multiline':False]
['text':'/ See the documentation for `torch::nn::TripletMarginWithDistanceLossOptions`','line_number':526,'multiline':False]
['text':'/ class to learn what constructor arguments are supported for this module.','line_number':527,'multiline':False]
['text':'/','line_number':528,'multiline':False]
['text':'/ Example:','line_number':529,'multiline':False]
['text':'/ ```','line_number':530,'multiline':False]
['text':'/ TripletMarginWithDistanceLoss','line_number':531,'multiline':False]
['text':'/ model(TripletMarginWithDistanceLossOptions().margin(3).swap(false));','line_number':532,'multiline':False]
['text':'/ ```','line_number':533,'multiline':False]
['text':'/ Pretty prints the `TripletMarginWithDistanceLoss` module into the given','line_number':541,'multiline':False]
['text':'/ `stream`.','line_number':542,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':550,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `TripletMarginWithDistanceLossImpl`.','line_number':554,'multiline':False]
['text':'/ See the documentation for `TripletMarginWithDistanceLossImpl` class to learn','line_number':555,'multiline':False]
['text':'/ what methods it provides, and examples of how to use','line_number':556,'multiline':False]
['text':'/ `TripletMarginWithDistanceLoss` with','line_number':557,'multiline':False]
['text':'/ `torch::nn::TripletMarginWithDistanceLossOptions`.','line_number':558,'multiline':False]
['text':'/ See the documentation for `ModuleHolder` to learn about PyTorch's','line_number':559,'multiline':False]
['text':'/ module storage semantics.','line_number':560,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CTCLoss ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':563,'multiline':False]
['text':'/ The Connectionist Temporal Classification loss.','line_number':565,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.CTCLoss to learn','line_number':566,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':567,'multiline':False]
['text':'/','line_number':568,'multiline':False]
['text':'/ See the documentation for `torch::nn::CTCLossOptions` class to learn what','line_number':569,'multiline':False]
['text':'/ constructor arguments are supported for this module.','line_number':570,'multiline':False]
['text':'/','line_number':571,'multiline':False]
['text':'/ Example:','line_number':572,'multiline':False]
['text':'/ ```','line_number':573,'multiline':False]
['text':'/ CTCLoss','line_number':574,'multiline':False]
['text':'/ model(CTCLossOptions().blank(42).zero_infinity(false).reduction(torch::kSum));','line_number':575,'multiline':False]
['text':'/ ```','line_number':576,'multiline':False]
['text':'/ Pretty prints the `CTCLoss` module into the given `stream`.','line_number':582,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':591,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `CTCLossImpl`.','line_number':595,'multiline':False]
['text':'/ See the documentation for `CTCLossImpl` class to learn what methods it','line_number':596,'multiline':False]
['text':'/ provides, and examples of how to use `CTCLoss` with','line_number':597,'multiline':False]
['text':'/ `torch::nn::CTCLossOptions`. See the documentation for `ModuleHolder` to','line_number':598,'multiline':False]
['text':'/ learn about PyTorch's module storage semantics.','line_number':599,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PoissonNLLLoss','line_number':602,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':603,'multiline':False]
['text':'/ Negative log likelihood loss with Poisson distribution of target.','line_number':605,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.PoissonNLLLoss to learn','line_number':606,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':607,'multiline':False]
['text':'/','line_number':608,'multiline':False]
['text':'/ See the documentation for `torch::nn::PoissonNLLLossOptions` class to learn','line_number':609,'multiline':False]
['text':'/ what constructor arguments are supported for this module.','line_number':610,'multiline':False]
['text':'/','line_number':611,'multiline':False]
['text':'/ Example:','line_number':612,'multiline':False]
['text':'/ ```','line_number':613,'multiline':False]
['text':'/ PoissonNLLLoss','line_number':614,'multiline':False]
['text':'/ model(PoissonNLLLossOptions().log_input(false).full(true).eps(0.42).reduction(torch::kSum));','line_number':615,'multiline':False]
['text':'/ ```','line_number':616,'multiline':False]
['text':'/ Pretty prints the `PoissonNLLLoss` module into the given `stream`.','line_number':622,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':627,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `PoissonNLLLossImpl`.','line_number':631,'multiline':False]
['text':'/ See the documentation for `PoissonNLLLossImpl` class to learn what methods','line_number':632,'multiline':False]
['text':'/ it provides, and examples of how to use `PoissonNLLLoss` with','line_number':633,'multiline':False]
['text':'/ `torch::nn::PoissonNLLLossOptions`. See the documentation for `ModuleHolder`','line_number':634,'multiline':False]
['text':'/ to learn about PyTorch's module storage semantics.','line_number':635,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MarginRankingLoss','line_number':638,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':639,'multiline':False]
['text':'/ Creates a criterion that measures the loss given','line_number':641,'multiline':False]
['text':'/ inputs :math:`x1`, :math:`x2`, two 1D mini-batch `Tensors`,','line_number':642,'multiline':False]
['text':'/ and a label 1D mini-batch tensor :math:`y` (containing 1 or -1).','line_number':643,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.MarginRankingLoss to','line_number':644,'multiline':False]
['text':'/ learn about the exact behavior of this module.','line_number':645,'multiline':False]
['text':'/','line_number':646,'multiline':False]
['text':'/ See the documentation for `torch::nn::MarginRankingLossOptions` class to','line_number':647,'multiline':False]
['text':'/ learn what constructor arguments are supported for this module.','line_number':648,'multiline':False]
['text':'/','line_number':649,'multiline':False]
['text':'/ Example:','line_number':650,'multiline':False]
['text':'/ ```','line_number':651,'multiline':False]
['text':'/ MarginRankingLoss','line_number':652,'multiline':False]
['text':'/ model(MarginRankingLossOptions().margin(0.5).reduction(torch::kSum));','line_number':653,'multiline':False]
['text':'/ ```','line_number':654,'multiline':False]
['text':'/ Pretty prints the `MarginRankingLoss` module into the given `stream`.','line_number':661,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':669,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `MarginRankingLossImpl`.','line_number':673,'multiline':False]
['text':'/ See the documentation for `MarginRankingLossImpl` class to learn what','line_number':674,'multiline':False]
['text':'/ methods it provides, and examples of how to use `MarginRankingLoss` with','line_number':675,'multiline':False]
['text':'/ `torch::nn::MarginRankingLossOptions`. See the documentation for','line_number':676,'multiline':False]
['text':'/ `ModuleHolder` to learn about PyTorch's module storage semantics.','line_number':677,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ NLLLoss ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':680,'multiline':False]
['text':'/ The negative log likelihood loss. It is useful to train a classification','line_number':682,'multiline':False]
['text':'/ problem with `C` classes.','line_number':683,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.NLLLoss to learn','line_number':684,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':685,'multiline':False]
['text':'/','line_number':686,'multiline':False]
['text':'/ See the documentation for `torch::nn::NLLLossOptions` class to learn what','line_number':687,'multiline':False]
['text':'/ constructor arguments are supported for this module.','line_number':688,'multiline':False]
['text':'/','line_number':689,'multiline':False]
['text':'/ Example:','line_number':690,'multiline':False]
['text':'/ ```','line_number':691,'multiline':False]
['text':'/ NLLLoss model(NLLLossOptions().ignore_index(-100).reduction(torch::kMean));','line_number':692,'multiline':False]
['text':'/ ```','line_number':693,'multiline':False]
['text':'/ Pretty prints the `NLLLoss` module into the given `stream`.','line_number':697,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':704,'multiline':False]
['text':'/ A manual rescaling weight given to to each class.','line_number':707,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `NLLLossImpl`.','line_number':711,'multiline':False]
['text':'/ See the documentation for `NLLLossImpl` class to learn what methods it','line_number':712,'multiline':False]
['text':'/ provides, and examples of how to use `NLLLoss` with','line_number':713,'multiline':False]
['text':'/ `torch::nn::NLLLossOptions`. See the documentation for `ModuleHolder` to','line_number':714,'multiline':False]
['text':'/ learn about PyTorch's module storage semantics.','line_number':715,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CrossEntropyLoss','line_number':718,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':719,'multiline':False]
['text':'/ Creates a criterion that computes cross entropy loss between input and','line_number':721,'multiline':False]
['text':'/ target. See','line_number':722,'multiline':False]
['text':'/ https://pytorch.org/docs/master/nn.html#torch.nn.CrossEntropyLoss to learn','line_number':723,'multiline':False]
['text':'/ about the exact behavior of this module.','line_number':724,'multiline':False]
['text':'/','line_number':725,'multiline':False]
['text':'/ See the documentation for `torch::nn::CrossEntropyLossOptions` class to','line_number':726,'multiline':False]
['text':'/ learn what constructor arguments are supported for this module.','line_number':727,'multiline':False]
['text':'/','line_number':728,'multiline':False]
['text':'/ Example:','line_number':729,'multiline':False]
['text':'/ ```','line_number':730,'multiline':False]
['text':'/ CrossEntropyLoss','line_number':731,'multiline':False]
['text':'/ model(CrossEntropyLossOptions().ignore_index(-100).reduction(torch::kMean));','line_number':732,'multiline':False]
['text':'/ ```','line_number':733,'multiline':False]
['text':'/ Pretty prints the `CrossEntropyLoss` module into the given `stream`.','line_number':739,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':744,'multiline':False]
['text':'/ A manual rescaling weight given to to each class.','line_number':747,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `CrossEntropyLossImpl`.','line_number':751,'multiline':False]
['text':'/ See the documentation for `CrossEntropyLossImpl` class to learn what methods','line_number':752,'multiline':False]
['text':'/ it provides, and examples of how to use `CrossEntropyLoss` with','line_number':753,'multiline':False]
['text':'/ `torch::nn::CrossEntropyLossOptions`. See the documentation for','line_number':754,'multiline':False]
['text':'/ `ModuleHolder` to learn about PyTorch's module storage semantics.','line_number':755,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BCEWithLogitsLoss','line_number':758,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':759,'multiline':False]
['text':'/ This loss combines a `Sigmoid` layer and the `BCELoss` in one single','line_number':761,'multiline':False]
['text':'/ class. This version is more numerically stable than using a plain `Sigmoid`','line_number':762,'multiline':False]
['text':'/ followed by a `BCELoss` as, by combining the operations into one layer,','line_number':763,'multiline':False]
['text':'/ we take advantage of the log-sum-exp trick for numerical stability.','line_number':764,'multiline':False]
['text':'/ See https://pytorch.org/docs/master/nn.html#torch.nn.BCEWithLogitsLoss to','line_number':765,'multiline':False]
['text':'/ learn about the exact behavior of this module.','line_number':766,'multiline':False]
['text':'/','line_number':767,'multiline':False]
['text':'/ See the documentation for `torch::nn::BCEWithLogitsLossOptions` class to','line_number':768,'multiline':False]
['text':'/ learn what constructor arguments are supported for this module.','line_number':769,'multiline':False]
['text':'/','line_number':770,'multiline':False]
['text':'/ Example:','line_number':771,'multiline':False]
['text':'/ ```','line_number':772,'multiline':False]
['text':'/ BCEWithLogitsLoss','line_number':773,'multiline':False]
['text':'/ model(BCEWithLogitsLossOptions().reduction(torch::kNone).weight(weight));','line_number':774,'multiline':False]
['text':'/ ```','line_number':775,'multiline':False]
['text':'/ Pretty prints the `BCEWithLogitsLoss` module into the given `stream`.','line_number':782,'multiline':False]
['text':'/ The options with which this `Module` was constructed.','line_number':787,'multiline':False]
['text':'/ A manual rescaling weight given to the loss of each batch element.','line_number':790,'multiline':False]
['text':'/ A weight of positive examples.','line_number':793,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `BCEWithLogitsLossImpl`.','line_number':797,'multiline':False]
['text':'/ See the documentation for `BCEWithLogitsLossImpl` class to learn what','line_number':798,'multiline':False]
['text':'/ methods it provides, and examples of how to use `BCEWithLogitsLoss` with','line_number':799,'multiline':False]
['text':'/ `torch::nn::BCEWithLogitsLossOptions`. See the documentation for','line_number':800,'multiline':False]
['text':'/ `ModuleHolder` to learn about PyTorch's module storage semantics.','line_number':801,'multiline':False]
['text':' namespace nn','line_number':804,'multiline':False]
['text':' namespace torch','line_number':805,'multiline':False]
