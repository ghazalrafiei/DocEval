['text':'/ A `Collation` is a transform that reduces a batch into a single value.','line_number':12,'multiline':False]
['text':'/ The result is a `BatchDataset` that has the type of the single value as its','line_number':13,'multiline':False]
['text':'/ `BatchType`.','line_number':14,'multiline':False]
['text':'/ A `Collate` allows passing a custom function to reduce/collate a batch','line_number':18,'multiline':False]
['text':'/ into a single value. It's effectively the lambda version of `Collation`,','line_number':19,'multiline':False]
['text':'/ which you could subclass and override `operator()` to achieve the same.','line_number':20,'multiline':False]
['text':'/','line_number':21,'multiline':False]
['text':'/ \rst','line_number':22,'multiline':False]
['text':'/ .. code-block:: cpp','line_number':23,'multiline':False]
['text':'/   using namespace torch::data;','line_number':24,'multiline':False]
['text':'/','line_number':25,'multiline':False]
['text':'/   auto dataset = datasets::MNIST("path/to/mnist")','line_number':26,'multiline':False]
['text':'/     .map(transforms::Collate<Example<>>([](std::vector<Example<>> e) {','line_number':27,'multiline':False]
['text':'/       return std::move(e.front());','line_number':28,'multiline':False]
['text':'/     }));','line_number':29,'multiline':False]
['text':'/ \endrst','line_number':30,'multiline':False]
['text':' namespace transforms','line_number':33,'multiline':False]
['text':' namespace data','line_number':34,'multiline':False]
['text':' namespace torch','line_number':35,'multiline':False]
