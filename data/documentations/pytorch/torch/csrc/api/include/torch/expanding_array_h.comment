['text':'/ A utility class that accepts either a container of `D`-many values, or a','line_number':17,'multiline':False]
['text':'/ single value, which is internally repeated `D` times. This is useful to','line_number':18,'multiline':False]
['text':'/ represent parameters that are multidimensional, but often equally sized in','line_number':19,'multiline':False]
['text':'/ all dimensions. For example, the kernel size of a 2D convolution has an `x`','line_number':20,'multiline':False]
['text':'/ and `y` length, but `x` and `y` are often equal. In such a case you could','line_number':21,'multiline':False]
['text':'/ just pass `3` to an `ExpandingArray<2>` and it would "expand" to `{3, 3}`.','line_number':22,'multiline':False]
['text':'/ Constructs an `ExpandingArray` from an `initializer_list`. The extent of','line_number':26,'multiline':False]
['text':'/ the length is checked against the `ExpandingArray`'s extent parameter `D`','line_number':27,'multiline':False]
['text':'/ at runtime.','line_number':28,'multiline':False]
['text':'implicit','line_number':29,'multiline':True]
['text':'/ Constructs an `ExpandingArray` from an `std::vector`. The extent of','line_number':32,'multiline':False]
['text':'/ the length is checked against the `ExpandingArray`'s extent parameter `D`','line_number':33,'multiline':False]
['text':'/ at runtime.','line_number':34,'multiline':False]
['text':'implicit','line_number':35,'multiline':True]
['text':'/ Constructs an `ExpandingArray` from an `at::ArrayRef`. The extent of','line_number':38,'multiline':False]
['text':'/ the length is checked against the `ExpandingArray`'s extent parameter `D`','line_number':39,'multiline':False]
['text':'/ at runtime.','line_number':40,'multiline':False]
['text':'implicit','line_number':41,'multiline':True]
['text':' clang-format off','line_number':42,'multiline':False]
['text':' clang-format on','line_number':46,'multiline':False]
['text':'/ Constructs an `ExpandingArray` from a single value, which is repeated `D`','line_number':50,'multiline':False]
['text':'/ times (where `D` is the extent parameter of the `ExpandingArray`).','line_number':51,'multiline':False]
['text':'implicit','line_number':52,'multiline':True]
['text':'/ Constructs an `ExpandingArray` from a correctly sized `std::array`.','line_number':56,'multiline':False]
['text':'implicit','line_number':57,'multiline':True]
['text':'/ Accesses the underlying `std::array`.','line_number':60,'multiline':False]
['text':'/ Accesses the underlying `std::array`.','line_number':65,'multiline':False]
['text':'/ Accesses the underlying `std::array`.','line_number':70,'multiline':False]
['text':'/ Accesses the underlying `std::array`.','line_number':75,'multiline':False]
['text':'/ Returns an `ArrayRef` to the underlying `std::array`.','line_number':80,'multiline':False]
['text':'/ Returns the extent of the `ExpandingArray`.','line_number':85,'multiline':False]
['text':'/ The backing array.','line_number':91,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':92,'multiline':False]
['text':'/ A utility class that accepts either a container of `D`-many','line_number':106,'multiline':False]
['text':'/ `c10::optional<T>` values, or a single `c10::optional<T>` value, which is','line_number':107,'multiline':False]
['text':'/ internally repeated `D` times. It has the additional ability to accept','line_number':108,'multiline':False]
['text':'/ containers of the underlying type `T` and convert them to a container of','line_number':109,'multiline':False]
['text':'/ `c10::optional<T>`.','line_number':110,'multiline':False]
['text':'/ Constructs an `ExpandingArrayWithOptionalElem` from an `initializer_list`','line_number':117,'multiline':False]
['text':'/ of the underlying type `T`. The extent of the length is checked against','line_number':118,'multiline':False]
['text':'/ the `ExpandingArrayWithOptionalElem`'s extent parameter `D` at runtime.','line_number':119,'multiline':False]
['text':'implicit','line_number':120,'multiline':True]
['text':'/ Constructs an `ExpandingArrayWithOptionalElem` from an `std::vector` of','line_number':123,'multiline':False]
['text':'/ the underlying type `T`. The extent of the length is checked against the','line_number':124,'multiline':False]
['text':'/ `ExpandingArrayWithOptionalElem`'s extent parameter `D` at runtime.','line_number':125,'multiline':False]
['text':'implicit','line_number':126,'multiline':True]
['text':'/ Constructs an `ExpandingArrayWithOptionalElem` from an `at::ArrayRef` of','line_number':129,'multiline':False]
['text':'/ the underlying type `T`. The extent of the length is checked against the','line_number':130,'multiline':False]
['text':'/ `ExpandingArrayWithOptionalElem`'s extent parameter `D` at runtime.','line_number':131,'multiline':False]
['text':'implicit','line_number':132,'multiline':True]
['text':' clang-format off','line_number':134,'multiline':False]
['text':' clang-format on','line_number':138,'multiline':False]
['text':'/ Constructs an `ExpandingArrayWithOptionalElem` from a single value of the','line_number':144,'multiline':False]
['text':'/ underlying type `T`, which is repeated `D` times (where `D` is the extent','line_number':145,'multiline':False]
['text':'/ parameter of the `ExpandingArrayWithOptionalElem`).','line_number':146,'multiline':False]
['text':'implicit','line_number':147,'multiline':True]
['text':'/ Constructs an `ExpandingArrayWithOptionalElem` from a correctly sized','line_number':154,'multiline':False]
['text':'/ `std::array` of the underlying type `T`.','line_number':155,'multiline':False]
['text':'implicit','line_number':156,'multiline':True]
['text':' namespace torch','line_number':182,'multiline':False]
