['text':'/ Wraps a function in a `Module`.','line_number':15,'multiline':False]
['text':'/','line_number':16,'multiline':False]
['text':'/ The `Functional` module allows wrapping an arbitrary function or function','line_number':17,'multiline':False]
['text':'/ object in an `nn::Module`. This is primarily handy for usage in','line_number':18,'multiline':False]
['text':'/ `Sequential`.','line_number':19,'multiline':False]
['text':'/','line_number':20,'multiline':False]
['text':'/ \rst','line_number':21,'multiline':False]
['text':'/ .. code-block:: cpp','line_number':22,'multiline':False]
['text':'/','line_number':23,'multiline':False]
['text':'/   Sequential sequential(','line_number':24,'multiline':False]
['text':'/     Linear(3, 4),','line_number':25,'multiline':False]
['text':'/     Functional(torch::relu),','line_number':26,'multiline':False]
['text':'/     BatchNorm1d(3),','line_number':27,'multiline':False]
['text':'/     Functional(torch::elu, /*alpha=*/1));','line_number':28,'multiline':False]
['text':'/ \endrst','line_number':29,'multiline':False]
['text':'/','line_number':30,'multiline':False]
['text':'/ While a `Functional` module only accepts a single `Tensor` as input, it is','line_number':31,'multiline':False]
['text':'/ possible for the wrapped function to accept further arguments. However,','line_number':32,'multiline':False]
['text':'/ these have to be bound *at construction time*. For example, if','line_number':33,'multiline':False]
['text':'/ you want to wrap `torch::leaky_relu`, which accepts a `slope` scalar as its','line_number':34,'multiline':False]
['text':'/ second argument, with a particular value for its `slope` in a `Functional`','line_number':35,'multiline':False]
['text':'/ module, you could write','line_number':36,'multiline':False]
['text':'/','line_number':37,'multiline':False]
['text':'/ \rst','line_number':38,'multiline':False]
['text':'/ .. code-block:: cpp','line_number':39,'multiline':False]
['text':'/','line_number':40,'multiline':False]
['text':'/   Functional(torch::leaky_relu, /*slope=*/0.5)','line_number':41,'multiline':False]
['text':'/ \endrst','line_number':42,'multiline':False]
['text':'/','line_number':43,'multiline':False]
['text':'/ The value of `0.5` is then stored within the `Functional` object and','line_number':44,'multiline':False]
['text':'/ supplied to the function call at invocation time. Note that such bound','line_number':45,'multiline':False]
['text':'/ values are evaluated eagerly and stored a single time. See the documentation','line_number':46,'multiline':False]
['text':'/ of [std::bind](https://en.cppreference.com/w/cpp/utility/functional/bind)','line_number':47,'multiline':False]
['text':'/ for more information on the semantics of argument binding.','line_number':48,'multiline':False]
['text':'/','line_number':49,'multiline':False]
['text':'/ \rst','line_number':50,'multiline':False]
['text':'/ .. attention::','line_number':51,'multiline':False]
['text':'/   After passing any bound arguments, the function must accept a single','line_number':52,'multiline':False]
['text':'/   tensor and return a single tensor.','line_number':53,'multiline':False]
['text':'/ \endrst','line_number':54,'multiline':False]
['text':'/','line_number':55,'multiline':False]
['text':'/ Note that `Functional` overloads the call operator (`operator()`) such that','line_number':56,'multiline':False]
['text':'/ you can invoke it with `my_func(...)`.','line_number':57,'multiline':False]
['text':'/ Constructs a `Functional` from a function object.','line_number':62,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-avoid-bind)','line_number':70,'multiline':False]
['text':'input=','line_number':73,'multiline':True]
['text':' std::bind is normally evil, but (1) gcc is broken w.r.t. handling','line_number':75,'multiline':False]
['text':' parameter pack expansion in lambdas and (2) moving parameter packs into','line_number':76,'multiline':False]
['text':' a lambda only works with C++14, so std::bind is the more move-aware','line_number':77,'multiline':False]
['text':' solution here.','line_number':78,'multiline':False]
['text':'/ Pretty prints the `Functional` module into the given `stream`.','line_number':83,'multiline':False]
['text':'/ Forwards the `input` tensor to the underlying (bound) function object.','line_number':86,'multiline':False]
['text':'/ Calls forward(input).','line_number':89,'multiline':False]
['text':'/ A `ModuleHolder` subclass for `FunctionalImpl`.','line_number':98,'multiline':False]
['text':'/ See the documentation for `FunctionalImpl` class to learn what methods it','line_number':99,'multiline':False]
['text':'/ provides, or the documentation for `ModuleHolder` to learn about PyTorch's','line_number':100,'multiline':False]
['text':'/ module storage semantics.','line_number':101,'multiline':False]
['text':' namespace nn','line_number':104,'multiline':False]
['text':' namespace torch','line_number':105,'multiline':False]
