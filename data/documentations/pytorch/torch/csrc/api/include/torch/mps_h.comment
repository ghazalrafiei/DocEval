['text':'/ Returns true if MPS device is available.','line_number':21,'multiline':False]
['text':'/ Sets the RNG seed for the MPS device.','line_number':24,'multiline':False]
['text':'/ Waits for all streams on the MPS device to complete.','line_number':27,'multiline':False]
['text':'/ This blocks the calling CPU thread by using the 'waitUntilCompleted()'','line_number':28,'multiline':False]
['text':'/ method to wait for Metal command buffers finish executing all the','line_number':29,'multiline':False]
['text':'/ encoded GPU operations before returning.','line_number':30,'multiline':False]
['text':'/ Submits the currently active command buffer to run on the MPS device.','line_number':33,'multiline':False]
['text':'/ Get the current command buffer to encode the Metal commands.','line_number':36,'multiline':False]
['text':'/ Get the dispatch_queue_t to synchronize encoding the custom kernels','line_number':39,'multiline':False]
['text':'/ with the PyTorch MPS backend.','line_number':40,'multiline':False]
['text':' namespace mps','line_number':43,'multiline':False]
['text':' namespace torch','line_number':44,'multiline':False]
