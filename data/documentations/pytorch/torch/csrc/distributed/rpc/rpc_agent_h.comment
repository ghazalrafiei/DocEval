['text':' Default RPC timeout','line_number':20,'multiline':False]
['text':' Unset RPC timeout. This is the value agent::send() will have if user does not','line_number':22,'multiline':False]
['text':' pass in a specific timeout, and indicates that we must use the default','line_number':23,'multiline':False]
['text':' timeout for RPCs.','line_number':24,'multiline':False]
['text':' Input is qualified name string, output is JIT StrongTypePtr','line_number':33,'multiline':False]
['text':' Same as jit::TypeResolver, did not import jit::TypeResolver to here','line_number':34,'multiline':False]
['text':' because it could introduce cyclic dependencies.','line_number':35,'multiline':False]
['text':' A globally unique ID to identify an RpcAgent','line_number':53,'multiline':False]
['text':' Struct for options to configure the RPC Retry protocol.','line_number':77,'multiline':False]
['text':' Using a default constructor like all other Options structs in the RPC','line_number':79,'multiline':False]
['text':' codebase. TORCH_CHECKs for input validation are done in the','line_number':80,'multiline':False]
['text':' sendWithRetries function.','line_number':81,'multiline':False]
['text':' Maximum number of times we will retry the RPC','line_number':83,'multiline':False]
['text':' Initial duration between consecutive RPC send attempts','line_number':85,'multiline':False]
['text':' Constant for exponential backoff used while calculating future wait','line_number':87,'multiline':False]
['text':' durations','line_number':88,'multiline':False]
['text':' Struct that stores all the metadata needed to retry a given RPC.','line_number':92,'multiline':False]
['text':' Future that is returned to the caller of sendWithRetries().','line_number':108,'multiline':False]
['text':' Number of send attempts completed so far.','line_number':110,'multiline':False]
['text':' ``RpcAgent`` is the base class for sending and receiving RPC messages. It','line_number':115,'multiline':False]
['text':' provides a unified ``send`` API for both request and response messages, and','line_number':116,'multiline':False]
['text':' will invoke the given ``RequestCallback`` to process received requests. It','line_number':117,'multiline':False]
['text':' should immediately become ready to serve request and accept response after','line_number':118,'multiline':False]
['text':' construction.','line_number':119,'multiline':False]
['text':' `WorkerInfo` is the globally unique identifier for this RpcAgent instance.','line_number':122,'multiline':False]
['text':' It contains a ``name_`` field and an ``id_`` field. ``name_`` is the','line_number':123,'multiline':False]
['text':' globally unique name for this ``RpcAgent``. It is up to the ``RpcAgent``','line_number':124,'multiline':False]
['text':' implementation to determine how to resolve names. ``id_`` is the globally','line_number':125,'multiline':False]
['text':' unique ID for this ``RpcAgent``. This should be determined by the','line_number':126,'multiline':False]
['text':' ``RpcAgent`` implementation.','line_number':127,'multiline':False]
['text':' The ``RequestCallback`` will be invoked to handle received requests. This','line_number':128,'multiline':False]
['text':' ``RpcAgent`` base class makes no assumption on the thread-safeness of the','line_number':129,'multiline':False]
['text':' ``RequestCallback``. ``RpcAgent`` implementations need to make sure that','line_number':130,'multiline':False]
['text':' its threading model conform to ``RequestCallback``'s requirement.','line_number':131,'multiline':False]
['text':' NB: RpcAgent implementations should not start serving requests until','line_number':132,'multiline':False]
['text':' ``start()`` is called, as there could be other contexts that have not been','line_number':133,'multiline':False]
['text':' initialized yet at this time.','line_number':134,'multiline':False]
['text':' Send a message to the ``RpcAgent`` of id ``to`` and returns a','line_number':142,'multiline':False]
['text':' ``JitFuture`` ptr. The implementation must be asynchronous, i.e., it','line_number':143,'multiline':False]
['text':' cannot block until it receives the response.','line_number':144,'multiline':False]
['text':'','line_number':145,'multiline':False]
['text':' If ``message.isRequest()`` is true, the ``JitFuture`` will be','line_number':146,'multiline':False]
['text':' completed when the response arrives. For other message types, the Future','line_number':147,'multiline':False]
['text':' should be ignored by the caller.','line_number':148,'multiline':False]
['text':' Retries sending the message up to maxRetries times until an ACK is','line_number':155,'multiline':False]
['text':' received. The duration between consecutive sends is increased over','line_number':156,'multiline':False]
['text':' time using an exponential backoff algorithm.','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':' Sends ``message`` to the ``RpcAgent`` of id ``to`` and returns a','line_number':159,'multiline':False]
['text':' ``JitFuture`` ptr, just like send(). Caller can specify the maximum','line_number':160,'multiline':False]
['text':' number of retries for this RPC (default is 5), initial duration between','line_number':161,'multiline':False]
['text':' sends (default is 1000ms), and backoff constant (default is 1.5) by','line_number':162,'multiline':False]
['text':' passing in the RpcRetryOptions struct. This API might end up','line_number':163,'multiline':False]
['text':' executing a method twice on the remote end (it does not guarantee','line_number':164,'multiline':False]
['text':' exactly-once semantics). Therefore, the user must ensure their requests','line_number':165,'multiline':False]
['text':' are idempotent.','line_number':166,'multiline':False]
['text':' Return a reference to the ``WorkerInfo`` of this RpcAgent.','line_number':172,'multiline':False]
['text':' NB: not using ``c10::optional<const std::string&>`` here because we might','line_number':173,'multiline':False]
['text':' need to create a separate RPC API lib and avoid forcing all ``RpcAgent``','line_number':174,'multiline':False]
['text':' implementations to depend on libtorch.','line_number':175,'multiline':False]
['text':' Return a reference to the ``WorkerInfo`` of the given ``workerName``.','line_number':178,'multiline':False]
['text':' Retrieve the timeout for all RPCs.','line_number':186,'multiline':False]
['text':' Set the timeout for all RPCs','line_number':191,'multiline':False]
['text':' Call sync and join all internal threads. This method should be called','line_number':196,'multiline':False]
['text':' before every RPC process exits.','line_number':197,'multiline':False]
['text':' Synchronize the this process with other ``RpcAgent`` processes. Block until','line_number':200,'multiline':False]
['text':' all ``RpcAgent``s reach this method and send all pending messages.','line_number':201,'multiline':False]
['text':' Sets up backend-agnostic state for accepting requests. Currently, this','line_number':204,'multiline':False]
['text':' entails setting rpcAgentRunning_ to true, creating the retry thread, and','line_number':205,'multiline':False]
['text':' calling the backend's startImpl.','line_number':206,'multiline':False]
['text':' Derived classes must override this function to start accepting requests.','line_number':209,'multiline':False]
['text':' This is used to initialize any backend-specific state. Users must call','line_number':210,'multiline':False]
['text':' start, not startImpl, to initialize the RPC Agent.','line_number':211,'multiline':False]
['text':' Stop accepting requests and shutdown the RPC framework as soon as possible','line_number':214,'multiline':False]
['text':' by terminating all RPC threads.','line_number':215,'multiline':False]
['text':' Derived classes must override this function to start accepting requests.','line_number':218,'multiline':False]
['text':' THis is used to clean up any backend-specific state. Users must call','line_number':219,'multiline':False]
['text':' shutdown, not shutdownImpl, to shutdown the RPC Agent.','line_number':220,'multiline':False]
['text':' Check if current RPC agent is set.','line_number':223,'multiline':False]
['text':' Retrieve the valid current RPC agent.','line_number':226,'multiline':False]
['text':' Set the current RPC agent.','line_number':229,'multiline':False]
['text':' Retrieve metrics as KV map','line_number':232,'multiline':False]
['text':' Retrieve debug info in addition to metrics as KV map','line_number':235,'multiline':False]
['text':' Flag to control whether GIL wait times','line_number':238,'multiline':False]
['text':' should be profiled or not.','line_number':239,'multiline':False]
['text':' Retrieve wheher we should profile GIL wait times or not.','line_number':242,'multiline':False]
['text':' Set type resolver that will be passed to JIT pickler to resolver type Ptr','line_number':245,'multiline':False]
['text':' based on type str.','line_number':246,'multiline':False]
['text':' Get the type resolver','line_number':249,'multiline':False]
['text':' Retrieves the device map for the provided destination worker.','line_number':252,'multiline':False]
['text':' Retrieve the (non-CPU) devices that are supported by the agent.','line_number':255,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':259,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':261,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':263,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':265,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':267,'multiline':False]
['text':' Atomic boolean indicating whether this agent is running. It controls','line_number':269,'multiline':False]
['text':' whether several background threads should be running. It is set in','line_number':270,'multiline':False]
['text':' RpcAgent::start() and unset in the derived class shutdown().','line_number':271,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':272,'multiline':False]
['text':' Add GIL wait time data point to metrics','line_number':277,'multiline':False]
['text':' Map that stores metadata for RPC's that may need to be re-tried as well as','line_number':281,'multiline':False]
['text':' the timepoint at which we should re-try them.','line_number':282,'multiline':False]
['text':' Thread that checks for retryable RPC's in the rpcRetryMap_ and sleeps until','line_number':288,'multiline':False]
['text':' the next unACKed RPC's timeout has expired.','line_number':289,'multiline':False]
['text':' Function that rpcRetryThread_ calls in a loop as long as RpcAgent is','line_number':292,'multiline':False]
['text':' running.','line_number':293,'multiline':False]
['text':' This is the callback attached to futures corresponding to send retries.','line_number':296,'multiline':False]
['text':' This handles 3 cases: 1). send was completed, 2). send failed with an','line_number':297,'multiline':False]
['text':' error and we've done maxRetries failed send attempts, and 3). send','line_number':298,'multiline':False]
['text':' failed with an error and we have more retries to go. In case 1, we mark','line_number':299,'multiline':False]
['text':' the original future as complete. In case 2, we mark the future with an','line_number':300,'multiline':False]
['text':' error and do not retry again. In case 3, we move the RpcRetryInfo struct','line_number':301,'multiline':False]
['text':' to another time point in the map to schedule the RPC for a future send.','line_number':302,'multiline':False]
['text':' Function that uses the exponential backoff algorithm to compute the next','line_number':308,'multiline':False]
['text':' time point to retry a given RPC.','line_number':309,'multiline':False]
['text':' The exponential backoff algorithm being used here is:','line_number':313,'multiline':False]
['text':' newTime = timeNow + (retryDuration * (backoffConstant ^ retryCount)).','line_number':314,'multiline':False]
['text':' Condition Variable to signal when the rpcRetryMap_ has been populated.','line_number':322,'multiline':False]
['text':' Mutex to protect RpcRetryMap_.','line_number':325,'multiline':False]
['text':' namespace rpc','line_number':329,'multiline':False]
['text':' namespace distributed','line_number':330,'multiline':False]
['text':' namespace torch','line_number':331,'multiline':False]
['text':' namespace std','line_number':341,'multiline':False]
