['text':'///////////////////  Pickle/Unpickle Helplers ////////////////////////////','line_number':16,'multiline':False]
['text':' add GIL as it is contructing a py::object','line_number':21,'multiline':False]
['text':' add GIL as it is accessing a py::object','line_number':34,'multiline':False]
['text':' const reference will extend the lifetime of the temporary variable','line_number':42,'multiline':False]
['text':' If the py::object to be contained by the RRef is a ScriptModule, we enforce','line_number':59,'multiline':False]
['text':' users to specify its ModuleInterface type.','line_number':60,'multiline':False]
['text':' Check if value is an instance of a ScriptClass. If not, skip type inference','line_number':88,'multiline':False]
['text':' because it will try to script the class that value is in instance of, and','line_number':89,'multiline':False]
['text':' this should be avoided.','line_number':90,'multiline':False]
['text':' NB: `jit::tryToInferType(..)` infers types including ScriptClass, but','line_number':103,'multiline':False]
['text':' excluding ScriptModule.','line_number':104,'multiline':False]
['text':' If we could infer the type from the pyobject, we create','line_number':107,'multiline':False]
['text':' the RRef with the IValue of that type.','line_number':108,'multiline':False]
['text':' Otherwise it's a pure pyobject, create the RRef','line_number':112,'multiline':False]
['text':' that holds an IValue of an pyobject.','line_number':113,'multiline':False]
['text':' namespace','line_number':117,'multiline':False]
['text':'/////////////////////////  PyRRef  //////////////////////////////////','line_number':119,'multiline':False]
['text':' jit::toIValue takes a py::handle as the first argument, and it calls','line_number':131,'multiline':False]
['text':' py::handle.cast<py::object>() to incref of provided value. The','line_number':132,'multiline':False]
['text':' returned ivalue will keep the reference alive.','line_number':133,'multiline':False]
['text':' NB: the first argument const py::object& value must be kept alive','line_number':134,'multiline':False]
['text':' until the following jit::toIValue returns (i.e., incref done). That's','line_number':135,'multiline':False]
['text':' why this ctor can only be called while holding GIL.','line_number':136,'multiline':False]
['text':' explicitly setting PyObject* to nullptr to prevent py::object's dtor to','line_number':146,'multiline':False]
['text':' decref on the PyObject again.','line_number':147,'multiline':False]
['text':' See Note [Destructing py::object] in python_ivalue.h','line_number':148,'multiline':False]
['text':' Marking hasValue to false, as this Future is only used for signaling','line_number':154,'multiline':False]
['text':' profiler to update profiling result and the profiler does not retrieve','line_number':155,'multiline':False]
['text':' any value from it.','line_number':156,'multiline':False]
['text':' hasValue ','line_number':157,'multiline':True]
['text':' toHere() calls python_rpc_handler which acquires GIL when UserRRef holds','line_number':190,'multiline':False]
['text':' a python object','line_number':191,'multiline':False]
['text':' python_rpc_handler deserialization will acquires GIL.','line_number':196,'multiline':False]
['text':' acquiring GIL as torch::jit::toPyObject creates new py::object','line_number':204,'multiline':False]
['text':' without grabbing the GIL.','line_number':205,'multiline':False]
['text':' acquiring GIL as torch::jit::toPyObject creates new py::object without','line_number':227,'multiline':False]
['text':' grabbing the GIL.','line_number':228,'multiline':False]
['text':' GIL is not released when calling this function.','line_number':273,'multiline':False]
['text':' Returns py::object that can be Python type or future.','line_number':282,'multiline':False]
['text':' cast to RRefInterface to hold it into IValue','line_number':304,'multiline':False]
['text':' If we have a PyObj, retrieve the underlying tensor.','line_number':317,'multiline':False]
['text':' Invoke distributed backward remotely.','line_number':356,'multiline':False]
['text':' namespace rpc','line_number':366,'multiline':False]
['text':' namespace distributed','line_number':367,'multiline':False]
['text':' namespace torch','line_number':368,'multiline':False]
