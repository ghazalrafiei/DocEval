['text':'*
 * Work in progress- don't treat this as a stable interface yet!
 ','line_number':17,'multiline':True]
['text':'*
   * Initialization/Teardown
   * ','line_number':24,'multiline':True]
['text':' No-op by default. Allows custom functionality to be exposed through','line_number':27,'multiline':False]
['text':' extension bindings.','line_number':28,'multiline':False]
['text':'*
   * Configuration
   * ','line_number':33,'multiline':True]
['text':'*
   * IR Tracing
   * ','line_number':39,'multiline':True]
['text':'*
   * Data Transfer
   * ','line_number':45,'multiline':True]
['text':' Gets backend data if the node is a device data node. Otherwise returns','line_number':60,'multiline':False]
['text':' nullptr','line_number':61,'multiline':False]
['text':'*
   * Lowering, Compilation, Execution
   * ','line_number':68,'multiline':True]
['text':' TODO(whc) need to keep this?','line_number':82,'multiline':False]
['text':'*
   * Device Configuration
   * ','line_number':95,'multiline':True]
['text':' Set or get the default device type.','line_number':99,'multiline':False]
['text':' For backends used with virtual c10::Devices, this configures what real','line_number':100,'multiline':False]
['text':' device type the backend should use, and matters if the backend supports','line_number':101,'multiline':False]
['text':' more than one type of real device.','line_number':102,'multiline':False]
['text':' Set or get the default device ordinal.','line_number':106,'multiline':False]
['text':' For backends that supports multi-device, this configures what the','line_number':107,'multiline':False]
['text':' default device the backend should use.','line_number':108,'multiline':False]
['text':' Specify which aten device should be used for eager fallback','line_number':112,'multiline':False]
['text':' may change depending on current 'Default' DeviceType','line_number':113,'multiline':False]
['text':' Query all available backend devices','line_number':116,'multiline':False]
['text':' Map a particular c10:: device to a concrete backend device','line_number':123,'multiline':False]
['text':' Note:: c10:: devices may be virtual or concrete.  xla:: and lazy:: are','line_number':124,'multiline':False]
['text':' virtual devices, meaning they may map to a gpu, tpu, etc. behind the','line_number':125,'multiline':False]
['text':' scenes. In the future, non-virtual c10:: devices may also use lazy tensors','line_number':126,'multiline':False]
['text':' through a mode, in which case these APIs should still work, but should be','line_number':127,'multiline':False]
['text':' identity mappings.','line_number':128,'multiline':False]
['text':' TODO(whc)','line_number':131,'multiline':False]
['text':' Additional APIs expected for supporting distributed training, to be','line_number':132,'multiline':False]
['text':' designed','line_number':133,'multiline':False]
['text':'*
   * Debug/Metrics
   * ','line_number':135,'multiline':True]
['text':'   virtual std::map<std::string, Metric> GetMetrics() const = 0;','line_number':139,'multiline':False]
['text':'   virtual MemoryInfo GetMemoryInfo(const std::string& device) = 0;','line_number':141,'multiline':False]
['text':' namespace lazy','line_number':157,'multiline':False]
['text':' namespace torch','line_number':158,'multiline':False]
