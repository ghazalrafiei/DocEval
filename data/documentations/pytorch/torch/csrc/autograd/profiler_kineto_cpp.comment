['text':' TODO: TO be removed, once this properly works from libkineto','line_number':36,'multiline':False]
['text':' Literal copy-n-paste from third_party/kineto/libkineto/src/WeakSymbols.cpp','line_number':37,'multiline':False]
['text':' This function is needed to avoid superfluous dependency on GNU OpenMP library','line_number':39,'multiline':False]
['text':' when cuPTI is linked statically For more details see','line_number':40,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/51026','line_number':41,'multiline':False]
['text':' extern "C"','line_number':47,'multiline':False]
['text':' _MSC_VER','line_number':48,'multiline':False]
['text':' USE_KINETO','line_number':49,'multiline':False]
['text':' USE_KINETO','line_number':61,'multiline':False]
['text':' If we recorded concrete inputs, then parse them','line_number':124,'multiline':False]
['text':' In order to add metadata we have to downcast from','line_number':155,'multiline':False]
['text':' `libkineto::ITraceActivity` to `libkineto::GenericTraceActivity`. We','line_number':156,'multiline':False]
['text':' know that all activities provided by PyTorch are of the correct type,','line_number':157,'multiline':False]
['text':' however Kineto profilers can (and do) add events that inherit directly','line_number':158,'multiline':False]
['text':' from ITraceActivity. As a result, any Result which was constructed from','line_number':159,'multiline':False]
['text':' an event that Kineto provided is unsafe to cast.','line_number':160,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)','line_number':171,'multiline':False]
['text':' Add extra metadata if any','line_number':253,'multiline':False]
['text':' add information about an associated forward op, if a sequence number','line_number':267,'multiline':False]
['text':' is available (e.g. during training)','line_number':268,'multiline':False]
['text':' To get names of the performance events ','line_number':302,'multiline':True]
['text':'global=','line_number':316,'multiline':True]
['text':' `kineto_events_` does not include Python events. Instead it exposes them','line_number':388,'multiline':False]
['text':' via the `stacks` property.','line_number':389,'multiline':False]
['text':' It is not safe to use the activity after post processing.','line_number':423,'multiline':False]
['text':' Optional, if event post-processing is enabled.','line_number':434,'multiline':False]
['text':' @lint-ignore CLANGTIDY clang-diagnostic-unused-parameter','line_number':448,'multiline':False]
['text':' namespace','line_number':512,'multiline':False]
['text':'global=','line_number':522,'multiline':True]
['text':'global=','line_number':525,'multiline':True]
['text':' no support for input shapes now?
  if (config.report_input_shapes) {
    ctx_ptr->shapes = inputSizes(fn);
    ctx_ptr->dtypes = inputTypes(fn);
  }
  ','line_number':538,'multiline':True]
['text':'cpuOnly=','line_number':559,'multiline':True]
['text':' For now only CPU activity is supported ','line_number':564,'multiline':True]
['text':'
     * Sending a warning and passing the non-standard event to the backend
     * Backend can abort if the event is not supported.
     * TODO Should we gracefully drop the invalid event if we have atleast one
     * valid?
     ','line_number':568,'multiline':True]
['text':'global=','line_number':603,'multiline':True]
['text':'global=','line_number':617,'multiline':True]
['text':'global=','line_number':643,'multiline':True]
['text':'global=','line_number':644,'multiline':True]
['text':' Traces are converged via libkineto automatically for ondemand flow','line_number':667,'multiline':False]
['text':' Shared among NVTX, KINETO, KINETO_GPU_FALLBACK, KINETO_PRIVATEUSE1_FALLBACK','line_number':674,'multiline':False]
['text':' Populate Python stack','line_number':703,'multiline':False]
['text':' should be rare','line_number':835,'multiline':False]
['text':' Most of the fields in `KinetoEvent` only make sense for a single event type.','line_number':863,'multiline':False]
['text':' (Generally TorchOp.) For all other types they simply return the default','line_number':864,'multiline':False]
['text':' value. This macro provides a succinct way of expressing this behavior.','line_number':865,'multiline':False]
['text':' namespace profiler','line_number':921,'multiline':False]
['text':' namespace autograd','line_number':922,'multiline':False]
['text':'global=','line_number':928,'multiline':True]
['text':' namespace impl','line_number':933,'multiline':False]
['text':' namespace profiler','line_number':934,'multiline':False]
['text':' namespace torch','line_number':936,'multiline':False]
