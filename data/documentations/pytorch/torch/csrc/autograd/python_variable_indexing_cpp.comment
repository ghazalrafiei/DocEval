['text':' TODO: Maybe this should return a SymInt directly?','line_number':55,'multiline':False]
['text':' Add the guard to get a nice error message if/when we will hit this.','line_number':56,'multiline':False]
['text':' We allow indexing by integers, slices, ellipsis, None, Variables,','line_number':61,'multiline':False]
['text':' and tuples of those types. We also handle bools as if they were a','line_number':62,'multiline':False]
['text':' Variable[ByteTensor].','line_number':63,'multiline':False]
['text':' Count the number of indexed dimensions (everything but ellipsis and None)','line_number':66,'multiline':False]
['text':' -1 is a sentinel for __torch_function__','line_number':67,'multiline':False]
['text':' NOLINT(cppcoreguidelines-pro-type-cstyle-cast)','line_number':70,'multiline':False]
['text':' NOLINT(cppcoreguidelines-pro-type-cstyle-cast)','line_number':73,'multiline':False]
['text':' NOLINT(cppcoreguidelines-pro-type-cstyle-cast)','line_number':86,'multiline':False]
['text':' TODO: remove','line_number':114,'multiline':False]
['text':' lift_fresh is supposed to be used in situations where you are guaranteed to','line_number':135,'multiline':False]
['text':' get a plain Tensor which is not true for cpu device but not for non cpu','line_number':136,'multiline':False]
['text':' device','line_number':137,'multiline':False]
['text':' NOLINT(cppcoreguidelines-pro-type-cstyle-cast)','line_number':185,'multiline':False]
['text':' See NOTE [nested tensor size for indexing]','line_number':188,'multiline':False]
['text':' NOLINT(cppcoreguidelines-pro-type-cstyle-cast)','line_number':199,'multiline':False]
['text':' NOTE [nested tensor size for indexing]','line_number':200,'multiline':False]
['text':' nested tensor does not have a size (yet) so for now we represent its size','line_number':201,'multiline':False]
['text':' as null may need to be changed after we reach a better solution for','line_number':202,'multiline':False]
['text':' nested tensor size','line_number':203,'multiline':False]
['text':'prev_dim_result=','line_number':208,'multiline':True]
['text':'original_tensor=','line_number':209,'multiline':True]
['text':'index=','line_number':210,'multiline':True]
['text':'includeBool=','line_number':234,'multiline':True]
['text':'dim_ptr=','line_number':255,'multiline':True]
['text':'specified_dims_ptr=','line_number':256,'multiline':True]
['text':'real_dim=','line_number':257,'multiline':True]
['text':'outIndices=','line_number':258,'multiline':True]
['text':' See NOTE [ Setting `disable_slice_optimization` when calling C++','line_number':259,'multiline':False]
['text':' tensor indexing functions from Python ]','line_number':260,'multiline':False]
['text':'disable_slice_optimization=','line_number':261,'multiline':True]
['text':'original_tensor_device=','line_number':262,'multiline':True]
['text':'prev_dim_result_sizes=','line_number':263,'multiline':True]
['text':'  Allow indexing with ndarray if numpy compilation is enabled. An ndarray','line_number':275,'multiline':False]
['text':'  index should not be treated as a tuple since the indexing has a different','line_number':276,'multiline':False]
['text':'  syntax.','line_number':277,'multiline':False]
['text':' This uses a heuristics from NumPy for determining whether to treat','line_number':286,'multiline':False]
['text':' non-tuple sequences as if they were a tuple. From the NumPy code comments:','line_number':287,'multiline':False]
['text':'','line_number':288,'multiline':False]
['text':' "At this point, we're left with a non-tuple, non-array, sequence:','line_number':289,'multiline':False]
['text':'  typically, a list. We use some somewhat-arbitrary heuristics from here','line_number':290,'multiline':False]
['text':'  onwards to decided whether to treat that list as a single index, or a','line_number':291,'multiline':False]
['text':'  list of indices. Backwards compatibility only takes effect for short','line_number':292,'multiline':False]
['text':'  sequences - otherwise we treat it like any other scalar."','line_number':293,'multiline':False]
['text':' Negative size indicates a Python error in the PySequence_Size call.','line_number':296,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':300,'multiline':False]
['text':' NOLINT(cppcoreguidelines-pro-type-cstyle-cast)','line_number':327,'multiline':False]
['text':' NOTE: Here is the dispatch structure for `THPVariable_getitem`:','line_number':334,'multiline':False]
['text':'','line_number':335,'multiline':False]
['text':' 1. Python 1-D getter calls C++ `at::indexing::get_item` after','line_number':336,'multiline':False]
['text':' converting Python index to C++ TensorIndex.','line_number':337,'multiline':False]
['text':'','line_number':338,'multiline':False]
['text':' 2. Python N-D getter calls C++ `at::indexing::handleDimInMultiDimIndexing`','line_number':339,'multiline':False]
['text':' for each dim, after converting Python index to C++ TensorIndex. If advanced','line_number':340,'multiline':False]
['text':' indexing is needed, it calls C++ `at::indexing::dispatch_index`.','line_number':341,'multiline':False]
['text':' handle simple types: none, ellipsis','line_number':350,'multiline':False]
['text':' handle simple types: integers, slices, bool','line_number':361,'multiline':False]
['text':' wrap index in a tuple if it's not already one','line_number':385,'multiline':False]
['text':'is_tracing=','line_number':397,'multiline':True]
['text':' ensure we return a shallow copy for things like x[...]','line_number':403,'multiline':False]
['text':' indexing by tensors ("advanced" indexing)','line_number':409,'multiline':False]
['text':' NOTE: Here is the dispatch structure for `THPVariable_setitem`:','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':' 1. Python 1-D setter calls C++ `at::indexing::set_item` after','line_number':430,'multiline':False]
['text':' converting Python index to C++ TensorIndex.','line_number':431,'multiline':False]
['text':'','line_number':432,'multiline':False]
['text':' 2. Python N-D setter calls C++ `at::indexing::handleDimInMultiDimIndexing`','line_number':433,'multiline':False]
['text':' for each dim, after converting Python index to C++ TensorIndex. If advanced','line_number':434,'multiline':False]
['text':' indexing is needed, it calls C++ `at::indexing::dispatch_index_put_`.','line_number':435,'multiline':False]
['text':' TODO: This qint special case looks very suspicious...','line_number':458,'multiline':False]
['text':' handle simple types: ellipsis, none, bool','line_number':468,'multiline':False]
['text':' NOLINT(cppcoreguidelines-pro-type-cstyle-cast)','line_number':469,'multiline':False]
['text':' do nothing for false (technically we should check the size, but we don't','line_number':470,'multiline':False]
['text':' have real 0-sized shapes.','line_number':471,'multiline':False]
['text':' handle simple types: integers, slices','line_number':488,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':498,'multiline':False]
['text':' See NOTE [ Setting `disable_slice_optimization` when calling C++ tensor','line_number':503,'multiline':False]
['text':' indexing functions from Python ]','line_number':504,'multiline':False]
['text':'disable_slice_optimization=','line_number':510,'multiline':True]
['text':' wrap index in a tuple if it's not already one','line_number':514,'multiline':False]
['text':'is_tracing=','line_number':528,'multiline':True]
['text':' namespace autograd','line_number':556,'multiline':False]
['text':' namespace torch','line_number':557,'multiline':False]
