['text':' [ Using ForwardGrad ]','line_number':9,'multiline':False]
['text':' ForwardGrad needs to be a shared_ptr to satisfy constraints of its inner','line_number':10,'multiline':False]
['text':' design. But this shared_ptr must be uniquely associated with the object that','line_number':11,'multiline':False]
['text':' stores it (as of writing, either AutogradMeta or SavedVariable). This object','line_number':12,'multiline':False]
['text':' is called the "owning object" in the discussions below. This owning object','line_number':13,'multiline':False]
['text':' must call `ForwardGrad::clear()` when it is destroyed to ensure that the','line_number':14,'multiline':False]
['text':' ForwardGrad is properly de-allocated.','line_number':15,'multiline':False]
['text':' This file contains two classes that are used to store forward AD gradients','line_number':19,'multiline':False]
['text':' and ensure that they are scoped properly. Because forward AD runs','line_number':20,'multiline':False]
['text':' concurrently with the evaluation of the function, we need a mechanism to','line_number':21,'multiline':False]
['text':' separate different forward AD invocations and be able to compute the right','line_number':22,'multiline':False]
['text':' gradients. We model such invocations as levels here. The particular scoping','line_number':23,'multiline':False]
['text':' issue mentioned above has two main drivers:','line_number':24,'multiline':False]
['text':'   - Ensure that we can conveniently use forward AD within a high level API','line_number':25,'multiline':False]
['text':'   without','line_number':26,'multiline':False]
['text':'     leaking the forward AD states outside.','line_number':27,'multiline':False]
['text':'   - Ensure that we can keep the level that we expose to the user API simple','line_number':28,'multiline':False]
['text':'   (an integer','line_number':29,'multiline':False]
['text':'     that represents the nesting depth) while avoiding confusions when the','line_number':30,'multiline':False]
['text':'     level index is re-used.','line_number':31,'multiline':False]
['text':' The important external APIs from this file are:','line_number':33,'multiline':False]
['text':'   - ForwardADLevel::get_next_idx() that can be used to enter a new level and','line_number':34,'multiline':False]
['text':'   get its index','line_number':35,'multiline':False]
['text':'   - ForwardADLevel::release_idx() that can be used to exit a given level.','line_number':36,'multiline':False]
['text':'   - ForwardGrad() can be used to store a given forward gradient that will','line_number':37,'multiline':False]
['text':'   handle the level','line_number':38,'multiline':False]
['text':'     tracking automatically.','line_number':39,'multiline':False]
['text':' The basic implementation strategy is as follows:','line_number':41,'multiline':False]
['text':' Every tensor has a ForwardGrad, maintaining a map from levels to tangents.','line_number':42,'multiline':False]
['text':' ForwardGrad is responsible for registering itself to the appropriate','line_number':43,'multiline':False]
['text':' ForwardADLevel when a new tangent is added to it via ForwardGrad::set_value','line_number':44,'multiline':False]
['text':' and to un-register itself from this same level if that tangent is removed via','line_number':45,'multiline':False]
['text':' ForwardGrad::reset. The ForwardADLevel is created when a new level is entered','line_number':46,'multiline':False]
['text':' via ForwardADLevel::get_next_idx. A reference to the new ForwardADLevel is','line_number':47,'multiline':False]
['text':' stored into a global (for the whole process) vector that ensure it can be','line_number':48,'multiline':False]
['text':' accessed via ForwardADLevel::get_by_idx. This reference is deleted when the','line_number':49,'multiline':False]
['text':' index is released by the user when calling ForwardADLevel::release_idx. When','line_number':50,'multiline':False]
['text':' it is destructed, the ForwardADLevel is responsible for clearing all the','line_number':51,'multiline':False]
['text':' tangents for its level stored in all the ForwardGrad that registered with it.','line_number':52,'multiline':False]
['text':'','line_number':53,'multiline':False]
['text':' This process-wide level design, compared to a thread local one, allows us to','line_number':54,'multiline':False]
['text':' use very simple user facing handle for the level (an int) while enabling','line_number':55,'multiline':False]
['text':' cross-thread forward AD. The only required synchronization for the user is','line_number':56,'multiline':False]
['text':' when entering and exiting the levels. Some discussion on alternative design','line_number':57,'multiline':False]
['text':' is in https://github.com/pytorch/pytorch/pull/49097#discussion_r543716453 and','line_number':58,'multiline':False]
['text':' can be refined in the future.','line_number':59,'multiline':False]
['text':' Correctness of concurrency:','line_number':61,'multiline':False]
['text':' Each class uses its own lock when reading or modifying internal storages.','line_number':62,'multiline':False]
['text':' This allows in particular to safely remove tangents from ForwardGrad when the','line_number':63,'multiline':False]
['text':' ForwardADLevel is being exited. We ensure no deadlock by ensuring that a','line_number':64,'multiline':False]
['text':' methods never calls into another class's method while the local class's lock','line_number':65,'multiline':False]
['text':' is held except in one single case: calling from ForwardADLevel's destructor','line_number':66,'multiline':False]
['text':' into ForwardGrad::reset with update_level=false.','line_number':67,'multiline':False]
['text':' The lifetime of these objects is as follows:','line_number':69,'multiline':False]
['text':' The ForwardADLevel can be in three states:','line_number':70,'multiline':False]
['text':'      - Initialized: where one of its reference is held by the global vector','line_number':71,'multiline':False]
['text':'      and there may be more','line_number':72,'multiline':False]
['text':'        references held by temporary variables in ForwardGrad's methods.','line_number':73,'multiline':False]
['text':'      - About to be destructed: where "release_idx" has been called and the','line_number':74,'multiline':False]
['text':'      only reason for the','line_number':75,'multiline':False]
['text':'        ForwardADLevel not to be destructed right away is that some methods in','line_number':76,'multiline':False]
['text':'        ForwardGrad have owning reference to it. This is done so that a','line_number':77,'multiline':False]
['text':'        ForwardADLevel can never be destructed when a ForwardGrad is','line_number':78,'multiline':False]
['text':'        registered with it and in the process of adding something to its','line_number':79,'multiline':False]
['text':'        internal state.','line_number':80,'multiline':False]
['text':'      - Being destructed: Here the ForwardADLevel is not referenced anymore','line_number':81,'multiline':False]
['text':'      and can be safely reset','line_number':82,'multiline':False]
['text':'        all of the ForwardGrad. Note that we can have more than one reset','line_number':83,'multiline':False]
['text':'        being called here (which is ok) but we are guaranteed that there is at','line_number':84,'multiline':False]
['text':'        least one.','line_number':85,'multiline':False]
['text':' The ForwardGrad is simpler as there is no intermediary state and no special','line_number':86,'multiline':False]
['text':' destructor for. The logic to unregister it from the different ForwardADLevel','line_number':87,'multiline':False]
['text':' is done when the owning object (AutogradMeta or SavedVariable) is being','line_number':88,'multiline':False]
['text':' destroyed.','line_number':89,'multiline':False]
['text':' Other considered design:','line_number':91,'multiline':False]
['text':' To avoid having the ForwardGrad::clear, we considered storing weak_ptr inside','line_number':92,'multiline':False]
['text':' the ForwardADLevel. While this would work, it would mean that the set inside','line_number':93,'multiline':False]
['text':' the ForwardADLevel would only grow unless we do an expensive linear scan to','line_number':94,'multiline':False]
['text':' remove all the dangling weak pointers. Hence this approach was not used.','line_number':95,'multiline':False]
['text':' Data structures in this file are optimized for this maximum number of levels.','line_number':97,'multiline':False]
['text':' The number of levels corresponds to the degree of the gradient being','line_number':98,'multiline':False]
['text':' computed using forward AD and we don't expect more than second order','line_number':99,'multiline':False]
['text':' gradients to be common.','line_number':100,'multiline':False]
['text':' This function must only be called when AutogradMeta or SavedVariable is','line_number':131,'multiline':False]
['text':' being destructed as it ensures that:','line_number':132,'multiline':False]
['text':'   - The only (potential) other references to this ForwardGrad are the','line_number':133,'multiline':False]
['text':'     different level it is registered to','line_number':134,'multiline':False]
['text':'   - No other thread will try to call `set_value` or `value` ever from now','line_number':135,'multiline':False]
['text':'   on','line_number':136,'multiline':False]
['text':'   - Any of the ForwardADLevel that this ForwardGrad is registered with','line_number':137,'multiline':False]
['text':'   might','line_number':138,'multiline':False]
['text':'     call `reset` at any point during this function','line_number':139,'multiline':False]
['text':' Use "try" version here as another thread might have deleted this','line_number':151,'multiline':False]
['text':' level before we got here','line_number':152,'multiline':False]
['text':' This is an owning reference as we want to keep the level alive','line_number':153,'multiline':False]
['text':' until we successfully unregister ourselves','line_number':154,'multiline':False]
['text':' Owning reference to ensure the forward_level is not destroyed','line_number':163,'multiline':False]
['text':' while we are updating our internal state','line_number':164,'multiline':False]
['text':' This function removes the tangent for a given level from this ForwardGrad','line_number':172,'multiline':False]
['text':' Use the update_level flag to disable notifying the level about this reset','line_number':173,'multiline':False]
['text':' This flag is most notably used by the ForwardADLevel destructor.','line_number':174,'multiline':False]
['text':' Keep the Tensor alive until we have released the lock','line_number':184,'multiline':False]
['text':' This is needed as we can be in a case where this function is called by','line_number':185,'multiline':False]
['text':' ForwardADLevel destructor','line_number':186,'multiline':False]
['text':' TODO(albanD): replace this with a SmallVector','line_number':206,'multiline':False]
['text':' namespace autograd','line_number':211,'multiline':False]
['text':' namespace torch','line_number':212,'multiline':False]
