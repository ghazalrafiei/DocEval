['text':' for unique_ptr','line_number':24,'multiline':False]
['text':' This is "probably" thread-safe because the flag is set in a fork handler','line_number':44,'multiline':False]
['text':' before any threads are created, and this function is only called with the','line_number':45,'multiline':False]
['text':' GIL held. However, using fork + threads is playing with fire so this is','line_number':46,'multiline':False]
['text':' more of a "best effort" thing. For example, if the fork occurs while the','line_number':47,'multiline':False]
['text':' backwards threads hold a lock, we'll probably deadlock in the engine','line_number':48,'multiline':False]
['text':' destructor.','line_number':49,'multiline':False]
['text':' Increment thread usage count before acquiring the GIL','line_number':71,'multiline':False]
['text':' Create a PyThreadState, but release the GIL. This lets','line_number':75,'multiline':False]
['text':' pybind11::gil_scoped_acquire calls inside thread_main acquire the GIL','line_number':76,'multiline':False]
['text':' without having to create a new PyThreadState each time.','line_number':77,'multiline':False]
['text':' Decrement the count during shutdown if we incremented earlier.','line_number':87,'multiline':False]
['text':' Do not call PyEval_RestoreThread, PyThreadState_[Clear|DeleteCurrent] if','line_number':92,'multiline':False]
['text':' runtime is finalizing','line_number':93,'multiline':False]
['text':' TODO: call disarm once PyThreadState_Clear can safely be called from','line_number':96,'multiline':False]
['text':' finalize NOTE: deploy.cpp calls `PyInterpreterState_Delete` to destruct','line_number':97,'multiline':False]
['text':' PyThreadState, so avoid use-after-free here.','line_number':98,'multiline':False]
['text':' See Note [ Persisting PyErr state across autograd engine threads ]','line_number':109,'multiline':False]
['text':' Set the error indicator only if it is not set already.','line_number':158,'multiline':False]
['text':' namespace python','line_number':164,'multiline':False]
['text':' namespace autograd','line_number':165,'multiline':False]
['text':' namespace torch','line_number':166,'multiline':False]
['text':' Implementation of torch._C._EngineBase.run_backward','line_number':170,'multiline':False]
['text':' Indicate whether to accumulate grad into leaf Tensors or capture','line_number':183,'multiline':False]
['text':' NOLINT','line_number':184,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast,-warnings-as-errors)','line_number':197,'multiline':False]
['text':' The user either called autograd.backward(...) or autograd.grad(...) to get','line_number':227,'multiline':False]
['text':' here','line_number':228,'multiline':False]
['text':' NOTE [ Autograd Unreachable Input ]','line_number':319,'multiline':False]
['text':' Since input has no grad_accumulator, its guaranteed to be','line_number':320,'multiline':False]
['text':' unreachable. We initialize an edge pointing to a non-nullptr Node','line_number':321,'multiline':False]
['text':' so nodes in the graph (e.g., mul when an operand is scalar) that','line_number':322,'multiline':False]
['text':' have edges pointing to nullptr don't get erroneously assigned','line_number':323,'multiline':False]
['text':' `needed = True` in exec_info.','line_number':324,'multiline':False]
['text':' Note [ Persisting PyErr state across autograd engine threads ]','line_number':397,'multiline':False]
['text':'','line_number':398,'multiline':False]
['text':' Since the autograd engine is multi-threaded, and Python error state is','line_number':399,'multiline':False]
['text':' local to each thread, it must preserve the python error from the worker','line_number':400,'multiline':False]
['text':' thread and rethrow it as-is in the calling thread. This is done via','line_number':401,'multiline':False]
['text':' persisting the error in the two places that can encounter Python','line_number':402,'multiline':False]
['text':' errors: (1) evaluate function and (2) queued callbacks.','line_number':403,'multiline':False]
['text':'','line_number':404,'multiline':False]
['text':' TODO: the engine is not actually responsible for persisting the error','line_number':405,'multiline':False]
['text':' in the custom autograd Function case today! See the note above','line_number':406,'multiline':False]
['text':' `raise_python_error()` function in python_function.cpp and','line_number':407,'multiline':False]
['text':' python_hooks.cpp for more details. Persisting an extra time in the','line_number':408,'multiline':False]
['text':' engine is fine because doing so is a no-op when the python_error has','line_number':409,'multiline':False]
['text':' already been persisted.','line_number':410,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,cppcoreguidelines-avoid-non-const-global-variables)','line_number':435,'multiline':False]
['text':' tp_name ','line_number':449,'multiline':True]
['text':' tp_basicsize ','line_number':450,'multiline':True]
['text':' tp_itemsize ','line_number':451,'multiline':True]
['text':' tp_dealloc ','line_number':452,'multiline':True]
['text':' tp_vectorcall_offset ','line_number':453,'multiline':True]
['text':' tp_getattr ','line_number':454,'multiline':True]
['text':' tp_setattr ','line_number':455,'multiline':True]
['text':' tp_reserved ','line_number':456,'multiline':True]
['text':' tp_repr ','line_number':457,'multiline':True]
['text':' tp_as_number ','line_number':458,'multiline':True]
['text':' tp_as_sequence ','line_number':459,'multiline':True]
['text':' tp_as_mapping ','line_number':460,'multiline':True]
['text':' tp_hash  ','line_number':461,'multiline':True]
['text':' tp_call ','line_number':462,'multiline':True]
['text':' tp_str ','line_number':463,'multiline':True]
['text':' tp_getattro ','line_number':464,'multiline':True]
['text':' tp_setattro ','line_number':465,'multiline':True]
['text':' tp_as_buffer ','line_number':466,'multiline':True]
['text':' NOLINTNEXTLINE(misc-redundant-expression)','line_number':467,'multiline':False]
['text':' tp_flags ','line_number':468,'multiline':True]
['text':' tp_doc ','line_number':469,'multiline':True]
['text':' tp_traverse ','line_number':470,'multiline':True]
['text':' tp_clear ','line_number':471,'multiline':True]
['text':' tp_richcompare ','line_number':472,'multiline':True]
['text':' tp_weaklistoffset ','line_number':473,'multiline':True]
['text':' tp_iter ','line_number':474,'multiline':True]
['text':' tp_iternext ','line_number':475,'multiline':True]
['text':' tp_methods ','line_number':476,'multiline':True]
['text':' tp_members ','line_number':477,'multiline':True]
['text':' tp_getset ','line_number':478,'multiline':True]
['text':' tp_base ','line_number':479,'multiline':True]
['text':' tp_dict ','line_number':480,'multiline':True]
['text':' tp_descr_get ','line_number':481,'multiline':True]
['text':' tp_descr_set ','line_number':482,'multiline':True]
['text':' tp_dictoffset ','line_number':483,'multiline':True]
['text':' tp_init ','line_number':484,'multiline':True]
['text':' tp_alloc ','line_number':485,'multiline':True]
['text':' tp_new ','line_number':486,'multiline':True]
