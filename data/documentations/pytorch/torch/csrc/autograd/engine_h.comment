['text':' Engine implements backpropagation from output variables and their gradients','line_number':3,'multiline':False]
['text':' to "root" variables (variables created by the user with requires_grad=True).','line_number':4,'multiline':False]
['text':' namespace torch','line_number':34,'multiline':False]
['text':' Maximum reentrant backward depth before switching to a new thread','line_number':39,'multiline':False]
['text':' This limit is based on the TSAN's deadlock detector, where it will','line_number':40,'multiline':False]
['text':' fail if a program hold more than 65 locks in one thread at once.','line_number':41,'multiline':False]
['text':' As we hold mutex in every of our custom C++ autograd Node, we would','line_number':42,'multiline':False]
['text':' like to avoid TSAN complains on this when doing reentrant backwards','line_number':43,'multiline':False]
['text':' For reference, see https://github.com/google/sanitizers/issues/950','line_number':44,'multiline':False]
['text':' This buffer serves as an implicit "addition" node for all of the','line_number':56,'multiline':False]
['text':' gradients flowing here.  Once all the dependencies are finished, we','line_number':57,'multiline':False]
['text':' use the contents of this buffer to run the function.','line_number':58,'multiline':False]
['text':' When worker receives a task with isShutdownTask = true, it will immediately','line_number':60,'multiline':False]
['text':' exit. The engine sends a shutdown task to every queue upon its destruction.','line_number':61,'multiline':False]
['text':' Guard that sets and restores checkpoint_valid','line_number':77,'multiline':False]
['text':' Returns true when t2 should be (weakly) BEFORE t1 in the queue.','line_number':90,'multiline':False]
['text':' Shutdown tasks are first and then empty NodeTask are next.','line_number':91,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':94,'multiline':False]
['text':' To notify threads waiting on the ReadyQueue of available tasks on the heap_','line_number':109,'multiline':False]
['text':' To protect read and writes to heap_','line_number':111,'multiline':False]
['text':' incrementOutstandingTasks indicates whether or not we should increment','line_number':118,'multiline':False]
['text':' 'outstanding_tasks_' for the associated GraphTask. This should mostly','line_number':119,'multiline':False]
['text':' always be true and is only set false in certain cases (see docs for','line_number':120,'multiline':False]
['text':' DistEngine.execute_graph_task_until_ready_queue_empty)','line_number':121,'multiline':False]
['text':' A single instance of this struct should be created through the whole process','line_number':129,'multiline':False]
['text':' lifetime. The worker thread creation logic and Engine's destructor rely on','line_number':130,'multiline':False]
['text':' this.','line_number':131,'multiline':False]
['text':'/ Returns a reference to a static `Engine` instance.','line_number':133,'multiline':False]
['text':' compiled_autograd needs to live in a different .so file so that it','line_number':138,'multiline':False]
['text':' can have python symbols, so we add a layer of indirection','line_number':139,'multiline':False]
['text':' see [Note: Compiled Autograd]','line_number':140,'multiline':False]
['text':' Given a list of (Node, input number) pairs computes the value of the graph','line_number':152,'multiline':False]
['text':' by following next_edge references.','line_number':153,'multiline':False]
['text':' Given a pre-populated GraphTask and GraphRoot, computes the backward pass','line_number':162,'multiline':False]
['text':' for the graph.','line_number':163,'multiline':False]
['text':'','line_number':164,'multiline':False]
['text':' NB: This API should only be used by internal autograd specific','line_number':165,'multiline':False]
['text':' machinery and shouldn't be exposed to users in anyway.','line_number':166,'multiline':False]
['text':' We pass cpu_ready_queue to evaluate_function, so that it knows','line_number':180,'multiline':False]
['text':' the correct ready queue to push to after a NodeTask is ready','line_number':181,'multiline':False]
['text':' Should be called after fork to notify that worker threads are gone','line_number':198,'multiline':False]
['text':' Must be called by subclass before destructing to avoid a data-race-on-vptr.','line_number':201,'multiline':False]
['text':' Initializes a device thread for the autograd engine.','line_number':204,'multiline':False]
['text':' initialize the thread local ready queue with the ready queue that is','line_number':214,'multiline':False]
['text':' created elsewhere (i.e. thread_init, Engine::execute, etc), or create a new','line_number':215,'multiline':False]
['text':' ready queue if ready_queue is not provided.','line_number':216,'multiline':False]
['text':' start device threads (CUDA, XLA, etc.) in Engine,','line_number':226,'multiline':False]
['text':' note that it does NOT start CPU thread.','line_number':227,'multiline':False]
['text':' Ensures device_ready_queues_ are initialized only once','line_number':235,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':236,'multiline':False]
['text':' Safe to read device_ready_queues_ without synchronization after','line_number':238,'multiline':False]
['text':' initialization','line_number':239,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':240,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':243,'multiline':False]
['text':' To protect reads and writes to final_callbacks_','line_number':245,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':246,'multiline':False]
['text':' How many nested reentrant calls are allowed until a new thread is used','line_number':249,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':250,'multiline':False]
['text':' Data structures used by the threads for executing reentrant backwards','line_number':254,'multiline':False]
['text':' tasks. See Note [Reentrant backwards]','line_number':255,'multiline':False]
['text':' Number of available threads for processing new GraphTasks.','line_number':256,'multiline':False]
['text':' The threads will wait on work_ to be notified of GraphTasks','line_number':258,'multiline':False]
['text':' To protect reads and writes to graphtask_queue_ and num_workers_','line_number':260,'multiline':False]
['text':' and for synchronizing creating new threads when needed','line_number':261,'multiline':False]
['text':' Workers will process the GraphTasks added to this queue. A GraphTask is','line_number':263,'multiline':False]
['text':' allocated inside Engine::execute and lives for the duration of execute','line_number':264,'multiline':False]
['text':' Temporary workaround until shutting down threads is done','line_number':270,'multiline':False]
['text':' We need shared ownership of all these objects because the threads are','line_number':271,'multiline':False]
['text':' leaked when Engine shuts down, so there may be threads waiting on work_ for','line_number':272,'multiline':False]
['text':' the graphtasks_queue_ to be nonempty.','line_number':273,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':274,'multiline':False]
['text':' Number of non-reentrant threads','line_number':278,'multiline':False]
['text':' Destructor will wait for non-reentrant threads to finish','line_number':280,'multiline':False]
['text':' stop() must be called before the destruction path goes down to the base','line_number':283,'multiline':False]
['text':' class, in order to avoid a data-race-on-vptr. Use this boolean to guard','line_number':284,'multiline':False]
['text':' whether stop() has already been called, so we can call this in every','line_number':285,'multiline':False]
['text':' destructor of the class hierarchy.','line_number':286,'multiline':False]
['text':' allow python_engine to override the default engine when it loads','line_number':290,'multiline':False]
['text':' namespace autograd','line_number':294,'multiline':False]
['text':' namespace torch','line_number':295,'multiline':False]
