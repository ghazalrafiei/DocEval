['text':' Copyright (c) Meta Platforms, Inc. and its affiliates.','line_number':1,'multiline':False]
['text':' All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' This source code is licensed under the BSD-style license found in the','line_number':4,'multiline':False]
['text':' LICENSE file in the root directory of this source tree.','line_number':5,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':85,'multiline':False]
['text':' The server may have crashed or may haven't started yet.','line_number':98,'multiline':False]
['text':' In such case, calling open() in blocking model blocks the client.','line_number':99,'multiline':False]
['text':' To avoid such issue, open it in non-blocking mode, and an OSError will','line_number':100,'multiline':False]
['text':' be raised if the server is not there.','line_number':101,'multiline':False]
['text':' Write request with no greater than select.PIPE_BUF is guarantee to be atomic.','line_number':107,'multiline':False]
['text':' For test only. Count the number of requests received.','line_number':172,'multiline':False]
['text':' For test only. Process all requests and stop the server.','line_number':174,'multiline':False]
['text':' Open the pipe in blocking mode blocks the server thread.','line_number':216,'multiline':False]
['text':' This is fine for the following reasons:','line_number':217,'multiline':False]
['text':'  1. No client case usually does not happen.','line_number':218,'multiline':False]
['text':'  2. We are running the watchdog loop in a separate daemon','line_number':219,'multiline':False]
['text':'     thread, which will not block the process to stop.','line_number':220,'multiline':False]
['text':' In case we have multiple expired timers, we find the first timer','line_number':239,'multiline':False]
['text':' with a valid signal (>0) in the expiration time order.','line_number':240,'multiline':False]
['text':' For named pipe, readline() is blocking when at least one writer opens.','line_number':267,'multiline':False]
['text':' It returns only when flush() is called at the writer side.','line_number':268,'multiline':False]
['text':' Note that flush() is automatically called inside close().','line_number':269,'multiline':False]
['text':' After the last writer closes, readline() is not blocking.','line_number':270,'multiline':False]
['text':' It will return an empty string when it's at end-of-file.','line_number':271,'multiline':False]
['text':' Since the client side always opens the pipe, writes a message and closes','line_number':272,'multiline':False]
['text':' the pipe immediately, the readline() call below is not blocking for long.','line_number':273,'multiline':False]
['text':' negative expiration is a proxy for a release call','line_number':303,'multiline':False]
['text':' pid -> [timer_requests...]','line_number':316,'multiline':False]
