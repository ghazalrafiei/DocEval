['text':' NB: Ignoring RRef leaks during shutdown. Without this, applications have to','line_number':49,'multiline':False]
['text':' make sure there is no references to any RRef in the application code and','line_number':50,'multiline':False]
['text':' Python GC has done its job to delete those RRefs. This is could result in bad','line_number':51,'multiline':False]
['text':' debugging experiences especially when for large applications. Therefore, by','line_number':52,'multiline':False]
['text':' default, we are going to ignore RRef leaks during shutdown. This is usually','line_number':53,'multiline':False]
['text':' fine as shutdown means applications have done training and no longer care','line_number':54,'multiline':False]
['text':' about states.','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':' To enable RRef leak checking, set this _ignore_rref_leak to False','line_number':57,'multiline':False]
['text':' Each `gathered_objects` is an empty dict at beginning.','line_number':89,'multiline':False]
['text':' The leader worker is elected as the first worker in a sorted worker','line_number':90,'multiline':False]
['text':' name list. Whenever there is a worker entering `_all_gather()`, it','line_number':91,'multiline':False]
['text':' runs `_gather_to_leader()` on the leader to add its own name and','line_number':92,'multiline':False]
['text':' data obj to this dict. The leader also adds itself's name to the dict','line_number':93,'multiline':False]
['text':' on calling `_all_gather()`.','line_number':94,'multiline':False]
['text':' Once `set(gathered_objects.keys()) == _ALL_WORKER_NAMES`, the leader','line_number':95,'multiline':False]
['text':' will broadcast the gathered dict to all follower workers and set their','line_number':96,'multiline':False]
['text':' `gathered_objects` field and the `proceed_signal` field.','line_number':97,'multiline':False]
['text':' All workers wait on this signal until it receives all gathered','line_number':99,'multiline':False]
['text':' objects.','line_number':100,'multiline':False]
['text':' States used by `def _all_gather()`.','line_number':104,'multiline':False]
['text':' `_ALL_WORKER_NAMES` is initialized on initializing RPC layer.','line_number':105,'multiline':False]
['text':' NB: backend implementation might have already set the rpc_agent.','line_number':117,'multiline':False]
['text':' Timeout is specified by agent for RPC calls','line_number':207,'multiline':False]
['text':' No timeout for signal','line_number':209,'multiline':False]
['text':' No timeout for RPC','line_number':212,'multiline':False]
['text':' No timeout for signal','line_number':214,'multiline':False]
['text':' Signal and RPC timeout use the same timeout','line_number':217,'multiline':False]
['text':' Phase 1: Followers send it's object to the leader','line_number':220,'multiline':False]
['text':' Timeout is either set by function parameter or None (which is indefinite)','line_number':234,'multiline':False]
['text':' Phase 2: Leader broadcast gathered results to all followers','line_number':237,'multiline':False]
['text':' Leader's signal is the first to be unblocked, after receiving all','line_number':238,'multiline':False]
['text':' followers' data objects.','line_number':239,'multiline':False]
['text':' Clean up for the states using the sequence_id','line_number':264,'multiline':False]
['text':' This is a dynamic group so we need to grab the token for the operation','line_number':366,'multiline':False]
['text':' In case of errors, continue to complete the local shutdown.','line_number':376,'multiline':False]
['text':' This raises a `TORCH_CHECK()` exception on RRef leak detected.','line_number':384,'multiline':False]
['text':' clean up python rpc handler in shutdown(), see comments in','line_number':388,'multiline':False]
['text':' PythonRpcHandler::cleanup(), call it in python API because the','line_number':389,'multiline':False]
['text':' cleanup() function has python dependency, it assumes python','line_number':390,'multiline':False]
['text':' interpreter exists.','line_number':391,'multiline':False]
['text':' No matter if RRef leak exception is raised, this clean-up code','line_number':392,'multiline':False]
['text':' must run to avoid destruction segfault in Python 3.5.','line_number':393,'multiline':False]
['text':'','line_number':394,'multiline':False]
['text':' future.wait() should not be called after shutdown().','line_number':395,'multiline':False]
['text':' pythonRpcHandler is cleaned up in shutdown(), after','line_number':396,'multiline':False]
['text':' shutdown(), python objects returned from rpc python call can not be','line_number':397,'multiline':False]
['text':' resolved.','line_number':398,'multiline':False]
['text':' Wrap result into a completed Future. This is so that if blocking=`False`','line_number':439,'multiline':False]
['text':' is specified, we return a future regardless of if this call is on user','line_number':440,'multiline':False]
['text':' or owner.','line_number':441,'multiline':False]
['text':' Combine the implementation class and the type class.','line_number':469,'multiline':False]
['text':' TypeError: metaclass conflict: the metaclass of a derived class','line_number':473,'multiline':False]
['text':' must be a (non-strict) subclass of the metaclasses of all its bases','line_number':474,'multiline':False]
['text':' Mypy doesn't understand __class__ (mypy bug #4177)','line_number':475,'multiline':False]
['text':' type: ignore[name-defined, misc, valid-type]','line_number':476,'multiline':False]
['text':' Combine the implementation class and the type class.','line_number':479,'multiline':False]
['text':' Types for classes expecting a certain generic parameter (mypy bug #7791)','line_number':480,'multiline':False]
['text':' type: ignore[misc, no-redef, valid-type]','line_number':481,'multiline':False]
['text':' Install docstrings from `PyRRef` to `RRef`.','line_number':485,'multiline':False]
['text':'','line_number':486,'multiline':False]
['text':' This is for the fact that pybind11 generates the parameter','line_number':487,'multiline':False]
['text':' `self` as type `rpc.PyRRef`, so a `:inherited-members:`','line_number':488,'multiline':False]
['text':' under `.. autoclass:: RRef` does not work.','line_number':489,'multiline':False]
['text':' we have to do the following process to replace `rpc.PyRRef` with `rpc.RRef`.','line_number':490,'multiline':False]
['text':'','line_number':491,'multiline':False]
['text':' Ignore magic methods, except "__str__".','line_number':502,'multiline':False]
['text':' Get pybind11 generated docstring.','line_number':506,'multiline':False]
['text':' It's like,','line_number':507,'multiline':False]
['text':' Do surgery on pybind11 generated docstrings.','line_number':518,'multiline':False]
['text':' Attach user-facing RRef method with modified docstring.','line_number':521,'multiline':False]
['text':' attach profiling information','line_number':670,'multiline':False]
['text':' Schedule profiling callbacks to run when the future completes.','line_number':733,'multiline':False]
['text':' This returns a future that is completed when the original future','line_number':734,'multiline':False]
['text':' completes and the profiling callbacks have been completed as well,','line_number':735,'multiline':False]
['text':' to guarantee that fut.wait() completes the profiling. This new','line_number':736,'multiline':False]
['text':' future will contain the same value as the original future.','line_number':737,'multiline':False]
['text':' Legacy profiler should be enabled. RPC profiling is not supported with','line_number':913,'multiline':False]
['text':' Kineto profiler.','line_number':914,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':918,'multiline':False]
['text':' Create appropriate string representation based on type of func','line_number':926,'multiline':False]
['text':' (builtin, script, python)','line_number':927,'multiline':False]
['text':' Build RPC profiling key.','line_number':936,'multiline':False]
['text':' Mypy doesn't support re-def of a variable not in the same block (#1174)','line_number':944,'multiline':False]
['text':' type: ignore[assignment]','line_number':945,'multiline':False]
