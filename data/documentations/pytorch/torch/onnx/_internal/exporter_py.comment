['text':' for onnx.ModelProto (ONNXProgram) and onnxruntime (ONNXRuntimeOptions)','line_number':1,'multiline':False]
['text':' We can only import onnx from this module in a type-checking context to ensure that','line_number':51,'multiline':False]
['text':' 'import torch.onnx' continues to work without having 'onnx' installed. We fully','line_number':52,'multiline':False]
['text':' 'import onnx' inside of dynamo_export (by way of _assert_dependencies).','line_number':53,'multiline':False]
['text':' type: ignore[import]','line_number':56,'multiline':False]
['text':' type: ignore[import]','line_number':57,'multiline':False]
['text':' type: ignore[import]','line_number':58,'multiline':False]
['text':' beartype needs this import due to runtime type checking.','line_number':65,'multiline':False]
['text':' This cannot be normally imported at top level due to','line_number':66,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/103764','line_number':67,'multiline':False]
['text':' The error will be handled elsewhere when the exporter is used.','line_number':70,'multiline':False]
['text':' NOTE: _registry is the registry maps OpNameto a list of ONNXFunctions. It is important','line_number':122,'multiline':False]
['text':' not to directly modify this variable. Instead, access to it should be done through','line_number':123,'multiline':False]
['text':' the public methods: register_custom_op, get_ops, and is_registered_op.','line_number':124,'multiline':False]
['text':' FIXME: Avoid importing onnxscript into torch','line_number':128,'multiline':False]
['text':' type: ignore[import]  # noqa: F401','line_number':129,'multiline':False]
['text':' TODO(titaiwang): get rid of this import','line_number':130,'multiline':False]
['text':' opset_version is unused for now, since torchlib only supports opset18.','line_number':134,'multiline':False]
['text':' TODO: get opset version from torchlib','line_number':135,'multiline':False]
['text':' Initialize registry from torchlib','line_number':142,'multiline':False]
['text':' TODO(titaiwang): subject to change if multiple opset_version is supported in torchlib','line_number':153,'multiline':False]
['text':' Public attributes MUST be redefined below without ``Optional[]`` from ``ExportOptions``','line_number':337,'multiline':False]
['text':' Private only attributes','line_number':344,'multiline':False]
['text':' type: ignore[name-defined]','line_number':362,'multiline':False]
['text':' TODO: Prevent circular dep','line_number':364,'multiline':False]
['text':' private','line_number':375,'multiline':False]
['text':' TODO(titaiwang, bowbao): Better way to annotate `onnxscript` types in diagnostics.','line_number':424,'multiline':False]
['text':' skip private attributes','line_number':436,'multiline':False]
['text':' This overrides the internal `FakeTensorMode` instance created by `torch._dynamo.export`[1].','line_number':493,'multiline':False]
['text':' It is a good idea to keep them in sync (constructor args) to maintain the same default behavior','line_number':494,'multiline':False]
['text':' [1] `torch/_dynamo/output_graph.py::InstructionTranslator::OutputGraph.__init__`','line_number':495,'multiline':False]
['text':' Mixed fake/real tensors are only allowed when `torch.onnx.dynamo_export` is not called within `FakeTensorMode`','line_number':496,'multiline':False]
['text':' This is needed because models can create new parameters during `forward(self, *args, **kwargs)` run','line_number':497,'multiline':False]
['text':' The patcher is needed for when user calls `fake_model.load_state_dict(...)` within fake mode','line_number':504,'multiline':False]
['text':' type: ignore[assignment]','line_number':511,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':571,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':595,'multiline':False]
['text':' ValueError: Message onnx.ModelProto exceeds maximum protobuf size of 2GB','line_number':597,'multiline':False]
['text':' Fallback to serializing the model with external data.','line_number':598,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':599,'multiline':False]
['text':' type: ignore[name-defined]','line_number':655,'multiline':False]
['text':' type: ignore[name-defined]','line_number':669,'multiline':False]
['text':' type: ignore[import]','line_number':711,'multiline':False]
['text':' model specified by the user has precedence, when specified','line_number':713,'multiline':False]
['text':' type: ignore[name-defined]','line_number':732,'multiline':False]
['text':' model specified by the user has precedence, when specified','line_number':887,'multiline':False]
['text':' model specified by the user has precedence, when specified','line_number':950,'multiline':False]
['text':' Add initializers when symbolic tracing is enabled','line_number':987,'multiline':False]
['text':' Load state from previous model.load_state_dict() call within enable_fake_mode() context','line_number':1001,'multiline':False]
['text':' ignore duplicate','line_number':1004,'multiline':False]
['text':' It is ok to ignore transient state_dict file created within context manager','line_number':1013,'multiline':False]
['text':' TODO: Should this be part of the serializer?','line_number':1026,'multiline':False]
['text':' Defer `import onnx` out of `import torch` path','line_number':1085,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/103764','line_number':1086,'multiline':False]
['text':' TODO: Should we populate ONNXProgram with more info, such _model_torch for easier debug?','line_number':1089,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':1091,'multiline':False]
['text':' TODO: Design the passes API','line_number':1128,'multiline':False]
['text':' TODO: Retire FXSymbolicTracer','line_number':1163,'multiline':False]
['text':' NOTE: FXSymbolicTracer would fail in this assert, as it does not use `enable_fake_mode`','line_number':1164,'multiline':False]
['text':' TODO: Defer `import onnxscript` out of `import torch` path','line_number':1178,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/103764','line_number':1179,'multiline':False]
['text':' NOTE: Filter out the initializers with fake tensors when it's fake_mode exporting.','line_number':1191,'multiline':False]
['text':' Otherwise, the ONNX exporter will fail: RuntimeError: basic_string::_M_construct null','line_number':1192,'multiline':False]
['text':' not valid.','line_number':1193,'multiline':False]
['text':' Concrete data is expected to be filled for those initializers later during `ONNXProgram.save`.','line_number':1194,'multiline':False]
['text':' Export TorchScript graph to ONNX ModelProto.','line_number':1205,'multiline':False]
['text':' Available for isinstance(self.model, ExportedProgram) only','line_number':1218,'multiline':False]
['text':' Case 1: Model with fake inputs/weights and without enabling fake mode','line_number':1225,'multiline':False]
['text':' Case 2: Model with non fake inputs/weights and enabled fake mode','line_number':1242,'multiline':False]
['text':' PyTorch runs lintrunner in CI without onnxscript installed','line_number':1329,'multiline':False]
['text':' type: ignore[import]','line_number':1330,'multiline':False]
['text':' type: ignore[name-defined]','line_number':1343,'multiline':False]
['text':' TODO: Import here to prevent circular dependency','line_number':1455,'multiline':False]
['text':' Apply decomposition table to the input graph.','line_number':1460,'multiline':False]
['text':' ONNX does not support views and mutations.','line_number':1469,'multiline':False]
['text':' Functionalize to get a semantically equivalent graph without mutations.','line_number':1470,'multiline':False]
['text':' Input mutations are detected and distilled after `Functionalize` pass.','line_number':1478,'multiline':False]
['text':' Remove them since ONNX inference does not need them.','line_number':1479,'multiline':False]
['text':' ONNX does not support concept of (implicit) type promotion.','line_number':1482,'multiline':False]
['text':' Insert type casts explicitly where needed.','line_number':1483,'multiline':False]
['text':' This operation should be invoked as the last pre export pass.','line_number':1495,'multiline':False]
['text':' See [NOTE: Modularize pass ordering]','line_number':1496,'multiline':False]
['text':' ONNX does not support None inputs. During graph building, all None inputs','line_number':1499,'multiline':False]
['text':' are removed. Here we register this step to input adapter.','line_number':1500,'multiline':False]
['text':' NOTE: temp workaround for https://github.com/pytorch/pytorch/issues/99534','line_number':1503,'multiline':False]
['text':' Dynamo doesn't support non-tensor inputs.','line_number':1504,'multiline':False]
['text':' ONNX does not support complex inputs. During graph building, all complex inputs','line_number':1507,'multiline':False]
['text':' are converted to real representation inputs. Here we register this step to','line_number':1508,'multiline':False]
['text':' input/output adapter.','line_number':1509,'multiline':False]
['text':' ONNX can't represent collection types (e.g., dictionary, tuple of tuple of','line_number':1514,'multiline':False]
['text':' tensor, etc), we flatten the collection and register each element as output.','line_number':1515,'multiline':False]
['text':' Output post-processing steps should happen after `FlattenOutputStep`.','line_number':1518,'multiline':False]
