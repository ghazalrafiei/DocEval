['text':' NOTE: This file is referenced by name at','line_number':1,'multiline':False]
['text':'       /opt/pytorch/torch/_dynamo/eval_frame.py::DONT_WRAP_FILES.','line_number':2,'multiline':False]
['text':'       introduced by https://github.com/pytorch/pytorch/pull/98894.','line_number':3,'multiline':False]
['text':'       If this file is renamed, moved, etc please update the reference there!','line_number':4,'multiline':False]
['text':' type: ignore[name-defined]','line_number':34,'multiline':False]
['text':' No need to translate callable to FX graph.','line_number':38,'multiline':False]
['text':' This FX Graph extractor assumes `model` was obtained through','line_number':39,'multiline':False]
['text':'     exported_program = torch.export.export(','line_number':40,'multiline':False]
['text':'         model,','line_number':41,'multiline':False]
['text':'         args=model_args,  # type: ignore[arg-type]','line_number':42,'multiline':False]
['text':'         kwargs=model_kwargs,  # type: ignore[arg-type]','line_number':43,'multiline':False]
['text':'     )','line_number':44,'multiline':False]
['text':' Export FX graph to ONNX ModelProto.','line_number':46,'multiline':False]
['text':' ONNX does not support None inputs. During graph building, all None inputs','line_number':54,'multiline':False]
['text':' are removed. Here we register this step to input adapter.','line_number':55,'multiline':False]
['text':' NOTE: temp workaround for https://github.com/pytorch/pytorch/issues/99534','line_number':58,'multiline':False]
['text':' Dynamo doesn't support non-tensor inputs.','line_number':59,'multiline':False]
['text':' ONNX does not support complex inputs. During graph building, all complex inputs','line_number':64,'multiline':False]
['text':' are converted to real representation inputs. Here we register this step to','line_number':65,'multiline':False]
['text':' input/output adapter.','line_number':66,'multiline':False]
['text':' ONNX can't represent collection types (e.g., dictionary, tuple of tuple of','line_number':75,'multiline':False]
['text':' tensor, etc), we flatten the collection and register each element as output.','line_number':76,'multiline':False]
['text':' Output post-processing steps should happen after `FlattenOutputStep`.','line_number':79,'multiline':False]
['text':' TODO: https://github.com/pytorch/pytorch/issues/114628','line_number':88,'multiline':False]
['text':' run_decomposition generates a new graph module with decomposed ops.','line_number':89,'multiline':False]
['text':' Thus, we need to run this step after io_adapters.','line_number':90,'multiline':False]
['text':' Export FX graph to ONNX ModelProto.','line_number':93,'multiline':False]
['text':' type: ignore[return-value]','line_number':94,'multiline':False]
['text':' TODO: Import here to prevent circular dependency','line_number':104,'multiline':False]
['text':' ONNX does not support concept of (implicit) type promotion.','line_number':109,'multiline':False]
['text':' Insert type casts explicitly where needed.','line_number':110,'multiline':False]
['text':' TODO: Disabled this pass until "Segmentation fault (core dumped)" is fixed','line_number':117,'multiline':False]
['text':' This operation should be invoked as the last pre export pass.','line_number':118,'multiline':False]
['text':' See [NOTE: Modularize pass ordering]','line_number':119,'multiline':False]
['text':' fx_module = passes.Modularize(diagnostic_context, fx_module).run()','line_number':120,'multiline':False]
