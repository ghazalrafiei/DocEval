['text':' Backends that do not support a specific collective','line_number':81,'multiline':False]
['text':' Sets showing that something is implemented','line_number':88,'multiline':False]
['text':' noqa: F401','line_number':155,'multiline':False]
['text':' This decorator helps avoiding initializing cuda while testing other backends','line_number':182,'multiline':False]
['text':' Verify error was logged in ddp_logging_data.','line_number':199,'multiline':False]
['text':' Remove C++ stacktrace if needed.','line_number':205,'multiline':False]
['text':' Save and unset TORCH_NCCL_ASYNC_ERROR_HANDLING','line_number':226,'multiline':False]
['text':' TORCH_NCCL_ASYNC_ERROR_HANDLING was unset','line_number':233,'multiline':False]
['text':' Save val of TORCH_NCCL_BLOCKING_WAIT and set it.','line_number':236,'multiline':False]
['text':' restore old values.','line_number':250,'multiline':False]
['text':' Only returns test return for last test, but since these are','line_number':278,'multiline':False]
['text':' unittests the return value is not really used and earlier tests','line_number':279,'multiline':False]
['text':' would've raised had they failed.','line_number':280,'multiline':False]
['text':' TSAN runs much slower.','line_number':374,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/75665','line_number':381,'multiline':False]
['text':' First sparse dimension is [0..rank].','line_number':416,'multiline':False]
['text':' Subsequent dimensions are always 0, so we know there is','line_number':417,'multiline':False]
['text':' a non-empty intersection between any two sparse tensors.','line_number':418,'multiline':False]
['text':' HELPER FOR MULTIGPU TESTS','line_number':451,'multiline':False]
['text':' If rank is less than or equal to number of available GPU's','line_number':461,'multiline':False]
['text':' then each rank can be mapped to corresponding GPU.','line_number':462,'multiline':False]
['text':' Set init method if specified.','line_number':484,'multiline':False]
['text':' Most tests operate with this worldsize','line_number':498,'multiline':False]
['text':' [How does MultiProcessTestCase work?]','line_number':501,'multiline':False]
['text':' Each MultiProcessTestCase instance uses 1 + `world_size()` processes, by','line_number':502,'multiline':False]
['text':' default `world_size()` returns 4. Let's take `test_rpc_spawn.py` as an','line_number':503,'multiline':False]
['text':' example which inherits from this class. Its `Setup()` methods calls into','line_number':504,'multiline':False]
['text':' `MultiProcessTestCase._spawn_processes()` which spawns `world_size()`','line_number':505,'multiline':False]
['text':' subprocesses. During the spawn, the main process passes the test name to','line_number':506,'multiline':False]
['text':' subprocesses, and the name is acquired from self.id(). The subprocesses','line_number':507,'multiline':False]
['text':' then use the provided test function name to retrieve the function attribute','line_number':508,'multiline':False]
['text':' from the test instance and run it. The main process simply waits for all','line_number':509,'multiline':False]
['text':' subprocesses to join.','line_number':510,'multiline':False]
['text':' This exit code is used to indicate that the test code had an error and','line_number':515,'multiline':False]
['text':' exited abnormally. There are certain tests that might use sys.exit() to','line_number':516,'multiline':False]
['text':' simulate failures and in those cases, we can't have an exit code of 0,','line_number':517,'multiline':False]
['text':' but we still want to ensure we didn't run into any other errors.','line_number':518,'multiline':False]
['text':' do not early terminate for distributed tests.','line_number':521,'multiline':False]
['text':' The main process spawns N subprocesses that run the test.','line_number':539,'multiline':False]
['text':' Constructor patches current instance test method to','line_number':540,'multiline':False]
['text':' assume the role of the main process and join its subprocesses,','line_number':541,'multiline':False]
['text':' or run the underlying test function.','line_number':542,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':550,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':551,'multiline':False]
['text':' pid to pipe consisting of error message from process.','line_number':554,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':555,'multiline':False]
['text':' Each Process instance holds a few open file descriptors. The unittest','line_number':561,'multiline':False]
['text':' runner creates a new TestCase instance for each test method and keeps','line_number':562,'multiline':False]
['text':' it alive until the end of the entire suite. We must thus reset the','line_number':563,'multiline':False]
['text':' processes to prevent an effective file descriptor leak.','line_number':564,'multiline':False]
['text':' self.id() == e.g. '__main__.TestDistributed.TestAdditive.test_get_rank'','line_number':568,'multiline':False]
['text':' Return traceback to the parent process.','line_number':610,'multiline':False]
['text':' Flush buffers and seek to read from the beginning','line_number':613,'multiline':False]
['text':' Start event listener thread.','line_number':631,'multiline':False]
['text':' Register signal handler to dump stack traces on FATALs.','line_number':640,'multiline':False]
['text':' Windows and MacOS do not support the signal handlers.','line_number':641,'multiline':False]
['text':' Show full C++ stacktraces when a Python error originating from C++ is raised.','line_number':643,'multiline':False]
['text':' self.id() == e.g. '__main__.TestDistributed.test_get_rank'','line_number':646,'multiline':False]
['text':' We're retrieving a corresponding test and executing it.','line_number':647,'multiline':False]
['text':' Send error to parent process.','line_number':661,'multiline':False]
['text':' Close pipe after done with test.','line_number':670,'multiline':False]
['text':' Wait for results.','line_number':686,'multiline':False]
['text':' Wait for traceback','line_number':689,'multiline':False]
['text':' check to see if any subprocess exited with an error early.','line_number':716,'multiline':False]
['text':' This is the exit code processes exit with if they','line_number':718,'multiline':False]
['text':' encountered an exception.','line_number':719,'multiline':False]
['text':' All processes have joined cleanly if they all a valid exitcode','line_number':731,'multiline':False]
['text':' Check if we should time out the test. If so, we terminate each process.','line_number':734,'multiline':False]
['text':' Sleep to avoid excessive busy polling.','line_number':744,'multiline':False]
['text':' Close all pipes','line_number':754,'multiline':False]
['text':' If no processes are spawned, there is nothing to check.','line_number':774,'multiline':False]
['text':' first, we check if there are errors in actual processes','line_number':780,'multiline':False]
['text':' (via TEST_ERROR_EXIT CODE), and raise an exception for those.','line_number':781,'multiline':False]
['text':' the reason we do this is to attempt to raise a more helpful error','line_number':782,'multiline':False]
['text':' message than "Process x terminated/timed out"','line_number':783,'multiline':False]
['text':' TODO: we should pipe the exception of the failed subprocess here.','line_number':784,'multiline':False]
['text':' Currently, the actual exception is displayed as a logging output.','line_number':785,'multiline':False]
['text':' Get error from pipe.','line_number':794,'multiline':False]
['text':' If no process exited uncleanly, we check for timeouts, and then ensure','line_number':803,'multiline':False]
['text':' each process exited cleanly.','line_number':804,'multiline':False]
['text':' Don't use unittest.skip to skip the test on sandcastle','line_number':820,'multiline':False]
['text':' since it creates tasks for skipped tests assuming there','line_number':821,'multiline':False]
['text':' is some follow-up needed. Instead just "pass" the test','line_number':822,'multiline':False]
['text':' with an appropriate message.','line_number':823,'multiline':False]
['text':' Cannot use functools.cache as it requires python 3.9','line_number':841,'multiline':False]
['text':' Exceptions are handled in MultiThreadedTestCase','line_number':900,'multiline':False]
['text':' trigger _terminate event and awaken worker threads','line_number':902,'multiline':False]
['text':' TODO: get test name from kwargs','line_number':918,'multiline':False]
['text':' join and error handling','line_number':920,'multiline':False]
['text':' super().setUp()  # TestCase.setUp() calls torch.manual_seed()','line_number':960,'multiline':False]
['text':' Show full C++ stacktraces when a Python error originating from C++ is raised.','line_number':974,'multiline':False]
['text':' for each test case, we need to create thread local world, and a global store','line_number':990,'multiline':False]
['text':' precision/rel_tol is a thread-local setting since it may be overridden per test, need to make','line_number':1010,'multiline':False]
['text':' every thread have the same value. This would be relevant when we use op db tests, where it','line_number':1011,'multiline':False]
['text':' needs those states to be set i.e. using instantiate_device_type_tests()','line_number':1012,'multiline':False]
['text':' TODO: figure out a better way to do this','line_number':1013,'multiline':False]
['text':' trigger _terminate event and awaken worker threads','line_number':1034,'multiline':False]
['text':' Print based on exceptions raised from threads','line_number':1071,'multiline':False]
['text':'   SkipTest: print info for each thread','line_number':1072,'multiline':False]
['text':'   TimeoutError: raise RuntimeError for any timed out thread','line_number':1073,'multiline':False]
['text':'   Normal Exception: print error for each thread that raises exception','line_number':1074,'multiline':False]
['text':'   and raise a RuntimeError','line_number':1075,'multiline':False]
['text':' check exceptions','line_number':1102,'multiline':False]
['text':' check skip','line_number':1105,'multiline':False]
['text':' "pass" the test with an appropriate message.','line_number':1110,'multiline':False]
['text':' self.id() == e.g. '__main__.TestDistributed.TestAdditive.test_get_rank'','line_number':1124,'multiline':False]
['text':' To avoid multiple inheritance from _dynamo.test_case.TestCase and MultiProcessTestCase,','line_number':1174,'multiline':False]
['text':' Just manually implement the most important part of the dynamo behavior to reset/clear.','line_number':1175,'multiline':False]
['text':' _exit_stack is set up in TestCase','line_number':1203,'multiline':False]
['text':' The rest is copypasta from MultiProcessTestCase._run','line_number':1251,'multiline':False]
