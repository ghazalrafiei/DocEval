['text':' TODO: Move LoggingTensor here.','line_number':5,'multiline':False]
['text':' Base class for wrapper-style tensors.','line_number':9,'multiline':False]
['text':' Ignore memory_format and pin memory for now as I don't know how to','line_number':27,'multiline':False]
['text':' safely access them on a Tensor (if possible??)','line_number':28,'multiline':False]
['text':' Should return both an example Tensor and a dictionary of kwargs','line_number':36,'multiline':False]
['text':' to override any of that example Tensor's properly.','line_number':37,'multiline':False]
['text':' This is very similar to the `t.new_*(args)` API','line_number':38,'multiline':False]
['text':' Skip this if not in debug mode?','line_number':42,'multiline':False]
['text':' Changing these on the python side is wrong as it would not be properly reflected','line_number':43,'multiline':False]
['text':' on the c++ side','line_number':44,'multiline':False]
['text':' This doesn't catch attributes set in the __init__','line_number':45,'multiline':False]
['text':' We disable torch function here to avoid any unwanted wrapping of the output','line_number':65,'multiline':False]
['text':' For everything else, call the handler:','line_number':73,'multiline':False]
['text':' Note that here, because we don't need to provide the autograd formulas','line_number':78,'multiline':False]
['text':' we can have a default "fallback" that creates a plain Tensor based','line_number':79,'multiline':False]
['text':' on the diag elements and calls the func again.','line_number':80,'multiline':False]
['text':' Otherwise, use a default implementation that construct dense','line_number':131,'multiline':False]
['text':' tensors and use that to compute values','line_number':132,'multiline':False]
['text':' Wrap back all Tensors into our custom class','line_number':136,'multiline':False]
['text':' Check for zeros and use that to get indices','line_number':138,'multiline':False]
['text':' To show how things happen later','line_number':144,'multiline':False]
['text':' Example non-wrapper subclass that stores extra state.','line_number':157,'multiline':False]
['text':' Do something with the extra state. For the example here, just store the name of the','line_number':171,'multiline':False]
['text':' last function called (skip for deepcopy so the copy has the same extra state).','line_number':172,'multiline':False]
['text':' new_empty() must be defined for deepcopy to work','line_number':182,'multiline':False]
['text':' Class used to store info about subclass tensors used in testing.','line_number':187,'multiline':False]
['text':' create_fn(shape) -> tensor instance','line_number':194,'multiline':False]
['text':' sparse semantics','line_number':217,'multiline':False]
