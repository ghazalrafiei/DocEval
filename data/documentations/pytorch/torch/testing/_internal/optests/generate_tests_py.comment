['text':' Don't perform autograd_registration_check if none of the inputs require grad.','line_number':72,'multiline':False]
['text':' NB: copy_inputs does nothing for aot_autograd_check: it always needs to copy','line_number':102,'multiline':False]
['text':' inputs.','line_number':103,'multiline':False]
['text':' aot_autograd_check runs func(*args, **kwargs) multiple times','line_number':111,'multiline':False]
['text':' and assumes `func` does not modify its inputs.','line_number':112,'multiline':False]
['text':' Test util requirements','line_number':120,'multiline':False]
['text':' - The test util must have signature (op: OpOverload, args, kwargs)','line_number':121,'multiline':False]
['text':' - The test util must NOT mutate args, kwargs.','line_number':122,'multiline':False]
['text':' - The test utils in this list must not be prefixes of each other. For example,','line_number':123,'multiline':False]
['text':'   having both "test_schema" and "test_schema_is_functional" is NOT OK.','line_number':124,'multiline':False]
['text':' - The order of items in this dict matters (for opcheck), we'll run them','line_number':125,'multiline':False]
['text':'   in order.','line_number':126,'multiline':False]
['text':' The default failures_dict_path is failures_dict.json in','line_number':199,'multiline':False]
['text':' the same directory as the test file.','line_number':200,'multiline':False]
['text':' check if we need to simplify the parametrize marks','line_number':234,'multiline':False]
['text':' NB: you need to add this mark to your pytest.ini','line_number':235,'multiline':False]
['text':' Special case for device, we want to run on all','line_number':247,'multiline':False]
['text':' devices','line_number':248,'multiline':False]
['text':' Operator not importable in this test file','line_number':285,'multiline':False]
['text':' We're about to delete the following test after Ed's PR','line_number':305,'multiline':False]
['text':' to specialize on C++ .size() calls','line_number':306,'multiline':False]
['text':' Could result in collisions, but unlikely. We'll raise if we see one below.','line_number':313,'multiline':False]
['text':' You can skip this test via the additional_decorators argument','line_number':317,'multiline':False]
['text':' in generate_opcheck_tests','line_number':318,'multiline':False]
['text':' remove potential pytest parametrization suffix','line_number':413,'multiline':False]
['text':' We will intercept calls to ops with these namespaces','line_number':455,'multiline':False]
['text':' The test utility function. Its signature should be (op, args, kwargs) -> None.','line_number':457,'multiline':False]
['text':' Examples of test utilities are: schema_check, make_fx_check','line_number':458,'multiline':False]
['text':' The name of the test that is running this OpCheckMode.','line_number':461,'multiline':False]
['text':' Maps qualname -> test_name -> skip/xfail','line_number':463,'multiline':False]
['text':' Tells us if we should skip a test or assert that there is a failure.','line_number':464,'multiline':False]
['text':' Location of the failures dict. Makes it so that the error message is better.','line_number':466,'multiline':False]
['text':' OpCheckMode surpresses errors, collects them here, and then raises them on exit.','line_number':469,'multiline':False]
['text':' Maps qualname -> List[(Exception, func, maybe args, maybe kwargs)]','line_number':470,'multiline':False]
['text':' Check expected failures first','line_number':474,'multiline':False]
['text':' Raise from the first error but also report about all of them to make','line_number':512,'multiline':False]
['text':' recording xfails easier.','line_number':513,'multiline':False]
['text':' We might get here if the input is already a FakeTensor','line_number':551,'multiline':False]
['text':' or if we're in a torch.compile block. Just ignore these','line_number':552,'multiline':False]
['text':' since we can't handle them and reporting them as failures','line_number':553,'multiline':False]
['text':' is too noisy.','line_number':554,'multiline':False]
['text':' Only intercept calls to operators','line_number':560,'multiline':False]
['text':' Pre-existing code may not use the .default overload. If we see an','line_number':569,'multiline':False]
['text':' OpOverloadPacket and we cannot resolve the overload, then we just throw','line_number':570,'multiline':False]
['text':' and ask the user to clarify. Otherwise, we attempt to resolve the overload.','line_number':571,'multiline':False]
['text':' Surpress all errors during execution. Raise them during __exit__.','line_number':584,'multiline':False]
['text':' json.dumps doesn't end with a newline. Let's add one because files','line_number':811,'multiline':False]
['text':' should end in newlines.','line_number':812,'multiline':False]
['text':' The default status is "xsuccess".','line_number':846,'multiline':False]
