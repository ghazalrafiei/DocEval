['text':' NOTE [Python References]','line_number':8,'multiline':False]
['text':' Python References emulate existing PyTorch operations, but can ultimately','line_number':9,'multiline':False]
['text':'   be expressed in terms of "primitive" operations from torch._prims.','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':' These references are experimental.','line_number':12,'multiline':False]
['text':' See https://dev-discuss.pytorch.org/t/tracing-with-primitives-update-0/577','line_number':13,'multiline':False]
['text':'   for additional context.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' Python Reference OpInfos should be added to the python_ref_db list below.','line_number':16,'multiline':False]
['text':'   Tests can opt-into running on these references by including','line_number':17,'multiline':False]
['text':'   that list in the Sequence they pass to the @ops decorator.','line_number':18,'multiline':False]
['text':'','line_number':19,'multiline':False]
['text':' When a Python Reference OpInfo is constructed a pointer to an','line_number':20,'multiline':False]
['text':'   existing OpInfo must be provided using the torch_opinfo_name kwarg.','line_number':21,'multiline':False]
['text':'   The existing OpInfo with that name and no variant will be found','line_number':22,'multiline':False]
['text':'   to inherit from.','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':' Instead of just inheriting the existing OpInfo's metadata, the','line_number':25,'multiline':False]
['text':'   Python Reference OpInfos inherit the existing OpInfo's','line_number':26,'multiline':False]
['text':'   construction arguments. These arguments can be overridden','line_number':27,'multiline':False]
['text':'   by adding kwargs to the constructor.','line_number':28,'multiline':False]
['text':' NOTE: searching the global op_db doesn't work when OpInfos are split into','line_number':35,'multiline':False]
['text':' different modules, as otherwise the op_db will not be fully constructed','line_number':36,'multiline':False]
['text':' yet. So, instead the local op_db must be passed in explicitly.','line_number':37,'multiline':False]
['text':' inherits metadata','line_number':47,'multiline':False]
['text':' TODO add a check for alias coverage','line_number':51,'multiline':False]
['text':' TODO: add a check for inplace coverage','line_number':53,'multiline':False]
['text':' Acquires inherited kwargs','line_number':57,'multiline':False]
['text':' Fixes metadata','line_number':60,'multiline':False]
['text':' Overrides metadata','line_number':73,'multiline':False]
['text':' At the moment no prims support autograd, so we must not run autograd','line_number':77,'multiline':False]
['text':' tests e.g. when testing dtype support.  Once we start writing autograd','line_number':78,'multiline':False]
['text':' formulas for prims this can be removed.','line_number':79,'multiline':False]
['text':' the stringname of the callable Python reference','line_number':96,'multiline':False]
['text':' the function variant of the operation, populated as torch.<name> if None','line_number':98,'multiline':False]
['text':' The database of opinfos to search for the parent opinfo','line_number':99,'multiline':False]
['text':' the string name of the corresponding torch opinfo','line_number':100,'multiline':False]
['text':' the variant name for corresponding torch opinfo','line_number':101,'multiline':False]
['text':' additional kwargs override kwargs inherited from the torch opinfo','line_number':104,'multiline':False]
['text':' the stringname of the callable Python reference','line_number':125,'multiline':False]
['text':' the function variant of the operation, populated as torch.<name> if None','line_number':127,'multiline':False]
['text':' The database of opinfos to search for the parent opinfo','line_number':128,'multiline':False]
['text':' the string name of the corresponding torch opinfo','line_number':129,'multiline':False]
['text':' the variant name for corresponding torch opinfo','line_number':130,'multiline':False]
['text':' additional kwargs override kwargs inherited from the torch opinfo','line_number':132,'multiline':False]
['text':' See https://github.com/pytorch/pytorch/issues/77216','line_number':143,'multiline':False]
['text':' the stringname of the callable Python reference','line_number':156,'multiline':False]
['text':' the function variant of the operation, populated as torch.<name> if None','line_number':158,'multiline':False]
['text':' The database of opinfos to search for the parent opinfo','line_number':159,'multiline':False]
['text':' the string name of the corresponding torch opinfo','line_number':160,'multiline':False]
['text':' the variant name for corresponding torch opinfo','line_number':161,'multiline':False]
['text':' additional kwargs override kwargs inherited from the torch opinfo','line_number':164,'multiline':False]
['text':' the stringname of the callable Python reference','line_number':186,'multiline':False]
['text':' the function variant of the operation, populated as torch.<name> if None','line_number':188,'multiline':False]
['text':' The database of opinfos to search for the parent opinfo','line_number':189,'multiline':False]
['text':' the string name of the corresponding torch opinfo','line_number':190,'multiline':False]
['text':' the variant name for corresponding torch opinfo','line_number':191,'multiline':False]
['text':' additional kwargs override kwargs inherited from the torch opinfo','line_number':193,'multiline':False]
