['text':' NB: do NOT test keepalive','line_number':86,'multiline':False]
['text':' Feel free to augment this with more fancy diffing logic','line_number':100,'multiline':False]
['text':' if needed for debugging','line_number':101,'multiline':False]
['text':' People do things like self.dim = dim inside autograd.Function.','line_number':152,'multiline':False]
['text':' These are benign.','line_number':153,'multiline':False]
['text':' subsequent usage should point to the original variable','line_number':358,'multiline':False]
['text':' Note: [On tensor.register_hook]','line_number':392,'multiline':False]
['text':'','line_number':393,'multiline':False]
['text':' register_hook on a tensor, AKA backward hooks, have slightly nuanced differences in how they are implemented','line_number':394,'multiline':False]
['text':' when it comes to hooks on objects with sources (inputs, params) vs objects without sources (intermediaries).','line_number':395,'multiline':False]
['text':'','line_number':396,'multiline':False]
['text':' For tensors with a source, we bypass direct inclusion of register_hook calls in the graph.','line_number':397,'multiline':False]
['text':' Instead, these are tracked and stashed as a global variable, enabling their association with tensors in','line_number':398,'multiline':False]
['text':' the residuals. During dynamo's frame creation, these hooks are invoked seamlessly on known reconstructible/fetch-able','line_number':399,'multiline':False]
['text':' tensors. Because a source indicates knowledge of this object outside the torch compile region, and','line_number':400,'multiline':False]
['text':' because we are running residuals firmly before .backward() can be run, it is sound to invoke','line_number':401,'multiline':False]
['text':' `register_hook` on a known tensor.','line_number':402,'multiline':False]
['text':'','line_number':403,'multiline':False]
['text':' For tensors without a source, we support a limited subset of hooks. Global functions only, and','line_number':404,'multiline':False]
['text':' compiled_autograd must be enabled or we will graph break.','line_number':405,'multiline':False]
['text':'','line_number':406,'multiline':False]
['text':' Handling the Handle: When a user retains the register_hook result in a handle, we intercept the','line_number':407,'multiline':False]
['text':' STORE_FAST operation to record the user-designated local variable name. This ensures the reconstructed','line_number':408,'multiline':False]
['text':' bytecode retains this name. If no handle is defined, we simply pop the generated value to keep the','line_number':409,'multiline':False]
['text':' stack intact.','line_number':410,'multiline':False]
['text':'','line_number':411,'multiline':False]
['text':' Dynamo Tensor Hooks Workflow:','line_number':412,'multiline':False]
['text':' - Functions passed to register_hook are lifted globally.','line_number':413,'multiline':False]
['text':' - For tensors with sources:','line_number':414,'multiline':False]
['text':'   - In the "side_effects" phase of codegen, we iterate over tensors with hooks to:','line_number':415,'multiline':False]
['text':'     - Generate the tensor.','line_number':416,'multiline':False]
['text':'     - Issue a register_hook call on the tensor, linking to the globally stored function.','line_number':417,'multiline':False]
['text':'     - Incorporate a handle if one was established in the eager phase.','line_number':418,'multiline':False]
['text':'  - For tensors without sources:','line_number':419,'multiline':False]
['text':'    - We don't generate any instructions for registering a hook.','line_number':420,'multiline':False]
['text':'    - Handles from intermediary hooks are NYI.','line_number':421,'multiline':False]
['text':'    - We produce a call function that utilizes the trace_wrapped higher order op, closing over it.','line_number':422,'multiline':False]
['text':'    - We then manually insert the call function above into the graph.','line_number':423,'multiline':False]
['text':' - The handle's exact user-specified name, "user_code_variable_name", is discerned and associated during STORE_FAST.','line_number':424,'multiline':False]
['text':' Let's go over how handles work.','line_number':430,'multiline':False]
['text':'','line_number':431,'multiline':False]
['text':' A handle is created from invoking `register_hook` on a tensor. A handle can be referenced at any','line_number':432,'multiline':False]
['text':' time after that, or never. In dynamo, we track and associate a name with a handle (user_code_variable_name) to','line_number':433,'multiline':False]
['text':' determine if a handle is accessed. If a handle has no user_code_variable_name, we just pop the produced value','line_number':434,'multiline':False]
['text':' off the top of the stack, discarding the handle.','line_number':435,'multiline':False]
['text':'','line_number':436,'multiline':False]
['text':' If a handle is seen, we store it under that name. This is extremely important, because, the handle','line_number':437,'multiline':False]
['text':' can be generated at any time after this point, and can be generated multiple times! If we were to defer','line_number':438,'multiline':False]
['text':' actual codegen of the handle object until we saw a codegen call to it - then we would end up generating multiple','line_number':439,'multiline':False]
['text':' register_hook calls, which is incorrect. This turns the codegen reconstruct(handle) call for the handle into','line_number':440,'multiline':False]
['text':' essentially a lookup.','line_number':441,'multiline':False]
['text':' register_hook stored with variable name assigned to the handle','line_number':446,'multiline':False]
['text':' register_hook stored w/o a variable name assigned to the handle','line_number':449,'multiline':False]
['text':' old[:] = new','line_number':456,'multiline':False]
['text':' clear','line_number':480,'multiline':False]
['text':' update','line_number':482,'multiline':False]
['text':' handled in codegen_save_tempvars','line_number':497,'multiline':False]
['text':' do all the actual mutations at the very end to handle dependencies','line_number':521,'multiline':False]
