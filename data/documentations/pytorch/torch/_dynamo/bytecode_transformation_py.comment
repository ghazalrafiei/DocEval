['text':' extra fields to make modification easier:','line_number':55,'multiline':False]
['text':' Python 3.11 remaps','line_number':114,'multiline':False]
['text':' don't rotate','line_number':161,'multiline':False]
['text':' rotate can be expressed as a sequence of swap operations','line_number':165,'multiline':False]
['text':' e.g. rotate 3 is equivalent to swap 3, swap 2','line_number':166,'multiline':False]
['text':' ensure desired rotate function exists','line_number':169,'multiline':False]
['text':' first byte - use 13 (no column info) is positions is','line_number':308,'multiline':False]
['text':' malformed, otherwise use 14 (long form)','line_number':309,'multiline':False]
['text':' for whatever reason, column offset needs `+ 1`','line_number':319,'multiline':False]
['text':' https://github.com/python/cpython/blob/1931c2a438c50e6250725c84dff94fc760b9b951/Python/compile.c#L7603','line_number':320,'multiline':False]
['text':' encode signed int','line_number':328,'multiline':False]
['text':' encode unsigned int','line_number':333,'multiline':False]
['text':' copy positions from the actual instruction','line_number':452,'multiline':False]
['text':' `arg` is expected to be bytecode offset, whereas `offset` is byte offset.','line_number':545,'multiline':False]
['text':' Divide since bytecode is 2 bytes large.','line_number':546,'multiline':False]
['text':' relative jump','line_number':550,'multiline':False]
['text':' byte offset between target and next instruction','line_number':551,'multiline':False]
['text':' forward jumps become backward','line_number':557,'multiline':False]
['text':' backward jumps become forward','line_number':561,'multiline':False]
['text':' see bytecode size comment in the absolute jump case above','line_number':565,'multiline':False]
['text':' find rightmost offset <= entry.end, since entry.end may not be','line_number':583,'multiline':False]
['text':' an actual instruction, e.g. if the end instruction is LOAD_GLOBAL,','line_number':584,'multiline':False]
['text':' which takes more than 2 bytes, then entry.end points to the end','line_number':585,'multiline':False]
['text':' of the LOAD_GLOBAL instruction, not the beginning.','line_number':586,'multiline':False]
['text':' account for prefixed EXTENDED_ARGS','line_number':621,'multiline':False]
['text':' point to the last 2 bytes of the end instruction','line_number':625,'multiline':False]
['text':' Dynamo may construct nested exception table entries for convenience,','line_number':640,'multiline':False]
['text':' but Python expects exception table entries to not overlap.','line_number':641,'multiline':False]
['text':' NOTE: below, "keys" refer to old instruction entries' starts and ends,','line_number':642,'multiline':False]
['text':' and "entries" refer to the generated exception table entries.','line_number':643,'multiline':False]
['text':' Sort keys by increasing start, then decreasing end','line_number':645,'multiline':False]
['text':' smallest byte that the next exception table entry can start at','line_number':647,'multiline':False]
['text':' stack of current nested keys','line_number':649,'multiline':False]
['text':' pop keys that are no longer nested over the current key','line_number':667,'multiline':False]
['text':' create an entry covering to the current key, if possible','line_number':671,'multiline':False]
['text':' Propagation of nested entries works since nested entries come later','line_number':725,'multiline':False]
['text':' in sorted order.','line_number':726,'multiline':False]
['text':' modify inst in-place to preserve jump target','line_number':783,'multiline':False]
['text':' also update the following CALL instruction','line_number':811,'multiline':False]
['text':' Leave this instruction alone for now so we never shrink code','line_number':830,'multiline':False]
['text':' from https://github.com/python/cpython/blob/v3.11.1/Include/internal/pycore_opcode.h#L41','line_number':852,'multiline':False]
['text':' TODO use the actual object instead, can interface from eval_frame.c','line_number':853,'multiline':False]
['text':' NOTE: stronger comparison is required, since we have','line_number':915,'multiline':False]
['text':' examples where two values compare equal but have','line_number':916,'multiline':False]
['text':' different semantic meaning in some cases, e.g.','line_number':917,'multiline':False]
['text':' 0.0 == -0.0 but have different effects in torch.copysign.','line_number':918,'multiline':False]
['text':' compute instruction arg from argval if arg is not provided','line_number':926,'multiline':False]
['text':' argval is prioritized over arg','line_number':954,'multiline':False]
['text':' 3.11 LOAD_GLOBAL requires both arg and argval - see create_load_global','line_number':958,'multiline':False]
['text':' NOTE: only update argval if arg is not provided. This assumes','line_number':977,'multiline':False]
['text':' that any additions to co_consts are appended.','line_number':978,'multiline':False]
['text':' cannot use a dictionary since consts may not be hashable','line_number':980,'multiline':False]
['text':' Python 3.11 changes to code keys are not fully documented.','line_number':987,'multiline':False]
['text':' See https://github.com/python/cpython/blob/3.11/Objects/clinic/codeobject.c.h#L24','line_number':988,'multiline':False]
['text':' for new format.','line_number':989,'multiline':False]
['text':' not documented, but introduced in https://github.com/python/cpython/issues/84403','line_number':1014,'multiline':False]
['text':' also implicitly checks for no duplicate instructions','line_number':1040,'multiline':False]
['text':' temporary code object with updated names','line_number':1046,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':1048,'multiline':False]
['text':' this pass might change offsets, if so we need to try again','line_number':1055,'multiline':False]
