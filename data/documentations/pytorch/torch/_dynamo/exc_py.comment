['text':' These exceptions are ok to fallback to eager/graph_break.','line_number':168,'multiline':False]
['text':' This function calls unimplemented internally and eventually graph breaks','line_number':178,'multiline':False]
['text':' or falls to eager. unimplemented itself does not print any user warnings,','line_number':179,'multiline':False]
['text':' i.e., its very silent. This helper function is intended when an error is','line_number':180,'multiline':False]
['text':' encountered in the torch.compile stack which is worth showing as warning','line_number':181,'multiline':False]
['text':' to the user. For example, if AOT Autograd backend fails with a fake tensor','line_number':182,'multiline':False]
['text':' exception, its ok to fallback to eager but not silently. Here, we can use','line_number':183,'multiline':False]
['text':' this function to log the message and the stack trace.','line_number':184,'multiline':False]
['text':' KeyError has special handling for its args','line_number':201,'multiline':False]
['text':' see https://github.com/python/cpython/blob/3.11/Objects/exceptions.c#L2534 for details','line_number':202,'multiline':False]
['text':' NB: it's possible for real_stack to be []; we still attempt to','line_number':265,'multiline':False]
['text':' report a stack anyway because the stack_above_dynamo may still','line_number':266,'multiline':False]
['text':' be useful for debugging','line_number':267,'multiline':False]
['text':' NB: frame is PyInterpreterFrame on Python 3.11 and later,','line_number':271,'multiline':False]
['text':' not a TRUE frame object.  You can't actually feed it','line_number':272,'multiline':False]
['text':' to traceback because it doesn't have enough information.','line_number':273,'multiline':False]
['text':' To solve this problem, we technically should just materialize','line_number':274,'multiline':False]
['text':' the frame, the same way _PyFrame_GetFrameObject would do','line_number':275,'multiline':False]
['text':' (but we cannot actually do this, because this populates','line_number':276,'multiline':False]
['text':' frame_obj field, which default eval frame doesn't like).','line_number':277,'multiline':False]
['text':'','line_number':278,'multiline':False]
['text':' Fortunately, in this case, we can hack it: there's no need','line_number':279,'multiline':False]
['text':' to actually use the truly top frame, we can just extract','line_number':280,'multiline':False]
['text':' from where we are right now and rely on filter_stack to','line_number':281,'multiline':False]
['text':' get rid of all the dynamo frames.  For ease of testing','line_number':282,'multiline':False]
['text':' we apply this behavior to ALL Python versions','line_number':283,'multiline':False]
['text':' filter out all frames after entering dynamo','line_number':289,'multiline':False]
