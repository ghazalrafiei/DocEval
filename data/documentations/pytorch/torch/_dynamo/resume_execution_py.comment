['text':' taken from code.h in cpython','line_number':20,'multiline':False]
['text':' If we do not want to destroy the stack, we can do the same thing as a','line_number':38,'multiline':False]
['text':' `SETUP_WITH` block, only that we store the context manager in a local_symbol','line_number':39,'multiline':False]
['text':' PUSH_EXC_INFO','line_number':137,'multiline':False]
['text':' RERAISE 0','line_number':139,'multiline':False]
['text':' COPY 3','line_number':140,'multiline':False]
['text':' PUSH_EXC_INFO','line_number':254,'multiline':False]
['text':' RERAISE 2','line_number':260,'multiline':False]
['text':' COPY 3','line_number':261,'multiline':False]
['text':' POP_TOP','line_number':275,'multiline':False]
['text':' Python 3.11+ fields','line_number':283,'multiline':False]
['text':' NOTE: Python 3.11 removed blocks, but for our purposes, a "block" consists','line_number':284,'multiline':False]
['text':' of instructions of all exception table entries that have the same target.','line_number':285,'multiline':False]
['text':' map from PUSH_EXC_INFO's in the prefix to original block target offset','line_number':287,'multiline':False]
['text':' map from new block target offsets to original block target offsets','line_number':291,'multiline':False]
['text':' only used in Python 3.11+','line_number':333,'multiline':False]
['text':' map old hook targets to new targets generated by the hook','line_number':408,'multiline':False]
['text':' reverse the mapping since targets of later/nested contexts are inserted','line_number':429,'multiline':False]
['text':' into the mapping later, but show up earlier in the prefix.','line_number':430,'multiline':False]
['text':' because the line number table monotonically increases from co_firstlineno','line_number':439,'multiline':False]
['text':' remove starts_line for any instructions before the graph break instruction','line_number':440,'multiline':False]
['text':' this will ensure the instructions after the break have the correct line numbers','line_number':441,'multiline':False]
['text':' remap original instructions' exception table entries','line_number':453,'multiline':False]
['text':' TODO(jansel): add dead code elimination here','line_number':465,'multiline':False]
['text':' match the functions starting at the last instruction as we have added a prefix','line_number':502,'multiline':False]
['text':' setup_fn_target_offsets currently contains the target offset of','line_number':514,'multiline':False]
['text':' each setup_fn, based on `code`. When we codegen the resume function','line_number':515,'multiline':False]
['text':' based on the original code object, `meta.code`, the offsets in','line_number':516,'multiline':False]
['text':' setup_fn_target_offsets must be based on `meta.code` instead.','line_number':517,'multiline':False]
['text':' NOTE: each prefix block generates exactly one PUSH_EXC_INFO,','line_number':524,'multiline':False]
['text':' so we can tell which block a prefix PUSH_EXC_INFO belongs to,','line_number':525,'multiline':False]
['text':' by counting. Then we can use meta.prefix_block-target_offset_remap','line_number':526,'multiline':False]
['text':' to determine where in the original code the PUSH_EXC_INFO offset','line_number':527,'multiline':False]
['text':' replaced.','line_number':528,'multiline':False]
['text':' offsets into prefix','line_number':538,'multiline':False]
['text':' old bytecode targets are after the prefix PUSH_EXC_INFO's','line_number':544,'multiline':False]
['text':' offsets into old bytecode','line_number':548,'multiline':False]
['text':' if offset is not in setup_fn_target_offsets, it is an error','line_number':565,'multiline':False]
