['text':' logically this is a set, but we use a dict to ensure deterministic ordering','line_number':30,'multiline':False]
['text':' In HigherOrderOperator tracing, we need to distinguish','line_number':54,'multiline':False]
['text':' between MutableLocals inside the HigherOrderOperator and','line_number':55,'multiline':False]
['text':' ones outside it. For example, it is not safe to mutate','line_number':56,'multiline':False]
['text':' `a` in the following example because it was constructed','line_number':57,'multiline':False]
['text':' in a different scope.','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':' def f(x):','line_number':60,'multiline':False]
['text':'     a = 1','line_number':61,'multiline':False]
['text':'     def g(x):','line_number':62,'multiline':False]
['text':'         nonlocal a','line_number':63,'multiline':False]
['text':'         a = 2','line_number':64,'multiline':False]
['text':'         return x','line_number':65,'multiline':False]
['text':'     return wrap(g, x) + a','line_number':66,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':' We use self.scope to distinguish this.','line_number':68,'multiline':False]
['text':' scope == 0: The object was an existing variable','line_number':69,'multiline':False]
['text':' scope == 1: The object was created while Dynamo','line_number':70,'multiline':False]
['text':'             was introspecting a function','line_number':71,'multiline':False]
['text':'             (and no HigherOrderOps were involved)','line_number':72,'multiline':False]
['text':' scope >= 2: The object was created through','line_number':73,'multiline':False]
['text':'             Dynamo introspection of a HigherOrderOp.','line_number':74,'multiline':False]
['text':'             The exact number corresponds to the level','line_number':75,'multiline':False]
['text':'             of nested HigherOrderOps.','line_number':76,'multiline':False]
['text':' In the top-level scope (if no HigherOrderOperators are involved),','line_number':109,'multiline':False]
['text':' we are allowed to modify variables created in this scope as well','line_number':110,'multiline':False]
['text':' as existing variables.','line_number':111,'multiline':False]
['text':' Otherwise, only allow local mutation of variables created in the current scope','line_number':114,'multiline':False]
['text':' fields to leave unmodified in apply()','line_number':145,'multiline':False]
['text':' Whether we should skip applying to this var','line_number':172,'multiline':False]
['text':' running fn() resulted in value getting realized,','line_number':203,'multiline':False]
['text':' which means we missed updating the contents of result','line_number':204,'multiline':False]
['text':' save `value` to keep it alive and ensure id() isn't reused','line_number':222,'multiline':False]
['text':' visit children 1 level deep and ensure parent is set properly','line_number':379,'multiline':False]
