['text':' [Note: __torch_function__] This feature is a prototype and has some rough edges (contact mlazos with issues):','line_number':18,'multiline':False]
['text':' At a high level, a torch function tensor subclass is represented as a TensorWithTFOverrideVariable, which dispatches','line_number':19,'multiline':False]
['text':' __torch_function__ on attribute accesses, method calls, and torch API calls.','line_number':20,'multiline':False]
['text':' The following is not supported:','line_number':21,'multiline':False]
['text':' - triggering __torch_function__ on tensor subclass non-tensor custom attributes','line_number':22,'multiline':False]
['text':' - graph breaking on mutating guardable tensor properties within a __torch_function__ context, this can cause','line_number':23,'multiline':False]
['text':' excessive recompiles in certain degenerate cases','line_number':24,'multiline':False]
['text':' - Matching the exact eager behavior of *ignoring* __torch_function__ objects in non-tensor argument positions of Torch API calls','line_number':25,'multiline':False]
['text':' The following is supported:','line_number':27,'multiline':False]
['text':' - static method impls of __torch_function__ on custom objects; this will trigger on torch API calls with the object as','line_number':28,'multiline':False]
['text':' any argument','line_number':29,'multiline':False]
['text':' - triggering __torch_function__ on torch API calls with tensor subclass arguments','line_number':30,'multiline':False]
['text':' - __torch_function__ calls on base tensor attribute access and method calls for tensor subclass instances','line_number':31,'multiline':False]
['text':' - matches the dispatch ordering behavior of eager __torch_function__ with subclass/object argumnents in any argument position','line_number':32,'multiline':False]
['text':' See https://docs.google.com/document/d/1WBxBSvW3NXhRp9ncmtokJloMLCtF4AYNhJaffvHe8Kw/edit#heading=h.vacn73lozd9w','line_number':34,'multiline':False]
['text':' for more information on the design.','line_number':35,'multiline':False]
['text':' To enable subclass behavior, add your tensor subclass type to traceable_tensor_subclasses in dynamo/config.py','line_number':37,'multiline':False]
['text':' signature:','line_number':79,'multiline':False]
['text':' def __torch_function__(cls, func, types, args=(), kwargs=None):','line_number':80,'multiline':False]
['text':' stash the subclass type to rewrap an output tensor if needed','line_number':153,'multiline':False]
['text':' this is needed because the actual type needs to be available','line_number':154,'multiline':False]
['text':' each time the compiled artifact is run and outputs a wrapped tensor.','line_number':155,'multiline':False]
['text':' [Note: __torch_function__] We currently only support attributes that are defined on','line_number':171,'multiline':False]
['text':' base tensors, custom attribute accesses will graph break.','line_number':172,'multiline':False]
['text':' This code block implements inlining the __torch_function__ override','line_number':224,'multiline':False]
['text':' of `call_method`.','line_number':225,'multiline':False]
['text':' [Note: __torch_function__] Currently we only support methods that are defined on tensor','line_number':236,'multiline':False]
['text':' we will graph break in other cases this will need a bigger overhaul of extracting methods/comparing them for equality','line_number':237,'multiline':False]
['text':' We've established with the above check that the method is not overridden, so we guard that the method is the same','line_number':238,'multiline':False]
['text':' as the impl defined on tensor and retrieve it','line_number':239,'multiline':False]
