['text':' Set running flag to false then notify all threads.','line_number':47,'multiline':False]
['text':' Set task and signal condition variable so that a worker thread will','line_number':86,'multiline':False]
['text':' wake up and use the task.','line_number':87,'multiline':False]
['text':' Wait on condition variable while the task is empty and','line_number':101,'multiline':False]
['text':' the pool is still running.','line_number':102,'multiline':False]
['text':' If pool is no longer running, break out of loop.','line_number':104,'multiline':False]
['text':' Copy task locally and remove from the queue.  This is','line_number':109,'multiline':False]
['text':' done within its own scope so that the task object is','line_number':110,'multiline':False]
['text':' destructed immediately after running the task.  This is','line_number':111,'multiline':False]
['text':' useful in the event that the function contains','line_number':112,'multiline':False]
['text':' shared_ptr arguments bound via bind.','line_number':113,'multiline':False]
['text':' Decrement count, indicating thread is no longer available.','line_number':117,'multiline':False]
['text':' Run the task.','line_number':122,'multiline':False]
['text':' Destruct tasks before taking the lock.  As tasks','line_number':135,'multiline':False]
['text':' are user provided std::function, they can run','line_number':136,'multiline':False]
['text':' arbitrary code during destruction, including code','line_number':137,'multiline':False]
['text':' that can reentrantly call into ThreadPool (which would','line_number':138,'multiline':False]
['text':' cause a deadlock if we were holding the lock).','line_number':139,'multiline':False]
['text':' Update status of empty, maybe','line_number':142,'multiline':False]
['text':' Need to recover the lock first','line_number':143,'multiline':False]
['text':' Increment count, indicating thread is available.','line_number':146,'multiline':False]
['text':' Deliberately hold the lock on the backedge, so this thread has an','line_number':153,'multiline':False]
['text':' opportunity to acquire a new task before another thread acquires','line_number':154,'multiline':False]
['text':' the lock.','line_number':155,'multiline':False]
['text':' while running_','line_number':156,'multiline':False]
['text':' namespace c10','line_number':165,'multiline':False]
