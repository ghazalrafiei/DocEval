['text':'*
 * GeneratorImpl class implementation
 ','line_number':17,'multiline':True]
['text':'*
 * Clone this generator. Note that clone() is the only
 * method for copying for Generators in ATen.
 ','line_number':23,'multiline':True]
['text':'*
 * Gets the device of a generator.
 ','line_number':34,'multiline':True]
['text':'*
 * Gets a random number for /dev/urandom
 * Note this is a legacy method (from THRandom.cpp)
 * FIXME: use std::random_device with entropy information
 ','line_number':43,'multiline':True]
['text':' _WIN32','line_number':60,'multiline':False]
['text':'*
 * Gets a non deterministic random number number from either the
 * /dev/urandom or the current time. For CUDA, gets random from
 * std::random_device and adds a transformation on it. For Intel SGX
 * platform use sgx_read_rand as reading from /dev/urandom is
 * prohibited on that platform.
 *
 * FIXME: The behavior in this function is from legacy code
 * (THRandom_seed/THCRandom_seed) and is probably not the right thing to do,
 * even though our tests pass. Figure out if tests get perturbed
 * - when the same algorithm is used for all backends. Note that the current
 * behavior is different for CPU, CUDA and Windows CPU.
 * - when using C++11 std objects, such as std::random_device
 * - when constructing a 64 bit seed properly, rather than static casting
 *   a 32 bit number to 64 bit.
 ','line_number':62,'multiline':True]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':79,'multiline':False]
['text':' limit to 53 bits to ensure unique representation in double','line_number':95,'multiline':False]
['text':' namespace detail','line_number':101,'multiline':False]
['text':' namespace c10','line_number':102,'multiline':False]
