['text':' A DataPtr is a unique pointer (with an attached deleter and some','line_number':15,'multiline':False]
['text':' context for the deleter) to some memory, which also records what','line_number':16,'multiline':False]
['text':' device is for its data.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' nullptr DataPtrs can still have a nontrivial device; this allows','line_number':19,'multiline':False]
['text':' us to treat zero-size allocations uniformly with non-zero allocations.','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' Choice of CPU here is arbitrary; if there's an "undefined" device','line_number':28,'multiline':False]
['text':' we could use that too','line_number':29,'multiline':False]
['text':'*
   * Compare the deleter in a DataPtr to expected_deleter.
   * If it matches, replace the deleter with new_deleter
   * and return true; otherwise, does nothing and returns
   * false.
   *
   * In general, it is not safe to unconditionally set the
   * deleter on a DataPtr, because you don't know what
   * the deleter is, and thus will have a hard time properly
   * disposing of the deleter without storing the original
   * deleter (this is difficult to do, because DeleterFnPtr
   * is not a closure, and because the context on DataPtr is
   * only a single word, you generally don't have enough
   * space to store both the original deleter and its context).
   * However, in some cases, you know /exactly/ what the deleter
   * is, and you have a new deleter that manually wraps
   * the old one.  In this case, you can safely swap the deleter
   * after asserting that the deleters line up.
   *
   * What are the requirements on new_deleter?  It must still
   * properly dispose of the void* pointer passed in as its argument,
   * where void* is whatever the context of the original deleter
   * is.  So in general, you expect the new deleter to look something
   * like this:
   *
   *      [](void* ptr) {
   *        some_new_stuff(ptr);
   *        get_orig_allocator()->raw_deleter(ptr);
   *      }
   *
   * Note that it won't work to close over the original
   * allocator; you don't have enough space to do that!  Also,
   * it's unsafe to assume that the passed in pointer in
   * question is the memory pointer in question; it might not
   * be; be sure to read the source code of the Allocator
   * in question to confirm this.
   ','line_number':65,'multiline':True]
['text':' Unsafely mutates the device on a DataPtr.  Under normal use,','line_number':110,'multiline':False]
['text':' you should never actually need to call this function.','line_number':111,'multiline':False]
['text':' We need this for the implementation of the hack detailed','line_number':112,'multiline':False]
['text':' in Note [Masquerading as CUDA]','line_number':113,'multiline':False]
['text':' NB: Device is NOT tested for here; a CUDA nullptr is as much a nullptr as a','line_number':119,'multiline':False]
['text':' CPU nullptr','line_number':120,'multiline':False]
['text':' Note [raw_allocate/raw_deallocate and Thrust]','line_number':135,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':136,'multiline':False]
['text':' Thrust's support for custom allocators requires us to write something','line_number':137,'multiline':False]
['text':' like this:','line_number':138,'multiline':False]
['text':'','line_number':139,'multiline':False]
['text':'  class ThrustAllocator {','line_number':140,'multiline':False]
['text':'    char* allocate(size_t);','line_number':141,'multiline':False]
['text':'    void deallocate(char*, size_t);','line_number':142,'multiline':False]
['text':'  };','line_number':143,'multiline':False]
['text':'','line_number':144,'multiline':False]
['text':' This is not good for our unique_ptr based allocator interface, as','line_number':145,'multiline':False]
['text':' there is no way to get to the context when we free.','line_number':146,'multiline':False]
['text':'','line_number':147,'multiline':False]
['text':' However, in some cases the context is exactly the same as','line_number':148,'multiline':False]
['text':' the data pointer.  In this case, we can support the "raw"','line_number':149,'multiline':False]
['text':' allocate and deallocate interface.  This is what','line_number':150,'multiline':False]
['text':' raw_deleter signifies.  By default, it returns a nullptr, which means that','line_number':151,'multiline':False]
['text':' the raw interface is not implemented.  Be sure to implement it whenever','line_number':152,'multiline':False]
['text':' possible, or the raw interface will incorrectly reported as unsupported,','line_number':153,'multiline':False]
['text':' when it is actually possible.','line_number':154,'multiline':False]
['text':' If this returns a non nullptr, it means that allocate()','line_number':161,'multiline':False]
['text':' is guaranteed to return a unique_ptr with this deleter attached;','line_number':162,'multiline':False]
['text':' it means the rawAllocate and rawDeallocate APIs are safe to use.','line_number':163,'multiline':False]
['text':' This function MUST always return the same BoundDeleter.','line_number':164,'multiline':False]
['text':' This context is used to generate DataPtr which have arbitrary','line_number':180,'multiline':False]
['text':' std::function deleters associated with them.  In some user facing','line_number':181,'multiline':False]
['text':' functions, we give a (user-friendly) interface for constructing','line_number':182,'multiline':False]
['text':' tensors from external data which take an arbitrary std::function','line_number':183,'multiline':False]
['text':' deleter.  Grep for InefficientStdFunctionContext to find these','line_number':184,'multiline':False]
['text':' occurrences.','line_number':185,'multiline':False]
['text':'','line_number':186,'multiline':False]
['text':' This context is inefficient because we have to do a dynamic','line_number':187,'multiline':False]
['text':' allocation InefficientStdFunctionContext, on top of the dynamic','line_number':188,'multiline':False]
['text':' allocation which is implied by std::function itself.','line_number':189,'multiline':False]
['text':'* Set the allocator for DeviceType `t`. The passed in allocator pointer is
 *  expected to have static lifetime; this function does NOT take ownership
 *  of the raw pointer. (The reason for this is to prevent existing pointers
 *  to an allocator of a particular device from being invalidated when
 *  SetAllocator is called.)
 *
 *  Also note that this is not thread-safe, and we assume this function will
 *  only be called during initialization.
 *
 *  The 'priority' flag is introduced when we want to overwrite the default
 *  allocator, since the allocators are set statically. The default priority
 *  is 0, which means the lowest. Only higher or equal priority can overwrite
 *  existing ones.
 ','line_number':201,'multiline':True]
['text':' An interface for reporting thread local memory usage','line_number':230,'multiline':False]
['text':' per device','line_number':231,'multiline':False]
['text':'*
   * alloc_size corresponds to the size of the ptr.
   *
   * total_allocated corresponds to total allocated memory.
   *
   * total_reserved corresponds to total size of memory pool, both used and
   * unused, if applicable.
   ','line_number':236,'multiline':True]
['text':' used to hold traceback information in allocators','line_number':274,'multiline':False]
['text':' namespace c10','line_number':279,'multiline':False]
