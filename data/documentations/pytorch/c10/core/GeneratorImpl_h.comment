['text':'*
 * Note [Generator]
 * ~~~~~~~~~~~~~~~~
 * A Pseudo Random Number Generator (PRNG) is an engine that uses an algorithm
 * to generate a seemingly random sequence of numbers, that may be later be used
 * in creating a random distribution. Such an engine almost always maintains a
 * state and requires a seed to start off the creation of random numbers. Often
 * times, users have found it beneficial to be able to explicitly create,
 * retain, and destroy PRNG states and also be able to have control over the
 * seed value.
 *
 * A Generator in ATen gives users the ability to read, write and modify a PRNG
 * engine. For instance, it does so by letting users seed a PRNG engine, fork
 * the state of the engine, etc.
 *
 * By default, there is one generator per device, and a device's generator is
 * lazily created. A user can use the torch.Generator() api to create their own
 * generator. Currently torch.Generator() can only create a CPUGeneratorImpl.
 ','line_number':13,'multiline':True]
['text':'*
 * Note [Acquire lock when using random generators]
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Generator and its derived classes are NOT thread-safe. Please note that most
 * of the places where we have inserted locking for generators are historically
 * based, and we haven't actually checked that everything is truly thread safe
 * (and it probably isn't). Please use the public mutex_ when using any methods
 * from these classes, except for the read-only methods. You can learn about the
 * usage by looking into the unittests (aten/src/ATen/cpu_generator_test.cpp)
 * and other places where we have used lock_guard.
 *
 * TODO: Look into changing the threading semantics of Generators in ATen (e.g.,
 * making them non-thread safe and instead making the generator state
 * splittable, to accommodate forks into other threads).
 ','line_number':33,'multiline':True]
['text':' The default seed is selected to be a large number','line_number':51,'multiline':False]
['text':' with good distribution of 0s and 1s in bit representation','line_number':52,'multiline':False]
['text':' Constructors','line_number':56,'multiline':False]
['text':' Delete all copy and move assignment in favor of clone()','line_number':59,'multiline':False]
['text':' method','line_number':60,'multiline':False]
['text':' Common methods for all generators','line_number':68,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':78,'multiline':False]
['text':' namespace detail','line_number':105,'multiline':False]
['text':' namespace c10','line_number':107,'multiline':False]
