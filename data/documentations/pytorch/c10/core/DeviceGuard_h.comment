['text':'/ RAII guard that sets a certain default device in its constructor, and','line_number':7,'multiline':False]
['text':'/ changes it back to the device that was originally active upon destruction.','line_number':8,'multiline':False]
['text':'/','line_number':9,'multiline':False]
['text':'/ The device is always reset to the one that was active at the time of','line_number':10,'multiline':False]
['text':'/ construction of the guard. Even if you `set_device` after construction, the','line_number':11,'multiline':False]
['text':'/ destructor will still reset the device to the one that was active at','line_number':12,'multiline':False]
['text':'/ construction time.','line_number':13,'multiline':False]
['text':'/','line_number':14,'multiline':False]
['text':'/ This device guard does NOT have an uninitialized state; it is guaranteed','line_number':15,'multiline':False]
['text':'/ to reset a device on exit.  If you are in a situation where you *might*','line_number':16,'multiline':False]
['text':'/ want to setup a guard (i.e., are looking for the moral equivalent','line_number':17,'multiline':False]
['text':'/ of optional<DeviceGuard>), see OptionalDeviceGuard.','line_number':18,'multiline':False]
['text':'/ No default constructor; see Note [Omitted default constructor from RAII]','line_number':21,'multiline':False]
['text':'/ Set the current device to the passed Device.','line_number':24,'multiline':False]
['text':'/ This constructor is for testing only.','line_number':27,'multiline':False]
['text':'/ Copy is disallowed','line_number':33,'multiline':False]
['text':'/ Move is disallowed, as DeviceGuard does not have an uninitialized state,','line_number':37,'multiline':False]
['text':'/ which is required for moves on types with nontrivial destructors.','line_number':38,'multiline':False]
['text':'/ Sets the device to the given one.  The specified device must be consistent','line_number':42,'multiline':False]
['text':'/ with the device type originally specified during guard construction.','line_number':43,'multiline':False]
['text':'/','line_number':44,'multiline':False]
['text':'/ TODO: The consistency check here is inconsistent with StreamGuard's','line_number':45,'multiline':False]
['text':'/ behavior with set_stream, where a stream on a different device than','line_number':46,'multiline':False]
['text':'/ the original one isn't an error; we just reset the stream and then','line_number':47,'multiline':False]
['text':'/ switch devices.','line_number':48,'multiline':False]
['text':'/ This method is for testing only.','line_number':53,'multiline':False]
['text':'/ Sets the device index to the given one.  The device type is inferred','line_number':60,'multiline':False]
['text':'/ from the original device type the guard was constructed with.','line_number':61,'multiline':False]
['text':'/ Returns the device that was set at the time the guard was constructed.','line_number':66,'multiline':False]
['text':'/ Returns the most recent device that was set using this device guard,','line_number':71,'multiline':False]
['text':'/ either from construction, or via set_device.','line_number':72,'multiline':False]
['text':'*
 * A OptionalDeviceGuard is an RAII class that sets a device to some value on
 * initialization, and resets the device to its original value on destruction.
 * Morally, a OptionalDeviceGuard is equivalent to optional<DeviceGuard>, but
 * with extra constructors and methods as appropriate.
 *
 * Besides its obvious use (optionally applying a DeviceGuard),
 * OptionalDeviceGuard is often also used for the following idiom:
 *
 *    OptionalDeviceGuard g;
 *    for (const auto& t : tensors) {
 *      g.set_device(t.device());
 *      do_something_with(t);
 *    }
 *
 * This usage is marginally more efficient than constructing a DeviceGuard every
 * iteration of the for loop, as it avoids an unnecessary device reset.
 *
 * Unlike DeviceGuard, a OptionalDeviceGuard may be uninitialized.  This occurs
 * when you use the nullary constructor, or pass a nullopt to the constructor.
 * Uninitialized OptionalDeviceGuards do *nothing*; they do not know what the
 * original device was and they do not reset on destruction.  This is why
 * original_device() and current_device() return optional<Device> rather than
 * Device (as they do in DeviceGuard), and also is why we didn't just
 * provide OptionalDeviceGuard by default and hide DeviceGuard from users.
 *
 * The semantics of an OptionalDeviceGuard are exactly explained by thinking
 * of it as an optional<DeviceGuard>.  In particular, an initialized
 * OptionalDeviceGuard doesn't restore device to its value at construction; it
 * restores device to its value *at initialization*.  So if you have the
 * program:
 *
 *     setDevice(1);
 *     OptionalDeviceGuard g;
 *     setDevice(2);
 *     g.reset_device(Device(DeviceType::CUDA, 3));  // initializes!
 *
 * On destruction, g will reset device to 2, rather than 1.
 *
 * An uninitialized OptionalDeviceGuard is distinct from a (initialized)
 * DeviceGuard whose original_device_ and current_device_ match, since the
 * DeviceGuard will still reset the device to original_device_.
 ','line_number':81,'multiline':True]
['text':'/ Create an uninitialized guard.  Set the guard later using reset_device.','line_number':126,'multiline':False]
['text':'/ Initialize the guard, setting the current device to the passed Device.','line_number':129,'multiline':False]
['text':'/ Initialize the guard if a Device is passed; otherwise leave the','line_number':132,'multiline':False]
['text':'/ guard uninitialized.','line_number':133,'multiline':False]
['text':'/ Constructor for testing only.','line_number':136,'multiline':False]
['text':'/ Copy is disallowed','line_number':142,'multiline':False]
['text':'/ Move is disallowed','line_number':146,'multiline':False]
['text':'/ See Note [Explicit initialization of optional fields]','line_number':147,'multiline':False]
['text':'/ and // Note [Move construction for RAII guards is tricky]','line_number':148,'multiline':False]
['text':'/ for rationale.','line_number':149,'multiline':False]
['text':'/ Sets the device to the given one.  The specified device must be consistent','line_number':153,'multiline':False]
['text':'/ with the device type originally specified during guard construction.','line_number':154,'multiline':False]
['text':'/ For testing only','line_number':159,'multiline':False]
['text':'/ Returns the device that was set at the time the guard was constructed.','line_number':166,'multiline':False]
['text':'/ Returns the most recent device that was set using this device guard,','line_number':171,'multiline':False]
['text':'/ either from construction, or via reset_device.','line_number':172,'multiline':False]
['text':' Note [Whither the DeviceGuard boilerplate]','line_number':181,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':182,'multiline':False]
['text':' Design note: in principle, we could avoid these wrappers using:','line_number':183,'multiline':False]
['text':'','line_number':184,'multiline':False]
['text':' using DeviceGuard = impl::InlineDeviceGuard<impl::VirtualGuardImpl>;','line_number':185,'multiline':False]
['text':' using OptionalDeviceGuard =','line_number':186,'multiline':False]
['text':' impl::InlineOptionalDeviceGuard<impl::VirtualGuardImpl>;','line_number':187,'multiline':False]
['text':'','line_number':188,'multiline':False]
['text':' But the error messages are worse, and our users can't just look at the','line_number':189,'multiline':False]
['text':' header file to find out what's going on.  Furthermore, for specializations','line_number':190,'multiline':False]
['text':' like CUDAStreamGuard, it can be profitable to replace some interfaces with','line_number':191,'multiline':False]
['text':' refined types (e.g., return CUDAStream instead of Stream).  So, we eat','line_number':192,'multiline':False]
['text':' the boilerplate and write out the API explicitly.','line_number':193,'multiline':False]
['text':' namespace c10','line_number':195,'multiline':False]
