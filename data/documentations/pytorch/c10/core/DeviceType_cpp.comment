['text':' I considered instead using ctype::tolower to lower-case the strings','line_number':10,'multiline':False]
['text':' on the fly, but this seemed a bit much.','line_number':11,'multiline':False]
['text':'lower_case=','line_number':53,'multiline':True]
['text':' The below code won't run but is needed to suppress some compiler','line_number':62,'multiline':False]
['text':' warnings.','line_number':63,'multiline':False]
['text':' NB: Per the C++ standard (e.g.,','line_number':68,'multiline':False]
['text':' https://stackoverflow.com/questions/18195312/what-happens-if-you-static-cast-invalid-value-to-enum-class)','line_number':69,'multiline':False]
['text':' as long as you cast from the same underlying type, it is always valid to cast','line_number':70,'multiline':False]
['text':' into an enum class (even if the value would be invalid by the enum.)  Thus,','line_number':71,'multiline':False]
['text':' the caller is allowed to cast a possibly invalid int16_t to DeviceType and','line_number':72,'multiline':False]
['text':' then pass it to this function.  (I considered making this function take an','line_number':73,'multiline':False]
['text':' int16_t directly, but that just seemed weird.)','line_number':74,'multiline':False]
['text':' lower case ','line_number':105,'multiline':True]
['text':' We use both a mutex and an atomic here because:','line_number':109,'multiline':False]
['text':' (1) Mutex is needed during writing:','line_number':110,'multiline':False]
['text':'     We need to first check the value and potentially error,','line_number':111,'multiline':False]
['text':'     before setting the value (without any one else racing in the middle).','line_number':112,'multiline':False]
['text':'     It's also totally fine for this to be slow, since it happens exactly once','line_number':113,'multiline':False]
['text':'     at import time.','line_number':114,'multiline':False]
['text':' (2) Atomic is needed during reading:','line_number':115,'multiline':False]
['text':'     Whenever a user prints a privateuse1 device name, they need to read this','line_number':116,'multiline':False]
['text':'     variable. Although unlikely, we'll data race if someone else is trying to','line_number':117,'multiline':False]
['text':'     set this variable at the same time that another thread is print the','line_number':118,'multiline':False]
['text':'     device name. We could re-use the same mutex, but reading the atomic will','line_number':119,'multiline':False]
['text':'     be much faster.','line_number':120,'multiline':False]
['text':' Applying the same atomic read memory ordering logic as in Note [Memory','line_number':126,'multiline':False]
['text':' ordering on Python interpreter tag].','line_number':127,'multiline':False]
['text':' Guaranteed that if the flag is set, then privateuse1_backend_name has been','line_number':130,'multiline':False]
['text':' set, and will never be written to.','line_number':131,'multiline':False]
['text':' Invariant: once this flag is set, privateuse1_backend_name is NEVER written','line_number':146,'multiline':False]
['text':' to.','line_number':147,'multiline':False]
['text':' namespace c10','line_number':151,'multiline':False]
