['text':' NB: POD, must be zero initialized!','line_number':6,'multiline':False]
['text':' Note [TLS Initialization]','line_number':7,'multiline':False]
['text':' We wanted raw_local_dispatch_key_set to be initialized with non-zero state','line_number':8,'multiline':False]
['text':' e.g. BackendSelect and ADInplaceOrView in included set.  But certain Windows','line_number':9,'multiline':False]
['text':' compiler (e.g the one used in ARVR tests) only allow TLS to be','line_number':10,'multiline':False]
['text':' zero-initialized. To preserve the invariant that raw TLS storage of the','line_number':11,'multiline':False]
['text':' default state is zero, we obtain the actual include keyset by XORing','line_number':12,'multiline':False]
['text':' raw_local_dispatch_key_set.included_ with c10::default_included_set.  This','line_number':13,'multiline':False]
['text':' logic is encapsulated in struct PODLocalDispatchKeySet.','line_number':14,'multiline':False]
['text':' defined(_MSC_VER) || defined(C10_ANDROID) || defined(C10_IPHONE)','line_number':21,'multiline':False]
['text':' An RAII guard could snapshot and restore the entire state (entire','line_number':28,'multiline':False]
['text':' DispatchKeySet) as opposed to only snapshotting and restoring the state of','line_number':29,'multiline':False]
['text':' its assigned DispatchKeySet. I'm not sure which is better.  If only the RAII','line_number':30,'multiline':False]
['text':' API is used, the two choices are not distinguishable.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' However, if the guard chooses to snapshot and restore the entire','line_number':33,'multiline':False]
['text':' DispatchKeySet, the interaction with the non-RAII API changes.  Consider this','line_number':34,'multiline':False]
['text':' sequence of events:','line_number':35,'multiline':False]
['text':' - An RAII guard is declared for a particular DispatchKeySet, but snapshots','line_number':36,'multiline':False]
['text':' the entire','line_number':37,'multiline':False]
['text':'   current DispatchKeySet.','line_number':38,'multiline':False]
['text':' - A call to the non-RAII API changes the state for DispatchKeys outside the','line_number':39,'multiline':False]
['text':' assigned','line_number':40,'multiline':False]
['text':'   set.','line_number':41,'multiline':False]
['text':' - The RAII guard goes out of scope, restoring the entire DispatchKeySet it','line_number':42,'multiline':False]
['text':' snapshotted','line_number':43,'multiline':False]
['text':'   (which restores the state for its own assigned DispatchKey and wipes out','line_number':44,'multiline':False]
['text':'   the state for the other DispatchKeys set by the non-RAII API).','line_number':45,'multiline':False]
['text':' RAII API','line_number':47,'multiline':False]
['text':' Non-RAII API','line_number':75,'multiline':False]
['text':' Please prefer using the RAII API. See declarations in LocalDispatchKeySet.h','line_number':76,'multiline':False]
['text':' for details.','line_number':77,'multiline':False]
['text':' namespace impl','line_number':118,'multiline':False]
['text':' namespace c10','line_number':119,'multiline':False]
