['text':' TLS management for DispatchKeySet (the "local" DispatchKeySet(s))','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' This manages two thread-local DispatchKeySets:','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'  - The included type set, which adds a tensor type for consideration','line_number':10,'multiline':False]
['text':'    in dispatch.  (For example, you might add Profiling to','line_number':11,'multiline':False]
['text':'    the included type set to turn on profiling on all tensor operations.)','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':'  - The excluded type set, which disqualifies a tensor type from dispatch.','line_number':14,'multiline':False]
['text':'    (For example, after redispatching on variable, we disqualify','line_number':15,'multiline':False]
['text':'    Autograd so we don't attempt to handle variable again.)','line_number':16,'multiline':False]
['text':'    (Exclusion wins over inclusion.)','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' NB: Originally, I implemented the excluded type set as storing the inverted','line_number':19,'multiline':False]
['text':' set, but TLS is defined to be zero-initialized, so this doesn't actually work','line_number':20,'multiline':False]
['text':' (if it's inverted, you want the set to be -1 initialized).','line_number':21,'multiline':False]
['text':' POD version of LocalDispatchKeySet.  Declared here just so that','line_number':26,'multiline':False]
['text':' we can put it in the guards.','line_number':27,'multiline':False]
['text':' This struct encapsulates special handling for TLS initialization','line_number':28,'multiline':False]
['text':' in set_included()/included() API so that they reflect the truth.','line_number':29,'multiline':False]
['text':' If you want to create PODLocalDispatchKeySet with non-zero state,','line_number':30,'multiline':False]
['text':' use set_included() instead of default constructor.','line_number':31,'multiline':False]
['text':' See Note [TLS Initialization]','line_number':36,'multiline':False]
['text':' implicit ','line_number':58,'multiline':True]
['text':' thread_local variables cannot be C10_API on Windows.','line_number':64,'multiline':False]
['text':' Inlining this seems to break AutoDispatchBelowAutograd on Android.','line_number':65,'multiline':False]
['text':' defined(_MSC_VER) || defined(C10_ANDROID) || defined(C10_IPHONE)','line_number':68,'multiline':False]
['text':' Don't let people fiddle with the thread_local directly just','line_number':72,'multiline':False]
['text':' because they include this header.','line_number':73,'multiline':False]
['text':' defined(_MSC_VER) || defined(C10_ANDROID) || defined(C10_IPHONE)','line_number':76,'multiline':False]
['text':' Internal, use ThreadLocalStateGuard','line_number':78,'multiline':False]
['text':' RAII API for manipulating the thread-local dispatch state.','line_number':81,'multiline':False]
['text':' A little micro-optimization to save us from tls_get_addr call','line_number':95,'multiline':False]
['text':' on destruction','line_number':96,'multiline':False]
['text':' A little micro-optimization to save us from tls_get_addr call','line_number':113,'multiline':False]
['text':' on destruction','line_number':114,'multiline':False]
['text':' Non-RAII API for manipulating the thread-local dispatch state.','line_number':142,'multiline':False]
['text':' Please prefer the RAII API.  The non-RAII API may be useful when','line_number':143,'multiline':False]
['text':' the included/excluded state of a given DispatchKey must span','line_number':144,'multiline':False]
['text':' many calls from the Python to the C++, so you cannot conveniently','line_number':145,'multiline':False]
['text':' use an RAII guard.','line_number':146,'multiline':False]
['text':'','line_number':147,'multiline':False]
['text':' Example use case:  a Python context manager that includes a certain','line_number':148,'multiline':False]
['text':' DispatchKey, to ensure ops running under the context manager dispatch','line_number':149,'multiline':False]
['text':' through that DispatchKey's registered overrides.','line_number':150,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':' The non-RAII API is less efficient than the RAII guards because both the','line_number':152,'multiline':False]
['text':' getter and setter will do a tls_getaddr lookup (the RAII struct only needs','line_number':153,'multiline':False]
['text':' one!)','line_number':154,'multiline':False]
['text':' namespace impl','line_number':163,'multiline':False]
['text':' namespace c10','line_number':164,'multiline':False]
