['text':' This file provides implementations of InlineDeviceGuard and','line_number':3,'multiline':False]
['text':' InlineOptionalDeviceGuard.','line_number':4,'multiline':False]
['text':'*
 * A DeviceGuard is an RAII class that sets a device to some value
 * on construction, and resets the device to its original value on
 * destruction.
 *
 * InlineDeviceGuard is a helper class for implementing DeviceGuards.
 * It is templated over a DeviceGuardImpl (anything that implements
 * DeviceGuardImplInterface).  There are two primary ways to instantiate
 * InlineDeviceGuard:
 *
 *  - With a concrete implementation of DeviceGuardImpl, e.g., CUDAGuardImpl.
 *    This is the best way to use InlineDeviceGuard, as all calls are
 *    devirtualized, giving you code as efficient as straight line
 *    calls to cudaGetDevice/cudaSetDevice.
 *
 *  - With VirtualGuardImpl, which does a virtual dispatch to a DeviceGuardImpl
 *    retrieved from a DeviceType registry.  We have explicitly instantiated
 *    InlineDeviceGuard this way as c10::DeviceGuard.
 *
 * If you are in a hurry, you can use InlineDeviceGuard directly:
 *
 *    using CUDAGuard = impl::InlineDeviceGuard<CUDAGuardImpl>;
 *
 * However, you can provide a better user experience if you explicitly write a
 * wrapper class that itself contains the template instantiation:
 *
 *    class CUDAGuard {
 *    public:
 *      // ... the API ...
 *    private:
 *      impl::InlineDeviceGuard<CUDAGuardImpl> guard_;
 *    }
 *
 * The wrapper class provides a good place to write documentation, and helps
 * avoid weird template instantiation errors when a user incorrectly uses the
 * class.
 *
 * If you need to test this class, consider instantiating it with FakeGuardImpl.
 ','line_number':15,'multiline':True]
['text':' Note [Omitted default constructor from RAII]','line_number':57,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':58,'multiline':False]
['text':' In principle, we could add a default constructor to','line_number':59,'multiline':False]
['text':' DeviceGuard which reads the current device and promises to','line_number':60,'multiline':False]
['text':' restore to that device on exit.  However, most cases where you','line_number':61,'multiline':False]
['text':' would have written this, you probably meant to actually just','line_number':62,'multiline':False]
['text':' use OptionalDeviceGuard (since you don't actually need the','line_number':63,'multiline':False]
['text':' restore to happen if you don't ever actually set the device).','line_number':64,'multiline':False]
['text':' We remove the constructor here to encourage you to think about','line_number':65,'multiline':False]
['text':' what you actually want to happen.','line_number':66,'multiline':False]
['text':'/ Set the current device to the passed Device.','line_number':69,'multiline':False]
['text':'/ Set the current device index to the passed DeviceIndex.  (The','line_number':77,'multiline':False]
['text':'/ device type is inferred from the template parameter T).','line_number':78,'multiline':False]
['text':'/ Construct an InlineDeviceGuard using VirtualGuardImpl with an explicit','line_number':86,'multiline':False]
['text':'/ DeviceGuardImplInterface pointer.','line_number':87,'multiline':False]
['text':'/ Copy is disallowed','line_number':101,'multiline':False]
['text':'/ Move is disallowed, as DeviceGuard does not have an uninitialized state,','line_number':105,'multiline':False]
['text':'/ which is required for moves on types with nontrivial destructors.','line_number':106,'multiline':False]
['text':'/ Sets the device to the given one.','line_number':114,'multiline':False]
['text':'/ Resets the currently set device to its original device, and then sets the','line_number':129,'multiline':False]
['text':'/ current device to the passed device.  This is effectively equivalent to','line_number':130,'multiline':False]
['text':'/ set_device when a guard supports only a single device type.','line_number':131,'multiline':False]
['text':'/ Resets the currently set device to its original device, and then sets the','line_number':138,'multiline':False]
['text':'/ current device to the passed device (for a possibly different device','line_number':139,'multiline':False]
['text':'/ type).','line_number':140,'multiline':False]
['text':'/','line_number':141,'multiline':False]
['text':'/ This method is named reset_device to highlight the fact that previous','line_number':142,'multiline':False]
['text':'/ device settings from this guard are NOT preserved, even if the device','line_number':143,'multiline':False]
['text':'/ has a different device type.  For example:','line_number':144,'multiline':False]
['text':'/','line_number':145,'multiline':False]
['text':'/   // CUDA device is 0','line_number':146,'multiline':False]
['text':'/   DeviceGuard g(Device(kCUDA, 1));','line_number':147,'multiline':False]
['text':'/   g.reset_device(Device(kHIP, 2));','line_number':148,'multiline':False]
['text':'/   // CUDA device is 0 (!!)','line_number':149,'multiline':False]
['text':'/','line_number':150,'multiline':False]
['text':'/ NOTE: this implementation may skip some device setting if it can prove','line_number':151,'multiline':False]
['text':'/ that it is unnecessary.','line_number':152,'multiline':False]
['text':'/','line_number':153,'multiline':False]
['text':'/ Optional argument is for testing only.','line_number':154,'multiline':False]
['text':' Destruct and reconstruct the DeviceGuard in place','line_number':167,'multiline':False]
['text':'/ Sets the device index to the given one.  The device type is inferred','line_number':175,'multiline':False]
['text':'/ from the original device type.','line_number':176,'multiline':False]
['text':'/ Returns the device that was set at the time the most recent','line_number':181,'multiline':False]
['text':'/ reset_device(), or otherwise the device at construction time.','line_number':182,'multiline':False]
['text':'/ Returns the most recent device that was set using this device guard,','line_number':187,'multiline':False]
['text':'/ either from construction, or via set_device/reset_device/set_index.','line_number':188,'multiline':False]
['text':'*
 * A OptionalDeviceGuard is an RAII class that sets a device to some value on
 * initialization, and resets the device to its original value on destruction.
 *
 * InlineOptionalDeviceGuard is a helper class for implementing
 * OptionalDeviceGuards.  See guidance in InlineDeviceGuard on how to
 * use this.  See OptionalDeviceGuard for user-oriented usage notes.
 ','line_number':201,'multiline':True]
['text':' Note [Explicit initialization of optional fields]','line_number':212,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':213,'multiline':False]
['text':' Explicit initialization of optional fields','line_number':214,'multiline':False]
['text':' required to workaround an nvcc bug; see','line_number':215,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/12117','line_number':216,'multiline':False]
['text':'/ Creates an uninitialized OptionalDeviceGuard.','line_number':218,'multiline':False]
['text':' See Note [Explicit initialization of optional fields]','line_number':220,'multiline':False]
['text':'/ Set the current device to the passed Device, if it is not nullopt.','line_number':223,'multiline':False]
['text':' See Note [Explicit initialization of optional fields]','line_number':225,'multiline':False]
['text':'/ Set the current device to the passed DeviceIndex, if it is not nullopt.','line_number':231,'multiline':False]
['text':' See Note [Explicit initialization of optional fields]','line_number':237,'multiline':False]
['text':'/ All constructors of DeviceGuard are valid for OptionalDeviceGuard','line_number':243,'multiline':False]
['text':'/ and result in initialized OptionalDeviceGuard.','line_number':244,'multiline':False]
['text':' TODO: Consider reading Tensor and TensorList constructors here, when','line_number':249,'multiline':False]
['text':' Tensor moves to c10.  (These are only valid on OptionalDeviceGuard,','line_number':250,'multiline':False]
['text':' because a Tensor may be undefined, in which case we need an uninitialized','line_number':251,'multiline':False]
['text':' tensor guard.)','line_number':252,'multiline':False]
['text':' Note [Move construction for RAII guards is tricky]','line_number':254,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':255,'multiline':False]
['text':' In principle, move construction is useful for terminating','line_number':256,'multiline':False]
['text':' the lifetime of a `OptionalDeviceGuard` early; for example:','line_number':257,'multiline':False]
['text':'','line_number':258,'multiline':False]
['text':'     // current device is d0','line_number':259,'multiline':False]
['text':'     OptionalDeviceGuard g1(d1);','line_number':260,'multiline':False]
['text':'     // current device is d1','line_number':261,'multiline':False]
['text':'     {','line_number':262,'multiline':False]
['text':'       OptionalDeviceGuard g2(std::move(g1));','line_number':263,'multiline':False]
['text':'     }','line_number':264,'multiline':False]
['text':'     // current device is d0!!','line_number':265,'multiline':False]
['text':'','line_number':266,'multiline':False]
['text':' However, it's difficult to implement the move constructor','line_number':267,'multiline':False]
['text':' in a way that works in all situations.  For example, consider','line_number':268,'multiline':False]
['text':' the following example:','line_number':269,'multiline':False]
['text':'','line_number':270,'multiline':False]
['text':'     OptionalDeviceGuard g1(d1);','line_number':271,'multiline':False]
['text':'     {','line_number':272,'multiline':False]
['text':'       OptionalDeviceGuard g2(d2);','line_number':273,'multiline':False]
['text':'       {','line_number':274,'multiline':False]
['text':'         OptionalDeviceGuard g3(std::move(g1)); // !!!','line_number':275,'multiline':False]
['text':'       }','line_number':276,'multiline':False]
['text':'     }','line_number':277,'multiline':False]
['text':'','line_number':278,'multiline':False]
['text':' What should the current device be while g3 in scope... and what','line_number':279,'multiline':False]
['text':' should it be after it goes out of scope?  What about g2?','line_number':280,'multiline':False]
['text':' There don't seem to be satisfactory answers for these questions.','line_number':281,'multiline':False]
['text':'','line_number':282,'multiline':False]
['text':' It's in principle possible to raise an error when this occurs','line_number':283,'multiline':False]
['text':' by doing some extra thread-local bookkeeping.  But why bother?','line_number':284,'multiline':False]
['text':' Just don't provide the constructor.','line_number':285,'multiline':False]
['text':' Note [Move assignment for RAII guards is tricky]','line_number':288,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':289,'multiline':False]
['text':' Move assignment is deleted, because you need to know which guard was','line_number':290,'multiline':False]
['text':' defined "first", as that guard's original_device_ wins--with the current','line_number':291,'multiline':False]
['text':' representation, we have no way of telling which is the case.  (Move','line_number':292,'multiline':False]
['text':' construction does not have this problem, as one guard is always','line_number':293,'multiline':False]
['text':' uninitialized.)','line_number':294,'multiline':False]
['text':'','line_number':295,'multiline':False]
['text':' We can make this clear by way of a pair of examples:','line_number':296,'multiline':False]
['text':'','line_number':297,'multiline':False]
['text':' Example 1:','line_number':298,'multiline':False]
['text':'','line_number':299,'multiline':False]
['text':'  // initial device is n0','line_number':300,'multiline':False]
['text':'  {','line_number':301,'multiline':False]
['text':'    CUDAGuard g1(n1);','line_number':302,'multiline':False]
['text':'    {','line_number':303,'multiline':False]
['text':'      CUDAGuard g2(n2);','line_number':304,'multiline':False]
['text':'      // current device should be n2','line_number':305,'multiline':False]
['text':'      g1 = std::move(g2);','line_number':306,'multiline':False]
['text':'      // current device should still be n2','line_number':307,'multiline':False]
['text':'    }','line_number':308,'multiline':False]
['text':'    // current device should still be n2','line_number':309,'multiline':False]
['text':'  }','line_number':310,'multiline':False]
['text':'  // current device should be n0','line_number':311,'multiline':False]
['text':'','line_number':312,'multiline':False]
['text':'  Example 2 (flip the order of the two guards):','line_number':313,'multiline':False]
['text':'','line_number':314,'multiline':False]
['text':'  // initial device is n0','line_number':315,'multiline':False]
['text':'  {','line_number':316,'multiline':False]
['text':'    CUDAGuard g2(n2);','line_number':317,'multiline':False]
['text':'    {','line_number':318,'multiline':False]
['text':'      CUDAGuard g1(n1);','line_number':319,'multiline':False]
['text':'      // current device should be n1','line_number':320,'multiline':False]
['text':'      g1 = std::move(g2);','line_number':321,'multiline':False]
['text':'      // current device should be n2','line_number':322,'multiline':False]
['text':'    }','line_number':323,'multiline':False]
['text':'    // current device should be n0 (since g2 has been vacated)','line_number':324,'multiline':False]
['text':'  }','line_number':325,'multiline':False]
['text':'','line_number':326,'multiline':False]
['text':' In both examples, we need g1 to restore to n0 after move assignment.','line_number':327,'multiline':False]
['text':' However, in example 1, this is determined by the restore value of g1','line_number':328,'multiline':False]
['text':' (prior to the move). In example 2, however, it is determined by the the','line_number':329,'multiline':False]
['text':' restore value of g2(!!). We don't know which one should win, without having','line_number':330,'multiline':False]
['text':' a way of telling which guard was allocated first.','line_number':331,'multiline':False]
['text':'','line_number':332,'multiline':False]
['text':' We could solve this with an extra thread-local variable.  But no one is','line_number':333,'multiline':False]
['text':' actually using move-assignment.  So just get rid of it.','line_number':334,'multiline':False]
['text':'/ Sets the device to the given one.  Initializes OptionalDeviceGuard if it','line_number':338,'multiline':False]
['text':'/ is not already initialized.','line_number':339,'multiline':False]
['text':'/ Resets the currently set device to its original device, and then sets the','line_number':352,'multiline':False]
['text':'/ current device to the passed device (for a possibly different device','line_number':353,'multiline':False]
['text':'/ type).  Initializes OptionalDeviceGuard if it is not already initialized.','line_number':354,'multiline':False]
['text':'/','line_number':355,'multiline':False]
['text':'/ See notes on why this is called reset_device on InlineDeviceGuard.','line_number':356,'multiline':False]
['text':'/','line_number':357,'multiline':False]
['text':'/ Optional argument is for testing only.','line_number':358,'multiline':False]
['text':'/ Resets the currently set device to its original device, and then sets the','line_number':372,'multiline':False]
['text':'/ current device to the passed device.  Initializes the guard if it is','line_number':373,'multiline':False]
['text':'/ not already initialized.  This is effectively equivalent to set_device','line_number':374,'multiline':False]
['text':'/ when a guard supports only a single device type.','line_number':375,'multiline':False]
['text':'/ Sets the device index to the given one.  The device type is statically','line_number':388,'multiline':False]
['text':'/ known.','line_number':389,'multiline':False]
['text':'/ Returns the device that was set immediately prior to initialization of','line_number':402,'multiline':False]
['text':'/ the, guard, or nullopt if the guard is uninitialized.','line_number':403,'multiline':False]
['text':'/ Returns the most recent device that was set using this device guard,','line_number':409,'multiline':False]
['text':'/ either from construction, or via set_device, if the guard is initialized,','line_number':410,'multiline':False]
['text':'/ or nullopt if the guard is uninitialized.','line_number':411,'multiline':False]
['text':'/ Restore the original device, resetting this guard to uninitialized state.','line_number':417,'multiline':False]
['text':' namespace impl','line_number':426,'multiline':False]
['text':' namespace c10','line_number':427,'multiline':False]
