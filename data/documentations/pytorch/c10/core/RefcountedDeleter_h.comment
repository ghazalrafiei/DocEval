['text':' A RefcountedDeleterContext object is used as the `ctx` argument for DataPtr','line_number':11,'multiline':False]
['text':' to implement a shared DataPtr. Normally, a DataPtr is unique, but we use','line_number':12,'multiline':False]
['text':' this custom context and the `refcounted_deleter` function below to make the','line_number':13,'multiline':False]
['text':' DataPtr act like a non-unique DataPtr. This context object holds onto an','line_number':14,'multiline':False]
['text':' inner context and deleter function which handle the actual deletion of the','line_number':15,'multiline':False]
['text':' data when the refcount reaches 0.','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':' This shared DataPtr feature is only used when storages are shared between','line_number':18,'multiline':False]
['text':' multiple Python interpreters in MultiPy. Before storages had PyObject','line_number':19,'multiline':False]
['text':' preservation, interpreters could just share the same StorageImpl instance.','line_number':20,'multiline':False]
['text':' But now a StorageImpl can only be associated with one interpreter in order','line_number':21,'multiline':False]
['text':' to properly manage a zombie PyObject. So we share storages across Python','line_number':22,'multiline':False]
['text':' interpreters by creating a different StorageImpl instance for each one, but','line_number':23,'multiline':False]
['text':' they all point to the same data.','line_number':24,'multiline':False]
['text':' `refcounted_deleter` is used as the `ctx_deleter` for DataPtr to implement','line_number':33,'multiline':False]
['text':' a shared DataPtr.','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' Warning: This should only be called on a pointer to','line_number':36,'multiline':False]
['text':' a RefcountedDeleterContext that was allocated on the heap with `new`,','line_number':37,'multiline':False]
['text':' because when the refcount reaches 0, the context is deleted with `delete`','line_number':38,'multiline':False]
['text':' If the storage's DataPtr does not use `refcounted_deleter`, replace it with','line_number':41,'multiline':False]
['text':' a DataPtr that does, so it can be shared between multiple StorageImpls','line_number':42,'multiline':False]
['text':' Create a new StorageImpl that points to the same data. If the original','line_number':45,'multiline':False]
['text':' StorageImpl's DataPtr does not use `refcounted_deleter`, it will be replaced','line_number':46,'multiline':False]
['text':' with one that does','line_number':47,'multiline':False]
['text':' namespace c10','line_number':51,'multiline':False]
