['text':' NB: this is actually double precision; we're using the Python naming here','line_number':13,'multiline':False]
['text':'implicit','line_number':16,'multiline':True]
['text':' Only valid if is_symbolic()','line_number':31,'multiline':False]
['text':' Guaranteed to return a SymNode, wrapping using base if necessary','line_number':34,'multiline':False]
['text':' Need guidance on where to put this code','line_number':76,'multiline':False]
['text':' Insert a guard for the float to be its concrete value, and then return','line_number':79,'multiline':False]
['text':' that value.  This operation always works, even if the float is symbolic,','line_number':80,'multiline':False]
['text':' so long as we know what the underlying value is. Don't blindly put this','line_number':81,'multiline':False]
['text':' everywhere; you can cause overspecialization of PyTorch programs with','line_number':82,'multiline':False]
['text':' this method.','line_number':83,'multiline':False]
['text':'','line_number':84,'multiline':False]
['text':' It should be called as guard_float(__FILE__, __LINE__).  The file and line','line_number':85,'multiline':False]
['text':' number can be used to diagnose overspecialization.','line_number':86,'multiline':False]
['text':' N.B. It's important to keep this definition in the header','line_number':91,'multiline':False]
['text':' as we expect if checks to be folded for mobile builds','line_number':92,'multiline':False]
['text':' where `is_symbolic` is always false','line_number':93,'multiline':False]
['text':' TODO: optimize to union','line_number':103,'multiline':False]
['text':' namespace c10','line_number':109,'multiline':False]
