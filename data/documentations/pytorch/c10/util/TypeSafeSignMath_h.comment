['text':'/ Returns false since we cannot have x < 0 if x is unsigned.','line_number':17,'multiline':False]
['text':'x','line_number':20,'multiline':True]
['text':'is_unsigned','line_number':21,'multiline':True]
['text':'/ Returns true if a signed variable x < 0','line_number':25,'multiline':False]
['text':'is_unsigned','line_number':29,'multiline':True]
['text':'/ Returns true if x < 0','line_number':33,'multiline':False]
['text':'/ NOTE: Will fail on an unsigned custom type','line_number':34,'multiline':False]
['text':'/       For the most part it's possible to fix this if','line_number':35,'multiline':False]
['text':'/       the custom type has a constexpr constructor.','line_number':36,'multiline':False]
['text':'/       However, notably, c10::Half does not :-(','line_number':37,'multiline':False]
['text':'/ Returns the sign of an unsigned variable x as 0, 1','line_number':43,'multiline':False]
['text':'is_unsigned','line_number':45,'multiline':True]
['text':'/ Returns the sign of a signed variable x as -1, 0, 1','line_number':49,'multiline':False]
['text':'is_unsigned','line_number':53,'multiline':True]
['text':'/ Returns the sign of x as -1, 0, 1','line_number':57,'multiline':False]
['text':'/ NOTE: Will fail on an unsigned custom type','line_number':58,'multiline':False]
['text':'/       For the most part it's possible to fix this if','line_number':59,'multiline':False]
['text':'/       the custom type has a constexpr constructor.','line_number':60,'multiline':False]
['text':'/       However, notably, c10::Half does not :-(','line_number':61,'multiline':False]
['text':'/ Returns true if a and b are not both negative','line_number':67,'multiline':False]
['text':' Suppress sign compare warning when compiling with GCC','line_number':73,'multiline':False]
['text':' as later does not account for short-circuit rule before','line_number':74,'multiline':False]
['text':' raising the warning, see https://godbolt.org/z/Tr3Msnz99','line_number':75,'multiline':False]
['text':'/ Returns true if x is greater than the greatest value of the type Limit','line_number':81,'multiline':False]
['text':'/ Returns true if x < lowest(Limit). Standard comparison','line_number':93,'multiline':False]
['text':'limit_is_unsigned','line_number':97,'multiline':True]
['text':'x_is_unsigned','line_number':98,'multiline':True]
['text':'/ Returns false since all the limit is signed and therefore includes','line_number':102,'multiline':False]
['text':'/ negative values but x cannot be negative because it is unsigned','line_number':103,'multiline':False]
['text':'x','line_number':106,'multiline':True]
['text':'limit_is_unsigned','line_number':107,'multiline':True]
['text':'x_is_unsigned','line_number':108,'multiline':True]
['text':'/ Returns true if x < 0, where 0 is constructed from T.','line_number':112,'multiline':False]
['text':'/ Limit is not signed, so its lower value is zero','line_number':113,'multiline':False]
['text':'limit_is_unsigned','line_number':117,'multiline':True]
['text':'x_is_unsigned','line_number':118,'multiline':True]
['text':'/ Returns false sign both types are unsigned','line_number':122,'multiline':False]
['text':'x','line_number':125,'multiline':True]
['text':'limit_is_unsigned','line_number':126,'multiline':True]
['text':'x_is_unsigned','line_number':127,'multiline':True]
['text':'/ Returns true if x is less than the lowest value of type T','line_number':131,'multiline':False]
['text':'/ NOTE: Will fail on an unsigned custom type','line_number':132,'multiline':False]
['text':'/       For the most part it's possible to fix this if','line_number':133,'multiline':False]
['text':'/       the custom type has a constexpr constructor.','line_number':134,'multiline':False]
['text':'/       However, notably, c10::Half does not :','line_number':135,'multiline':False]
['text':' namespace c10','line_number':142,'multiline':False]
