['text':'
 * TypeIdentifier is a small type containing an id.
 * Types must be registered using CAFFE_DECLARE_KNOWN_TYPE() (in their header)
 * and CAFFE_DEFINE_KNOWN_TYPE() (in their .cpp file) for them to have a type
 * id. If a type is registered, you can also create an object containing meta
 * data like constructor, destructor, stringified name, ... about the type by
 * calling TypeMeta::Make<T>. This returns a TypeMeta() object, which is
 * basically just a pointer to the type information, so it's cheap to pass
 * around.
 ','line_number':23,'multiline':True]
['text':' TODO: This file is still in the caffe2 namespace, despite living','line_number':34,'multiline':False]
['text':' in the ATen directory.  This is because the macro','line_number':35,'multiline':False]
['text':' CAFFE_KNOWN_TYPE (and CAFFE_DECLARE_KNOWN_TYPE) defines a template','line_number':36,'multiline':False]
['text':' specialization, which relies','line_number':37,'multiline':False]
['text':' on the namespace of TypeMeta matching the namespace where the macro is','line_number':38,'multiline':False]
['text':' called.  This requires us to fix all of the call-sites, which I want to do','line_number':39,'multiline':False]
['text':' later.  So the namespace is not fixed at the moment.','line_number':40,'multiline':False]
['text':' Make at::Half a fundamental type.','line_number':42,'multiline':False]
['text':' namespace guts','line_number':47,'multiline':False]
['text':' namespace c10','line_number':48,'multiline':False]
['text':'*
 * A type id is a unique id for a given C++ type.
 * You need to register your types using CAFFE_KNOWN_TYPE(MyType) to be able to
 * use TypeIdentifier with custom types. This is for example used to store the
 * dtype of tensors.
 ','line_number':52,'multiline':True]
['text':'*
   * Returns the unique id for the given type T. The id is unique for the type T
   * in the sense that for any two different types, their ids are different; for
   * the same type T, the id remains the same over different calls of the
   * function. However, this is not guaranteed over different runs, as the id
   * is generated during run-time. Do NOT serialize the id for storage.
   ','line_number':64,'multiline':True]
['text':' Allow usage in std::map / std::set','line_number':84,'multiline':False]
['text':' TODO Disallow this and rather use std::unordered_map/set everywhere','line_number':85,'multiline':False]
['text':' namespace caffe2','line_number':96,'multiline':False]
['text':' This struct holds the actual type information. There will be','line_number':108,'multiline':False]
['text':' one allocated per type. TypeMeta objects will then point to the struct','line_number':109,'multiline':False]
['text':' instance for the type they're configured for.','line_number':110,'multiline':False]
['text':' Mechanism for throwing errors which can't be prevented at compile time','line_number':156,'multiline':False]
['text':' due to type erasure. E.g. somebody calling TypeMeta::copy() for','line_number':157,'multiline':False]
['text':' non-copyable type. Right now just throws exception but is implemented','line_number':158,'multiline':False]
['text':' in .cpp to manage dependencies','line_number':159,'multiline':False]
['text':'*
 * Placement new function for the type.
 ','line_number':162,'multiline':True]
['text':'ptr','line_number':174,'multiline':True]
['text':'n','line_number':174,'multiline':True]
['text':'*
 * Typed copy function for classes.
 ','line_number':225,'multiline':True]
['text':'*
 * A placeholder function for types that do not allow assignment.
 ','line_number':237,'multiline':True]
['text':'src','line_number':241,'multiline':True]
['text':'dst','line_number':241,'multiline':True]
['text':'n','line_number':241,'multiline':True]
['text':'*
 * Destructor for non-fundamental types.
 ','line_number':264,'multiline':True]
['text':' namespace detail','line_number':295,'multiline':False]
['text':'','line_number':297,'multiline':False]
['text':' note: this is outside TypeMeta bc gcc seems to have trouble','line_number':298,'multiline':False]
['text':' with scalarTypeItemSizes as a constexpr static member used by','line_number':299,'multiline':False]
['text':' a public inline instance method','line_number':300,'multiline':False]
['text':'','line_number':301,'multiline':False]
['text':' item sizes for TypeMeta::itemsize() fast path','line_number':303,'multiline':False]
['text':' Undefined','line_number':308,'multiline':False]
['text':'*
 * TypeMeta is a thin class that allows us to store the type of a container such
 * as a blob, or the data type of a tensor, with a unique run-time id. It also
 * stores some additional data such as the item size and the name of the type
 * for run-time inspection.
 ','line_number':311,'multiline':True]
['text':'* Create a dummy TypeMeta object. To create a TypeMeta object for a specific
   * type, use TypeMeta::Make<T>().
   ','line_number':325,'multiline':True]
['text':'*
   * Copy constructor.
   ','line_number':330,'multiline':True]
['text':'*
   * Assignment operators.
   ','line_number':335,'multiline':True]
['text':' TypeMeta can only be created by Make, making sure that we do not','line_number':348,'multiline':False]
['text':' create incorrectly mixed up TypeMeta objects.','line_number':349,'multiline':False]
['text':'*
   * Returns the type id.
   ','line_number':353,'multiline':True]
['text':'*
   * true if we represent some ScalarType type
   ','line_number':359,'multiline':True]
['text':'*
   * true if we represent ScalarType scalar_type
   ','line_number':365,'multiline':True]
['text':'*
   * Returns the size of the item.
   ','line_number':371,'multiline':True]
['text':'*
   * Returns the new function pointer for individual items.
   ','line_number':380,'multiline':True]
['text':'*
   * Returns the placement new function pointer for individual items.
   ','line_number':386,'multiline':True]
['text':'*
   * Returns the typed copy function pointer for individual iterms.
   ','line_number':392,'multiline':True]
['text':'*
   * Returns the destructor function pointer for individual items.
   ','line_number':398,'multiline':True]
['text':'*
   * Returns a printable name for the type.
   ','line_number':407,'multiline':True]
['text':' Below are static functions that can be called by passing a specific type.','line_number':421,'multiline':False]
['text':'*
   * Returns a TypeMeta object that corresponds to the typename T.
   ','line_number':438,'multiline':True]
['text':' The instance pointed to is declared here, but defined in a .cpp file.','line_number':443,'multiline':False]
['text':' We need to silence the compiler warning about using an undefined','line_number':444,'multiline':False]
['text':' variable template. '-Wpragmas' and '-Wunknown-warning-option' has to be','line_number':445,'multiline':False]
['text':' disabled for compilers that don't know '-Wundefined-var-template' and','line_number':446,'multiline':False]
['text':' would error at our attempt to disable it.','line_number':447,'multiline':False]
['text':'*
   * convert ScalarType enum values to TypeMeta handles
   ','line_number':460,'multiline':True]
['text':'*
   * convert TypeMeta handles to ScalarType enum values
   ','line_number':473,'multiline':True]
['text':' hard limit number of registered types','line_number':486,'multiline':False]
['text':' note: constexpr provokes Windows compilation error "member may not be','line_number':487,'multiline':False]
['text':' initialized" static constexpr size_t MaxTypeIndex = 32;','line_number':488,'multiline':False]
['text':'','line_number':489,'multiline':False]
['text':' The reason for this not to be UINT8_MAX is that the array','line_number':491,'multiline':False]
['text':' initialization takes space which is proportional to the size of the array.','line_number':492,'multiline':False]
['text':' The compiler seems to add code (or data padding) to initialize the array with','line_number':493,'multiline':False]
['text':' empty elements. Please see','line_number':494,'multiline':False]
['text':' https://github.com/pytorch/pytorch/pull/51881 for details.','line_number':495,'multiline':False]
['text':'','line_number':496,'multiline':False]
['text':' number of CAFFE_DEFINE_KNOWN_TYPE in typeid.cpp ','line_number':498,'multiline':True]
['text':' 1 more for caffe2 tensor ','line_number':499,'multiline':True]
['text':' Protects type metadata allocation.','line_number':504,'multiline':False]
['text':' NOLINTNEXTLINE(facebook-hte-NonPodStaticDeclaration)','line_number':505,'multiline':False]
['text':' NOTE [ TypeIdentifier::Get nvcc/clang discrepancy]','line_number':515,'multiline':False]
['text':' nvcc and clang do not produce identical results for','line_number':516,'multiline':False]
['text':' TypeIdentifier::Get, because TypeIdentifier::Get relies on','line_number':517,'multiline':False]
['text':' __PRETTY_FUNCTION__ and they don't agree on the canonical names','line_number':518,'multiline':False]
['text':' of types (e.g., nvcc normalizes to `short unsigned int`, but clang','line_number':519,'multiline':False]
['text':' calls it `unsigned short`). Hide the implementation of this function','line_number':520,'multiline':False]
['text':' from nvcc so that we always use clang (or whatever host C++ compiler)','line_number':521,'multiline':False]
['text':' for TypeIdentifier::Get.','line_number':522,'multiline':False]
['text':' Need to hold this for the rest of the function, protecting:','line_number':529,'multiline':False]
['text':' 1) existingMetaDataIndexForType()','line_number':530,'multiline':False]
['text':' 2) nextTypeIndex++','line_number':531,'multiline':False]
['text':' 3) the write into typeMetaDatas()','line_number':532,'multiline':False]
['text':' It may exist already if added in a different dynamic shared library.','line_number':534,'multiline':False]
['text':' specializations return indexes into typeMetaDataInstances()','line_number':558,'multiline':False]
['text':'','line_number':562,'multiline':False]
['text':' TypeMeta just wraps this index','line_number':563,'multiline':False]
['text':'','line_number':564,'multiline':False]
['text':' specializations of TypeMeta::_typeMetaData for ScalarType types','line_number':573,'multiline':False]
['text':'*
 * Register unique id for a type so it can be used in TypeMeta context, e.g. be
 * used as a type for Blob or for Tensor elements.
 *
 * CAFFE_KNOWN_TYPE is deprecated; prefer CAFFE_DECLARE_KNOWN_TYPE and
 * CAFFE_DEFINE_KNOWN_TYPE.
 *
 * CAFFE_KNOWN_TYPE does explicit instantiation of TypeIdentifier::Get<T>
 * template function and thus needs to be put in a single translation unit (.cpp
 * file) for a given type T. Other translation units that use type T as a type
 * of the caffe2::Blob or element type of caffe2::Tensor need to depend on the
 * translation unit that contains CAFFE_KNOWN_TYPE declaration via regular
 * linkage dependencies.
 *
 * NOTE: the macro needs to be invoked in ::caffe2 namespace
 ','line_number':605,'multiline':True]
['text':' Implementation note: in MSVC, we will need to prepend the C10_API','line_number':621,'multiline':False]
['text':' keyword in order to get things compiled properly. in Linux, gcc seems to','line_number':622,'multiline':False]
['text':' create attribute ignored error for explicit template instantiations, see','line_number':623,'multiline':False]
['text':'   http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0537r0.html','line_number':624,'multiline':False]
['text':'   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51930','line_number':625,'multiline':False]
['text':' and as a result, we define these two macros slightly differently.','line_number':626,'multiline':False]
['text':' CAFFE_KNOWN_TYPE is deprecated! Use CAFFE_DECLARE_KNOWN_TYPE and','line_number':633,'multiline':False]
['text':' CAFFE_DEFINE_KNOWN_TYPE instead.','line_number':634,'multiline':False]
['text':' namespace detail','line_number':648,'multiline':False]
['text':' Unlike CAFFE_KNOWN_TYPE, CAFFE_DECLARE_KNOWN_TYPE avoids a function','line_number':650,'multiline':False]
['text':' call to access _typeMetaData in the common case.','line_number':651,'multiline':False]
['text':' namespace detail ','line_number':656,'multiline':True]
['text':' For some of the compilers, long is defined separately from int32_t and','line_number':684,'multiline':False]
['text':' int64_t. As a result we will need to actually define them separately.','line_number':685,'multiline':False]
['text':' It is recommended that one does NOT use long - use int32_t and int64_t','line_number':686,'multiline':False]
['text':' explicitly. Explicit long type annotation may go away in the future.','line_number':687,'multiline':False]
['text':' details: This hack works by defining a _guard_long_unique type, which is','line_number':688,'multiline':False]
['text':' long iff the compiler has a separate long type and is a dummy type otherwise.','line_number':689,'multiline':False]
['text':' we then allocate a type id to that _guard_long_unique. If the compiler has a','line_number':690,'multiline':False]
['text':' separate long type, this allocates a type id for long. Otherwise, it','line_number':691,'multiline':False]
['text':' allocates a type id for the dummy type, which doesn't matter.','line_number':692,'multiline':False]
['text':' namespace detail','line_number':701,'multiline':False]
['text':' namespace caffe2','line_number':713,'multiline':False]
