['text':'*
 * Simple registry implementation that uses static variables to
 * register object creators during program initialization time.
 ','line_number':4,'multiline':True]
['text':' NB: This Registry works poorly when you have other namespaces.','line_number':9,'multiline':False]
['text':' Make all macro invocations from inside the at namespace.','line_number':10,'multiline':False]
['text':'key','line_number':29,'multiline':True]
['text':'*
 * @brief A template class that allows one to register classes by keys.
 *
 * The keys are usually a std::string specifying the name, but can be anything
 * that can be used in a std::map.
 *
 * You should most likely not use the Registry class explicitly, but use the
 * helper macros below to declare specific registries as well as registering
 * objects.
 ','line_number':44,'multiline':True]
['text':' The if statement below is essentially the same as the following line:','line_number':67,'multiline':False]
['text':' TORCH_CHECK_EQ(registry_.count(key), 0) << "Key " << key','line_number':68,'multiline':False]
['text':'                                   << " registered twice.";','line_number':69,'multiline':False]
['text':' However, TORCH_CHECK_EQ depends on google logging, and since registration','line_number':70,'multiline':False]
['text':' is carried out at static initialization time, we do not want to have an','line_number':71,'multiline':False]
['text':' explicit dependency on glog's initialization function.','line_number':72,'multiline':False]
['text':' Returns nullptr if the key is not registered.','line_number':120,'multiline':False]
['text':'*
   * Returns the keys currently registered as a std::vector.
   ','line_number':126,'multiline':True]
['text':' Used for testing, if terminate is unset, Registry throws instead of','line_number':150,'multiline':False]
['text':' calling std::exit','line_number':151,'multiline':False]
['text':'*
 * C10_DECLARE_TYPED_REGISTRY is a macro that expands to a function
 * declaration, as well as creating a convenient typename for its corresponding
 * registerer.
 ','line_number':193,'multiline':True]
['text':' Note on C10_IMPORT and C10_EXPORT below: we need to explicitly mark DECLARE','line_number':198,'multiline':False]
['text':' as import and DEFINE as export, because these registry macros will be used','line_number':199,'multiline':False]
['text':' in downstream shared libraries as well, and one cannot use *_API - the API','line_number':200,'multiline':False]
['text':' macro will be defined on a per-shared-library basis. Semantically, when one','line_number':201,'multiline':False]
['text':' declares a typed registry it is always going to be IMPORT, and when one','line_number':202,'multiline':False]
['text':' defines a registry (which should happen ONLY ONCE and ONLY IN SOURCE FILE),','line_number':203,'multiline':False]
['text':' the instantiation unit is always going to be exported.','line_number':204,'multiline':False]
['text':'','line_number':205,'multiline':False]
['text':' The only unique condition is when in the same file one does DECLARE and','line_number':206,'multiline':False]
['text':' DEFINE - in Windows compilers, this generates a warning that dllimport and','line_number':207,'multiline':False]
['text':' dllexport are mixed, but the warning is fine and linker will be properly','line_number':208,'multiline':False]
['text':' exporting the symbol. Same thing happens in the gflags flag declaration and','line_number':209,'multiline':False]
['text':' definition caes.','line_number':210,'multiline':False]
['text':' Note(Yangqing): The __VA_ARGS__ below allows one to specify a templated','line_number':246,'multiline':False]
['text':' creator with comma in its templated arguments.','line_number':247,'multiline':False]
['text':' C10_DECLARE_REGISTRY and C10_DEFINE_REGISTRY are hard-wired to use','line_number':273,'multiline':False]
['text':' std::string as the key type, because that is the most commonly used cases.','line_number':274,'multiline':False]
['text':' C10_REGISTER_CREATOR and C10_REGISTER_CLASS are hard-wired to use std::string','line_number':308,'multiline':False]
['text':' as the key','line_number':309,'multiline':False]
['text':' type, because that is the most commonly used cases.','line_number':310,'multiline':False]
['text':' namespace c10','line_number':325,'multiline':False]
['text':' C10_UTIL_REGISTRY_H_','line_number':327,'multiline':False]
