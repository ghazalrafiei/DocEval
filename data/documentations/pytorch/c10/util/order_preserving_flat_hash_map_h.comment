['text':' Taken from','line_number':1,'multiline':False]
['text':' https://github.com/skarupke/flat_hash_map/blob/2c4687431f978f02a3780e24b8b701d22aa32d9c/flat_hash_map.hpp','line_number':2,'multiline':False]
['text':' with fixes applied:','line_number':3,'multiline':False]
['text':' - https://github.com/skarupke/flat_hash_map/pull/25','line_number':4,'multiline':False]
['text':' - https://github.com/skarupke/flat_hash_map/pull/26','line_number':5,'multiline':False]
['text':' - replace size_t with uint64_t to fix it for 32bit','line_number':6,'multiline':False]
['text':' - add "GCC diagnostic" pragma to ignore -Wshadow','line_number':7,'multiline':False]
['text':' - make sherwood_v3_table::convertible_to_iterator public because GCC5 seems','line_number':8,'multiline':False]
['text':' to have issues with it otherwise','line_number':9,'multiline':False]
['text':' - fix compiler warnings in operator templated_iterator<const value_type>','line_number':10,'multiline':False]
['text':'          Copyright Malte Skarupke 2017.','line_number':12,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':13,'multiline':False]
['text':'    (See http://www.boost.org/LICENSE_1_0.txt)','line_number':14,'multiline':False]
['text':' Modified to maintain insertion and deletion order through a doubly-linked','line_number':16,'multiline':False]
['text':' list','line_number':17,'multiline':False]
['text':' Implementation taken from http://en.cppreference.com/w/cpp/types/void_t','line_number':220,'multiline':False]
['text':' (it takes CWG1558 into account and also works for older compilers)','line_number':221,'multiline':False]
['text':' the template automatically disables the operator when value_type is','line_number':486,'multiline':False]
['text':' already const, because that would cause a lot of compiler warnings','line_number':487,'multiline':False]
['text':' otherwise.','line_number':488,'multiline':False]
['text':' insertion of an existing key does not change ordering','line_number':561,'multiline':False]
['text':' point sentinel to itself;','line_number':628,'multiline':False]
['text':' reinsert list','line_number':630,'multiline':False]
['text':' the return value is a type that can be converted to an iterator','line_number':655,'multiline':False]
['text':' the reason for doing this is that it's not free to find the','line_number':656,'multiline':False]
['text':' iterator pointing at the next element. if you care about the','line_number':657,'multiline':False]
['text':' next iterator, turn the return value into an iterator','line_number':658,'multiline':False]
['text':' if an entry is being removed, and there are other entries with the','line_number':668,'multiline':False]
['text':' same hash, the other entries get moved to their desired position by','line_number':669,'multiline':False]
['text':' reinserting.','line_number':670,'multiline':False]
['text':' whenever an entry is removed and there are other entries with the same','line_number':679,'multiline':False]
['text':' hash, the other entries must get moved to their desired position.','line_number':680,'multiline':False]
['text':' any reference to a moved entry is invalidated.','line_number':681,'multiline':False]
['text':' here, we iterate through the range, and make sure that we update','line_number':682,'multiline':False]
['text':' the pointer to our next entry in the list or the end of the iterator','line_number':683,'multiline':False]
['text':' when it is invalidated.','line_number':684,'multiline':False]
['text':' we are invalidating next_iter or end_iter','line_number':704,'multiline':False]
['text':' head of doubly linked list','line_number':797,'multiline':False]
['text':' needs to be a pointer so that hash map can be used with forward declared','line_number':801,'multiline':False]
['text':' types','line_number':802,'multiline':False]
['text':' sentinel stays constant, so before->prev cannot equal after','line_number':867,'multiline':False]
['text':' We maintain the invariant that:','line_number':938,'multiline':False]
['text':' - result.current_entry contains the new value we're inserting','line_number':939,'multiline':False]
['text':'   and is in the LinkedList position of to_insert','line_number':940,'multiline':False]
['text':' - to_insert contains the value that represents the position of','line_number':941,'multiline':False]
['text':'   result.current_entry','line_number':942,'multiline':False]
['text':' now we can swap back the displaced value to its correct position,','line_number':949,'multiline':False]
['text':' putting the new value we're inserting to the front of the list','line_number':950,'multiline':False]
['text':' to maintain our invariants we need to swap positions','line_number':957,'multiline':False]
['text':' of result.current & current_entry:','line_number':958,'multiline':False]
['text':' the displaced element gets put back into its correct position','line_number':964,'multiline':False]
['text':' we grow the hash table, and then try again to reinsert the new','line_number':965,'multiline':False]
['text':' element','line_number':966,'multiline':False]
['text':' namespace detailv3','line_number':1026,'multiline':False]
['text':' prime numbers generated by the following method:','line_number':1594,'multiline':False]
['text':' 1. start with a prime p = 2','line_number':1595,'multiline':False]
['text':' 2. go to wolfram alpha and get p = NextPrime(2 * p)','line_number':1596,'multiline':False]
['text':' 3. repeat 2. until you overflow 64 bits','line_number':1597,'multiline':False]
['text':' you now have large gaps which you would hit if somebody called reserve()','line_number':1598,'multiline':False]
['text':' with an unlucky number.','line_number':1599,'multiline':False]
['text':' 4. to fill the gaps for every prime p go to wolfram alpha and get','line_number':1600,'multiline':False]
['text':' ClosestPrime(p * 2^(1/3)) and ClosestPrime(p * 2^(2/3)) and put those in','line_number':1601,'multiline':False]
['text':' the gaps','line_number':1602,'multiline':False]
['text':' 5. get PrevPrime(2^64) and put it at the end','line_number':1603,'multiline':False]
['text':'num_slots_minus_one','line_number':1991,'multiline':True]
['text':'num_slots_minus_one','line_number':2019,'multiline':True]
['text':' namespace ska_ordered','line_number':2230,'multiline':False]
