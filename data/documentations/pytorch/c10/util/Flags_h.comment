['text':' Commandline flags support for C10.
 *
 * This is a portable commandline flags tool for c10, so we can optionally
 * choose to use gflags or a lightweight custom implementation if gflags is
 * not possible on a certain platform. If you have gflags installed, set the
 * macro C10_USE_GFLAGS will seamlessly route everything to gflags.
 *
 * To define a flag foo of type bool default to true, do the following in the
 * *global* namespace:
 *     C10_DEFINE_bool(foo, true, "An example.");
 *
 * To use it in another .cc file, you can use C10_DECLARE_* as follows:
 *     C10_DECLARE_bool(foo);
 *
 * In both cases, you can then access the flag via FLAGS_foo.
 *
 * It is recommended that you build with gflags. To learn more about the flags
 * usage, refer to the gflags page here:
 *
 * https://gflags.github.io/gflags/
 *
 * Note about Python users / devs: gflags is initiated from a C++ function
 * ParseCommandLineFlags, and is usually done in native binaries in the main
 * function. As Python does not have a modifiable main function, it is usually
 * difficult to change the flags after Python starts. Hence, it is recommended
 * that one sets the default value of the flags to one that's acceptable in
 * general - that will allow Python to run without wrong flags.
 ','line_number':4,'multiline':True]
['text':'*
 * Sets the usage message when a commandline tool is called with "--help".
 ','line_number':39,'multiline':True]
['text':'*
 * Returns the usage message for the commandline tool set by SetUsageMessage.
 ','line_number':44,'multiline':True]
['text':'*
 * Parses the commandline flags.
 *
 * This command parses all the commandline arguments passed in via pargc
 * and argv. Once it is finished, partc and argv will contain the remaining
 * commandline args that c10 does not deal with. Note that following
 * convention, argv[0] contains the binary name and is not parsed.
 ','line_number':49,'multiline':True]
['text':'*
 * Checks if the commandline flags has already been passed.
 ','line_number':59,'multiline':True]
['text':' namespace c10','line_number':64,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':66,'multiline':False]
['text':' Below are gflags and non-gflags specific implementations.','line_number':67,'multiline':False]
['text':' In general, they define the following macros for one to declare (use','line_number':68,'multiline':False]
['text':' C10_DECLARE) or define (use C10_DEFINE) flags:','line_number':69,'multiline':False]
['text':' C10_{DECLARE,DEFINE}_{int,int64,double,bool,string}','line_number':70,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':71,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':75,'multiline':False]
['text':' Begin gflags section: most functions are basically rerouted to gflags.','line_number':76,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':77,'multiline':False]
['text':' C10 uses hidden visibility by default. However, in gflags, it only uses','line_number':80,'multiline':False]
['text':' export on Windows platform (with dllexport) but not on linux/mac (with','line_number':81,'multiline':False]
['text':' default visibility). As a result, to ensure that we are always exporting','line_number':82,'multiline':False]
['text':' global variables, we will redefine the GFLAGS_DLL_DEFINE_FLAG macro if we','line_number':83,'multiline':False]
['text':' are building C10 as a shared library.','line_number':84,'multiline':False]
['text':' This has to be done after the inclusion of gflags, because some early','line_number':85,'multiline':False]
['text':' versions of gflags.h (e.g. 2.0 on ubuntu 14.04) directly defines the','line_number':86,'multiline':False]
['text':' macros, so we need to do definition after gflags is done.','line_number':87,'multiline':False]
['text':' GFLAGS_DLL_DEFINE_FLAG','line_number':90,'multiline':False]
['text':' GFLAGS_DLL_DECLARE_FLAG','line_number':93,'multiline':False]
['text':' gflags before 2.0 uses namespace google and after 2.1 uses namespace gflags.','line_number':97,'multiline':False]
['text':' Using GFLAGS_GFLAGS_H_ to capture this change.','line_number':98,'multiline':False]
['text':' GFLAGS_GFLAGS_H_','line_number':101,'multiline':False]
['text':' Motivation about the gflags wrapper:','line_number':103,'multiline':False]
['text':' (1) We would need to make sure that the gflags version and the non-gflags','line_number':104,'multiline':False]
['text':' version of C10 are going to expose the same flags abstraction. One should','line_number':105,'multiline':False]
['text':' explicitly use FLAGS_flag_name to access the flags.','line_number':106,'multiline':False]
['text':' (2) For flag names, it is recommended to start with c10_ to distinguish it','line_number':107,'multiline':False]
['text':' from regular gflags flags. For example, do','line_number':108,'multiline':False]
['text':'    C10_DEFINE_BOOL(c10_my_flag, true, "An example");','line_number':109,'multiline':False]
['text':' to allow one to use FLAGS_c10_my_flag.','line_number':110,'multiline':False]
['text':' (3) Gflags has a design issue that does not properly expose the global flags,','line_number':111,'multiline':False]
['text':' if one builds the library with -fvisibility=hidden. The current gflags (as of','line_number':112,'multiline':False]
['text':' Aug 2018) only deals with the Windows case using dllexport, and not the Linux','line_number':113,'multiline':False]
['text':' counterparts. As a result, we will explicitly use C10_EXPORT to export the','line_number':114,'multiline':False]
['text':' flags defined in C10. This is done via a global reference, so the flag','line_number':115,'multiline':False]
['text':' itself is not duplicated - under the hood it is the same global gflags flag.','line_number':116,'multiline':False]
['text':' DECLARE_typed_var should be used in header files and in the global namespace.','line_number':133,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':147,'multiline':False]
['text':' End gflags section.','line_number':148,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':149,'multiline':False]
['text':' C10_USE_GFLAGS','line_number':151,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':153,'multiline':False]
['text':' Begin non-gflags section: providing equivalent functionality.','line_number':154,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':155,'multiline':False]
['text':' namespace c10','line_number':173,'multiline':False]
['text':' The macros are defined outside the c10 namespace. In your code, you should','line_number':175,'multiline':False]
['text':' write the C10_DEFINE_* and C10_DECLARE_* macros outside any namespace','line_number':176,'multiline':False]
['text':' as well.','line_number':177,'multiline':False]
['text':' DECLARE_typed_var should be used in header files and in the global namespace.','line_number':210,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':220,'multiline':False]
['text':' End non-gflags section.','line_number':221,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':222,'multiline':False]
['text':' C10_USE_GFLAGS','line_number':224,'multiline':False]
['text':' C10_UTIL_FLAGS_H_','line_number':226,'multiline':False]
