['text':' Copyright 2004-present Facebook. All Rights Reserved.','line_number':1,'multiline':False]
['text':'/ Sum of a list of integers; accumulates into the int64_t datatype','line_number':13,'multiline':False]
['text':' std::accumulate infers return type from `init` type, so if the `init` type','line_number':20,'multiline':False]
['text':' is not large enough to hold the result, computation can overflow. We use','line_number':21,'multiline':False]
['text':' `int64_t` here to avoid this.','line_number':22,'multiline':False]
['text':'/ Sum of integer elements referred to by iterators; accumulates into the','line_number':27,'multiline':False]
['text':'/ int64_t datatype','line_number':28,'multiline':False]
['text':' std::accumulate infers return type from `init` type, so if the `init` type','line_number':36,'multiline':False]
['text':' is not large enough to hold the result, computation can overflow. We use','line_number':37,'multiline':False]
['text':' `int64_t` here to avoid this.','line_number':38,'multiline':False]
['text':'/ Product of a list of integers; accumulates into the int64_t datatype','line_number':42,'multiline':False]
['text':' std::accumulate infers return type from `init` type, so if the `init` type','line_number':49,'multiline':False]
['text':' is not large enough to hold the result, computation can overflow. We use','line_number':50,'multiline':False]
['text':' `int64_t` here to avoid this.','line_number':51,'multiline':False]
['text':'/ Product of integer elements referred to by iterators; accumulates into the','line_number':59,'multiline':False]
['text':'/ int64_t datatype','line_number':60,'multiline':False]
['text':' std::accumulate infers return type from `init` type, so if the `init` type','line_number':68,'multiline':False]
['text':' is not large enough to hold the result, computation can overflow. We use','line_number':69,'multiline':False]
['text':' `int64_t` here to avoid this.','line_number':70,'multiline':False]
['text':'/ Return product of all dimensions starting from k','line_number':75,'multiline':False]
['text':'/ Returns 1 if k>=dims.size()','line_number':76,'multiline':False]
['text':'/ Product of all dims up to k (not including dims[k])','line_number':94,'multiline':False]
['text':'/ Throws an error if k>dims.size()','line_number':95,'multiline':False]
['text':'/ Product of all dims between k and l (including dims[k] and excluding','line_number':110,'multiline':False]
['text':'/ dims[l]) k and l may be supplied in either order','line_number':111,'multiline':False]
['text':' namespace c10','line_number':134,'multiline':False]
