['text':'mangled_name','line_number':73,'multiline':True]
['text':'output_buffer','line_number':74,'multiline':True]
['text':'length','line_number':75,'multiline':True]
['text':'status','line_number':76,'multiline':True]
['text':' SUPPORTS_BACKTRACE && defined(C10_ANDROID) ','line_number':85,'multiline':True]
['text':'/ If available, the demangled name of the function at this frame, else','line_number':91,'multiline':False]
['text':'/ whatever (possibly mangled) name we got from `backtrace()`.','line_number':92,'multiline':False]
['text':'/ This is a number in hexadecimal form (e.g. "0xdead") representing the','line_number':94,'multiline':False]
['text':'/ offset into the function's machine code at which the function's body','line_number':95,'multiline':False]
['text':'/ starts, i.e. skipping the "prologue" that handles stack manipulation and','line_number':96,'multiline':False]
['text':'/ other calling convention things.','line_number':97,'multiline':False]
['text':'/ NOTE: In debugger parlance, the "object file" refers to the ELF file that','line_number':99,'multiline':False]
['text':'/ the symbol originates from, i.e. either an executable or a library.','line_number':100,'multiline':False]
['text':' This is the function name in the CXX ABI mangled format, e.g. something','line_number':114,'multiline':False]
['text':' like _Z1gv. Reference:','line_number':115,'multiline':False]
['text':' https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling','line_number':116,'multiline':False]
['text':' In GLIBCXX, `frame_string` follows the pattern','line_number':120,'multiline':False]
['text':' `<object-file>(<mangled-function-name>+<offset-into-function>)','line_number':121,'multiline':False]
['text':' [<return-address>]`','line_number':122,'multiline':False]
['text':' NOTE: We don't need to parse the return address because','line_number':145,'multiline':False]
['text':' we already have it from the call to `backtrace()`.','line_number':146,'multiline':False]
['text':' In LIBCXX, The pattern is','line_number':151,'multiline':False]
['text':' `<frame number> <object-file> <return-address> <mangled-function-name> +','line_number':152,'multiline':False]
['text':' <offset-into-function>`','line_number':153,'multiline':False]
['text':' operator>>() does not fail -- if the input stream is corrupted, the','line_number':156,'multiline':False]
['text':' strings will simply be empty.','line_number':157,'multiline':False]
['text':' defined(__GLIBCXX__)','line_number':163,'multiline':False]
['text':' Some system-level functions don't have sufficient debug information, so','line_number':165,'multiline':False]
['text':' we'll display them as "<unknown function>". They'll still have a return','line_number':166,'multiline':False]
['text':' address and other pieces of information.','line_number':167,'multiline':False]
['text':' !defined(C10_ANDROID) ','line_number':176,'multiline':True]
['text':' anonymous namespace','line_number':177,'multiline':False]
['text':' anonymous namespace','line_number':228,'multiline':False]
['text':' SUPPORTS_BACKTRACE','line_number':229,'multiline':False]
['text':' For some reason, the stacktrace implementation in fbcode is','line_number':236,'multiline':False]
['text':' better than ours, see  https://github.com/pytorch/pytorch/issues/56399','line_number':237,'multiline':False]
['text':' When it's available, just use that.','line_number':238,'multiline':False]
['text':' We always skip this frame (backtrace).','line_number':244,'multiline':False]
['text':' backtrace() gives us a list of return addresses in the current call stack.','line_number':249,'multiline':False]
['text':' NOTE: As per man (3) backtrace it can never fail','line_number':250,'multiline':False]
['text':' (http://man7.org/linux/man-pages/man3/backtrace.3.html).','line_number':251,'multiline':False]
['text':' Skip as many frames as requested. This is not efficient, but the sizes here','line_number':255,'multiline':False]
['text':' are small and it makes the code nicer and safer.','line_number':256,'multiline':False]
['text':' `number_of_frames` is strictly less than the current capacity of','line_number':262,'multiline':False]
['text':' `callstack`, so this is just a pointer subtraction and makes the subsequent','line_number':263,'multiline':False]
['text':' code safer.','line_number':264,'multiline':False]
['text':' `backtrace_symbols` takes the return addresses obtained from `backtrace()`','line_number':267,'multiline':False]
['text':' and fetches string representations of each stack. Unfortunately it doesn't','line_number':268,'multiline':False]
['text':' return a struct of individual pieces of information but a concatenated','line_number':269,'multiline':False]
['text':' string, so we'll have to parse the string after. NOTE: The array returned','line_number':270,'multiline':False]
['text':' by `backtrace_symbols` is malloc'd and must be manually freed, but not the','line_number':271,'multiline':False]
['text':' strings inside the array.','line_number':272,'multiline':False]
['text':'deleter=','line_number':275,'multiline':True]
['text':' The backtrace string goes into here.','line_number':279,'multiline':False]
['text':' Toggles to true after the first skipped python frame.','line_number':282,'multiline':False]
['text':' frame #<number>:','line_number':296,'multiline':False]
['text':' <function_name> + <offset> (<return-address> in <object-file>)','line_number':300,'multiline':False]
['text':' In the edge-case where we couldn't parse the frame string, we can','line_number':305,'multiline':False]
['text':' just use it directly (it may have a different format).','line_number':306,'multiline':False]
['text':' !SUPPORTS_BACKTRACE','line_number':319,'multiline':False]
['text':' This backtrace retrieval is implemented on Windows via the Windows','line_number':320,'multiline':False]
['text':' API using `CaptureStackBackTrace`, `SymFromAddr` and','line_number':321,'multiline':False]
['text':' `SymGetLineFromAddr64`.','line_number':322,'multiline':False]
['text':' https://stackoverflow.com/questions/5693192/win32-backtrace-from-c-code','line_number':323,'multiline':False]
['text':' https://stackoverflow.com/questions/26398064/counterpart-to-glibcs-backtrace-and-backtrace-symbols-on-windows','line_number':324,'multiline':False]
['text':' https://docs.microsoft.com/en-us/windows/win32/debug/capturestackbacktrace','line_number':325,'multiline':False]
['text':' https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/nf-dbghelp-symfromaddr','line_number':326,'multiline':False]
['text':' https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/nf-dbghelp-symgetlinefromaddr64','line_number':327,'multiline':False]
['text':' TODO: Support skipping python frames','line_number':328,'multiline':False]
['text':' We always skip this frame (backtrace).','line_number':330,'multiline':False]
['text':' The backtrace string goes into here.','line_number':344,'multiline':False]
['text':' Get the frames','line_number':347,'multiline':False]
['text':' Initialize symbols if necessary','line_number':354,'multiline':False]
['text':' Get the address and the name of the symbol','line_number':358,'multiline':False]
['text':' Get the line number and the module','line_number':366,'multiline':False]
['text':' Get the module basename','line_number':374,'multiline':False]
['text':' The pattern on Windows is','line_number':377,'multiline':False]
['text':' `<return-address> <symbol-address>','line_number':378,'multiline':False]
['text':' <module-name>!<demangled-function-name> [<file-name> @ <line-number>]','line_number':379,'multiline':False]
['text':' !SUPPORTS_BACKTRACE && !_WIN32','line_number':399,'multiline':False]
['text':' SUPPORTS_BACKTRACE','line_number':401,'multiline':False]
['text':' namespace c10','line_number':404,'multiline':False]
