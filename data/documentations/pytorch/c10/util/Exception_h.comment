['text':'/ The primary ATen error class.','line_number':19,'multiline':False]
['text':'/ Provides a complete error message with source location information via','line_number':20,'multiline':False]
['text':'/ `what()`, and a more concise message via `what_without_backtrace()`.','line_number':21,'multiline':False]
['text':'/ Don't throw this directly; use TORCH_CHECK/TORCH_INTERNAL_ASSERT instead.','line_number':22,'multiline':False]
['text':'/','line_number':23,'multiline':False]
['text':'/ NB: c10::Error is handled specially by the default torch to suppress the','line_number':24,'multiline':False]
['text':'/ backtrace, see torch/csrc/Exceptions.h','line_number':25,'multiline':False]
['text':' The actual error message.','line_number':27,'multiline':False]
['text':' Context for the message (in order of decreasing specificity).  Context will','line_number':30,'multiline':False]
['text':' be automatically formatted appropriately, so it is not necessary to add','line_number':31,'multiline':False]
['text':' extra leading/trailing newlines to strings inside this vector','line_number':32,'multiline':False]
['text':' The C++ backtrace at the point when this exception was raised.  This','line_number':35,'multiline':False]
['text':' may be empty if there is no valid backtrace.  (We don't use optional','line_number':36,'multiline':False]
['text':' here to reduce the dependencies this file has.)','line_number':37,'multiline':False]
['text':' These two are derived fields from msg_stack_ and backtrace_, but we need','line_number':40,'multiline':False]
['text':' fields for the strings so that we can return a const char* (as the','line_number':41,'multiline':False]
['text':' signature of std::exception requires).  Currently, the invariant','line_number':42,'multiline':False]
['text':' is that these fields are ALWAYS populated consistently with respect','line_number':43,'multiline':False]
['text':' to msg_stack_ and backtrace_.','line_number':44,'multiline':False]
['text':' This is a little debugging trick: you can stash a relevant pointer','line_number':48,'multiline':False]
['text':' in caller, and then when you catch the exception, you can compare','line_number':49,'multiline':False]
['text':' against pointers you have on hand to get more information about','line_number':50,'multiline':False]
['text':' where the exception came from.  In Caffe2, this is used to figure','line_number':51,'multiline':False]
['text':' out which operator raised an exception.','line_number':52,'multiline':False]
['text':' PyTorch-style Error constructor.  NB: the implementation of this','line_number':56,'multiline':False]
['text':' is actually in Logging.cpp','line_number':57,'multiline':False]
['text':' Caffe2-style error message','line_number':60,'multiline':False]
['text':' Base constructor','line_number':69,'multiline':False]
['text':' Add some new context to the message stack.  The last added context','line_number':72,'multiline':False]
['text':' will be formatted at the end of the context list upon printing.','line_number':73,'multiline':False]
['text':' WARNING: This method is O(n) in the size of the stack, so don't go','line_number':74,'multiline':False]
['text':' wild adding a ridiculous amount of context to error messages.','line_number':75,'multiline':False]
['text':'/ Returns the complete error message, including the source location.','line_number':90,'multiline':False]
['text':'/ The returned pointer is invalidated if you call add_context() on','line_number':91,'multiline':False]
['text':'/ this object.','line_number':92,'multiline':False]
['text':'/ Returns only the error message string, without source location.','line_number':101,'multiline':False]
['text':'/ The returned pointer is invalidated if you call add_context() on','line_number':102,'multiline':False]
['text':'/ this object.','line_number':103,'multiline':False]
['text':' Getters for members','line_number':138,'multiline':False]
['text':' The type of warning','line_number':145,'multiline':False]
['text':' Where the warning happened.','line_number':148,'multiline':False]
['text':' The actual warning message.','line_number':151,'multiline':False]
['text':' See note: [Verbatim Warnings]','line_number':154,'multiline':False]
['text':' Issue a warning with a given message. Dispatched to the current','line_number':161,'multiline':False]
['text':' warning handler.','line_number':162,'multiline':False]
['text':'/ The default warning handler. Prints the message to stderr.','line_number':168,'multiline':False]
['text':' Note: [Verbatim Warnings]','line_number':174,'multiline':False]
['text':' Warnings originating in C++ code can appear out-of-place to Python users:','line_number':175,'multiline':False]
['text':' a user runs a line in Python, but the warning references a line in C++.','line_number':176,'multiline':False]
['text':' Some parts of PyTorch, like the JIT, are cognizant of this mismatch','line_number':177,'multiline':False]
['text':' and take care to map warnings back to the user's program, but most','line_number':178,'multiline':False]
['text':' of PyTorch simply throws a context-free warning. To allow warning','line_number':179,'multiline':False]
['text':' handlers to add context where appropriate, warn takes the','line_number':180,'multiline':False]
['text':' "verbatim" flag. When this is false a warning handler might append','line_number':181,'multiline':False]
['text':' the C++ warning to a Python warning message that relates the warning','line_number':182,'multiline':False]
['text':' back to the user's program. Callers who have already accounted for','line_number':183,'multiline':False]
['text':' context in their warnings should set verbatim to true so their warnings','line_number':184,'multiline':False]
['text':' appear without modification.','line_number':185,'multiline':False]
['text':'/ Sets the global warning handler. This is not thread-safe, so it should','line_number':187,'multiline':False]
['text':'/ generally be called once during initialization or while holding the GIL','line_number':188,'multiline':False]
['text':'/ for programs that use python.','line_number':189,'multiline':False]
['text':'/ User is responsible for keeping the WarningHandler alive until','line_number':190,'multiline':False]
['text':'/ it is not needed.','line_number':191,'multiline':False]
['text':'/ Gets the global warning handler.','line_number':193,'multiline':False]
['text':'/ The TORCH_WARN_ONCE macro is difficult to test for. Use','line_number':209,'multiline':False]
['text':'/ setWarnAlways(true) to turn it into TORCH_WARN, which can be','line_number':210,'multiline':False]
['text':'/ tested for more easily.','line_number':211,'multiline':False]
['text':' A RAII guard that sets warn_always (not thread-local) on','line_number':215,'multiline':False]
['text':' construction, and sets it back to the original value upon destruction.','line_number':216,'multiline':False]
['text':' namespace WarningUtils','line_number':226,'multiline':False]
['text':' Like Error, but we always report the C++ backtrace, instead of only','line_number':228,'multiline':False]
['text':' reporting when TORCH_SHOW_CPP_STACKTRACES','line_number':229,'multiline':False]
['text':' Used in ATen for out-of-bound indices that can reasonably only be detected','line_number':237,'multiline':False]
['text':' lazily inside a kernel (See: advanced indexing).  These turn into','line_number':238,'multiline':False]
['text':' IndexError when they cross to Python.','line_number':239,'multiline':False]
['text':' Used in ATen for invalid values.  These turn into','line_number':244,'multiline':False]
['text':' ValueError when they cross to Python.','line_number':245,'multiline':False]
['text':' Used in ATen for invalid types.  These turn into','line_number':250,'multiline':False]
['text':' TypeError when they cross to Python.','line_number':251,'multiline':False]
['text':' Used in ATen for functionality that is not implemented.  These turn into','line_number':256,'multiline':False]
['text':' NotImplementedError when they cross to Python.','line_number':257,'multiline':False]
['text':' Used in ATen for non finite indices.  These turn into','line_number':262,'multiline':False]
['text':' ExitException when they cross to Python.','line_number':263,'multiline':False]
['text':' Used in Onnxifi backend lowering.  These turn into','line_number':268,'multiline':False]
['text':' ExitException when they cross to Python.','line_number':269,'multiline':False]
['text':' Used for numerical errors from the linalg module. These','line_number':274,'multiline':False]
['text':' turn into LinAlgError when they cross into Python.','line_number':275,'multiline':False]
['text':' Base error type for all distributed errors.','line_number':284,'multiline':False]
['text':' These turn into DistError when they cross into Python.','line_number':285,'multiline':False]
['text':' Used for collective communication library errors from the distributed module.','line_number':290,'multiline':False]
['text':' These turn into DistBackendError when they cross into Python.','line_number':291,'multiline':False]
['text':' Used for errors originating from the store.','line_number':296,'multiline':False]
['text':' These turn into DistStoreError when they cross into Python.','line_number':297,'multiline':False]
['text':' Used for errors originating from the TCP/IP stack and not from collective','line_number':302,'multiline':False]
['text':' libraries. These turn into DistNetworkError when they cross into Python.','line_number':303,'multiline':False]
['text':' A utility function to return an exception std::string by prepending its','line_number':308,'multiline':False]
['text':' exception type before its what() content','line_number':309,'multiline':False]
['text':' namespace c10','line_number':312,'multiline':False]
['text':' Private helper macro for implementing TORCH_INTERNAL_ASSERT and TORCH_CHECK','line_number':314,'multiline':False]
['text':'','line_number':315,'multiline':False]
['text':' Note: In the debug build With MSVC, __LINE__ might be of long type (a.k.a','line_number':316,'multiline':False]
['text':' int32_t), which is different from the definition of `SourceLocation` that','line_number':317,'multiline':False]
['text':' requires unsigned int (a.k.a uint32_t) and may cause a compile error with the','line_number':318,'multiline':False]
['text':' message: error C2397: conversion from 'long' to 'uint32_t' requires a','line_number':319,'multiline':False]
['text':' narrowing conversion Here the static cast is used to pass the build. if this','line_number':320,'multiline':False]
['text':' is used inside a lambda the __func__ macro expands to operator(), which isn't','line_number':321,'multiline':False]
['text':' very useful, but hard to fix in a macro so suppressing the warning.','line_number':322,'multiline':False]
['text':' Private helper macro for workaround MSVC misexpansion of nested macro','line_number':330,'multiline':False]
['text':' invocations involving __VA_ARGS__.  See','line_number':331,'multiline':False]
['text':' https://stackoverflow.com/questions/5134523/msvc-doesnt-expand-va-args-correctly','line_number':332,'multiline':False]
['text':' On nvcc, C10_UNLIKELY thwarts missing return statement analysis.  In cases','line_number':335,'multiline':False]
['text':' where the unlikely expression may be a constant, use this macro to ensure','line_number':336,'multiline':False]
['text':' return statement analysis keeps working (at the cost of not getting the','line_number':337,'multiline':False]
['text':' likely/unlikely annotation on nvcc).','line_number':338,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/21418','line_number':339,'multiline':False]
['text':'','line_number':340,'multiline':False]
['text':' Currently, this is only used in the error reporting macros below.  If you','line_number':341,'multiline':False]
['text':' want to use it more generally, move me to Macros.h','line_number':342,'multiline':False]
['text':'','line_number':343,'multiline':False]
['text':' TODO: Brian Vaughan observed that we might be able to get this to work on','line_number':344,'multiline':False]
['text':' nvcc by writing some sort of C++ overload that distinguishes constexpr inputs','line_number':345,'multiline':False]
['text':' from non-constexpr.  Since there isn't any evidence that losing C10_UNLIKELY','line_number':346,'multiline':False]
['text':' in nvcc is causing us perf problems, this is not yet implemented, but this','line_number':347,'multiline':False]
['text':' might be an interesting piece of C++ code for an intrepid bootcamper to','line_number':348,'multiline':False]
['text':' write.','line_number':349,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':356,'multiline':False]
['text':' Error reporting macros','line_number':357,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':358,'multiline':False]
['text':' A utility macro to provide assert()-like functionality; that is, enforcement','line_number':370,'multiline':False]
['text':' of internal invariants in code.  It supports an arbitrary number of extra','line_number':371,'multiline':False]
['text':' arguments (evaluated only on failure), which will be printed in the assert','line_number':372,'multiline':False]
['text':' failure message using operator<< (this is useful to print some variables','line_number':373,'multiline':False]
['text':' which may be useful for debugging.)','line_number':374,'multiline':False]
['text':'','line_number':375,'multiline':False]
['text':' Usage:','line_number':376,'multiline':False]
['text':'    TORCH_INTERNAL_ASSERT(should_be_true);','line_number':377,'multiline':False]
['text':'    TORCH_INTERNAL_ASSERT(x == 0, "x = ", x);','line_number':378,'multiline':False]
['text':'','line_number':379,'multiline':False]
['text':' Assuming no bugs in PyTorch, the conditions tested by this macro should','line_number':380,'multiline':False]
['text':' always be true; e.g., it should be possible to disable all of these','line_number':381,'multiline':False]
['text':' conditions without changing observable user behavior.  If you would like to','line_number':382,'multiline':False]
['text':' do error reporting for user input, please use TORCH_CHECK instead.','line_number':383,'multiline':False]
['text':'','line_number':384,'multiline':False]
['text':' NOTE: It is SAFE to use this macro in production code; on failure, this','line_number':385,'multiline':False]
['text':' simply raises an exception, it does NOT unceremoniously quit the process','line_number':386,'multiline':False]
['text':' (unlike assert()).','line_number':387,'multiline':False]
['text':'','line_number':388,'multiline':False]
['text':' It would be nice if we could build a combined string literal out of','line_number':399,'multiline':False]
['text':' the TORCH_INTERNAL_ASSERT prefix and a user-provided string literal','line_number':400,'multiline':False]
['text':' as the first argument, but there doesn't seem to be any good way to','line_number':401,'multiline':False]
['text':' do that while still supporting having a first argument that isn't a','line_number':402,'multiline':False]
['text':' string literal.','line_number':403,'multiline':False]
['text':' A utility macro to make it easier to test for error conditions from user','line_number':417,'multiline':False]
['text':' input.  Like TORCH_INTERNAL_ASSERT, it supports an arbitrary number of extra','line_number':418,'multiline':False]
['text':' arguments (evaluated only on failure), which will be printed in the error','line_number':419,'multiline':False]
['text':' message using operator<< (e.g., you can pass any object which has','line_number':420,'multiline':False]
['text':' operator<< defined.  Most objects in PyTorch have these definitions!)','line_number':421,'multiline':False]
['text':'','line_number':422,'multiline':False]
['text':' Usage:','line_number':423,'multiline':False]
['text':'    TORCH_CHECK(should_be_true); // A default error message will be provided','line_number':424,'multiline':False]
['text':'                                 // in this case; but we recommend writing an','line_number':425,'multiline':False]
['text':'                                 // explicit error message, as it is more','line_number':426,'multiline':False]
['text':'                                 // user friendly.','line_number':427,'multiline':False]
['text':'    TORCH_CHECK(x == 0, "Expected x to be 0, but got ", x);','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':' On failure, this macro will raise an exception.  If this exception propagates','line_number':430,'multiline':False]
['text':' to Python, it will convert into a Python RuntimeError.','line_number':431,'multiline':False]
['text':'','line_number':432,'multiline':False]
['text':' NOTE: It is SAFE to use this macro in production code; on failure, this','line_number':433,'multiline':False]
['text':' simply raises an exception, it does NOT unceremoniously quit the process','line_number':434,'multiline':False]
['text':' (unlike CHECK() from glog.)','line_number':435,'multiline':False]
['text':'','line_number':436,'multiline':False]
['text':'msg','line_number':451,'multiline':True]
['text':' If there is just 1 user-provided C-string argument, use it.','line_number':457,'multiline':False]
['text':'msg','line_number':459,'multiline':True]
['text':' namespace detail','line_number':463,'multiline':False]
['text':' namespace c10','line_number':464,'multiline':False]
['text':' The c10::str() call that creates userMsg can have 1 of 3 return','line_number':493,'multiline':False]
['text':' types depending on the number and types of arguments passed to','line_number':494,'multiline':False]
['text':' TORCH_INTERNAL_ASSERT.  0 arguments will get a','line_number':495,'multiline':False]
['text':' CompileTimeEmptyString, 1 const char * will be passed straight','line_number':496,'multiline':False]
['text':' through, and anything else will get converted to std::string.','line_number':497,'multiline':False]
['text':'userMsg','line_number':509,'multiline':True]
['text':' namespace detail','line_number':519,'multiline':False]
['text':' namespace c10','line_number':520,'multiline':False]
['text':' An utility macro that does what `TORCH_CHECK` does if compiled in the host','line_number':542,'multiline':False]
['text':' code, otherwise does nothing. Supposed to be used in the code shared between','line_number':543,'multiline':False]
['text':' host and device code as an alternative for `TORCH_CHECK`.','line_number':544,'multiline':False]
['text':' Debug only version of TORCH_INTERNAL_ASSERT. This macro only checks in debug','line_number':551,'multiline':False]
['text':' build, and does nothing in release build.  It is appropriate to use','line_number':552,'multiline':False]
['text':' in situations where you want to add an assert to a hotpath, but it is','line_number':553,'multiline':False]
['text':' too expensive to run this assert on production builds.','line_number':554,'multiline':False]
['text':' Optimized version - generates no code.','line_number':556,'multiline':False]
['text':' TODO: We're going to get a lot of similar looking string literals','line_number':565,'multiline':False]
['text':' this way; check if this actually affects binary size.','line_number':566,'multiline':False]
['text':' Like TORCH_CHECK, but raises LinAlgError instead of Error.','line_number':568,'multiline':False]
['text':' Like TORCH_CHECK, but raises IndexErrors instead of Errors.','line_number':572,'multiline':False]
['text':' Like TORCH_CHECK, but raises ValueErrors instead of Errors.','line_number':576,'multiline':False]
['text':' Like TORCH_CHECK, but raises TypeErrors instead of Errors.','line_number':580,'multiline':False]
['text':' Like TORCH_CHECK, but raises NotImplementedErrors instead of Errors.','line_number':584,'multiline':False]
['text':' Report a warning to the user.  Accepts an arbitrary number of extra','line_number':599,'multiline':False]
['text':' arguments which are concatenated into the warning message using operator<<','line_number':600,'multiline':False]
['text':'','line_number':601,'multiline':False]
['text':' Report a warning to the user only once.  Accepts an arbitrary number of extra','line_number':618,'multiline':False]
['text':' arguments which are concatenated into the warning message using operator<<','line_number':619,'multiline':False]
['text':'','line_number':620,'multiline':False]
['text':' Report an error with a specific argument','line_number':639,'multiline':False]
['text':' NOTE: using the argument name in TORCH_CHECK's message is preferred','line_number':640,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':644,'multiline':False]
['text':' Deprecated macros','line_number':645,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':646,'multiline':False]
['text':'
// Deprecation disabled until we fix sites in our codebase
C10_DEPRECATED_MESSAGE("AT_ERROR(msg) is deprecated, use TORCH_CHECK(false, msg)
instead.")
','line_number':651,'multiline':True]
['text':'
// Deprecation disabled until we fix sites in our codebase
C10_DEPRECATED_MESSAGE("AT_ASSERT is deprecated, if you mean to indicate an
internal invariant failure, use " \
                       "TORCH_INTERNAL_ASSERT instead; if you mean to do user
error checking, use " \ "TORCH_CHECK.  See
https://github.com/pytorch/pytorch/issues/20287 for more details.")
','line_number':658,'multiline':True]
['text':'
// Deprecation disabled until we fix sites in our codebase
C10_DEPRECATED_MESSAGE("AT_ASSERTM is deprecated, if you mean to indicate an
internal invariant failure, use " \
                       "TORCH_INTERNAL_ASSERT instead; if you mean to do user
error checking, use " \ "TORCH_CHECK.  See
https://github.com/pytorch/pytorch/issues/20287 for more details.")
','line_number':668,'multiline':True]
['text':' namespace detail','line_number':678,'multiline':False]
['text':' namespace c10','line_number':679,'multiline':False]
['text':' Deprecated alias; this alias was deprecated because people kept mistakenly','line_number':681,'multiline':False]
['text':' using it for user error checking.  Use TORCH_INTERNAL_ASSERT or TORCH_CHECK','line_number':682,'multiline':False]
['text':' instead. See https://github.com/pytorch/pytorch/issues/20287 for more','line_number':683,'multiline':False]
['text':' details.','line_number':684,'multiline':False]
['text':' Deprecated alias, like AT_ASSERT.  The new TORCH_INTERNAL_ASSERT macro','line_number':691,'multiline':False]
['text':' supports both 0-ary and variadic calls, so having a separate','line_number':692,'multiline':False]
['text':' message-accepting macro is not necessary.','line_number':693,'multiline':False]
['text':'','line_number':694,'multiline':False]
['text':' NB: we MUST include cond explicitly here, as MSVC will miscompile the macro','line_number':695,'multiline':False]
['text':' expansion, shunting all of __VA_ARGS__ to cond.  An alternate workaround','line_number':696,'multiline':False]
['text':' can be seen at','line_number':697,'multiline':False]
['text':' https://stackoverflow.com/questions/5134523/msvc-doesnt-expand-va-args-correctly','line_number':698,'multiline':False]
['text':' Deprecated alias; this alias was deprecated because it represents extra API','line_number':705,'multiline':False]
['text':' surface that makes it hard for people to understand what macro to use.','line_number':706,'multiline':False]
['text':' Use TORCH_CHECK(false, ...) or TORCH_INTERNAL_ASSERT(false, ...) to','line_number':707,'multiline':False]
['text':' unconditionally fail at a line of code.','line_number':708,'multiline':False]
['text':' C10_UTIL_EXCEPTION_H_','line_number':715,'multiline':False]
