['text':'/ Defines the Float8_e4m3fn type (8-bit floating-point) including conversions','line_number':3,'multiline':False]
['text':'/ to standard C types and basic arithmetic operations. Note that arithmetic','line_number':4,'multiline':False]
['text':'/ operations are implemented by converting to floating point and','line_number':5,'multiline':False]
['text':'/ performing the operation in float32.','line_number':6,'multiline':False]
['text':'/ Binary configuration:','line_number':7,'multiline':False]
['text':'/ s eeee mmm','line_number':8,'multiline':False]
['text':'/ 1 sign bit','line_number':9,'multiline':False]
['text':'/ 4 exponent bits','line_number':10,'multiline':False]
['text':'/ 3 mantissa bits','line_number':11,'multiline':False]
['text':'/ bias = 7','line_number':12,'multiline':False]
['text':'/','line_number':13,'multiline':False]
['text':'/ Implementation based on the paper https://arxiv.org/pdf/2209.05433.pdf','line_number':14,'multiline':False]
['text':'/ and inspired by Half implementation from pytorch/c10/util/Half.h','line_number':15,'multiline':False]
['text':' operator typeid','line_number':45,'multiline':False]
['text':'
 * Convert a 8-bit floating-point number in fp8 E4M3FN format, in bit
 * representation, to a 32-bit floating-point number in IEEE single-precision
 * format, in bit representation.
 *
 * @note The implementation doesn't use any floating-point operations.
 ','line_number':51,'multiline':True]
['text':'
   * Extend the fp8 E4M3FN number to 32 bits and shift to the
   * upper part of the 32-bit word:
   *      +---+----+---+-----------------------------+
   *      | S |EEEE|MMM|0000 0000 0000 0000 0000 0000|
   *      +---+----+---+-----------------------------+
   * Bits  31 27-30 24-26          0-23
   *
   * S - sign bit, E - bits of the biased exponent, M - bits of the mantissa, 0
   * - zero bits.
   ','line_number':59,'multiline':True]
['text':'
   * Extract the sign of the input number into the high bit of the 32-bit word:
   *
   *      +---+----------------------------------+
   *      | S |0000000 00000000 00000000 00000000|
   *      +---+----------------------------------+
   * Bits  31                 0-31
   ','line_number':71,'multiline':True]
['text':'
   * Extract mantissa and biased exponent of the input number into the bits 0-30
   * of the 32-bit word:
   *
   *      +---+----+---+-----------------------------+
   *      | S |EEEE|MMM|0000 0000 0000 0000 0000 0000|
   *      +---+----+---+-----------------------------+
   * Bits  31  27-30 24-26      0-23
   ','line_number':80,'multiline':True]
['text':'
   * Renorm shift is the number of bits to shift mantissa left to make the
   * half-precision number normalized. If the initial number is normalized, some
   * of its high 5 bits (sign == 0 and 4-bit exponent) equals one. In this case
   * renorm_shift == 0. If the number is denormalize, renorm_shift > 0. Note
   * that if we shift denormalized nonsign by renorm_shift, the unit bit of
   * mantissa will shift into exponent, turning the biased exponent into 1, and
   * making mantissa normalized (i.e. without leading 1).
   ','line_number':90,'multiline':True]
['text':' Note: zero is not a supported input into `__builtin_clz`','line_number':102,'multiline':False]
['text':' Note: zero is not a supported input into `__builtin_clz`','line_number':110,'multiline':False]
['text':'
   * Iff fp8e4m3fn number has all exponent and mantissa bits set to 1,
   * the addition overflows it into bit 31, and the subsequent shift turns the
   * high 9 bits into 1. Thus inf_nan_mask == 0x7F800000 if the fp8e4m3fn number
   * is Nan, 0x00000000 otherwise
   ','line_number':115,'multiline':True]
['text':'
   * Iff nonsign is 0, it overflows into 0xFFFFFFFF, turning bit 31
   * into 1. Otherwise, bit 31 remains 0. The signed shift right by 31
   * broadcasts bit 31 into all bits of the zero_mask. Thus zero_mask ==
   * 0xFFFFFFFF if the half-precision number was zero (+0.0h or -0.0h)
   * 0x00000000 otherwise
   ','line_number':123,'multiline':True]
['text':'
   * 1. Shift nonsign left by renorm_shift to normalize it (if the input
   * was denormal)
   * 2. Shift nonsign right by 4 so the exponent (4 bits originally)
   * becomes an 8-bit field and 3-bit mantissa shifts into the 3 high
   * bits of the 23-bit mantissa of IEEE single-precision number.
   * 3. Add 0x78 to the exponent (starting at bit 23) to compensate the
   * different in exponent bias (0x7F for single-precision number less 0x07
   * for fp8e4m3fn number).
   * 4. Subtract renorm_shift from the exponent (starting at bit 23) to
   * account for renormalization. As renorm_shift is less than 0x78, this
   * can be combined with step 3.
   * 5. Binary OR with inf_nan_mask to turn the exponent into 0xFF if the
   * input was NaN or infinity.
   * 6. Binary ANDNOT with zero_mask to turn the mantissa and exponent
   * into zero if the input was zero.
   * 7. Combine with the sign of the input number.
   ','line_number':131,'multiline':True]
['text':'
 * Convert a 32-bit floating-point number in IEEE single-precision format to a
 * 8-bit floating-point number in fp8 E4M3FN format, in bit representation.
 ','line_number':156,'multiline':True]
['text':'
   * Binary representation of 480.0f, which is the first value
   * not representable in fp8e4m3fn range:
   * 0 1111 111 - fp8e4m3fn
   * 0 10000111 11100000000000000000000 - fp32
   ','line_number':161,'multiline':True]
['text':'
   * A mask for converting fp32 numbers lower than fp8e4m3fn normal range
   * into denorm representation
   * magic number: ((127 - 7) + (23 - 3) + 1)
   ','line_number':169,'multiline':True]
['text':'
   * Extract the sign of the input number into the high bit of the 32-bit word:
   *
   *      +---+----------------------------------+
   *      | S |0000000 00000000 00000000 00000000|
   *      +---+----------------------------------+
   * Bits  31                 0-31
   ','line_number':180,'multiline':True]
['text':'
   * Set sign bit to 0
   ','line_number':190,'multiline':True]
['text':' NaN - all exponent and mantissa bits set to 1','line_number':196,'multiline':False]
['text':' Input number is smaller than 2^(-6), which is the smallest','line_number':200,'multiline':False]
['text':' fp8e4m3fn normal number','line_number':201,'multiline':False]
['text':' resulting mantissa is odd','line_number':206,'multiline':False]
['text':' update exponent, rounding bias part 1','line_number':209,'multiline':False]
['text':' rounding bias part 2','line_number':212,'multiline':False]
['text':' take the bits!','line_number':215,'multiline':False]
['text':' namespace detail','line_number':224,'multiline':False]
['text':' namespace c10','line_number':245,'multiline':False]
['text':' IWYU pragma: keep','line_number':247,'multiline':False]
