['text':'/ Defines the Float8_e5m2 type (8-bit floating-point) including conversions','line_number':3,'multiline':False]
['text':'/ to standard C types and basic arithmetic operations. Note that arithmetic','line_number':4,'multiline':False]
['text':'/ operations are implemented by converting to floating point and','line_number':5,'multiline':False]
['text':'/ performing the operation in float32.','line_number':6,'multiline':False]
['text':'/ Binary configuration:','line_number':7,'multiline':False]
['text':'/ s eeeee mm','line_number':8,'multiline':False]
['text':'/ 1 sign bit','line_number':9,'multiline':False]
['text':'/ 5 exponent bits','line_number':10,'multiline':False]
['text':'/ 2 mantissa bits','line_number':11,'multiline':False]
['text':'/ bias = 15','line_number':12,'multiline':False]
['text':'/','line_number':13,'multiline':False]
['text':'/ Implementation based on the paper https://arxiv.org/pdf/2209.05433.pdf','line_number':14,'multiline':False]
['text':'/ and inspired by Half implementation from pytorch/c10/util/Half.h','line_number':15,'multiline':False]
['text':'
 * Convert a 8-bit floating-point number in fp8 E5M2 format, in bit
 * representation, to a 32-bit floating-point number in IEEE single-precision
 * format, in bit representation.
 *
 * @note The implementation doesn't use any floating-point operations.
 ','line_number':23,'multiline':True]
['text':'
   * Extend the fp8 E5M2 number to 32 bits and shift to the
   * upper part of the 32-bit word:
   *      +---+----+---+-----------------------------+
   *      | S |EEEEE|MM|0000 0000 0000 0000 0000 0000|
   *      +---+----+---+-----------------------------+
   * Bits  31 26-30 24-25          0-23
   *
   * S - sign bit, E - bits of the biased exponent, M - bits of the mantissa, 0
   * - zero bits.
   ','line_number':31,'multiline':True]
['text':'
 * Convert a 32-bit floating-point number in IEEE single-precision format to a
 * 8-bit floating-point number in fp8 E5M2 format, in bit representation.
 ','line_number':47,'multiline':True]
['text':'
   * Binary representation of fp32 infinity
   * 0 11111111 00000000000000000000000
   ','line_number':52,'multiline':True]
['text':'
   * Binary representation of 65536.0f, which is the first value
   * not representable in fp8e5m2 range:
   * 0 11111 00 - fp8e5m2
   * 0 10001111 00000000000000000000000 - fp32
   ','line_number':58,'multiline':True]
['text':'
   * A mask for converting fp32 numbers lower than fp8e5m2 normal range
   * into denorm representation
   * magic number: ((127 - 15) + (23 - 2) + 1)
   ','line_number':66,'multiline':True]
['text':'
   * Extract the sign of the input number into the high bit of the 32-bit word:
   *
   *      +---+----------------------------------+
   *      | S |0000000 00000000 00000000 00000000|
   *      +---+----------------------------------+
   * Bits  31                 0-31
   ','line_number':76,'multiline':True]
['text':'
   * Set sign bit to 0
   ','line_number':86,'multiline':True]
['text':' NaN - all exponent and mantissa bits set to 1','line_number':92,'multiline':False]
['text':' Input number is smaller than 2^(-14), which is the smallest','line_number':96,'multiline':False]
['text':' fp8e5m2 normal number','line_number':97,'multiline':False]
['text':' resulting mantissa is odd','line_number':102,'multiline':False]
['text':' update exponent, rounding bias part 1','line_number':105,'multiline':False]
['text':' rounding bias part 2','line_number':108,'multiline':False]
['text':' take the bits!','line_number':111,'multiline':False]
['text':' namespace detail','line_number':120,'multiline':False]
['text':' namespace c10','line_number':141,'multiline':False]
['text':' IWYU pragma: keep','line_number':143,'multiline':False]
