['text':' Constructor. Specify what action to take when a signal is received.','line_number':27,'multiline':False]
['text':' This works by setting up certain fatal signal handlers. Previous fatal','line_number':44,'multiline':False]
['text':' signal handlers will still be called when the signal is raised. Defaults','line_number':45,'multiline':False]
['text':' to being off.','line_number':46,'multiline':False]
['text':' The mutex protects the bool.','line_number':76,'multiline':False]
['text':' We need to hold a reference to call the previous SIGUSR2 handler in case','line_number':79,'multiline':False]
['text':' we didn't signal it','line_number':80,'multiline':False]
['text':' Flag dictating whether the SIGUSR2 handler falls back to previous handlers','line_number':82,'multiline':False]
['text':' or is intercepted in order to print a stack trace.','line_number':83,'multiline':False]
['text':' Global state set when a fatal signal is received so that backtracing','line_number':85,'multiline':False]
['text':' threads know why they're printing a stacktrace.','line_number':86,'multiline':False]
['text':' This wait condition is used to wait for other threads to finish writing','line_number':89,'multiline':False]
['text':' their stack trace when in fatal sig handler (we can't use pthread_join','line_number':90,'multiline':False]
['text':' because there's no way to convert from a tid to a pthread_t).','line_number':91,'multiline':False]
['text':' defined(C10_SUPPORTS_SIGNAL_HANDLER)','line_number':104,'multiline':False]
['text':' namespace c10','line_number':106,'multiline':False]
