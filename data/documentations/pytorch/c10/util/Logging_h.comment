['text':' CAFFE2_LOG_THRESHOLD is a compile time flag that would allow us to turn off','line_number':15,'multiline':False]
['text':' logging at compile time so no logging message below that level is produced','line_number':16,'multiline':False]
['text':' at all. The value should be between INT_MIN and CAFFE_FATAL.','line_number':17,'multiline':False]
['text':' If we have not defined the compile time log threshold, we keep all the','line_number':19,'multiline':False]
['text':' log cases.','line_number':20,'multiline':False]
['text':' CAFFE2_LOG_THRESHOLD','line_number':22,'multiline':False]
['text':' Below are different implementations for glog and non-glog cases.','line_number':24,'multiline':False]
['text':' !C10_USE_GLOG','line_number':27,'multiline':False]
['text':' C10_USE_GLOG','line_number':29,'multiline':False]
['text':' Some versions of GLOG support less-spammy version of LOG_EVERY_MS. If it's','line_number':34,'multiline':False]
['text':' not available - just short-circuit to the always working one one.','line_number':35,'multiline':False]
['text':' We define the C10_ name to avoid confusing other files','line_number':36,'multiline':False]
['text':' Same for LOG_FIRST_N','line_number':43,'multiline':False]
['text':' Same for LOG_EVERY_N','line_number':50,'multiline':False]
['text':' Functions that we use for initialization.','line_number':61,'multiline':False]
['text':'msg','line_number':83,'multiline':True]
['text':'msg','line_number':106,'multiline':True]
['text':'*
 * A utility to allow one to show log info to stderr after the program starts.
 *
 * This is similar to calling GLOG's --logtostderr, or setting caffe2_log_level
 * to smaller than INFO. You are recommended to only use this in a few sparse
 * cases, such as when you want to write a tutorial or something. Normally, use
 * the commandline flags to set the log level.
 ','line_number':119,'multiline':True]
['text':'*
 * Rich logging messages
 *
 * CAFFE_ENFORCE_THAT can be used with one of the "checker functions" that
 * capture input argument values and add it to the exception message. E.g.
 * `CAFFE_ENFORCE_THAT(Equals(foo(x), bar(y)), "Optional additional message")`
 * would evaluate both foo and bar only once and if the results are not equal -
 * include them in the exception message.
 *
 * Some of the basic checker functions like Equals or Greater are already
 * defined below. Other header might define customized checkers by adding
 * functions to caffe2::enforce_detail namespace. For example:
 *
 *   namespace caffe2 { namespace enforce_detail {
 *   inline EnforceFailMessage IsVector(const vector<int64_t>& shape) {
 *     if (shape.size() == 1) { return EnforceOK(); }
 *     return c10::str("Shape ", shape, " is not a vector");
 *   }
 *   }}
 *
 * With further usages like `CAFFE_ENFORCE_THAT(IsVector(Input(0).dims()))`
 *
 * Convenient wrappers for binary operations like CAFFE_ENFORCE_EQ are provided
 * too. Please use them instead of TORCH_CHECK_EQ and friends for failures in
 * user-provided input.
 ','line_number':160,'multiline':True]
['text':' GCC7 is getting an internal compiler error on the new','line_number':199,'multiline':False]
['text':' implementation, so keep the old one (which evaluates the error','line_number':200,'multiline':False]
['text':' message eagerly and therefore is undesirable for general use','line_number':201,'multiline':False]
['text':' compared to the new one) around for it.','line_number':202,'multiline':False]
['text':' namespace enforce_detail','line_number':277,'multiline':False]
['text':'*
 * Very lightweight logging for the first time API usage. It's beneficial for
 * tracking of individual functionality usage in larger applications.
 *
 * In order to ensure light-weightedness of logging, we utilize static variable
 * trick - LogAPIUsage will be invoked only once and further invocations will
 * just do an atomic check.
 *
 * Example:
 *   // Logs caller info with an arbitrary text event, if there is a usage.
 *   C10_LOG_API_USAGE_ONCE("my_api");
 ','line_number':318,'multiline':True]
['text':' API usage logging capabilities','line_number':334,'multiline':False]
['text':' PyTorch ddp usage logging capabilities','line_number':346,'multiline':False]
['text':' DDPLoggingData holds data that can be logged in applications','line_number':347,'multiline':False]
['text':' for analysis and debugging. Data structure is defined in','line_number':348,'multiline':False]
['text':' c10 directory so that it can be easily imported by both c10','line_number':349,'multiline':False]
['text':' and torch files.','line_number':350,'multiline':False]
['text':' logging fields that are string types.','line_number':352,'multiline':False]
['text':' logging fields that are int64_t types.','line_number':354,'multiline':False]
['text':' Return value is needed to do the static variable initialization trick','line_number':363,'multiline':False]
['text':' namespace detail','line_number':365,'multiline':False]
['text':' Initializes the c10 logger.','line_number':367,'multiline':False]
['text':' Sets the rank, which will be included in log messages','line_number':370,'multiline':False]
['text':' namespace c10','line_number':373,'multiline':False]
['text':' C10_UTIL_LOGGING_H_','line_number':375,'multiline':False]
