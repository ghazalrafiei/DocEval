['text':'/ This file provides some simple utilities for detecting common deadlocks in','line_number':5,'multiline':False]
['text':'/ PyTorch.  For now, we focus exclusively on detecting Python GIL deadlocks,','line_number':6,'multiline':False]
['text':'/ as the GIL is a wide ranging lock that is taken out in many situations.','line_number':7,'multiline':False]
['text':'/ The basic strategy is before performing an operation that may block, you','line_number':8,'multiline':False]
['text':'/ can use TORCH_ASSERT_NO_GIL_WITHOUT_PYTHON_DEP() to assert that the GIL is','line_number':9,'multiline':False]
['text':'/ not held.  This macro is to be used in contexts where no static dependency','line_number':10,'multiline':False]
['text':'/ on Python is available (we will handle indirecting a virtual call for you).','line_number':11,'multiline':False]
['text':'/','line_number':12,'multiline':False]
['text':'/ If the GIL is held by a torchdeploy interpreter, we always report false.','line_number':13,'multiline':False]
['text':'/ If you are in a context where Python bindings are available, it's better','line_number':14,'multiline':False]
['text':'/ to directly assert on PyGILState_Check (as it avoids a vcall and also','line_number':15,'multiline':False]
['text':'/ works correctly with torchdeploy.)','line_number':16,'multiline':False]
['text':' Returns true if we hold the GIL.  If not linked against Python we','line_number':31,'multiline':False]
['text':' always return false.','line_number':32,'multiline':False]
['text':' DO NOT call this registerer from a torch deploy instance!  You will clobber','line_number':38,'multiline':False]
['text':' other registrations','line_number':39,'multiline':False]
['text':' namespace impl','line_number':49,'multiline':False]
['text':' namespace c10','line_number':50,'multiline':False]
