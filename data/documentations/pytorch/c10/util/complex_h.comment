['text':' c10::complex is an implementation of complex numbers that aims','line_number':21,'multiline':False]
['text':' to work on all devices supported by PyTorch','line_number':22,'multiline':False]
['text':'','line_number':23,'multiline':False]
['text':' Most of the APIs duplicates std::complex','line_number':24,'multiline':False]
['text':' Reference: https://en.cppreference.com/w/cpp/numeric/complex','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':' [NOTE: Complex Operator Unification]','line_number':27,'multiline':False]
['text':' Operators currently use a mix of std::complex, thrust::complex, and','line_number':28,'multiline':False]
['text':' c10::complex internally. The end state is that all operators will use','line_number':29,'multiline':False]
['text':' c10::complex internally.  Until then, there may be some hacks to support all','line_number':30,'multiline':False]
['text':' variants.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' [Note on Constructors]','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' The APIs of constructors are mostly copied from C++ standard:','line_number':36,'multiline':False]
['text':'   https://en.cppreference.com/w/cpp/numeric/complex/complex','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' Since C++14, all constructors are constexpr in std::complex','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' There are three types of constructors:','line_number':41,'multiline':False]
['text':' - initializing from real and imag:','line_number':42,'multiline':False]
['text':'     `constexpr complex( const T& re = T(), const T& im = T() );`','line_number':43,'multiline':False]
['text':' - implicitly-declared copy constructor','line_number':44,'multiline':False]
['text':' - converting constructors','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':' Converting constructors:','line_number':47,'multiline':False]
['text':' - std::complex defines converting constructor between float/double/long','line_number':48,'multiline':False]
['text':' double,','line_number':49,'multiline':False]
['text':'   while we define converting constructor between float/double.','line_number':50,'multiline':False]
['text':' - For these converting constructors, upcasting is implicit, downcasting is','line_number':51,'multiline':False]
['text':'   explicit.','line_number':52,'multiline':False]
['text':' - We also define explicit casting from std::complex/thrust::complex','line_number':53,'multiline':False]
['text':'   - Note that the conversion from thrust is not constexpr, because','line_number':54,'multiline':False]
['text':'     thrust does not define them as constexpr ????','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':' [Operator =]','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':' The APIs of operator = are mostly copied from C++ standard:','line_number':60,'multiline':False]
['text':'   https://en.cppreference.com/w/cpp/numeric/complex/operator%3D','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':' Since C++20, all operator= are constexpr. Although we are not building with','line_number':63,'multiline':False]
['text':' C++20, we also obey this behavior.','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':' There are three types of assign operator:','line_number':66,'multiline':False]
['text':' - Assign a real value from the same scalar type','line_number':67,'multiline':False]
['text':'   - In std, this is templated as complex& operator=(const T& x)','line_number':68,'multiline':False]
['text':'     with specialization `complex& operator=(T x)` for float/double/long','line_number':69,'multiline':False]
['text':'     double Since we only support float and double, on will use `complex&','line_number':70,'multiline':False]
['text':'     operator=(T x)`','line_number':71,'multiline':False]
['text':' - Copy assignment operator and converting assignment operator','line_number':72,'multiline':False]
['text':'   - There is no specialization of converting assignment operators, which type','line_number':73,'multiline':False]
['text':'   is','line_number':74,'multiline':False]
['text':'     convertible is solely dependent on whether the scalar type is convertible','line_number':75,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':' In addition to the standard assignment, we also provide assignment operators','line_number':77,'multiline':False]
['text':' with std and thrust','line_number':78,'multiline':False]
['text':'','line_number':79,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':' [Casting operators]','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':' std::complex does not have casting operators. We define casting operators','line_number':83,'multiline':False]
['text':' casting to std::complex and thrust::complex','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':' [Operator ""]','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' std::complex has custom literals `i`, `if` and `il` defined in namespace','line_number':89,'multiline':False]
['text':' `std::literals::complex_literals`. We define our own custom literals in the','line_number':90,'multiline':False]
['text':' namespace `c10::complex_literals`. Our custom literals does not follow the','line_number':91,'multiline':False]
['text':' same behavior as in std::complex, instead, we define _if, _id to construct','line_number':92,'multiline':False]
['text':' float/double complex literals.','line_number':93,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':'','line_number':95,'multiline':False]
['text':' [real() and imag()]','line_number':96,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':' In C++20, there are two overload of these functions, one it to return the','line_number':98,'multiline':False]
['text':' real/imag, another is to set real/imag, they are both constexpr. We follow','line_number':99,'multiline':False]
['text':' this design.','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':'','line_number':102,'multiline':False]
['text':' [Operator +=,-=,*=,/=]','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':' Since C++20, these operators become constexpr. In our implementation, they','line_number':105,'multiline':False]
['text':' are also constexpr.','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':' There are two types of such operators: operating with a real number, or','line_number':108,'multiline':False]
['text':' operating with another complex number. For the operating with a real number,','line_number':109,'multiline':False]
['text':' the generic template form has argument type `const T &`, while the overload','line_number':110,'multiline':False]
['text':' for float/double/long double has `T`. We will follow the same type as','line_number':111,'multiline':False]
['text':' float/double/long double in std.','line_number':112,'multiline':False]
['text':'','line_number':113,'multiline':False]
['text':' [Unary operator +-]','line_number':114,'multiline':False]
['text':'','line_number':115,'multiline':False]
['text':' Since C++20, they are constexpr. We also make them expr','line_number':116,'multiline':False]
['text':'','line_number':117,'multiline':False]
['text':' [Binary operators +-*/]','line_number':118,'multiline':False]
['text':'','line_number':119,'multiline':False]
['text':' Each operator has three versions (taking + as example):','line_number':120,'multiline':False]
['text':' - complex + complex','line_number':121,'multiline':False]
['text':' - complex + real','line_number':122,'multiline':False]
['text':' - real + complex','line_number':123,'multiline':False]
['text':'','line_number':124,'multiline':False]
['text':' [Operator ==, !=]','line_number':125,'multiline':False]
['text':'','line_number':126,'multiline':False]
['text':' Each operator has three versions (taking == as example):','line_number':127,'multiline':False]
['text':' - complex == complex','line_number':128,'multiline':False]
['text':' - complex == real','line_number':129,'multiline':False]
['text':' - real == complex','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':' Some of them are removed on C++20, but we decide to keep them','line_number':132,'multiline':False]
['text':'','line_number':133,'multiline':False]
['text':' [Operator <<, >>]','line_number':134,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':' These are implemented by casting to std::complex','line_number':136,'multiline':False]
['text':'','line_number':137,'multiline':False]
['text':'','line_number':138,'multiline':False]
['text':'','line_number':139,'multiline':False]
['text':' TODO(@zasdfgbnm): c10::complex<c10::Half> is not currently supported,','line_number':140,'multiline':False]
['text':' because:','line_number':141,'multiline':False]
['text':'  - lots of members and functions of c10::Half are not constexpr','line_number':142,'multiline':False]
['text':'  - thrust::complex only support float and double','line_number':143,'multiline':False]
['text':' NOTE can not be implemented as follow due to ROCm bug:','line_number':162,'multiline':False]
['text':'   explicit C10_HOST_DEVICE complex(const thrust::complex<U> &other):','line_number':163,'multiline':False]
['text':'   complex(other.real(), other.imag()) {}','line_number':164,'multiline':False]
['text':' Use SFINAE to specialize casting constructor for c10::complex<float> and','line_number':167,'multiline':False]
['text':' c10::complex<double>','line_number':168,'multiline':False]
['text':' (a + bi) * (c + di) = (a*c - b*d) + (a * d + b * c) i','line_number':229,'multiline':False]
['text':' (a + bi) / (c + di) = (ac + bd)/(c^2 + d^2) + (bc - ad)/(c^2 + d^2) i','line_number':247,'multiline':False]
['text':' the calculation below follows numpy's complex division','line_number':248,'multiline':False]
['text':' std::abs is already constexpr by gcc','line_number':255,'multiline':False]
['text':' divide by zeros should yield a complex inf or nan ','line_number':265,'multiline':True]
['text':' consistent with NumPy behavior','line_number':312,'multiline':False]
['text':' namespace complex_literals','line_number':349,'multiline':False]
['text':' Define operators between integral scalars and c10::complex. std::complex does','line_number':432,'multiline':False]
['text':' not support this when T is a floating-point number. This is useful because it','line_number':433,'multiline':False]
['text':' saves a lot of "static_cast" when operate a complex and an integer. This','line_number':434,'multiline':False]
['text':' makes the code both less verbose and potentially more efficient.','line_number':435,'multiline':False]
['text':' namespace c10','line_number':530,'multiline':False]
['text':' std functions','line_number':532,'multiline':False]
['text':'','line_number':533,'multiline':False]
['text':' The implementation of these functions also follow the design of C++20','line_number':534,'multiline':False]
['text':' For std::conj, there are other versions of it:','line_number':575,'multiline':False]
['text':'   constexpr std::complex<float> conj( float z );','line_number':576,'multiline':False]
['text':'   template< class DoubleOrInteger >','line_number':577,'multiline':False]
['text':'   constexpr std::complex<double> conj( DoubleOrInteger z );','line_number':578,'multiline':False]
['text':'   constexpr std::complex<long double> conj( long double z );','line_number':579,'multiline':False]
['text':' These are not implemented','line_number':580,'multiline':False]
['text':' TODO(@zasdfgbnm): implement them as c10::conj','line_number':581,'multiline':False]
['text':' Thrust does not have complex --> complex version of thrust::proj,','line_number':587,'multiline':False]
['text':' so this function is not implemented at c10 right now.','line_number':588,'multiline':False]
['text':' TODO(@zasdfgbnm): implement it by ourselves','line_number':589,'multiline':False]
['text':' There is no c10 version of std::polar, because std::polar always','line_number':591,'multiline':False]
['text':' returns std::complex. Use c10::polar instead;','line_number':592,'multiline':False]
['text':' namespace std','line_number':594,'multiline':False]
['text':' std::polar() requires r >= 0, so spell out the explicit implementation to','line_number':603,'multiline':False]
['text':' avoid a branch.','line_number':604,'multiline':False]
['text':' namespace c10','line_number':609,'multiline':False]
['text':' math functions are included in a separate file','line_number':614,'multiline':False]
['text':' IWYU pragma: keep','line_number':615,'multiline':False]
['text':' utilities for complex types','line_number':616,'multiline':False]
['text':' IWYU pragma: keep','line_number':617,'multiline':False]
