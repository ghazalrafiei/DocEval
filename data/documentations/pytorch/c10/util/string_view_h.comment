['text':'*
 * Port of std::string_view with methods from C++20.
 * Implemented following the interface definition in
 * https://en.cppreference.com/w/cpp/string/basic_string_view
 * See there for the API documentation.
 *
 * Difference: We don't have a Traits template parameter because
 * std::char_traits isn't constexpr and we'd have to reimplement
 * std::char_traits if we wanted to use it with our constexpr basic_string_view.
 ','line_number':16,'multiline':True]
['text':' implicit ','line_number':48,'multiline':True]
['text':' implicit ','line_number':51,'multiline':True]
['text':' TODO: split out','line_number':108,'multiline':False]
['text':' CUDA doesn't like std::out_of_range in device code','line_number':114,'multiline':False]
['text':' CUDA doesn't like std::out_of_range in device code','line_number':195,'multiline':False]
['text':' Write it iteratively. This is faster.','line_number':208,'multiline':False]
['text':' Write it iteratively. This is faster.','line_number':350,'multiline':False]
['text':' Write it iteratively. This is faster.','line_number':502,'multiline':False]
['text':' We don't use string_view::compare() here but implement it manually','line_number':515,'multiline':False]
['text':' because only looking at equality allows for more optimized code.','line_number':516,'multiline':False]
['text':' Yes, memcmp would be laster than this loop, but memcmp isn't constexpr','line_number':524,'multiline':False]
['text':' and I didn't feel like implementing a constexpr memcmp variant.','line_number':525,'multiline':False]
['text':' TODO At some point this should probably be done, including tricks','line_number':526,'multiline':False]
['text':' like comparing one machine word instead of a byte per iteration.','line_number':527,'multiline':False]
['text':' The rules for operator<< are quite complex, so lets defer to the','line_number':574,'multiline':False]
['text':' STL implementation.','line_number':575,'multiline':False]
['text':' namespace c10','line_number':589,'multiline':False]
['text':' The standard says that std::string_view hashing must do the same as','line_number':595,'multiline':False]
['text':' std::string hashing but leaves the details of std::string hashing','line_number':596,'multiline':False]
['text':' up to the implementer. So, to be conformant, we need to re-use and','line_number':597,'multiline':False]
['text':' existing STL type's hash function. The std::string fallback is probably','line_number':598,'multiline':False]
['text':' slow but the only way to be conformant.','line_number':599,'multiline':False]
['text':' namespace std','line_number':605,'multiline':False]
