['text':'*
 * Type holding a list of types for compile time type computations
 ','line_number':17,'multiline':True]
['text':' not for instantiation','line_number':23,'multiline':False]
['text':'*
 * Returns the number of types in a typelist
 * Example:
 *   3  ==  size<typelist<int, int, double>>::value
 ','line_number':26,'multiline':True]
['text':'*
 * Transforms a list of types into a tuple holding these types.
 * Example:
 *   std::tuple<int, string>  ==  to_tuple_t<typelist<int, string>>
 ','line_number':42,'multiline':True]
['text':'*
 * Creates a typelist containing the types of a given tuple.
 * Example:
 *   typelist<int, string>  ==  from_tuple_t<std::tuple<int, string>>
 ','line_number':60,'multiline':True]
['text':'*
 * Concatenates multiple type lists.
 * Example:
 *   typelist<int, string, int>  ==  concat_t<typelist<int, string>,
 * typelist<int>>
 ','line_number':78,'multiline':True]
['text':'*
 * Filters the types in a type list by a type trait.
 * Examples:
 *   typelist<int&, const string&&>  ==  filter_t<std::is_reference,
 * typelist<void, string, int&, bool, const string&&, int>>
 ','line_number':108,'multiline':True]
['text':'*
 * Counts how many types in the list fulfill a type trait
 * Examples:
 *   2  ==  count_if<std::is_reference, typelist<void, string, int&, bool, const
 * string&&, int>>
 ','line_number':142,'multiline':True]
['text':' TODO Direct implementation might be faster','line_number':156,'multiline':False]
['text':'*
 * Checks if a typelist contains a certain type.
 * Examples:
 *  contains<typelist<int, string>, string> == true_type
 *  contains<typelist<int, string>, double> == false_type
 ','line_number':160,'multiline':True]
['text':' namespace detail','line_number':182,'multiline':False]
['text':'*
 * Returns true iff the type trait is true for all types in the type list
 * Examples:
 *   true   ==  all<std::is_reference, typelist<int&, const float&&, const
 * MyClass&>>::value false  ==  all<std::is_reference, typelist<int&, const
 * float&&, MyClass>>::value
 ','line_number':186,'multiline':True]
['text':'*
 * Returns true iff the type trait is true for any type in the type list
 * Examples:
 *   true   ==  true_for_any_type<std::is_reference, typelist<int, const
 * float&&, const MyClass>>::value false  ==
 * true_for_any_type<std::is_reference, typelist<int, const float,
 * MyClass>>::value
 ','line_number':207,'multiline':True]
['text':'*
 * Maps types of a type list using a type trait
 * Example:
 *  typelist<int&, double&, string&>  ==  map_t<std::add_lvalue_reference_t,
 * typelist<int, double, string>>
 ','line_number':229,'multiline':True]
['text':'*
 * Returns the first element of a type list.
 * Example:
 *   int  ==  head_t<typelist<int, string>>
 ','line_number':248,'multiline':True]
['text':'*
 * Returns the first element of a type list, or the specified default if the
 * type list is empty. Example: int  ==  head_t<bool, typelist<int, string>>
 *   bool  ==  head_t<bool, typelist<>>
 ','line_number':266,'multiline':True]
['text':'*
 * Returns the N-th element of a type list.
 * Example:
 * int == element_t<1, typelist<float, int, char>>
 ','line_number':282,'multiline':True]
['text':'/ Base template.','line_number':288,'multiline':False]
['text':'/ Successful case, we have reached the zero index and can "return" the head','line_number':296,'multiline':False]
['text':'/ type.','line_number':297,'multiline':False]
['text':'/ Error case, we have an index but ran out of types! It will only be selected','line_number':303,'multiline':False]
['text':'/ if `Ts...` is actually empty!','line_number':304,'multiline':False]
['text':'/ Shave off types until we hit the <0, Head, Tail...> or <Index> case.','line_number':312,'multiline':False]
['text':'/ Convenience alias.','line_number':317,'multiline':False]
['text':'*
 * Returns the last element of a type list.
 * Example:
 *   int  ==  last_t<typelist<int, string>>
 ','line_number':321,'multiline':True]
['text':'*
 * Take/drop a number of arguments from a typelist.
 * Example:
 *   typelist<int, string> == take_t<typelist<int, string, bool>, 2>
 *   typelist<bool> == drop_t<typelist<int, string, bool>, 2>
 ','line_number':344,'multiline':True]
['text':' namespace detail','line_number':358,'multiline':False]
['text':'*
 * Like drop, but returns an empty list rather than an assertion error if `num`
 * is larger than the size of the TypeList.
 * Example:
 *   typelist<> == drop_if_nonempty_t<typelist<string, bool>, 2>
 *   typelist<> == drop_if_nonempty_t<typelist<int, string, bool>, 3>
 ','line_number':390,'multiline':True]
['text':'*
 * Reverses a typelist.
 * Example:
 *   typelist<int, string>  == reverse_t<typelist<string, int>>
 ','line_number':411,'multiline':True]
['text':'*
 * Find the index of the first type in a typelist fulfilling a type trait
 * condition. Example:
 *
 * 2 == find_if<typelist<char, int, char&, int&>, std::is_reference>::value
 ','line_number':434,'multiline':True]
['text':'*
 * Maps a list of types into a list of values.
 * Examples:
 *   // Example 1
 *   auto sizes =
 *     map_types_to_values<typelist<int64_t, bool, uint32_t>>(
 *       [] (auto t) { return sizeof(decltype(t)::type); }
 *     );
 *   //  sizes  ==  std::tuple<size_t, size_t, size_t>{8, 1, 4}
 *
 *   // Example 2
 *   auto shared_ptrs =
 *     map_types_to_values<typelist<int, double>>(
 *       [] (auto t) { return make_shared<typename decltype(t)::type>(); }
 *     );
 *   // shared_ptrs == std::tuple<shared_ptr<int>, shared_ptr<double>>()
 ','line_number':470,'multiline':True]
['text':' namespace detail','line_number':507,'multiline':False]
['text':' namespace typelist','line_number':514,'multiline':False]
['text':' namespace guts','line_number':515,'multiline':False]
['text':' namespace c10','line_number':516,'multiline':False]
