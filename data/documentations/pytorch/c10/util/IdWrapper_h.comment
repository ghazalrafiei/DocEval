['text':'*
 * This template simplifies generation of simple classes that wrap an id
 * in a typesafe way. Namely, you can use it to create a very lightweight
 * type that only offers equality comparators and hashing. Example:
 *
 *   struct MyIdType final : IdWrapper<MyIdType, uint32_t> {
 *     constexpr explicit MyIdType(uint32_t id): IdWrapper(id) {}
 *   };
 *
 * Then in the global top level namespace:
 *
 *   C10_DEFINE_HASH_FOR_IDWRAPPER(MyIdType);
 *
 * That's it - equality operators and hash functions are automatically defined
 * for you, given the underlying type supports it.
 ','line_number':10,'multiline':True]
['text':' TODO Making operator== noexcept if underlying type is noexcept equality','line_number':47,'multiline':False]
['text':' comparable doesn't work with GCC 4.8.','line_number':48,'multiline':False]
['text':'      Fix this once we don't need GCC 4.8 anymore.','line_number':49,'multiline':False]
['text':' TODO Making operator!= noexcept if operator== is noexcept doesn't work with','line_number':56,'multiline':False]
['text':' GCC 4.8.','line_number':57,'multiline':False]
['text':'      Fix this once we don't need GCC 4.8 anymore.','line_number':58,'multiline':False]
['text':' namespace c10','line_number':68,'multiline':False]
