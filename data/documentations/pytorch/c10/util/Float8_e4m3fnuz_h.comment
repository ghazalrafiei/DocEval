['text':'/ Defines the Float8_e4m3fnuz type (8-bit floating-point) including','line_number':3,'multiline':False]
['text':'/ conversions to standard C types and basic arithmetic operations. Note that','line_number':4,'multiline':False]
['text':'/ arithmetic operations are implemented by converting to floating point and','line_number':5,'multiline':False]
['text':'/ performing the operation in float32.','line_number':6,'multiline':False]
['text':'/','line_number':7,'multiline':False]
['text':'/ Binary configuration remains the same as Float8_e4m3fn:','line_number':8,'multiline':False]
['text':'/ s eeee mmm','line_number':9,'multiline':False]
['text':'/ 1 sign bit','line_number':10,'multiline':False]
['text':'/ 4 exponent bits','line_number':11,'multiline':False]
['text':'/ 3 mantissa bits','line_number':12,'multiline':False]
['text':'/','line_number':13,'multiline':False]
['text':'/ The key differences versus Float8_e4m3fn are:','line_number':14,'multiline':False]
['text':'/ bias = 8','line_number':15,'multiline':False]
['text':'/ no infinities or negative zero','line_number':16,'multiline':False]
['text':'/ NaN only when sign bit is 1, rest all 0s','line_number':17,'multiline':False]
['text':'/','line_number':18,'multiline':False]
['text':'/ Implementation based on the paper https://arxiv.org/pdf/2206.02915.pdf and','line_number':19,'multiline':False]
['text':'/ the existing Float8_e4m3fn implementation.','line_number':20,'multiline':False]
['text':'
 * Convert a 8-bit floating-point number in fp8 E4M3FNUZ format, in bit
 * representation, to a 32-bit floating-point number in IEEE single-precision
 * format, in bit representation.
 *
 * @note The implementation doesn't use any floating-point operations.
 ','line_number':41,'multiline':True]
['text':'
 * Convert a 32-bit floating-point number in IEEE single-precision format to a
 * 8-bit floating-point number in fp8 E4M3FNUZ format, in bit representation.
 ','line_number':57,'multiline':True]
['text':'
   * Binary representation of 256.0f, which is the first value not representable
   * (i.e. the first value which would overflow in to the sign bit, resulting in
   * a NaN) in fp8e4m3fnuz range:
   * 1 0000 000 - fp8e4m3fnuz
   * 0 10000111 00000000000000000000000 - fp32
   ','line_number':62,'multiline':True]
['text':'
   * A mask for converting fp32 numbers lower than fp8e4m3fnuz normal range
   * into denormalized representation.
   * magic number: ((127 - 8) + (23 - 3) + 1)
   ','line_number':71,'multiline':True]
['text':'
   * Extract the sign of the input number into the high bit of the 32-bit word:
   *
   *      +---+----------------------------------+
   *      | S |0000000 00000000 00000000 00000000|
   *      +---+----------------------------------+
   * Bits  31                 0-31
   ','line_number':82,'multiline':True]
['text':'
   * Set sign bit to 0
   ','line_number':92,'multiline':True]
['text':' NaN -- sign bit set to 1, rest 0s.','line_number':98,'multiline':False]
['text':' 2^-7 in float32 ','line_number':102,'multiline':True]
['text':' Input exponent is less than -7, the smallest e4m3fnuz exponent, so the','line_number':103,'multiline':False]
['text':' number will become subnormal.','line_number':104,'multiline':False]
['text':' fnuz types don't have negative zero.','line_number':108,'multiline':False]
['text':' resulting mantissa is odd','line_number':112,'multiline':False]
['text':' update exponent, rounding bias part 1','line_number':115,'multiline':False]
['text':' rounding bias part 2','line_number':118,'multiline':False]
['text':' take the bits!','line_number':121,'multiline':False]
['text':' namespace detail','line_number':130,'multiline':False]
['text':' namespace c10','line_number':153,'multiline':False]
['text':' IWYU pragma: keep','line_number':155,'multiline':False]
