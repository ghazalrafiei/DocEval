['text':' Copy string from `src` to `dst`','line_number':10,'multiline':False]
['text':' Copy string from source to destination, ensuring that it','line_number':13,'multiline':False]
['text':' isn't longer than `C10_CUDA_DSA_MAX_STR_LEN-1`','line_number':14,'multiline':False]
['text':' `assertions_data` may be nullptr if device-side assertion checking','line_number':30,'multiline':False]
['text':' is disabled at run-time. If it is disabled at compile time this','line_number':31,'multiline':False]
['text':' function will never be called','line_number':32,'multiline':False]
['text':' Atomically increment so other threads can fail at the same time','line_number':37,'multiline':False]
['text':' Note that incrementing this means that the CPU can observe that','line_number':38,'multiline':False]
['text':' a failure has happened and can begin to respond before we've','line_number':39,'multiline':False]
['text':' written information about that failure out to the buffer.','line_number':40,'multiline':False]
['text':' At this point we're ran out of assertion buffer space.','line_number':44,'multiline':False]
['text':' We could print a message about this, but that'd get','line_number':45,'multiline':False]
['text':' spammy if a lot of threads did it, so we just silently','line_number':46,'multiline':False]
['text':' ignore any other assertion failures. In most cases the','line_number':47,'multiline':False]
['text':' failures will all probably be analogous anyway.','line_number':48,'multiline':False]
['text':' Write information about the assertion failure to memory.','line_number':52,'multiline':False]
['text':' Note that this occurs only after the `assertion_count`','line_number':53,'multiline':False]
['text':' increment broadcasts that there's been a problem.','line_number':54,'multiline':False]
['text':' Emulates a kernel assertion. The assertion won't stop the kernel's progress,','line_number':69,'multiline':False]
['text':' so you should assume everything the kernel produces is garbage if there's an','line_number':70,'multiline':False]
['text':' assertion failure.','line_number':71,'multiline':False]
['text':' NOTE: This assumes that `assertions_data` and  `assertion_caller_id` are','line_number':72,'multiline':False]
['text':'       arguments of the kernel and therefore accessible.','line_number':73,'multiline':False]
['text':' Has an atomic element so threads can fail at the same time ','line_number':77,'multiline':True]
['text':' Now that the kernel has failed we early exit the kernel, but ','line_number':87,'multiline':True]
['text':' otherwise keep going and rely on the host to check UVM and ','line_number':88,'multiline':True]
['text':' determine we've had a problem ','line_number':89,'multiline':True]
['text':' namespace cuda','line_number':97,'multiline':False]
['text':' namespace c10','line_number':98,'multiline':False]
