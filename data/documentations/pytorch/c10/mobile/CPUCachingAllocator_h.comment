['text':'
 * CPUCachingAllocator:
 * DISCLAIMER:
 *    This is subject to change (beta) and only supported on mobile builds.
 *    If code snippet such as in 'Usage pattern' is used outside of mobile
 *    build you will not observe the intended behavior.
 *    See below for more information.
 * Why?
 *    It has been observed that some mobile platforms, such as pixel 3, return
 *    memory aggressively to the system. This results in page faults in some
 * cases and ends up hurting performance. This caching allocator aims to address
 * that. Furthermore it also allows users to specify their own allocator by
 * implementing allocate/free virtual interfaces. What are the cons? There are
 * some cons that were observed where use of caching allocator led to worse
 * performance on some platforms. Reason being that the caching mechanism used
 * by this allocator left us worse off compared to the corresponding platform's
 *    tuned memory allocator. In that case it seemed better to not use this
 * allocator. Note there are some ideas to fix this in the works.
 *
 * Usage:
 * Usage pattern:
 * Instantiate and own the caching allocator.
 * std::unique_ptr<c10::CPUCachingAllocator> caching_allocator =
 *   std::make_unique<c10::CPUCachingAllocator>();
 * Use caching allocator with a scoped guard at inference time.
 * {
 * WithCPUCachingAllocatorGuard(caching_allocator.get());
 * ... model.forward(...);
 * }
 ','line_number':8,'multiline':True]
['text':'
   * What it does:
   * Caches all the allocations carried out by this allocator.
   * Cache key is the size of the allocation.
   * If requested size is found in the cache returns the cached pointer.
   * What it does not do:
   * No speculative allocation for any future allocations.
   ','line_number':42,'multiline':True]
['text':' Invariants.','line_number':55,'multiline':False]
['text':' 1. If memory is ever allocated via this allocator then','line_number':56,'multiline':False]
['text':'    the pointer will exist in allocation_map_, unless the allocator','line_number':57,'multiline':False]
['text':'    returned the memory to OS via free_cached.','line_number':58,'multiline':False]
['text':'  1.1. Therefore even when the said memory is "freed" via this','line_number':59,'multiline':False]
['text':'       allocator (and thus cached), it will continue to stay','line_number':60,'multiline':False]
['text':'       in allocation_map_. Furthermore it will also exist in','line_number':61,'multiline':False]
['text':'       available_map_. Thus an allocated memory pointer can be in both','line_number':62,'multiline':False]
['text':'       allocation_map_ and available_map_ simultaneously.','line_number':63,'multiline':False]
['text':' 2. Memory pointer maybe removed from allocation_map_, when it','line_number':64,'multiline':False]
['text':'    is freed outside of the scope of this allocator, but was allocated','line_number':65,'multiline':False]
['text':'    by this allocator.','line_number':66,'multiline':False]
['text':' 3. Available map only contains that memory which was allocated','line_number':67,'multiline':False]
['text':'    by this allocator and subsequently freed by this allocator.','line_number':68,'multiline':False]
['text':' As a result of above invariants, allocated memory ptr cannot be in','line_number':69,'multiline':False]
['text':' available_map_ unless it is in allocation_map_ as well.','line_number':70,'multiline':False]
['text':' Since allocation_map, which is a global instance, is mutated/read via','line_number':73,'multiline':False]
['text':' all public APIs we need a global mutex.','line_number':74,'multiline':False]
['text':' Checks the cache to see if allocation of size bytes can be found.','line_number':80,'multiline':False]
['text':' If so return cached memory, else','line_number':81,'multiline':False]
['text':' allocates memory, records it for caching and returns.','line_number':82,'multiline':False]
['text':' Checks if the memory being freed is was marked for allocation by','line_number':84,'multiline':False]
['text':' an earlier call to allocate. If so cache the allocation.','line_number':85,'multiline':False]
['text':' Otherwise free.','line_number':86,'multiline':False]
['text':' namespace c10','line_number':104,'multiline':False]
