['text':' ${generated_comment}','line_number':3,'multiline':False]
['text':'/ NOTE: Currently `torch::tensor(...)` doesn't support mixed data types','line_number':26,'multiline':False]
['text':'/ (i.e. `torch::tensor({{bool, 2.0}})` doesn't work). We might be able to','line_number':27,'multiline':False]
['text':'/ support it in the future by iterating over all sub-lists to find','line_number':28,'multiline':False]
['text':'/ the largest data type that can represent all of the elements, or by using','line_number':29,'multiline':False]
['text':'/ variadic templates.','line_number':30,'multiline':False]
['text':'/','line_number':31,'multiline':False]
['text':'/ NOTE: C++ `torch::tensor` with a floating-point type or an `at::ArrayRef` / `std::vector` /','line_number':32,'multiline':False]
['text':'/ (nested) braced-init-list of floating-point types always produces a tensor of dtype','line_number':33,'multiline':False]
['text':'/ `torch::get_default_dtype()`, matching Python `torch.tensor` behavior.','line_number':34,'multiline':False]
['text':'/','line_number':35,'multiline':False]
['text':'/ NOTE: C++ `torch::tensor` with an integer type or an `at::ArrayRef` / `std::vector` /','line_number':36,'multiline':False]
['text':'/ (nested) braced-init-list of integer types always produces a tensor of dtype `at::kLong`','line_number':37,'multiline':False]
['text':'/ (aka. int64_t), matching Python `torch.tensor` behavior.','line_number':38,'multiline':False]
['text':'/','line_number':39,'multiline':False]
['text':'/ NOTE: The following dtypes are not supported by `torch::tensor` currently:','line_number':40,'multiline':False]
['text':'/ - `unsigned int`','line_number':41,'multiline':False]
['text':'/ - `unsigned long int`','line_number':42,'multiline':False]
['text':'/ - `unsigned long long int`','line_number':43,'multiline':False]
['text':'/ - `long long int`','line_number':44,'multiline':False]
['text':' note: we remove the requires_grad setting from the TensorOptions because','line_number':47,'multiline':False]
['text':' it is ignored anyways (and we actually have an assertion that it isn't set','line_number':48,'multiline':False]
['text':' which would fail otherwise). We handle requires_grad explicitly here','line_number':49,'multiline':False]
['text':' instead of passing it through to the kernel.','line_number':50,'multiline':False]
['text':'/ A generic deleter function.','line_number':55,'multiline':False]
['text':'/ Exposes the given `data` as a `Tensor` without taking ownership of the','line_number':59,'multiline':False]
['text':'/ original data. `sizes` should specify the shape of the tensor, `strides` the','line_number':60,'multiline':False]
['text':'/ stride in each dimension. The `deleter` function (a','line_number':61,'multiline':False]
['text':'/ `std::function<void(void*)>`) will be called on the `data` when the Tensor','line_number':62,'multiline':False]
['text':'/ data would normally be deallocated. The `TensorOptions` specify additional','line_number':63,'multiline':False]
['text':'/ configuration options for the returned tensor, such as what type to','line_number':64,'multiline':False]
['text':'/ interpret the `data` as.','line_number':65,'multiline':False]
['text':' TODO: remove','line_number':73,'multiline':False]
['text':'/ Exposes the given `data` as a `Tensor` without taking ownership of the','line_number':80,'multiline':False]
['text':'/ original data. `sizes` should specify the shape of the tensor, `strides` the','line_number':81,'multiline':False]
['text':'/ stride in each dimension. The `TensorOptions`','line_number':82,'multiline':False]
['text':'/ specify additional configuration options for the returned tensor, such as','line_number':83,'multiline':False]
['text':'/ what type to interpret the `data` as.','line_number':84,'multiline':False]
['text':' TODO: remove','line_number':91,'multiline':False]
['text':'/ Exposes the given `data` as a `Tensor` without taking ownership of the','line_number':98,'multiline':False]
['text':'/ original data. `sizes` should specify the shape of the tensor. The `deleter`','line_number':99,'multiline':False]
['text':'/ (a `std::function<void(void*)>`) function will be called on the `data` when','line_number':100,'multiline':False]
['text':'/ the Tensor data would normally be deallocated. The `TensorOptions` specify','line_number':101,'multiline':False]
['text':'/ additional configuration options for the returned tensor, such as what type','line_number':102,'multiline':False]
['text':'/ to interpret the `data` as.','line_number':103,'multiline':False]
['text':' TODO: remove','line_number':110,'multiline':False]
['text':'/ Exposes the given `data` as a `Tensor` without taking ownership of the','line_number':117,'multiline':False]
['text':'/ original data. `sizes` should specify the shape of the tensor. The','line_number':118,'multiline':False]
['text':'/ `TensorOptions` specify additional configuration options for the returned','line_number':119,'multiline':False]
['text':'/ tensor, such as what type to interpret the `data` as.','line_number':120,'multiline':False]
['text':' TODO: remove','line_number':126,'multiline':False]
['text':' namespace torch','line_number':135,'multiline':False]
