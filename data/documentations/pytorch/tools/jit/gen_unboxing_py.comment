['text':' Generates RegisterCodegenUnboxedKernels.cpp, UnboxingFunctions.h and UnboxingFunctions.cpp.','line_number':1,'multiline':False]
['text':' Generates UnboxingFunctions.h & UnboxingFunctions.cpp.','line_number':22,'multiline':False]
['text':' Note [The ATen Codegen Unboxing API]','line_number':34,'multiline':False]
['text':' Similar to the ATen Operators API, ATen Codegen Unboxing API lives in the at::unboxing namespace, and','line_number':35,'multiline':False]
['text':' will be used by codegen unboxing wrappers (CodegenUnboxingWrappers.cpp).','line_number':36,'multiline':False]
['text':' The Wrappers will be registered into torch::jit::OperatorRegistry using RegisterOperators API.','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' Important characteristics about the Codegen Unboxing API:','line_number':39,'multiline':False]
['text':' (1) It follows the OperatorRegistry API.','line_number':40,'multiline':False]
['text':'     This is kind of necessary to avoid overhead.','line_number':41,'multiline':False]
['text':'     For example: if it followed the C++ API, then all of the faithful C++ factory functions','line_number':42,'multiline':False]
['text':'     would need to wrap their arguments into TensorOptions only to unwrap them again.','line_number':43,'multiline':False]
['text':' (2) Under the hood it calls C++ API.','line_number':44,'multiline':False]
['text':' parse arguments into C++ code','line_number':54,'multiline':False]
['text':' for each C++ argument, generate the conversion code','line_number':57,'multiline':False]
['text':' function call and push back to stack','line_number':60,'multiline':False]
['text':' Generates RegisterCodegenUnboxedKernels.cpp.','line_number':87,'multiline':False]
['text':' We unconditionally generate function wrappers,','line_number':96,'multiline':False]
['text':' escape double quote in schema, get rid of extra double quotes','line_number':101,'multiline':False]
['text':' arguments','line_number':104,'multiline':False]
['text':' Using method=False faithful C++ API, so we should not see SelfArgument/TensorOptionsArgument','line_number':109,'multiline':False]
['text':' The unboxing code uses the faithful C++ API to avoid the overhead','line_number':114,'multiline':False]
['text':' from wrapping/unwrapping TensorOptios.','line_number':115,'multiline':False]
['text':' However, we would look to include default args for schema parsing.','line_number':116,'multiline':False]
['text':' Default args only show up in the nonfaithful C++ API,','line_number':117,'multiline':False]
['text':' a best practice threshold of operators to enable sharding','line_number':163,'multiline':False]
