['text':' miniz.c 2.1.0 - public domain deflate/inflate, zlib-subset, ZIP reading/writing/appending, PNG writing
   See "unlicense" statement at the end of this file.
   Rich Geldreich <richgel99@gmail.com>, last updated Oct. 13, 2013
   Implements RFC 1950: http://www.ietf.org/rfc/rfc1950.txt and RFC 1951: http://www.ietf.org/rfc/rfc1951.txt

   Most API's defined in miniz.c are optional. For example, to disable the archive related functions just define
   MINIZ_NO_ARCHIVE_APIS, or to get rid of all stdio usage define MINIZ_NO_STDIO (see the list below for more macros).

   * Low-level Deflate/Inflate implementation notes:

     Compression: Use the "tdefl" API's. The compressor supports raw, static, and dynamic blocks, lazy or
     greedy parsing, match length filtering, RLE-only, and Huffman-only streams. It performs and compresses
     approximately as well as zlib.

     Decompression: Use the "tinfl" API's. The entire decompressor is implemented as a single function
     coroutine: see tinfl_decompress(). It supports decompression into a 32KB (or larger power of 2) wrapping buffer, or into a memory
     block large enough to hold the entire file.

     The low-level tdefl/tinfl API's do not make any use of dynamic memory allocation.

   * zlib-style API notes:

     miniz.c implements a fairly large subset of zlib. There's enough functionality present for it to be a drop-in
     zlib replacement in many apps:
        The z_stream struct, optional memory allocation callbacks
        deflateInit/deflateInit2/deflate/deflateReset/deflateEnd/deflateBound
        inflateInit/inflateInit2/inflate/inflateReset/inflateEnd
        compress, compress2, compressBound, uncompress
        CRC-32, Adler-32 - Using modern, minimal code size, CPU cache friendly routines.
        Supports raw deflate streams or standard zlib streams with adler-32 checking.

     Limitations:
      The callback API's are not implemented yet. No support for gzip headers or zlib static dictionaries.
      I've tried to closely emulate zlib's various flavors of stream flushing and return status codes, but
      there are no guarantees that miniz.c pulls this off perfectly.

   * PNG writing: See the tdefl_write_image_to_png_file_in_memory() function, originally written by
     Alex Evans. Supports 1-4 bytes/pixel images.

   * ZIP archive API notes:

     The ZIP archive API's where designed with simplicity and efficiency in mind, with just enough abstraction to
     get the job done with minimal fuss. There are simple API's to retrieve file information, read files from
     existing archives, create new archives, append new files to existing archives, or clone archive data from
     one archive to another. It supports archives located in memory or the heap, on disk (using stdio.h),
     or you can specify custom file read/write callbacks.

     - Archive reading: Just call this function to read a single file from a disk archive:

      void *mz_zip_extract_archive_file_to_heap(const char *pZip_filename, const char *pArchive_name,
        size_t *pSize, mz_uint zip_flags);

     For more complex cases, use the "mz_zip_reader" functions. Upon opening an archive, the entire central
     directory is located and read as-is into memory, and subsequent file access only occurs when reading individual files.

     - Archives file scanning: The simple way is to use this function to scan a loaded archive for a specific file:

     int mz_zip_reader_locate_file(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags);

     The locate operation can optionally check file comments too, which (as one example) can be used to identify
     multiple versions of the same file in an archive. This function uses a simple linear search through the central
     directory, so it's not very fast.

     Alternately, you can iterate through all the files in an archive (using mz_zip_reader_get_num_files()) and
     retrieve detailed info on each file by calling mz_zip_reader_file_stat().

     - Archive creation: Use the "mz_zip_writer" functions. The ZIP writer immediately writes compressed file data
     to disk and builds an exact image of the central directory in memory. The central directory image is written
     all at once at the end of the archive file when the archive is finalized.

     The archive writer can optionally align each file's local header and file data to any power of 2 alignment,
     which can be useful when the archive will be read from optical media. Also, the writer supports placing
     arbitrary data blobs at the very beginning of ZIP archives. Archives written using either feature are still
     readable by any ZIP tool.

     - Archive appending: The simple way to add a single file to an archive is to call this function:

      mz_bool mz_zip_add_mem_to_archive_file_in_place(const char *pZip_filename, const char *pArchive_name,
        const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags);

     The archive will be created if it doesn't already exist, otherwise it'll be appended to.
     Note the appending is done in-place and is not an atomic operation, so if something goes wrong
     during the operation it's possible the archive could be left without a central directory (although the local
     file headers and file data will be fine, so the archive will be recoverable).

     For more complex archive modification scenarios:
     1. The safest way is to use a mz_zip_reader to read the existing archive, cloning only those bits you want to
     preserve into a new archive using using the mz_zip_writer_add_from_zip_reader() function (which compiles the
     compressed file data as-is). When you're done, delete the old archive and rename the newly written archive, and
     you're done. This is safe but requires a bunch of temporary disk space or heap memory.

     2. Or, you can convert an mz_zip_reader in-place to an mz_zip_writer using mz_zip_writer_init_from_reader(),
     append new files as needed, then finalize the archive which will write an updated central directory to the
     original archive. (This is basically what mz_zip_add_mem_to_archive_file_in_place() does.) There's a
     possibility that the archive's central directory could be lost with this method if anything goes wrong, though.

     - ZIP archive support limitations:
     No zip64 or spanning support. Extraction functions can only handle unencrypted, stored or deflated files.
     Requires streams capable of seeking.

   * This is a header file library, like stb_image.c. To get only a header file, either cut and paste the
     below header, or create miniz.h, #define MINIZ_HEADER_FILE_ONLY, and then include miniz.c from it.

   * Important: For best perf. be sure to customize the below macros for your target platform:
     #define MINIZ_USE_UNALIGNED_LOADS_AND_STORES 1
     #define MINIZ_LITTLE_ENDIAN 1
     #define MINIZ_HAS_64BIT_REGISTERS 1

   * On platforms using glibc, Be sure to "#define _LARGEFILE64_SOURCE 1" before including miniz.c to ensure miniz
     uses the 64-bit variants: fopen64(), stat64(), etc. Otherwise you won't be able to process large files
     (i.e. 32-bit stat() fails for me on files > 0x7FFFFFFF bytes).
','line_number':1,'multiline':True]
['text':' Defines to completely disable specific portions of miniz.c: 
   If all macros here are defined the only functionality remaining will be CRC-32, adler-32, tinfl, and tdefl. ','line_number':119,'multiline':True]
['text':' Define MINIZ_NO_STDIO to disable all usage and any functions which rely on stdio for file I/O. ','line_number':122,'multiline':True]
['text':'#define MINIZ_NO_STDIO ','line_number':123,'multiline':True]
['text':' If MINIZ_NO_TIME is specified then the ZIP archive functions will not be able to get the current time, or ','line_number':125,'multiline':True]
['text':' get/set file times, and the C run-time funcs that get/set times won't be called. ','line_number':126,'multiline':True]
['text':' The current downside is the times written to your archives will be from 1979. ','line_number':127,'multiline':True]
['text':' Define MINIZ_NO_ARCHIVE_APIS to disable all ZIP archive API's. ','line_number':130,'multiline':True]
['text':'#define MINIZ_NO_ARCHIVE_APIS ','line_number':131,'multiline':True]
['text':' Define MINIZ_NO_ARCHIVE_WRITING_APIS to disable all writing related ZIP archive API's. ','line_number':133,'multiline':True]
['text':'#define MINIZ_NO_ARCHIVE_WRITING_APIS ','line_number':134,'multiline':True]
['text':' Define MINIZ_NO_ZLIB_APIS to remove all ZLIB-style compression/decompression API's. ','line_number':136,'multiline':True]
['text':'#define MINIZ_NO_ZLIB_APIS ','line_number':137,'multiline':True]
['text':' Define MINIZ_NO_ZLIB_COMPATIBLE_NAME to disable zlib names, to prevent conflicts against stock zlib. ','line_number':139,'multiline':True]
['text':' Define MINIZ_NO_MALLOC to disable all calls to malloc, free, and realloc. 
   Note if MINIZ_NO_MALLOC is defined then the user must always provide custom user alloc/free/realloc
   callbacks to the zlib and archive API's, and a few stand-alone helper API's which don't provide custom user
   functions (such as tdefl_compress_mem_to_heap() and tinfl_decompress_mem_to_heap()) won't work. ','line_number':142,'multiline':True]
['text':'#define MINIZ_NO_MALLOC ','line_number':146,'multiline':True]
['text':' TODO: Work around "error: include file 'sys\utime.h' when compiling with tcc on Linux ','line_number':149,'multiline':True]
['text':' MINIZ_X86_OR_X64_CPU is only used to help set the below macros. ','line_number':160,'multiline':True]
['text':' Set MINIZ_LITTLE_ENDIAN to 1 if the processor is little endian. ','line_number':167,'multiline':True]
['text':' Set MINIZ_USE_UNALIGNED_LOADS_AND_STORES only if not set ','line_number':173,'multiline':True]
['text':' Set MINIZ_USE_UNALIGNED_LOADS_AND_STORES to 1 on CPU's that permit efficient integer loads and stores from unaligned addresses. ','line_number':176,'multiline':True]
['text':' zdevito: ASAN doesn't like unligned loads and stores, and -O3 optimizes the unoptimized code pattern away anyawy ','line_number':177,'multiline':True]
['text':' zdevito: ASAN doesn't like unligned loads and stores, and -O3 optimizes the unoptimized code pattern away anyawy ','line_number':179,'multiline':True]
['text':'#define MINIZ_UNALIGNED_USE_MEMCPY','line_number':180,'multiline':True]
['text':' Set MINIZ_HAS_64BIT_REGISTERS to 1 if operations on 64-bit integers are reasonably fast (and don't involve compiler generated calls to helper functions). ','line_number':187,'multiline':True]
['text':' ------------------- zlib-style API Definitions. ','line_number':197,'multiline':True]
['text':' For more compatibility with zlib, miniz.c uses unsigned long for some parameters/struct members. Beware: mz_ulong can be either 32 or 64-bits! ','line_number':199,'multiline':True]
['text':' mz_free() internally uses the MZ_FREE() macro (which by default calls free() unless you've modified the MZ_MALLOC macro) to release a block allocated from the heap. ','line_number':202,'multiline':True]
['text':' mz_adler32() returns the initial adler-32 value to use when called with ptr==NULL. ','line_number':206,'multiline':True]
['text':' mz_crc32() returns the initial CRC-32 value to use when called with ptr==NULL. ','line_number':210,'multiline':True]
['text':' Compression strategies. ','line_number':213,'multiline':True]
['text':' Method ','line_number':223,'multiline':True]
['text':' Heap allocation callbacks.
Note that mz_alloc_func parameter types purpsosely differ from zlib's: items/size is size_t, not unsigned long. ','line_number':226,'multiline':True]
['text':' Compression levels: 0-9 are the standard zlib-style levels, 10 is best possible compression (not zlib compatible, and may be very slow), MZ_DEFAULT_COMPRESSION=MZ_DEFAULT_LEVEL. ','line_number':232,'multiline':True]
['text':' Flush values. For typical usage you only need MZ_NO_FLUSH and MZ_FINISH. The other values are for advanced use (refer to the zlib docs). ','line_number':252,'multiline':True]
['text':' Return status codes. MZ_PARAM_ERROR is non-standard. ','line_number':263,'multiline':True]
['text':' Window bits ','line_number':278,'multiline':True]
['text':' Compression/decompression stream struct. ','line_number':283,'multiline':True]
['text':' pointer to next byte to read ','line_number':286,'multiline':True]
['text':' number of bytes available at next_in ','line_number':287,'multiline':True]
['text':' total number of bytes consumed so far ','line_number':288,'multiline':True]
['text':' pointer to next byte to write ','line_number':290,'multiline':True]
['text':' number of bytes that can be written to next_out ','line_number':291,'multiline':True]
['text':' total number of bytes produced so far ','line_number':292,'multiline':True]
['text':' error msg (unused) ','line_number':294,'multiline':True]
['text':' internal state, allocated by zalloc/zfree ','line_number':295,'multiline':True]
['text':' optional heap allocation function (defaults to malloc) ','line_number':297,'multiline':True]
['text':' optional heap free function (defaults to free) ','line_number':298,'multiline':True]
['text':' heap alloc function user pointer ','line_number':299,'multiline':True]
['text':' data_type (unused) ','line_number':301,'multiline':True]
['text':' adler32 of the source or uncompressed data ','line_number':302,'multiline':True]
['text':' not used ','line_number':303,'multiline':True]
['text':' Returns the version string of miniz.c. ','line_number':308,'multiline':True]
['text':' mz_deflateInit() initializes a compressor with default options: ','line_number':311,'multiline':True]
['text':' Parameters: ','line_number':312,'multiline':True]
['text':'  pStream must point to an initialized mz_stream struct. ','line_number':313,'multiline':True]
['text':'  level must be between [MZ_NO_COMPRESSION, MZ_BEST_COMPRESSION]. ','line_number':314,'multiline':True]
['text':'  level 1 enables a specially optimized compression function that's been optimized purely for performance, not ratio. ','line_number':315,'multiline':True]
['text':'  (This special func. is currently only enabled when MINIZ_USE_UNALIGNED_LOADS_AND_STORES and MINIZ_LITTLE_ENDIAN are defined.) ','line_number':316,'multiline':True]
['text':' Return values: ','line_number':317,'multiline':True]
['text':'  MZ_OK on success. ','line_number':318,'multiline':True]
['text':'  MZ_STREAM_ERROR if the stream is bogus. ','line_number':319,'multiline':True]
['text':'  MZ_PARAM_ERROR if the input parameters are bogus. ','line_number':320,'multiline':True]
['text':'  MZ_MEM_ERROR on out of memory. ','line_number':321,'multiline':True]
['text':' mz_deflateInit2() is like mz_deflate(), except with more control: ','line_number':324,'multiline':True]
['text':' Additional parameters: ','line_number':325,'multiline':True]
['text':'   method must be MZ_DEFLATED ','line_number':326,'multiline':True]
['text':'   window_bits must be MZ_DEFAULT_WINDOW_BITS (to wrap the deflate stream with zlib header/adler-32 footer) or -MZ_DEFAULT_WINDOW_BITS (raw deflate/no header or footer) ','line_number':327,'multiline':True]
['text':'   mem_level must be between [1, 9] (it's checked but ignored by miniz.c) ','line_number':328,'multiline':True]
['text':' Quickly resets a compressor without having to reallocate anything. Same as calling mz_deflateEnd() followed by mz_deflateInit()/mz_deflateInit2(). ','line_number':331,'multiline':True]
['text':' mz_deflate() compresses the input to output, consuming as much of the input and producing as much output as possible. ','line_number':334,'multiline':True]
['text':' Parameters: ','line_number':335,'multiline':True]
['text':'   pStream is the stream to read from and write to. You must initialize/update the next_in, avail_in, next_out, and avail_out members. ','line_number':336,'multiline':True]
['text':'   flush may be MZ_NO_FLUSH, MZ_PARTIAL_FLUSH/MZ_SYNC_FLUSH, MZ_FULL_FLUSH, or MZ_FINISH. ','line_number':337,'multiline':True]
['text':' Return values: ','line_number':338,'multiline':True]
['text':'   MZ_OK on success (when flushing, or if more input is needed but not available, and/or there's more output to be written but the output buffer is full). ','line_number':339,'multiline':True]
['text':'   MZ_STREAM_END if all input has been consumed and all output bytes have been written. Don't call mz_deflate() on the stream anymore. ','line_number':340,'multiline':True]
['text':'   MZ_STREAM_ERROR if the stream is bogus. ','line_number':341,'multiline':True]
['text':'   MZ_PARAM_ERROR if one of the parameters is invalid. ','line_number':342,'multiline':True]
['text':'   MZ_BUF_ERROR if no forward progress is possible because the input and/or output buffers are empty. (Fill up the input buffer or free up some output space and try again.) ','line_number':343,'multiline':True]
['text':' mz_deflateEnd() deinitializes a compressor: ','line_number':346,'multiline':True]
['text':' Return values: ','line_number':347,'multiline':True]
['text':'  MZ_OK on success. ','line_number':348,'multiline':True]
['text':'  MZ_STREAM_ERROR if the stream is bogus. ','line_number':349,'multiline':True]
['text':' mz_deflateBound() returns a (very) conservative upper bound on the amount of data that could be generated by deflate(), assuming flush is set to only MZ_NO_FLUSH or MZ_FINISH. ','line_number':352,'multiline':True]
['text':' Single-call compression functions mz_compress() and mz_compress2(): ','line_number':355,'multiline':True]
['text':' Returns MZ_OK on success, or one of the error codes from mz_deflate() on failure. ','line_number':356,'multiline':True]
['text':' mz_compressBound() returns a (very) conservative upper bound on the amount of data that could be generated by calling mz_compress(). ','line_number':360,'multiline':True]
['text':' Initializes a decompressor. ','line_number':363,'multiline':True]
['text':' mz_inflateInit2() is like mz_inflateInit() with an additional option that controls the window size and whether or not the stream has been wrapped with a zlib header/footer: ','line_number':366,'multiline':True]
['text':' window_bits must be MZ_DEFAULT_WINDOW_BITS (to parse zlib header/footer) or -MZ_DEFAULT_WINDOW_BITS (raw deflate). ','line_number':367,'multiline':True]
['text':' Quickly resets a compressor without having to reallocate anything. Same as calling mz_inflateEnd() followed by mz_inflateInit()/mz_inflateInit2(). ','line_number':370,'multiline':True]
['text':' Decompresses the input stream to the output, consuming only as much of the input as needed, and writing as much to the output as possible. ','line_number':373,'multiline':True]
['text':' Parameters: ','line_number':374,'multiline':True]
['text':'   pStream is the stream to read from and write to. You must initialize/update the next_in, avail_in, next_out, and avail_out members. ','line_number':375,'multiline':True]
['text':'   flush may be MZ_NO_FLUSH, MZ_SYNC_FLUSH, or MZ_FINISH. ','line_number':376,'multiline':True]
['text':'   On the first call, if flush is MZ_FINISH it's assumed the input and output buffers are both sized large enough to decompress the entire stream in a single call (this is slightly faster). ','line_number':377,'multiline':True]
['text':'   MZ_FINISH implies that there are no more source bytes available beside what's already in the input buffer, and that the output buffer is large enough to hold the rest of the decompressed data. ','line_number':378,'multiline':True]
['text':' Return values: ','line_number':379,'multiline':True]
['text':'   MZ_OK on success. Either more input is needed but not available, and/or there's more output to be written but the output buffer is full. ','line_number':380,'multiline':True]
['text':'   MZ_STREAM_END if all needed input has been consumed and all output bytes have been written. For zlib streams, the adler-32 of the decompressed data has also been verified. ','line_number':381,'multiline':True]
['text':'   MZ_STREAM_ERROR if the stream is bogus. ','line_number':382,'multiline':True]
['text':'   MZ_DATA_ERROR if the deflate stream is invalid. ','line_number':383,'multiline':True]
['text':'   MZ_PARAM_ERROR if one of the parameters is invalid. ','line_number':384,'multiline':True]
['text':'   MZ_BUF_ERROR if no forward progress is possible because the input buffer is empty but the inflater needs more input to continue, or if the output buffer is not large enough. Call mz_inflate() again ','line_number':385,'multiline':True]
['text':'   with more input data, or with more room in the output buffer (except when using single call decompression, described above). ','line_number':386,'multiline':True]
['text':' Deinitializes a decompressor. ','line_number':389,'multiline':True]
['text':' Single-call decompression. ','line_number':392,'multiline':True]
['text':' Returns MZ_OK on success, or one of the error codes from mz_inflate() on failure. ','line_number':393,'multiline':True]
['text':' Returns a string description of the specified error code, or NULL if the error code is invalid. ','line_number':396,'multiline':True]
['text':' Redefine zlib-compatible names to miniz equivalents, so miniz.c can be used as a drop-in replacement for the subset of zlib that miniz.c supports. ','line_number':399,'multiline':True]
['text':' Define MINIZ_NO_ZLIB_COMPATIBLE_NAMES to disable zlib-compatibility if you use zlib in the same project. ','line_number':400,'multiline':True]
['text':' #ifndef MINIZ_NO_ZLIB_COMPATIBLE_NAMES ','line_number':473,'multiline':True]
['text':' MINIZ_NO_ZLIB_APIS ','line_number':475,'multiline':True]
['text':' ------------------- Types and macros ','line_number':486,'multiline':True]
['text':' Works around MSVC's spammy "warning C4127: conditional expression is constant" message. ','line_number':499,'multiline':True]
['text':' #ifdef MINIZ_NO_STDIO ','line_number':511,'multiline':True]
['text':' ------------------- Low-level Compression API Definitions ','line_number':577,'multiline':True]
['text':' Set TDEFL_LESS_MEMORY to 1 to use less memory (compression will be slightly slower, and raw/dynamic blocks will be output more frequently). ','line_number':579,'multiline':True]
['text':' tdefl_init() compression flags logically OR'd together (low 12 bits contain the max. number of probes per dictionary search): ','line_number':582,'multiline':True]
['text':' TDEFL_DEFAULT_MAX_PROBES: The compressor defaults to 128 dictionary probes per dictionary search. 0=Huffman only, 1=Huffman+LZ (fastest/crap compression), 4095=Huffman+LZ (slowest/best compression). ','line_number':583,'multiline':True]
['text':' TDEFL_WRITE_ZLIB_HEADER: If set, the compressor outputs a zlib header before the deflate data, and the Adler-32 of the source data at the end. Otherwise, you'll get raw deflate data. ','line_number':591,'multiline':True]
['text':' TDEFL_COMPUTE_ADLER32: Always compute the adler-32 of the input data (even when not writing zlib headers). ','line_number':592,'multiline':True]
['text':' TDEFL_GREEDY_PARSING_FLAG: Set to use faster greedy parsing, instead of more efficient lazy parsing. ','line_number':593,'multiline':True]
['text':' TDEFL_NONDETERMINISTIC_PARSING_FLAG: Enable to decrease the compressor's initialization time to the minimum, but the output may vary from run to run given the same input (depending on the contents of memory). ','line_number':594,'multiline':True]
['text':' TDEFL_RLE_MATCHES: Only look for RLE matches (matches with a distance of 1) ','line_number':595,'multiline':True]
['text':' TDEFL_FILTER_MATCHES: Discards matches <= 5 chars if enabled. ','line_number':596,'multiline':True]
['text':' TDEFL_FORCE_ALL_STATIC_BLOCKS: Disable usage of optimized Huffman tables. ','line_number':597,'multiline':True]
['text':' TDEFL_FORCE_ALL_RAW_BLOCKS: Only use raw (uncompressed) deflate blocks. ','line_number':598,'multiline':True]
['text':' The low 12 bits are reserved to control the max # of hash probes per dictionary lookup (see TDEFL_MAX_PROBES_MASK). ','line_number':599,'multiline':True]
['text':' High level compression functions: ','line_number':612,'multiline':True]
['text':' tdefl_compress_mem_to_heap() compresses a block in memory to a heap block allocated via malloc(). ','line_number':613,'multiline':True]
['text':' On entry: ','line_number':614,'multiline':True]
['text':'  pSrc_buf, src_buf_len: Pointer and size of source block to compress. ','line_number':615,'multiline':True]
['text':'  flags: The max match finder probes (default is 128) logically OR'd against the above flags. Higher probes are slower but improve compression. ','line_number':616,'multiline':True]
['text':' On return: ','line_number':617,'multiline':True]
['text':'  Function returns a pointer to the compressed data, or NULL on failure. ','line_number':618,'multiline':True]
['text':'  *pOut_len will be set to the compressed data's size, which could be larger than src_buf_len on uncompressible data. ','line_number':619,'multiline':True]
['text':'  The caller must free() the returned block when it's no longer needed. ','line_number':620,'multiline':True]
['text':' tdefl_compress_mem_to_mem() compresses a block in memory to another block in memory. ','line_number':623,'multiline':True]
['text':' Returns 0 on failure. ','line_number':624,'multiline':True]
['text':' Compresses an image to a compressed PNG file in memory. ','line_number':627,'multiline':True]
['text':' On entry: ','line_number':628,'multiline':True]
['text':'  pImage, w, h, and num_chans describe the image to compress. num_chans may be 1, 2, 3, or 4. ','line_number':629,'multiline':True]
['text':'  The image pitch in bytes per scanline will be w*num_chans. The leftmost pixel on the top scanline is stored first in memory. ','line_number':630,'multiline':True]
['text':'  level may range from [0,10], use MZ_NO_COMPRESSION, MZ_BEST_SPEED, MZ_BEST_COMPRESSION, etc. or a decent default is MZ_DEFAULT_LEVEL ','line_number':631,'multiline':True]
['text':'  If flip is true, the image will be flipped on the Y axis (useful for OpenGL apps). ','line_number':632,'multiline':True]
['text':' On return: ','line_number':633,'multiline':True]
['text':'  Function returns a pointer to the compressed data, or NULL on failure. ','line_number':634,'multiline':True]
['text':'  *pLen_out will be set to the size of the PNG image file. ','line_number':635,'multiline':True]
['text':'  The caller must mz_free() the returned heap block (which will typically be larger than *pLen_out) when it's no longer needed. ','line_number':636,'multiline':True]
['text':' Output stream interface. The compressor uses this interface to write compressed data. It'll typically be called TDEFL_OUT_BUF_SIZE at a time. ','line_number':640,'multiline':True]
['text':' tdefl_compress_mem_to_output() compresses a block to an output stream. The above helpers use this function internally. ','line_number':643,'multiline':True]
['text':' TDEFL_OUT_BUF_SIZE MUST be large enough to hold a single entire compressed output block (using static/fixed Huffman codes). ','line_number':658,'multiline':True]
['text':' The low-level tdefl functions below may be used directly if the above helper functions aren't flexible enough. The low-level functions don't make any heap allocations, unlike the above helper functions. ','line_number':683,'multiline':True]
['text':' Must map to MZ_NO_FLUSH, MZ_SYNC_FLUSH, etc. enums ','line_number':691,'multiline':True]
['text':' tdefl's compression state structure. ','line_number':699,'multiline':True]
['text':' Initializes the compressor. ','line_number':727,'multiline':True]
['text':' There is no corresponding deinit() function because the tdefl API's do not dynamically allocate memory. ','line_number':728,'multiline':True]
['text':' pBut_buf_func: If NULL, output data will be supplied to the specified callback. In this case, the user should call the tdefl_compress_buffer() API for compression. ','line_number':729,'multiline':True]
['text':' If pBut_buf_func is NULL the user should always call the tdefl_compress() API. ','line_number':730,'multiline':True]
['text':' flags: See the above enums (TDEFL_HUFFMAN_ONLY, TDEFL_WRITE_ZLIB_HEADER, etc.) ','line_number':731,'multiline':True]
['text':' Compresses a block of data, consuming as much of the specified input buffer as possible, and writing as much compressed data to the specified output buffer as possible. ','line_number':734,'multiline':True]
['text':' tdefl_compress_buffer() is only usable when the tdefl_init() is called with a non-NULL tdefl_put_buf_func_ptr. ','line_number':737,'multiline':True]
['text':' tdefl_compress_buffer() always consumes the entire input buffer. ','line_number':738,'multiline':True]
['text':' Create tdefl_compress() flags given zlib-style compression parameters. ','line_number':744,'multiline':True]
['text':' level may range from [0,10] (where 10 is absolute max compression, but may be much slower on some files) ','line_number':745,'multiline':True]
['text':' window_bits may be -15 (raw deflate) or 15 (zlib) ','line_number':746,'multiline':True]
['text':' strategy may be either MZ_DEFAULT_STRATEGY, MZ_FILTERED, MZ_HUFFMAN_ONLY, MZ_RLE, or MZ_FIXED ','line_number':747,'multiline':True]
['text':' Allocate the tdefl_compressor structure in C so that ','line_number':751,'multiline':True]
['text':' non-C language bindings to tdefl_ API don't need to worry about ','line_number':752,'multiline':True]
['text':' structure size and allocation mechanism. ','line_number':753,'multiline':True]
['text':' ------------------- Low-level Decompression API Definitions ','line_number':763,'multiline':True]
['text':' Decompression flags used by tinfl_decompress(). ','line_number':768,'multiline':True]
['text':' TINFL_FLAG_PARSE_ZLIB_HEADER: If set, the input has a valid zlib header and ends with an adler32 checksum (it's a valid zlib stream). Otherwise, the input is a raw deflate stream. ','line_number':769,'multiline':True]
['text':' TINFL_FLAG_HAS_MORE_INPUT: If set, there are more input bytes available beyond the end of the supplied input buffer. If clear, the input buffer contains all remaining input. ','line_number':770,'multiline':True]
['text':' TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF: If set, the output buffer is large enough to hold the entire decompressed stream. If clear, the output buffer is at least the size of the dictionary (typically 32KB). ','line_number':771,'multiline':True]
['text':' TINFL_FLAG_COMPUTE_ADLER32: Force adler-32 checksum computation of the decompressed bytes. ','line_number':772,'multiline':True]
['text':' High level decompression functions: ','line_number':781,'multiline':True]
['text':' tinfl_decompress_mem_to_heap() decompresses a block in memory to a heap block allocated via malloc(). ','line_number':782,'multiline':True]
['text':' On entry: ','line_number':783,'multiline':True]
['text':'  pSrc_buf, src_buf_len: Pointer and size of the Deflate or zlib source data to decompress. ','line_number':784,'multiline':True]
['text':' On return: ','line_number':785,'multiline':True]
['text':'  Function returns a pointer to the decompressed data, or NULL on failure. ','line_number':786,'multiline':True]
['text':'  *pOut_len will be set to the decompressed data's size, which could be larger than src_buf_len on uncompressible data. ','line_number':787,'multiline':True]
['text':'  The caller must call mz_free() on the returned block when it's no longer needed. ','line_number':788,'multiline':True]
['text':' tinfl_decompress_mem_to_mem() decompresses a block in memory to another block in memory. ','line_number':791,'multiline':True]
['text':' Returns TINFL_DECOMPRESS_MEM_TO_MEM_FAILED on failure, or the number of bytes written on success. ','line_number':792,'multiline':True]
['text':' tinfl_decompress_mem_to_callback() decompresses a block in memory to an internal 32KB buffer, and a user provided callback function will be called to flush the buffer. ','line_number':796,'multiline':True]
['text':' Returns 1 on success or 0 on failure. ','line_number':797,'multiline':True]
['text':' Allocate the tinfl_decompressor structure in C so that ','line_number':805,'multiline':True]
['text':' non-C language bindings to tinfl_ API don't need to worry about ','line_number':806,'multiline':True]
['text':' structure size and allocation mechanism. ','line_number':807,'multiline':True]
['text':' Max size of LZ dictionary. ','line_number':812,'multiline':True]
['text':' Return status. ','line_number':815,'multiline':True]
['text':' This flags indicates the inflator needs 1 or more input bytes to make forward progress, but the caller is indicating that no more are available. The compressed data ','line_number':817,'multiline':True]
['text':' is probably corrupted. If you call the inflator again with more bytes it'll try to continue processing the input but this is a BAD sign (either the data is corrupted or you called it incorrectly). ','line_number':818,'multiline':True]
['text':' If you call it again with no input you'll just get TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS again. ','line_number':819,'multiline':True]
['text':' This flag indicates that one or more of the input parameters was obviously bogus. (You can try calling it again, but if you get this error the calling code is wrong.) ','line_number':822,'multiline':True]
['text':' This flags indicate the inflator is finished but the adler32 check of the uncompressed data didn't match. If you call it again it'll return TINFL_STATUS_DONE. ','line_number':825,'multiline':True]
['text':' This flags indicate the inflator has somehow failed (bad code, corrupted input, etc.). If you call it again without resetting via tinfl_init() it it'll just keep on returning the same status failure code. ','line_number':828,'multiline':True]
['text':' Any status code less than TINFL_STATUS_DONE must indicate a failure. ','line_number':831,'multiline':True]
['text':' This flag indicates the inflator has returned every byte of uncompressed data that it can, has consumed every byte that it needed, has successfully reached the end of the deflate stream, and ','line_number':833,'multiline':True]
['text':' if zlib headers and adler32 checking enabled that it has successfully checked the uncompressed data's adler32. If you call it again you'll just get TINFL_STATUS_DONE over and over again. ','line_number':834,'multiline':True]
['text':' This flag indicates the inflator MUST have more input data (even 1 byte) before it can make any more forward progress, or you need to clear the TINFL_FLAG_HAS_MORE_INPUT ','line_number':837,'multiline':True]
['text':' flag on the next call if you don't have any more source data. If the source data was somehow corrupted it's also possible (but unlikely) for the inflator to keep on demanding input to ','line_number':838,'multiline':True]
['text':' proceed, so be sure to properly set the TINFL_FLAG_HAS_MORE_INPUT flag. ','line_number':839,'multiline':True]
['text':' This flag indicates the inflator definitely has 1 or more bytes of uncompressed data available, but it cannot write this data into the output buffer. ','line_number':842,'multiline':True]
['text':' Note if the source compressed data was corrupted it's possible for the inflator to return a lot of uncompressed data to the caller. I've been assuming you know how much uncompressed data to expect ','line_number':843,'multiline':True]
['text':' (either exact or worst case) and will stop calling the inflator and fail after receiving too much. In pure streaming scenarios where you have no idea how many bytes to expect this may not be possible ','line_number':844,'multiline':True]
['text':' so I may need to add some code to address this. ','line_number':845,'multiline':True]
['text':' Initializes the decompressor to its initial state. ','line_number':849,'multiline':True]
['text':' Main low-level decompressor coroutine function. This is the only function actually needed for decompression. All the other functions are just high-level helpers for improved usability. ','line_number':858,'multiline':True]
['text':' This is a universal API, i.e. it can be used as a building block to build any desired higher level decompression API. In the limit case, it can be called once per every byte input or output. ','line_number':859,'multiline':True]
['text':' Internal/private bits follow. ','line_number':862,'multiline':True]
['text':' ------------------- ZIP archive reading/writing ','line_number':909,'multiline':True]
['text':' Note: These enums can be reduced as needed to save memory or stack space - they are pretty conservative. ','line_number':919,'multiline':True]
['text':' Central directory file index. ','line_number':927,'multiline':True]
['text':' Byte offset of this entry in the archive's central directory. Note we currently only support up to UINT_MAX or less bytes in the central dir. ','line_number':930,'multiline':True]
['text':' These fields are copied directly from the zip's central dir. ','line_number':933,'multiline':True]
['text':' CRC-32 of uncompressed data. ','line_number':943,'multiline':True]
['text':' File's compressed size. ','line_number':946,'multiline':True]
['text':' File's uncompressed size. Note, I've seen some old archives where directory entries had 512 bytes for their uncompressed sizes, but when you try to unpack them you actually get 0 bytes. ','line_number':949,'multiline':True]
['text':' Zip internal and external file attributes. ','line_number':952,'multiline':True]
['text':' Entry's local header file offset in bytes. ','line_number':956,'multiline':True]
['text':' Size of comment in bytes. ','line_number':959,'multiline':True]
['text':' MZ_TRUE if the entry appears to be a directory. ','line_number':962,'multiline':True]
['text':' MZ_TRUE if the entry uses encryption/strong encryption (which miniz_zip doesn't support) ','line_number':965,'multiline':True]
['text':' MZ_TRUE if the file is not encrypted, a patch file, and if it uses a compression method we support. ','line_number':968,'multiline':True]
['text':' Filename. If string ends in '/' it's a subdirectory entry. ','line_number':971,'multiline':True]
['text':' Guaranteed to be zero terminated, may be truncated to fit. ','line_number':972,'multiline':True]
['text':' Comment field. ','line_number':975,'multiline':True]
['text':' Guaranteed to be zero terminated, may be truncated to fit. ','line_number':976,'multiline':True]
['text':' if enabled, mz_zip_reader_locate_file() will be called on each file as its validated to ensure the func finds the file in the central dir (intended for testing) ','line_number':1000,'multiline':True]
['text':' validate the local headers, but don't decompress the entire file and check the crc32 ','line_number':1001,'multiline':True]
['text':' always use the zip64 file format, instead of the original zip file format with automatic switch to zip64. Use as flags parameter with mz_zip_writer_init*_v2 ','line_number':1002,'multiline':True]
['text':' miniz error codes. Be sure to update mz_zip_get_error_string() if you add or modify this enum. ','line_number':1017,'multiline':True]
['text':' note: added name so it can be forward declared ','line_number':1054,'multiline':True]
['text':' We only support up to UINT32_MAX files in zip64 mode. ','line_number':1059,'multiline':True]
['text':' -------- ZIP reading ','line_number':1101,'multiline':True]
['text':' Inits a ZIP archive reader. ','line_number':1103,'multiline':True]
['text':' These functions read and validate the archive's central directory. ','line_number':1104,'multiline':True]
['text':' Read a archive from a disk file. ','line_number':1110,'multiline':True]
['text':' file_start_ofs is the file offset where the archive actually begins, or 0. ','line_number':1111,'multiline':True]
['text':' actual_archive_size is the true total size of the archive, which may be smaller than the file's actual size on disk. If zero the entire file is treated as the archive. ','line_number':1112,'multiline':True]
['text':' Read an archive from an already opened FILE, beginning at the current file position. ','line_number':1116,'multiline':True]
['text':' The archive is assumed to be archive_size bytes long. If archive_size is < 0, then the entire rest of the file is assumed to contain the archive. ','line_number':1117,'multiline':True]
['text':' The FILE will NOT be closed when mz_zip_reader_end() is called. ','line_number':1118,'multiline':True]
['text':' Ends archive reading, freeing all allocations, and closing the input archive file if mz_zip_reader_init_file() was used. ','line_number':1122,'multiline':True]
['text':' -------- ZIP reading or writing ','line_number':1125,'multiline':True]
['text':' Clears a mz_zip_archive struct to all zeros. ','line_number':1127,'multiline':True]
['text':' Important: This must be done before passing the struct to any mz_zip functions. ','line_number':1128,'multiline':True]
['text':' Returns the total number of files in the archive. ','line_number':1134,'multiline':True]
['text':' Reads n bytes of raw archive data, starting at file offset file_ofs, to pBuf. ','line_number':1141,'multiline':True]
['text':' All mz_zip funcs set the m_last_error field in the mz_zip_archive struct. These functions retrieve/manipulate this field. ','line_number':1144,'multiline':True]
['text':' Note that the m_last_error functionality is not thread safe. ','line_number':1145,'multiline':True]
['text':' MZ_TRUE if the archive file entry is a directory entry. ','line_number':1152,'multiline':True]
['text':' MZ_TRUE if the file is encrypted/strong encrypted. ','line_number':1155,'multiline':True]
['text':' MZ_TRUE if the compression method is supported, and the file is not encrypted, and the file is not a compressed patch file. ','line_number':1158,'multiline':True]
['text':' Retrieves the filename of an archive file entry. ','line_number':1161,'multiline':True]
['text':' Returns the number of bytes written to pFilename, or if filename_buf_size is 0 this function returns the number of bytes needed to fully store the filename. ','line_number':1162,'multiline':True]
['text':' Attempts to locates a file in the archive's central directory. ','line_number':1165,'multiline':True]
['text':' Valid flags: MZ_ZIP_FLAG_CASE_SENSITIVE, MZ_ZIP_FLAG_IGNORE_PATH ','line_number':1166,'multiline':True]
['text':' Returns -1 if the file cannot be found. ','line_number':1167,'multiline':True]
['text':' Returns detailed information about an archive file entry. ','line_number':1171,'multiline':True]
['text':' MZ_TRUE if the file is in zip64 format. ','line_number':1174,'multiline':True]
['text':' A file is considered zip64 if it contained a zip64 end of central directory marker, or if it contained any zip64 extended file information fields in the central directory. ','line_number':1175,'multiline':True]
['text':' Returns the total central directory size in bytes. ','line_number':1178,'multiline':True]
['text':' The current max supported size is <= MZ_UINT32_MAX. ','line_number':1179,'multiline':True]
['text':' Extracts a archive file to a memory buffer using no memory allocation. ','line_number':1182,'multiline':True]
['text':' There must be at least enough room on the stack to store the inflator's state (~34KB or so). ','line_number':1183,'multiline':True]
['text':' Extracts a archive file to a memory buffer. ','line_number':1187,'multiline':True]
['text':' Extracts a archive file to a dynamically allocated heap buffer. ','line_number':1191,'multiline':True]
['text':' The memory will be allocated via the mz_zip_archive's alloc/realloc functions. ','line_number':1192,'multiline':True]
['text':' Returns NULL and sets the last error on failure. ','line_number':1193,'multiline':True]
['text':' Extracts a archive file using a callback function to output the file's data. ','line_number':1197,'multiline':True]
['text':' Extract a file iteratively ','line_number':1201,'multiline':True]
['text':' Extracts a archive file to a disk file and sets its last accessed and modified times. ','line_number':1208,'multiline':True]
['text':' This function only extracts files, not archive directory records. ','line_number':1209,'multiline':True]
['text':' Extracts a archive file starting at the current position in the destination FILE stream. ','line_number':1213,'multiline':True]
['text':' TODO ','line_number':1219,'multiline':True]
['text':' This function compares the archive's local headers, the optional local zip64 extended information block, and the optional descriptor following the compressed data vs. the data in the central directory. ','line_number':1229,'multiline':True]
['text':' It also validates that each file can be successfully uncompressed unless the MZ_ZIP_FLAG_VALIDATE_HEADERS_ONLY is specified. ','line_number':1230,'multiline':True]
['text':' Validates an entire archive by calling mz_zip_validate_file() on each file. ','line_number':1233,'multiline':True]
['text':' Misc utils/helpers, valid for ZIP reading or writing ','line_number':1236,'multiline':True]
['text':' Universal end function - calls either mz_zip_reader_end() or mz_zip_writer_end(). ','line_number':1240,'multiline':True]
['text':' -------- ZIP writing ','line_number':1243,'multiline':True]
['text':' Inits a ZIP archive writer. ','line_number':1247,'multiline':True]
['text':'Set pZip->m_pWrite (and pZip->m_pIO_opaque) before calling mz_zip_writer_init or mz_zip_writer_init_v2','line_number':1248,'multiline':True]
['text':'The output is streamable, i.e. file_ofs in mz_file_write_func always increases only by n','line_number':1249,'multiline':True]
['text':' Converts a ZIP archive reader object into a writer object, to allow efficient in-place file appends to occur on an existing archive. ','line_number':1262,'multiline':True]
['text':' For archives opened using mz_zip_reader_init_file, pFilename must be the archive's filename so it can be reopened for writing. If the file can't be reopened, mz_zip_reader_end() will be called. ','line_number':1263,'multiline':True]
['text':' For archives opened using mz_zip_reader_init_mem, the memory block must be growable using the realloc callback (which defaults to realloc unless you've overridden it). ','line_number':1264,'multiline':True]
['text':' Finally, for archives opened using mz_zip_reader_init, the mz_zip_archive's user provided m_pWrite function cannot be NULL. ','line_number':1265,'multiline':True]
['text':' Note: In-place archive modification is not recommended unless you know what you're doing, because if execution stops or something goes wrong before ','line_number':1266,'multiline':True]
['text':' the archive is finalized the file's central directory will be hosed. ','line_number':1267,'multiline':True]
['text':' Adds the contents of a memory buffer to an archive. These functions record the current local time into the archive. ','line_number':1271,'multiline':True]
['text':' To add a directory entry, call this method with an archive name ending in a forwardslash with an empty buffer. ','line_number':1272,'multiline':True]
['text':' level_and_flags - compression level (0-10, see MZ_BEST_SPEED, MZ_BEST_COMPRESSION, etc.) logically OR'd with zero or more mz_zip_flags, or just set to MZ_DEFAULT_COMPRESSION. ','line_number':1273,'multiline':True]
['text':' Like mz_zip_writer_add_mem(), except you can specify a file comment field, and optionally supply the function with already compressed data. ','line_number':1276,'multiline':True]
['text':' uncomp_size/uncomp_crc32 are only used if the MZ_ZIP_FLAG_COMPRESSED_DATA flag is specified. ','line_number':1277,'multiline':True]
['text':' Adds the contents of a file to an archive. This function also records the disk file's modified time into the archive. ','line_number':1285,'multiline':True]
['text':' File data is supplied via a read callback function. User mz_zip_writer_add_(c)file to add a file directly.','line_number':1286,'multiline':True]
['text':' Adds the contents of a disk file to an archive. This function also records the disk file's modified time into the archive. ','line_number':1292,'multiline':True]
['text':' level_and_flags - compression level (0-10, see MZ_BEST_SPEED, MZ_BEST_COMPRESSION, etc.) logically OR'd with zero or more mz_zip_flags, or just set to MZ_DEFAULT_COMPRESSION. ','line_number':1293,'multiline':True]
['text':' Like mz_zip_writer_add_file(), except the file data is read from the specified FILE stream. ','line_number':1296,'multiline':True]
['text':' Adds a file to an archive by fully cloning the data from another archive. ','line_number':1302,'multiline':True]
['text':' This function fully clones the source file's compressed data (no recompression), along with its full filename, extra data (it may add or modify the zip64 local header extra data field), and the optional descriptor following the compressed data. ','line_number':1303,'multiline':True]
['text':' Finalizes the archive by writing the central directory records followed by the end of central directory record. ','line_number':1306,'multiline':True]
['text':' After an archive is finalized, the only valid call on the mz_zip_archive struct is mz_zip_writer_end(). ','line_number':1307,'multiline':True]
['text':' An archive must be manually finalized by calling this function for it to be valid. ','line_number':1308,'multiline':True]
['text':' Finalizes a heap archive, returning a poiner to the heap block and its size. ','line_number':1311,'multiline':True]
['text':' The heap block will be allocated using the mz_zip_archive's alloc/realloc callbacks. ','line_number':1312,'multiline':True]
['text':' Ends archive writing, freeing all allocations, and closing the output file if mz_zip_writer_init_file() was used. ','line_number':1315,'multiline':True]
['text':' Note for the archive to be valid, it *must* have been finalized before ending (this function will not do it for you). ','line_number':1316,'multiline':True]
['text':' -------- Misc. high-level helper functions: ','line_number':1319,'multiline':True]
['text':' mz_zip_add_mem_to_archive_file_in_place() efficiently (but not atomically) appends a memory blob to a ZIP archive. ','line_number':1321,'multiline':True]
['text':' Note this is NOT a fully safe operation. If it crashes or dies in some way your archive can be left in a screwed up state (without a central directory). ','line_number':1322,'multiline':True]
['text':' level_and_flags - compression level (0-10, see MZ_BEST_SPEED, MZ_BEST_COMPRESSION, etc.) logically OR'd with zero or more mz_zip_flags, or just set to MZ_DEFAULT_COMPRESSION. ','line_number':1323,'multiline':True]
['text':' TODO: Perhaps add an option to leave the existing central dir in place in case the add dies? We could then truncate the file (so the old central dir would be at the end) if something goes wrong. ','line_number':1324,'multiline':True]
['text':' Reads a single file from an archive into a heap block. ','line_number':1328,'multiline':True]
['text':' If pComment is not NULL, only the file with the specified comment will be extracted. ','line_number':1329,'multiline':True]
['text':' Returns NULL on failure. ','line_number':1330,'multiline':True]
['text':' #ifndef MINIZ_NO_ARCHIVE_WRITING_APIS ','line_number':1334,'multiline':True]
['text':' MINIZ_NO_ARCHIVE_APIS ','line_number':1340,'multiline':True]
