['text':'*
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' f(x) = 0.5 * x^2 / beta      if |x| < beta','line_number':26,'multiline':False]
['text':'        |x| - 0.5 * beta      otherwise','line_number':27,'multiline':False]
['text':' f'(x) = x / beta     if |x| < beta','line_number':47,'multiline':False]
['text':'       = sign(x)      otherwise','line_number':48,'multiline':False]
['text':' We also scale by norm * d_loss in this kernel for convenience','line_number':49,'multiline':False]
['text':' namespace','line_number':61,'multiline':False]
['text':' Require the same number of elements along axis 0 (batch size), but','line_number':72,'multiline':False]
['text':' otherwise don't care about the shape (just the number of elements)','line_number':73,'multiline':False]
['text':' Difference','line_number':84,'multiline':False]
['text':' d := y_hat - y','line_number':85,'multiline':False]
['text':' Element-wise weighted difference (can be used to ignore or reweight','line_number':89,'multiline':False]
['text':' specific components)','line_number':90,'multiline':False]
['text':' d := alpha_in * (y_hat - y)','line_number':91,'multiline':False]
['text':' Element-wise smooth l1 loss','line_number':96,'multiline':False]
['text':' l := SmoothL1(alpha_in * (y_hat - y))','line_number':97,'multiline':False]
['text':' Element-wise weighted smooth l1 loss (can be used to specify a per-element','line_number':107,'multiline':False]
['text':' loss weight)','line_number':108,'multiline':False]
['text':' l := alpha_out * SmoothL1(alpha_in * (y_hat - y))','line_number':109,'multiline':False]
['text':' Sum of all losses','line_number':113,'multiline':False]
['text':' al := sum_i l_i','line_number':114,'multiline':False]
['text':' Average of input batch size','line_number':118,'multiline':False]
['text':' al := 1/N * al','line_number':119,'multiline':False]
['text':' gradient of net w.r.t. avg_loss ("gradOuput")','line_number':131,'multiline':False]
['text':' We intentially don't compute gradients for Y, alpha_{in,out} since they','line_number':132,'multiline':False]
['text':' are not needed (can change in the future if desired)','line_number':133,'multiline':False]
['text':' Require the same number of elements along axis 0 (batch size), but','line_number':136,'multiline':False]
['text':' otherwise don't care about the shape (just the number of elements)','line_number':137,'multiline':False]
['text':' gradient of net w.r.t. Y_hat ("gradInput")','line_number':146,'multiline':False]
['text':' Difference','line_number':149,'multiline':False]
['text':' d := y_hat - y','line_number':150,'multiline':False]
['text':' Element-wise weighted difference (can be used to ignore or reweight','line_number':154,'multiline':False]
['text':' specific components)','line_number':155,'multiline':False]
['text':' d := alpha_in * (y_hat - y)','line_number':156,'multiline':False]
['text':' d_Y_hat := d_avg_loss / N * SmoothL1'(alpha_in * (y_hat - y))','line_number':160,'multiline':False]
['text':' Element-wise scale by alpha_in and alpha_out','line_number':170,'multiline':False]
['text':' namespace caffe2','line_number':185,'multiline':False]
