['text':' Note [Tensor-subclass-like Tensors]','line_number':14,'multiline':False]
['text':' Tensor-subclass-like is defined as:','line_number':15,'multiline':False]
['text':' - a Tensor subclass (via __torch_dispatch__ in Python or extending','line_number':16,'multiline':False]
['text':'   TensorImpl in C++)','line_number':17,'multiline':False]
['text':' - anything else that shares the same perils as Tensor subclasses.','line_number':18,'multiline':False]
['text':'   For example, many Tensor subclasses do not have storage and meta Tensors','line_number':19,'multiline':False]
['text':'   do not have storage either, so meta Tensors belong here.','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' We should ensure that PyTorch internals supports Tensor-subclass-like','line_number':22,'multiline':False]
['text':' objects. In particular, Tensor-subclass-like objects struggle with two','line_number':23,'multiline':False]
['text':' classes of operations that are problematic for Tensor subclasses:','line_number':24,'multiline':False]
['text':' 1. Because some Tensor subclasses do not have storage, .item() or','line_number':25,'multiline':False]
['text':'    .data_ptr() calls are not good.','line_number':26,'multiline':False]
['text':' 2. Certain in-place operations can eliminate the typing of the Tensor','line_number':27,'multiline':False]
['text':'    subclass. For example:','line_number':28,'multiline':False]
['text':'    >>> torch.zeros(input.sizes(), grad.options()).diag().copy_(input)','line_number':29,'multiline':False]
['text':'    If input is a Tensor subclass, then the above ends up either erroring out','line_number':30,'multiline':False]
['text':'    or returning a regular non-Tensor-subclass Tensor!','line_number':31,'multiline':False]
['text':' WARNING: DO NOT put combined backend component + functionality keys','line_number':41,'multiline':False]
['text':' here, you will incorrectly always match on the functionality key','line_number':42,'multiline':False]
['text':' no matter the backend component','line_number':43,'multiline':False]
['text':' Helper function to deal testing truthfulness of a scalar tensor','line_number':75,'multiline':False]
['text':' in a Composite Compliant manner.','line_number':76,'multiline':False]
['text':' NOTE: This function expects a scalar tensor of boolean dtype.','line_number':77,'multiline':False]
['text':' Eg.','line_number':78,'multiline':False]
['text':' Non-Composite Compliant Pattern : (t == 0).all().item<bool>()','line_number':79,'multiline':False]
['text':' Composite Compliant Patter : is_salar_tensor_true((t == 0).all())','line_number':80,'multiline':False]
['text':' namespace at','line_number':87,'multiline':False]
