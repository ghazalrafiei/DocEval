['text':' Thread local state contains values that are preserved across','line_number':20,'multiline':False]
['text':' thread boundaries (e.g. at::launch/JIT fork, autograd).','line_number':21,'multiline':False]
['text':' Note at::parallel_for doesn't preserve TLS across thread boundaries.','line_number':22,'multiline':False]
['text':' Saves the thread local variables' values and','line_number':25,'multiline':False]
['text':' returns them as a ThreadLocalState','line_number':26,'multiline':False]
['text':' set_grad_mode - force the value of the grad mode TLS in','line_number':29,'multiline':False]
['text':'  the current state object. This is used for example in the','line_number':30,'multiline':False]
['text':'  autograd engine.','line_number':31,'multiline':False]
['text':' set_multithreading_enabled - force the value of the multithreadinmaximum','line_number':34,'multiline':False]
['text':' threads TLS in','line_number':35,'multiline':False]
['text':'  the current state object. This is used for example in the','line_number':36,'multiline':False]
['text':'  autograd engine.','line_number':37,'multiline':False]
['text':' Sets thread local variables in the current thread,','line_number':40,'multiline':False]
['text':' according to the thread boundary specified','line_number':41,'multiline':False]
['text':' ThreadLocalDebugInfo does not change after being created','line_number':47,'multiline':False]
['text':' with DebugInfoGuard','line_number':48,'multiline':False]
['text':' RecordFunction TLS','line_number':51,'multiline':False]
['text':' TLS for out-of-tree functorch','line_number':54,'multiline':False]
['text':' See NOTE [functorch TLS in pytorch/pytorch] for why this needs to be a','line_number':55,'multiline':False]
['text':' pointer (spoiler alert: it's due to the indirection)','line_number':56,'multiline':False]
['text':' This needs to be a shared_ptr instead of a unique_ptr because','line_number':57,'multiline':False]
['text':' ThreadLocalState is copy-able and does indeed get copied. Maybe we can','line_number':58,'multiline':False]
['text':' consider adding an explicit copy constructor for ThreadLocalState in the','line_number':59,'multiline':False]
['text':' future but I didn't want to add one just for this.','line_number':60,'multiline':False]
['text':' TLS for AutogradModes','line_number':63,'multiline':False]
['text':' TLS for enable_torch_dispatch_mode','line_number':66,'multiline':False]
['text':' TLS for enable_python_dispatcher','line_number':69,'multiline':False]
['text':' TLS for __torch_function__ (mode and disable_torch_function)','line_number':72,'multiline':False]
['text':' TLS for saved tensors default hooks','line_number':75,'multiline':False]
['text':' TLS for arbitrary python objects that is registered via hooks','line_number':80,'multiline':False]
['text':' Guard to set and reset the thread local state','line_number':86,'multiline':False]
['text':' set the given state across the thread boundary','line_number':91,'multiline':False]
['text':' restore previously set variables','line_number':96,'multiline':False]
['text':' Propagate value returned by callback().','line_number':109,'multiline':False]
['text':' namespace at','line_number':114,'multiline':False]
