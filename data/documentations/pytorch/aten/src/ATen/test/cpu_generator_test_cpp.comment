['text':' Test Description: Check dynamic cast for CPU','line_number':15,'multiline':False]
['text':' Test Description:','line_number':22,'multiline':False]
['text':' Check if default generator is created only once','line_number':23,'multiline':False]
['text':' address of generator should be same in all calls','line_number':24,'multiline':False]
['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':26,'multiline':False]
['text':' Test Description:','line_number':32,'multiline':False]
['text':' Check cloning of new generators.','line_number':33,'multiline':False]
['text':' Note that we don't allow cloning of other','line_number':34,'multiline':False]
['text':' generator states into default generators.','line_number':35,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-security.insecureAPI.rand)','line_number':38,'multiline':False]
['text':' advance gen1 state','line_number':39,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-security.insecureAPI.rand)','line_number':40,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-security.insecureAPI.rand)','line_number':45,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-security.insecureAPI.rand)','line_number':51,'multiline':False]
['text':' Test Description:','line_number':56,'multiline':False]
['text':' Check CPUGeneratorImpl is reentrant and the engine state','line_number':57,'multiline':False]
['text':' is not corrupted when multiple threads request for','line_number':58,'multiline':False]
['text':' random samples.','line_number':59,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':60,'multiline':False]
['text':' capture the current state of default generator','line_number':66,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-security.insecureAPI.rand)','line_number':76,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-security.insecureAPI.rand)','line_number':78,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-security.insecureAPI.rand)','line_number':80,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-security.insecureAPI.rand)','line_number':82,'multiline':False]
['text':' Test Description:','line_number':87,'multiline':False]
['text':' Test current seed getter and setter','line_number':88,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':89,'multiline':False]
['text':' Test Description:','line_number':105,'multiline':False]
['text':' Test current seed getter and setter are thread safe','line_number':106,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':107,'multiline':False]
['text':' Test Description:','line_number':120,'multiline':False]
['text':' Test that state of a generator can be frozen and','line_number':121,'multiline':False]
['text':' restored','line_number':122,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':123,'multiline':False]
['text':' capture the current state of default generator','line_number':128,'multiline':False]
['text':' Dramatically alter the internal state of the main generator','line_number':131,'multiline':False]
['text':'*
 * Philox CPU Engine Tests
 ','line_number':137,'multiline':True]
['text':' Test Description:','line_number':142,'multiline':False]
['text':'   Tests if same inputs give same results.','line_number':143,'multiline':False]
['text':'   launch on same thread index and create two engines.','line_number':144,'multiline':False]
['text':'   Given same seed, idx and offset, assert that the engines','line_number':145,'multiline':False]
['text':'   should be aligned and have the same sequence.','line_number':146,'multiline':False]
['text':' Test Description:','line_number':153,'multiline':False]
['text':'   Tests offsetting in same thread index.','line_number':154,'multiline':False]
['text':'   make one engine skip the first 8 values and','line_number':155,'multiline':False]
['text':'   make another engine increment to until the','line_number':156,'multiline':False]
['text':'   first 8 values. Assert that the first call','line_number':157,'multiline':False]
['text':'   of engine2 and the 9th call of engine1 are equal.','line_number':158,'multiline':False]
['text':' Note: offset is a multiple of 4.','line_number':160,'multiline':False]
['text':' So if you want to skip 8 values, offset would','line_number':161,'multiline':False]
['text':' be 2, since 2*4=8.','line_number':162,'multiline':False]
['text':' Note: instead of using the engine() call 8 times','line_number':165,'multiline':False]
['text':' we could have achieved the same functionality by','line_number':166,'multiline':False]
['text':' calling the incr() function twice.','line_number':167,'multiline':False]
['text':' Test Description:','line_number':174,'multiline':False]
['text':'   Tests edge case at the end of the 2^190th value of the generator.','line_number':175,'multiline':False]
['text':'   launch on same thread index and create two engines.','line_number':176,'multiline':False]
['text':'   make engine1 skip to the 2^64th 128 bit while being at thread 0','line_number':177,'multiline':False]
['text':'   make engine2 skip to the 2^64th 128 bit while being at 2^64th thread','line_number':178,'multiline':False]
['text':'   Assert that engine2 should be increment_val+1 steps behind engine1.','line_number':179,'multiline':False]
['text':' Test Description:','line_number':190,'multiline':False]
['text':'   Tests edge case in between thread indices.','line_number':191,'multiline':False]
['text':'   launch on same thread index and create two engines.','line_number':192,'multiline':False]
['text':'   make engine1 skip to the 2^64th 128 bit while being at thread 0','line_number':193,'multiline':False]
['text':'   start engine2 at thread 1, with offset 0','line_number':194,'multiline':False]
['text':'   Assert that engine1 is 1 step behind engine2.','line_number':195,'multiline':False]
['text':' Test Description:','line_number':204,'multiline':False]
['text':'   Tests if thread indexing is working properly.','line_number':205,'multiline':False]
['text':'   create two engines with different thread index but same offset.','line_number':206,'multiline':False]
['text':'   Assert that the engines have different sequences.','line_number':207,'multiline':False]
['text':'*
 * MT19937 CPU Engine Tests
 ','line_number':213,'multiline':True]
['text':' Test Description:','line_number':218,'multiline':False]
['text':'   Tests if same inputs give same results when compared','line_number':219,'multiline':False]
['text':'   to std.','line_number':220,'multiline':False]
['text':' test with zero seed','line_number':222,'multiline':False]
['text':' test with large seed','line_number':229,'multiline':False]
['text':' test with random seed','line_number':236,'multiline':False]
['text':' Determinism!','line_number':261,'multiline':False]
['text':' Determinism!','line_number':262,'multiline':False]
['text':' Determinism!','line_number':265,'multiline':False]
['text':' Determinism!','line_number':266,'multiline':False]
