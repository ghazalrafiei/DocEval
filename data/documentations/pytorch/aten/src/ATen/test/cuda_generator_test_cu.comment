['text':'
* Philox Engine Tests
','line_number':18,'multiline':True]
['text':' Test Description:','line_number':35,'multiline':False]
['text':'   Tests if same inputs give same results.','line_number':36,'multiline':False]
['text':'   launch one thread and create two engines.','line_number':37,'multiline':False]
['text':'   Given same seed, idx and offset, assert that the engines','line_number':38,'multiline':False]
['text':'   should be aligned and have the same sequence.','line_number':39,'multiline':False]
['text':' Note: offset is a multiple of 4.','line_number':49,'multiline':False]
['text':' So if you want to skip 8 values, offset would','line_number':50,'multiline':False]
['text':' be 2, since 2*4=8.','line_number':51,'multiline':False]
['text':' Note: instead of using the engine() call 8 times','line_number':54,'multiline':False]
['text':' we could have achieved the same functionality by','line_number':55,'multiline':False]
['text':' calling the incr() function twice.','line_number':56,'multiline':False]
['text':' Test Description:','line_number':68,'multiline':False]
['text':'   Tests offsetting in same thread.','line_number':69,'multiline':False]
['text':'   launch one thread and create two engines.','line_number':70,'multiline':False]
['text':'   make one engine skip the first 8 values and','line_number':71,'multiline':False]
['text':'   make another engine increment to until the','line_number':72,'multiline':False]
['text':'   first 8 values. Assert that the first call','line_number':73,'multiline':False]
['text':'   of engine2 and the 9th call of engine1 are equal.','line_number':74,'multiline':False]
['text':' Test Description:','line_number':98,'multiline':False]
['text':'   Tests edge case at the end of the 2^190th value of the generator.','line_number':99,'multiline':False]
['text':'   launch one thread and create two engines','line_number':100,'multiline':False]
['text':'   make engine1 skip to the 2^64th 128 bit while being at thread 0','line_number':101,'multiline':False]
['text':'   make engine2 skip to the 2^64th 128 bit while being at 2^64th thread','line_number':102,'multiline':False]
['text':'   Assert that engine2 should be increment_val+1 steps behind engine1.','line_number':103,'multiline':False]
['text':' Test Description:','line_number':125,'multiline':False]
['text':'   Tests edge case in between threads.','line_number':126,'multiline':False]
['text':'   launch one thread and create two engines','line_number':127,'multiline':False]
['text':'   make engine1 skip to the 2^64th 128 bit while being at thread 0','line_number':128,'multiline':False]
['text':'   start engine2 at thread 1, with offset 0','line_number':129,'multiline':False]
['text':'   Assert that engine1 is 1 step behind engine2.','line_number':130,'multiline':False]
['text':' Test Description:','line_number':150,'multiline':False]
['text':'   Tests if thread indexing is working properly.','line_number':151,'multiline':False]
['text':'   launch one thread and create two engines','line_number':152,'multiline':False]
['text':'   with different thread index but same offset.','line_number':153,'multiline':False]
['text':'   Assert that the engines have different sequences.','line_number':154,'multiline':False]
['text':'
* CUDA Generator Tests
','line_number':162,'multiline':True]
['text':'  Test Description: Check dynamic cast for CUDA','line_number':167,'multiline':False]
['text':' Test Description:','line_number':175,'multiline':False]
['text':' Check if default generator state is created only once','line_number':176,'multiline':False]
['text':' address of generator should be same in all calls','line_number':177,'multiline':False]
['text':' Test Description:','line_number':195,'multiline':False]
['text':' Check cloning of new generators.','line_number':196,'multiline':False]
['text':' Note that we don't allow cloning of other','line_number':197,'multiline':False]
['text':' generator states into default generators.','line_number':198,'multiline':False]
['text':' modify gen1 state','line_number':201,'multiline':False]
['text':' Test Description:','line_number':222,'multiline':False]
['text':' Test current seed getter and setter are thread safe','line_number':223,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':224,'multiline':False]
['text':' Test Description:','line_number':238,'multiline':False]
['text':' Test that state of a generator can be frozen and','line_number':239,'multiline':False]
['text':' restored','line_number':240,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':241,'multiline':False]
['text':' capture the current state of default generator','line_number':247,'multiline':False]
['text':' Dramatically alter the internal state of the main generator','line_number':250,'multiline':False]
