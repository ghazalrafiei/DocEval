['text':' NOLINTNEXTLINE(performance-for-range-copy)','line_number':10,'multiline':False]
['text':' TODO: Should be able to handle this after accumulated permutation is implemented;','line_number':22,'multiline':False]
['text':' Ambiguous case where we fallback to Contiguous;','line_number':23,'multiline':False]
['text':' This should be `EXPECT_TRUE(t.suggest_memory_format() == at::MemoryFormat::ChannelsLast);`','line_number':24,'multiline':False]
['text':' corner cases:','line_number':42,'multiline':False]
['text':' TODO: Should be able to handle this after accumulated permutation is implemented;','line_number':109,'multiline':False]
['text':' won't be able to tell how we ended up here','line_number':110,'multiline':False]
['text':' [4, 1, 1, 4]@[4, 4, 4, 1] slice twice at dim3','line_number':111,'multiline':False]
['text':' [4, 4, 1, 1]@[4, 1, 4, 4] slice twice at dim1','line_number':112,'multiline':False]
['text':' EXPECT_TRUE(t.suggest_memory_format() == MemoryFormat::ChannelsLast);','line_number':113,'multiline':False]
['text':' TODO: Should be able to handle this after accumulated permutation is implemented;','line_number':189,'multiline':False]
['text':' [4, 1, 4, 1]@[4, 1, 1, 1] after slice becomes [4, 1, 1, 1]@[4, 1, 1, 1]','line_number':190,'multiline':False]
['text':' sliceFirst(t, 2, MemoryFormat::ChannelsLast);','line_number':191,'multiline':False]
