['text':' This kernel implements the behavior of falling through to the next available','line_number':15,'multiline':False]
['text':' registered dispatch key.  The implementation of this function is FAST; it is','line_number':16,'multiline':False]
['text':' no overhead to fallthrough to the next key.  See cpp file for some more','line_number':17,'multiline':False]
['text':' implementation notes; notably, this does NOT actually go through the','line_number':18,'multiline':False]
['text':' boxing/unboxing codepath.','line_number':19,'multiline':False]
['text':' Note [Ambiguity in AutogradOther kernel]','line_number':22,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':23,'multiline':False]
['text':' This error-reporting kernel is registered to the AutogradOther entry in the','line_number':24,'multiline':False]
['text':' dispatch table when there is both a CompositeImplicitAutograd kernel and a','line_number':25,'multiline':False]
['text':' backend kernel for ANY backend that maps to AutogradOther.  To see why','line_number':26,'multiline':False]
['text':' this is necessary in the AutogradOther case, it's helpful to first see','line_number':27,'multiline':False]
['text':' why everything works out fine for a backend that has a reserved Autograd','line_number':28,'multiline':False]
['text':' entry (see rule 2.2 in [Note] DispatchTable computation):','line_number':29,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':'    CPU   AutogradCPU','line_number':31,'multiline':False]
['text':'    reg?  registers with...','line_number':32,'multiline':False]
['text':'    -------------------------------------------------','line_number':33,'multiline':False]
['text':'    y     Autograd registration takes precedence','line_number':34,'multiline':False]
['text':'          over CompositeImplicitAutograd.','line_number':35,'multiline':False]
['text':'          This is good, because the CPU specific backend','line_number':36,'multiline':False]
['text':'          implementation is more specialized and typically better;','line_number':37,'multiline':False]
['text':'          if we used the composite, we would bypass it.','line_number':38,'multiline':False]
['text':'          (NB: the Autograd key is guaranteed to exist because','line_number':39,'multiline':False]
['text':'          the autograd codegen requires it!)','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':'    n     CompositeImplicitAutograd takes precedence.','line_number':42,'multiline':False]
['text':'          This is also good, because the Autograd','line_number':43,'multiline':False]
['text':'          registration (if it exists) would try to redispatch','line_number':44,'multiline':False]
['text':'          to the (non-existent) CPU implementation; by','line_number':45,'multiline':False]
['text':'          using the composite, we ensure the operator','line_number':46,'multiline':False]
['text':'          actually works.','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' As you can see, when we have a specific Autograd key (AutogradCPU), we can','line_number':49,'multiline':False]
['text':' decide whether or not to use the CompositeImplicitAutograd kernel or the','line_number':50,'multiline':False]
['text':' Autograd kernel based on whether or not the backend kernel exists.','line_number':51,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':' However, for AutogradOther (which is the catchall autograd kernel for','line_number':53,'multiline':False]
['text':' everything that doesn't have a specific Autograd key), we can't do this','line_number':54,'multiline':False]
['text':' trick because there isn't any unique backend to peek at to disambiguate;','line_number':55,'multiline':False]
['text':' if there are some backends that have implementations they prefer Autograd,','line_number':56,'multiline':False]
['text':' but unimplemented backends would prefer CompositeImplicitAutograd.  Rather','line_number':57,'multiline':False]
['text':' than arbitrarily pick one or the other, we just register a kernel that raises','line_number':58,'multiline':False]
['text':' an error and let the user decide how to proceed.','line_number':59,'multiline':False]
['text':' Note [named_not_supported_kernel]','line_number':62,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':63,'multiline':False]
['text':' This kernel implements reporting an error message saying that named tensor is','line_number':64,'multiline':False]
['text':' not supported.  This kernel doesn't rely on the Stack, and so it is special','line_number':65,'multiline':False]
['text':' cased in the dispatcher to be triggered before we attempt boxing (so we can','line_number':66,'multiline':False]
['text':' give a good error message in cases when boxing is not supported).  When','line_number':67,'multiline':False]
['text':' boxing is universally supported this can be removed.','line_number':68,'multiline':False]
['text':'*
 * BoxedKernel is similar to a std::function storing a boxed kernel.
 ','line_number':71,'multiline':True]
['text':' This is how boxed kernels are actually stored','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':' Note [Plumbing Keys Through The Dispatcher]','line_number':78,'multiline':False]
['text':' Benchmarks have shown that it is expensive for the dispatcher to read from thread-local storage (TLS)','line_number':79,'multiline':False]
['text':' upon every dispatch call into order to compute which kernel to dispatch to.','line_number':80,'multiline':False]
['text':'','line_number':81,'multiline':False]
['text':' To mitigate this, we've updated the calling convention inside the dispatcher to expect every kernel that it stores','line_number':82,'multiline':False]
['text':' to have a first argument of type DispatchKeySet.','line_number':83,'multiline':False]
['text':'','line_number':84,'multiline':False]
['text':' What are the invariants of the DispatchKeySet when it gets passed to a kernel?','line_number':85,'multiline':False]
['text':' - All keys to the left of the current dispatch key have been masked out.','line_number':86,'multiline':False]
['text':'   (e.g. a Tracing kernel that takes in the DispatchKeySet will expect the highest bit to be DispatchKey::Tracer)','line_number':87,'multiline':False]
['text':' - All other keys that dispatcher normally would have computed through TLS + global state + op arguments','line_number':88,'multiline':False]
['text':'   are still in the set.','line_number':89,'multiline':False]
['text':'','line_number':90,'multiline':False]
['text':' Kernels can then opt into using this keyset to save the dispatcher from doing repeated work during redispatches:','line_number':91,'multiline':False]
['text':' recalculating the highest-priority dispatch key, which involves reading from TLS. Instead, the kernels that opt in will','line_number':92,'multiline':False]
['text':' calculate an updated DispatchKeySet directly from the old one, and pass the updated set directly into the dispatcher','line_number':93,'multiline':False]
['text':' upon redispatching.','line_number':94,'multiline':False]
['text':'','line_number':95,'multiline':False]
['text':' This is an opt-in mechanism: Kernels can automatically opt in by setting the first argument in their signature','line_number':96,'multiline':False]
['text':' to be of type DispatchKeySet. See the kernels in VariableTypeEverything.cpp and TraceTypeEverything.cpp for examples.','line_number':97,'multiline':False]
['text':'','line_number':98,'multiline':False]
['text':' The mechanism for optionally passing that DispatchKeySet into the kernel lives in make_boxed_from_unboxed_functor.h.','line_number':99,'multiline':False]
['text':' See Note [Plumbing Keys Through The Dispatcher 2] for details.','line_number':100,'multiline':False]
['text':' This is the public API for how boxed kernels are defined','line_number':102,'multiline':False]
['text':' Fast path for dispatch to allow not touching the boxed kernel in','line_number':108,'multiline':False]
['text':' the common case where unboxed is available.','line_number':109,'multiline':False]
['text':'*
   * Call the function with boxed arguments.
   ','line_number':113,'multiline':True]
['text':'*
   * Create a KernelFunction from a boxed function.
   *
   * Example:
   *
   * > void boxed_func(OperatorKernel*, Stack* stack) {...}
   * > BoxedFunction func = BoxedKernel::makeFromFunction<&boxed_func>();
   ','line_number':118,'multiline':True]
['text':'*
   * TODO: This will only be useful if we write a backend fallback that plumbs dispatch keys (currently there are none)
   * See Note [Plumbing Keys Through The Dispatcher] for details.
   ','line_number':129,'multiline':True]
['text':'*
   * Create a KernelFunction from a boxed functor.
   *
   * Example:
   *
   * > class MyFunctor final : public c10::OperatorKernel {
   * >   public:
   * >     void operator()(const OperatorHandle&, DispatchKeySet, Stack*) {...}
   * > };
   * > BoxedKernel func = BoxedKernel::makeFromFunctor(std::make_unique<MyFunctor>());
   ','line_number':136,'multiline':True]
['text':' namespace c10','line_number':174,'multiline':False]
