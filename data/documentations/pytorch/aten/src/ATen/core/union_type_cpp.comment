['text':' Given a TypePtr `lhs`, this function says whether or not `lhs` (or','line_number':35,'multiline':False]
['text':' one of its parent types) is in the `to_subtract` vector','line_number':36,'multiline':False]
['text':' Copy all the elements that should NOT be subtracted to the `types`','line_number':44,'multiline':False]
['text':' vector','line_number':45,'multiline':False]
['text':' Remove nested Optionals/Unions during the instantiation of a Union or','line_number':61,'multiline':False]
['text':' an Optional. This populates `types` with all the types found during','line_number':62,'multiline':False]
['text':' flattening. At the end of `flattenUnion`, `types` may have','line_number':63,'multiline':False]
['text':' duplicates, but it will not have nested Optionals/Unions','line_number':64,'multiline':False]
['text':' Helper function for `standardizeUnion`','line_number':83,'multiline':False]
['text':'','line_number':84,'multiline':False]
['text':' NB: If we have types `T1`, `T2`, `T3`, and `PARENT_T` such that `T1`,','line_number':85,'multiline':False]
['text':' `T2`, and `T2` are children of `PARENT_T`, then `unifyTypes(T1, T2)`','line_number':86,'multiline':False]
['text':' will return `PARENT_T`. This could be a problem if we didn't want our','line_number':87,'multiline':False]
['text':' Union to also be able to take `T3 `. In our current type hierarchy,','line_number':88,'multiline':False]
['text':' this isn't an issue--most types SHOULD be unified even if the parent','line_number':89,'multiline':False]
['text':' type wasn't in the original vector. However, later additions to the','line_number':90,'multiline':False]
['text':' type system might necessitate reworking `get_supertype`','line_number':91,'multiline':False]
['text':' We don't want nested Optionals. Also, prematurely unifying to','line_number':97,'multiline':False]
['text':' `Optional` could prevent us from coalescing other types','line_number':98,'multiline':False]
['text':'default_to_union=','line_number':103,'multiline':True]
['text':' Coalesce types and delete all duplicates. Moving from right to left','line_number':107,'multiline':False]
['text':' through the vector, we try to unify the current element (`i`) with','line_number':108,'multiline':False]
['text':' each element (`j`) before the "new" end of the vector (`end`).','line_number':109,'multiline':False]
['text':' If we're able to unify the types at `types[i]` and `types[j]`, we','line_number':110,'multiline':False]
['text':' decrement `end`, swap `types[j]` with the unified type, and','line_number':111,'multiline':False]
['text':' break. Otherwise, we keep `end` where it is to signify that the','line_number':112,'multiline':False]
['text':' new end of the vector hasn't shifted','line_number':113,'multiline':False]
['text':' Break condition here so we don't get `j = 0; j = j-1` and end','line_number':125,'multiline':False]
['text':' up with MAX_INT','line_number':126,'multiline':False]
['text':' Cut off the vector's tail so that `end` is the real last element','line_number':132,'multiline':False]
['text':' We want the elements to be sorted so we can easily compare two','line_number':140,'multiline':False]
['text':' UnionType objects for equality in the future. Note that this order','line_number':141,'multiline':False]
['text':' is guaranteed to be stable since we've already coalesced any','line_number':142,'multiline':False]
['text':' possible types','line_number':143,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-unchecked-optional-access)','line_number':188,'multiline':False]
['text':' Gate the assert in a regular conditional so that we don't create','line_number':199,'multiline':False]
['text':' this long error message unnecessarily','line_number':200,'multiline':False]
['text':' Some very special-cased logic for `Optional`. This will be deleted','line_number':235,'multiline':False]
['text':' in a later PR','line_number':236,'multiline':False]
['text':' We can't compare the type vectors for equality using `operator=`,','line_number':297,'multiline':False]
['text':' because the vectors hold `TypePtr`s and we want to compare `Type`','line_number':298,'multiline':False]
['text':' equality','line_number':299,'multiline':False]
['text':' Check that all the types in `this->types_` are also in','line_number':303,'multiline':False]
['text':' `union_rhs->types_`','line_number':304,'multiline':False]
['text':' Fast path','line_number':331,'multiline':False]
['text':'is_annotation_str=','line_number':412,'multiline':True]
['text':'is_annotation_str=','line_number':416,'multiline':True]
['text':' `**optional_rhs` = `*` to get value of `c10::optional<TypePtr>`,','line_number':435,'multiline':False]
['text':' then `*` to dereference the pointer','line_number':436,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-parent-virtual-call)','line_number':463,'multiline':False]
['text':' namespace 10','line_number':468,'multiline':False]
