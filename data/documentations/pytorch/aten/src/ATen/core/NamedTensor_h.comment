['text':' XXX: This file exists because TensorImpl is in c10, but Dimname is in ATen.','line_number':11,'multiline':False]
['text':' Due to the c10/ATen library split, TensorImpl cannot depend on Dimname,','line_number':12,'multiline':False]
['text':' so we have a couple of workarounds.','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':' In the long term, we'll move Dimname to c10 and everything in this file','line_number':15,'multiline':False]
['text':' can be refactored out. The main blocker for that is that "c10::Symbol"','line_number':16,'multiline':False]
['text':' actually exists outside of c10 and needs to be moved in.','line_number':17,'multiline':False]
['text':' TensorImpl has a unique_ptr<NamedTensorMetaInterface> field.','line_number':19,'multiline':False]
['text':' XXX: Ideally we would just put optional<vector<Dimname>> into TensorImpl.','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' This class has an important invariant: there must be at least ONE','line_number':22,'multiline':False]
['text':' non-wildcard','line_number':23,'multiline':False]
['text':' This enum is to remind people that the invariant on constructors is that','line_number':25,'multiline':False]
['text':' the list of dimnames must have at least one non-wildcard','line_number':26,'multiline':False]
['text':' Used for an assertion in TensorImpl.h','line_number':46,'multiline':False]
['text':' INVARIANT: at least one Dimname is non-WILDCARD','line_number':68,'multiline':False]
['text':' When NamesMode is disabled, then all operations ignore tensors' names fields.','line_number':72,'multiline':False]
['text':' Concretely speaking, all tensors are treated as having nullopt names.','line_number':73,'multiline':False]
['text':' A RAII, thread local (!) guard that enables or disables names upon','line_number':80,'multiline':False]
['text':' construction, and sets it back to the original value upon destruction.','line_number':81,'multiline':False]
['text':' Sets the names of `tensor` to be `names`.','line_number':103,'multiline':False]
['text':' Some helper functions on TensorImpl. Useful for working with names in TH.','line_number':113,'multiline':False]
['text':' XXX: Ideally these would exist as methods on TensorImpl','line_number':114,'multiline':False]
['text':' Returns true if the tensor's names exist and are not all 'None'.','line_number':120,'multiline':False]
['text':' Returns false if the tensor's names don't exist (were not allocated),','line_number':121,'multiline':False]
['text':' or if all names are 'None'.','line_number':122,'multiline':False]
['text':' We treat not-allocated-names the same as allocated names that are all 'None'.','line_number':123,'multiline':False]
['text':' Returns the names of the tensor's dimensions.','line_number':126,'multiline':False]
['text':' Unnamed tensors are treated as having 'None' in all dimension; this method','line_number':127,'multiline':False]
['text':' would return a DimnameList of all 'None's for an unnamed tensor.','line_number':128,'multiline':False]
['text':' This is more of an implementation detail; one should use impl::get_names /','line_number':131,'multiline':False]
['text':' Tensor::names() whenever possible because it provides a cleaner API.','line_number':132,'multiline':False]
['text':' Returns the names of the tensor if they have been allocated; returns nullopt','line_number':133,'multiline':False]
['text':' instead if the haven't been. The names of a tensor are not allocated if a','line_number':134,'multiline':False]
['text':' tensor is constructed with names=None.','line_number':135,'multiline':False]
['text':' namespace impl','line_number':138,'multiline':False]
['text':' namespace at','line_number':140,'multiline':False]
