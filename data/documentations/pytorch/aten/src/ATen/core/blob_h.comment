['text':'*
 * @brief Blob is a general container that hosts a typed pointer.
 *
 * A Blob hosts a pointer as well as its type, and takes charge of deleting it
 * properly when the blob is deallocated or re-allocated with a new type. A blob
 * could contain anything, although the most common case is to contain a Tensor.
 ','line_number':17,'multiline':True]
['text':'*
   * Initializes an empty Blob.
   ','line_number':26,'multiline':True]
['text':'*
   * Checks if the content stored in the blob is of type T.
   ','line_number':43,'multiline':True]
['text':'*
   * Returns the meta info of the blob.
   ','line_number':51,'multiline':True]
['text':'*
   * Returns a printable typename of the blob.
   ','line_number':58,'multiline':True]
['text':'*
   * @brief Gets the const reference of the stored object. The code checks if
   * the stored object is of the desired type.
   ','line_number':65,'multiline':True]
['text':' TODO(jerryzh): add a Get(c10::DeviceType) function?','line_number':69,'multiline':False]
['text':' TODO: after we add Get<Tensor>(c10::DeviceType)','line_number':78,'multiline':False]
['text':' and changed all the callsites, we can add','line_number':79,'multiline':False]
['text':' a static assert here to enforce T != Tensor','line_number':80,'multiline':False]
['text':'*
   * @brief Gets a mutable pointer to the stored object.
   *
   * If the current object is not of the right type, a new object is created
   * and the old object is freed. Note that type T should have a default
   * constructor. Otherwise, create the object yourself first, and use
   * Reset().
   ','line_number':91,'multiline':True]
['text':' TODO Re-enable logging','line_number':108,'multiline':False]
['text':' VLOG(1) << "Create new mutable object " << TypeMeta::TypeName<T>();','line_number':109,'multiline':False]
['text':'*
   * Sets the underlying object to the allocated one. The Blob then takes over
   * the ownership of the passed in pointer. If there is already an object in
   * the Blob, the old object is freed.
   *
   * This is used when the underlying class T does not have a default ctor, or
   * complex initializations needs to be done outside the blob.
   ','line_number':123,'multiline':True]
['text':'*
   * Sets the underlying object to the allocated one, but does not take over
   * the ownership of the passed in pointer. If there is already an object in
   * the Blob, the old object is freed.
   *
   * Unlike Reset, this does not take over the ownership of the pointer and the
   * caller is responsible for making sure that the lifetime of the allocated
   * blob outlasts the lifetime of any access to this blob, until another Reset
   * call is made or the blob is destructed.
   ','line_number':140,'multiline':True]
['text':'*
   * Resets the Blob to an empty one.
   ','line_number':166,'multiline':True]
['text':'*
   * @brief Swaps the underlying storage of two blobs.
   ','line_number':176,'multiline':True]
['text':' namespace caffe2','line_number':208,'multiline':False]
