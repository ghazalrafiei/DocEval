['text':' TODO: unify to C10_MOBILE. In theory this header could be used in OSS.','line_number':3,'multiline':False]
['text':'*
 * This header implements functionality to build PyTorch with only a certain
 * set of operators (+ dependencies) included.
 *
 * - Build with -DTORCH_OPERATOR_WHITELIST="aten::add;aten::sub" and only these
 *   two ops will be included in your build.  The allowlist records operators
 *   only, no overloads; if you include aten::add, all overloads of aten::add
 *   will be included.
 *
 * Internally, this is done by removing the operator registration calls
 * using compile time programming, and the linker will then prune all
 * operator functions that weren't registered.
 * See Note [Selective build] for more details
 *
 * WARNING: The allowlist mechanism doesn't work for all ways you could go about
 * registering an operator.  If the dispatch key / operator name is not
 * sufficiently obvious at compile time, then the allowlisting mechanism
 * will fail (and the operator will be included in the binary anyway).
 ','line_number':8,'multiline':True]
['text':' Forward Declare','line_number':41,'multiline':False]
['text':'*
 * In selective build mode returns true/false depending on whether a build
 * feature is available or not.
 *
 * In instrumenting mode (tracing mode), always returns true, and doesn't
 * trigger any side effects.
 ','line_number':43,'multiline':True]
['text':' Selective Build mode.','line_number':52,'multiline':False]
['text':' Instrumenting mode.','line_number':63,'multiline':False]
['text':'*
 * Use BUILD_FEATURE_REQUIRED macro in user-code.
 *
 * In selective build mode becomes a no-op if the build feature passed
 * in is available. If not available, throws an exception (c10::Error).
 * The compiler is able to perform dead code elimination for code
 * following this method if the build feature is not available.
 *
 * In instrumenting mode (tracing mode), registers (as a side effect)
 * the presence of this specific build feature being triggered.
 ','line_number':71,'multiline':True]
['text':' selective build mode','line_number':82,'multiline':False]
['text':' Everything trivially selected','line_number':89,'multiline':False]
['text':' trace mode','line_number':94,'multiline':False]
['text':' Use this macro, and not is_build_feature_available','line_number':102,'multiline':False]
['text':' returns true iff allowlist contains item','line_number':105,'multiline':False]
['text':' allowlist_contains("a;bc;d", "bc") == true','line_number':106,'multiline':False]
['text':'Choose a really big value for next so that if something goes wrong','line_number':108,'multiline':False]
['text':'this code will blow up in a hopefully detectable way.','line_number':109,'multiline':False]
['text':' Returns true iff the given op name is on the allowlist','line_number':128,'multiline':False]
['text':' and should be registered','line_number':129,'multiline':False]
['text':' Use assert() instead of throw() due to a gcc bug. See:','line_number':132,'multiline':False]
['text':' https://stackoverflow.com/questions/34280729/throw-in-constexpr-function','line_number':133,'multiline':False]
['text':' https://github.com/fmtlib/fmt/issues/682','line_number':134,'multiline':False]
['text':' If the TORCH_OPERATOR_WHITELIST parameter is not defined,','line_number':137,'multiline':False]
['text':' all ops are to be registered','line_number':138,'multiline':False]
['text':' This function is majorly used for mobile selective build with','line_number':143,'multiline':False]
['text':' root operators, where the overload is included in the allowlist.','line_number':144,'multiline':False]
['text':' // Strip overload name (as allowlist doesn't contain overloads)','line_number':146,'multiline':False]
['text':' // Another function based on this may be added when there's usage','line_number':147,'multiline':False]
['text':' // on op names without overload.','line_number':148,'multiline':False]
['text':' OperatorNameView::parse(op_name).name);','line_number':149,'multiline':False]
['text':' Returns true iff the given schema string is on the allowlist','line_number':153,'multiline':False]
['text':' and should be registered','line_number':154,'multiline':False]
['text':' Returns true iff the given custom class name is on the allowlist','line_number':163,'multiline':False]
['text':' and should be registered','line_number':164,'multiline':False]
['text':' If the TORCH_CUSTOM_CLASS_ALLOWLIST parameter is not defined,','line_number':167,'multiline':False]
['text':' all custom classes are to be registered','line_number':168,'multiline':False]
['text':' schema_allowlist_check() implicitly depends on a macro, TORCH_OPERATOR_WHITELIST.','line_number':178,'multiline':False]
['text':' Add this API to pass arbitrary allowlist.','line_number':179,'multiline':False]
['text':' Returns true iff the given dispatch key is on the allowlist','line_number':184,'multiline':False]
['text':' and should be registered.  When we turn this on, the list of valid','line_number':185,'multiline':False]
['text':' mobile dispatch keys is hard coded (but you need to make sure','line_number':186,'multiline':False]
['text':' that you have the correct set of dispatch keys for this).','line_number':187,'multiline':False]
['text':'k','line_number':188,'multiline':True]
['text':' Disabled for now: to be enabled later!','line_number':191,'multiline':False]
['text':' return k == DispatchKey::CPU || k == DispatchKey::Vulkan || k == DispatchKey::QuantizedCPU || k == DispatchKey::BackendSelect || k == DispatchKey::CatchAll;','line_number':192,'multiline':False]
['text':' namespace impl','line_number':198,'multiline':False]
['text':' namespace c10','line_number':199,'multiline':False]
