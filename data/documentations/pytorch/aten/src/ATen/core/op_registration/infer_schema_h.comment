['text':'*
 * This file contains functionality to take a C++ function and infer its
 * c10::FunctionSchema.
 ','line_number':3,'multiline':True]
['text':'/ The templated inference code creates `ArgumentDef` instead of `Argument`,','line_number':17,'multiline':False]
['text':'/ because that can be constructed at compile time and has a much smaller','line_number':18,'multiline':False]
['text':'/ binary size than having calls to `Argument` constructors in the template.','line_number':19,'multiline':False]
['text':'/ Creating `Argument` objects from `ArgumentDef` can then be done at','line_number':20,'multiline':False]
['text':'/ runtime in a non-templated way.','line_number':21,'multiline':False]
['text':'/ Checks the static C++ types `Types` for correctness to catch common error cases.','line_number':35,'multiline':False]
['text':' Give nice error messages for some of the common error cases.','line_number':38,'multiline':False]
['text':' Use a LOUD ERROR MESSAGE SO USERS SEE THE STATIC_ASSERT','line_number':39,'multiline':False]
['text':' Check types for common errors','line_number':52,'multiline':False]
['text':' Create the return value','line_number':55,'multiline':False]
['text':'/ Creates a vector of `ArgumentDef` from a list of C++ types that are specified','line_number':61,'multiline':False]
['text':'/ as template arguments.','line_number':62,'multiline':False]
['text':'/ Creates a vector of `ArgumentDef` from a list of C++ types that are specified','line_number':73,'multiline':False]
['text':'/ as a tuple (i.e. in the way c10 kernels return values).','line_number':74,'multiline':False]
['text':'/ It can be a tuple<A, B, C> if there's three output arguments with types A, B, C.','line_number':75,'multiline':False]
['text':'/ It can be an empty tuple<>, or void for kernels that don't return anything.','line_number':76,'multiline':False]
['text':'/ It can be a single type A (i.e. no tuple) for the case where a kernel just','line_number':77,'multiline':False]
['text':'/ returns one value.','line_number':78,'multiline':False]
['text':'/ Creates a `FunctionSchema` object from a `FunctionTraits` type for a','line_number':114,'multiline':False]
['text':'/ function. Flattens std::tuple returns into multiple return types','line_number':115,'multiline':False]
['text':' arguments and returns are computed into a std::array at compile time and embedded into the binary.','line_number':121,'multiline':False]
['text':' The only code executed at runtime here is the one that creates a std::vector','line_number':122,'multiline':False]
['text':' of the arguments/returns from the std::array.','line_number':123,'multiline':False]
['text':'/ Creates a `FunctionSchema` object from a `FunctionTraits` type for a','line_number':130,'multiline':False]
['text':'/ function. Preserves std::tuple returns as a Tuple return type','line_number':131,'multiline':False]
['text':' arguments and returns are computed into a std::array at compile time and embedded into the binary.','line_number':137,'multiline':False]
['text':' The only code executed at runtime here is the one that creates a std::vector','line_number':138,'multiline':False]
['text':' of the arguments/returns from the std::array.','line_number':139,'multiline':False]
