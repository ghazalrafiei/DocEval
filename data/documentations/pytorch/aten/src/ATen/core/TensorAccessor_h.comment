['text':' The PtrTraits argument to the TensorAccessor/GenericPackedTensorAccessor','line_number':13,'multiline':False]
['text':' is used to enable the __restrict__ keyword/modifier for the data','line_number':14,'multiline':False]
['text':' passed to cuda.','line_number':15,'multiline':False]
['text':' TensorAccessorBase and TensorAccessor are used for both CPU and CUDA tensors.','line_number':28,'multiline':False]
['text':' For CUDA tensors it is used in device code (only). This means that we restrict ourselves','line_number':29,'multiline':False]
['text':' to functions and types available there (e.g. IntArrayRef isn't).','line_number':30,'multiline':False]
['text':' The PtrTraits argument is only relevant to cuda to support `__restrict__` pointers.','line_number':32,'multiline':False]
['text':' The `TensorAccessor` is typically instantiated for CPU `Tensor`s using','line_number':67,'multiline':False]
['text':' `Tensor.accessor<T, N>()`.','line_number':68,'multiline':False]
['text':' For CUDA `Tensor`s, `GenericPackedTensorAccessor` is used on the host and only','line_number':69,'multiline':False]
['text':' indexing on the device uses `TensorAccessor`s.','line_number':70,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.NullDereference)','line_number':102,'multiline':False]
['text':' GenericPackedTensorAccessorBase and GenericPackedTensorAccessor are used on for CUDA `Tensor`s on the host','line_number':111,'multiline':False]
['text':' and as','line_number':112,'multiline':False]
['text':' In contrast to `TensorAccessor`s, they copy the strides and sizes on instantiation (on the host)','line_number':113,'multiline':False]
['text':' in order to transfer them on the device when calling kernels.','line_number':114,'multiline':False]
['text':' On the device, indexing of multidimensional tensors gives to `TensorAccessor`s.','line_number':115,'multiline':False]
['text':' Use RestrictPtrTraits as PtrTraits if you want the tensor's data pointer to be marked as __restrict__.','line_number':116,'multiline':False]
['text':' Instantiation from data, sizes, strides is only needed on the host and std::copy isn't available','line_number':117,'multiline':False]
['text':' on the device, so those functions are host only.','line_number':118,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':123,'multiline':False]
['text':' if index_t is not int64_t, we want to have an int64_t constructor','line_number':133,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':135,'multiline':False]
['text':' NOLINTNEXTLINE(*c-arrays*)','line_number':161,'multiline':False]
['text':' NOLINTNEXTLINE(*c-arrays*)','line_number':163,'multiline':False]
['text':' if index_t is not int64_t, we want to have an int64_t constructor','line_number':186,'multiline':False]
['text':'/ Returns a PackedTensorAccessor of the same dimension after transposing the','line_number':206,'multiline':False]
['text':'/ two dimensions given. Does not actually move elements; transposition is','line_number':207,'multiline':False]
['text':'/ made by permuting the size/stride arrays. If the dimensions are not valid,','line_number':208,'multiline':False]
['text':'/ asserts.','line_number':209,'multiline':False]
['text':' if index_t is not int64_t, we want to have an int64_t constructor','line_number':233,'multiline':False]
['text':' Same as in the general N-dimensional case, but note that in the','line_number':248,'multiline':False]
['text':' 1-dimensional case the returned PackedTensorAccessor will always be an','line_number':249,'multiline':False]
['text':' identical copy of the original','line_number':250,'multiline':False]
['text':' Can't put this directly into the macro function args because of commas','line_number':262,'multiline':False]
['text':' Old name for `GenericPackedTensorAccessor`','line_number':265,'multiline':False]
['text':' namespace at','line_number':276,'multiline':False]
