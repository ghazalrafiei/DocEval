['text':' TODO: Consider representing debug info as a struct instead so you','line_number':8,'multiline':False]
['text':' don't have to allocate strings all the time','line_number':9,'multiline':False]
['text':' anonymous namespace','line_number':43,'multiline':False]
['text':' Only DEFs require library uniqueness; fragments','line_number':65,'multiline':False]
['text':' don't register a library','line_number':66,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-unchecked-optional-access)','line_number':69,'multiline':False]
['text':' Nothing to do, everything is OK','line_number':85,'multiline':False]
['text':' TODO: Error if an operator is def'ed multiple times.  Right now we just','line_number':90,'multiline':False]
['text':' merge everything','line_number':91,'multiline':False]
['text':' Note [Redundancy in registration code is OK]','line_number':105,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':106,'multiline':False]
['text':' In an earlier version of this code, I made it an error to explicitly','line_number':107,'multiline':False]
['text':' specify the namespace, even when the namespaces match.  I've decided','line_number':108,'multiline':False]
['text':' to relax this constraint because sometimes we code generate registrations','line_number':109,'multiline':False]
['text':' and you cannot conveniently tell what the enclosing context will be;','line_number':110,'multiline':False]
['text':' in these cases, it is simpler (and less error prone) to place all','line_number':111,'multiline':False]
['text':' of the information in the registration site, which will be cross-checked','line_number':112,'multiline':False]
['text':' in the end in any case (and if it turns out you DON'T have the right','line_number':113,'multiline':False]
['text':' information at the site, as is the case with backend specific','line_number':114,'multiline':False]
['text':' per-op registrations, you will get the right behavior!)','line_number':115,'multiline':False]
['text':' copy!','line_number':128,'multiline':False]
['text':' it's a name; use the inferred schema','line_number':161,'multiline':False]
['text':' Get the namespaced name for the impl call','line_number':174,'multiline':False]
['text':' First define the schema...','line_number':175,'multiline':False]
['text':' Then register the implementation...','line_number':177,'multiline':False]
['text':' This is a copy paste of Library::_impl','line_number':196,'multiline':False]
['text':' See Note [Redundancy in registration code is OK]','line_number':198,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-unchecked-optional-access)','line_number':199,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-unchecked-optional-access)','line_number':203,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-unchecked-optional-access)','line_number':210,'multiline':False]
['text':' See Note [Redundancy in registration code is OK]','line_number':219,'multiline':False]
['text':' Note if dispatch_key is DispatchKey::Undefined, it'll be ignored here since Undefined','line_number':269,'multiline':False]
['text':' isn't a runtime key, you shouldn't register anything to it at all.','line_number':270,'multiline':False]
['text':' mobile doesn't use all dispatch keys, so skip any fallback registrations for the unused keys.','line_number':272,'multiline':False]
['text':' namespace torch','line_number':287,'multiline':False]
