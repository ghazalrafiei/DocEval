['text':'  Copyright Â© 2022 Apple Inc.','line_number':1,'multiline':False]
['text':' profiling info types','line_number':24,'multiline':False]
['text':' type of profiling info','line_number':36,'multiline':False]
['text':' unique profile ID for execution instances of operations or copies','line_number':38,'multiline':False]
['text':' ID generated by os_signpost','line_number':40,'multiline':False]
['text':' since it's possible to use event and interval-based signposts at the','line_number':41,'multiline':False]
['text':' same time, we need separate IDs for each.','line_number':42,'multiline':False]
['text':' accumulated GPU time in ms (obtained from CompletionHandler's "GPUEndTime - GPUStartTime")','line_number':44,'multiline':False]
['text':' accumulated Scheduling time in ms (obtained from CompletionHandler's "KernelEndTime - KernelStartTime")','line_number':46,'multiline':False]
['text':' indicates if the operation or copy execution has completed','line_number':48,'multiline':False]
['text':' handle used to identify the profile info's instance (usually the pointer)','line_number':50,'multiline':False]
['text':' builds a string for a tensor (format: Device:ScalarType[tensor.sizes()])','line_number':54,'multiline':False]
['text':' see comments for INCLUDE_BUFFER_ID','line_number':60,'multiline':False]
['text':' builds a string for a kernel','line_number':87,'multiline':False]
['text':' the current and total overhead of copies in bytes required to convert the Op's','line_number':105,'multiline':False]
['text':' input tensors from MPS to CPU and then output from CPU back to MPS','line_number':106,'multiline':False]
['text':' for copies that don't use blitters, we measure CPU time','line_number':143,'multiline':False]
['text':' getUnalignedBufferSize() returns -1 if input buffer is not on MPS device','line_number':155,'multiline':False]
['text':' total number of copies','line_number':176,'multiline':False]
['text':' number of Scalar copies (i.e., less than sizeof(int64))','line_number':178,'multiline':False]
['text':' number of blocking copies (i.e., require syncing to GPU)','line_number':180,'multiline':False]
['text':' number of copies that used memcpy(), instead of Metal Blit Encoder','line_number':182,'multiline':False]
['text':' accumulated GPU time in ms for the scalar copies','line_number':184,'multiline':False]
['text':' copy kind in string type','line_number':186,'multiline':False]
['text':' lower 16 bits used for profiler options','line_number':192,'multiline':False]
['text':' ALL_* means, all signpost types (RUN_OPERATION|BLIT_COPY|CPU_FALLBACK, etc.)','line_number':195,'multiline':False]
['text':' (used for convenience to not compute bit flags by OR-ing manually)','line_number':196,'multiline':False]
['text':' trace all signpost types using events','line_number':197,'multiline':False]
['text':' trace all signpost types using intervals','line_number':199,'multiline':False]
['text':' always wait for command buffer to finish executing after each commit','line_number':201,'multiline':False]
['text':' for interval-based signposts, include the scheduling portion of','line_number':203,'multiline':False]
['text':' Graph/Kernel/Copy executions as well.','line_number':204,'multiline':False]
['text':' if flag is disable, only "GPU run time" is included in interval,','line_number':205,'multiline':False]
['text':' and not schedule time.','line_number':206,'multiline':False]
['text':' use these if you need to trace signposts types individually (rarely required)','line_number':209,'multiline':False]
['text':' trace signpost using intervals','line_number':210,'multiline':False]
['text':' trace signpost by emitting events','line_number':212,'multiline':False]
['text':' used for sanity check (Change this when new option added)','line_number':214,'multiline':False]
['text':' when adding new types, #define the type string in MPSProfiler.mm as well.','line_number':218,'multiline':False]
['text':' upper 16 bits used for event types','line_number':219,'multiline':False]
['text':' trace signposts for PyTorch operation executions','line_number':222,'multiline':False]
['text':' trace signposts for blitter copies','line_number':224,'multiline':False]
['text':' trace signposts for ops that fall back on CPU','line_number':226,'multiline':False]
['text':' used for sanity check (Change this when new type added)','line_number':228,'multiline':False]
['text':' Info logging options during execution','line_number':235,'multiline':False]
['text':' -------------------------------------','line_number':236,'multiline':False]
['text':' prints operation info (id/key/run_count) during execution','line_number':237,'multiline':False]
['text':' prints copy info (src/dst tensors/buffers, size, etc.) during execution','line_number':239,'multiline':False]
['text':' prints CPU Fallback info (id/runCount/opName/copyOverhead) during execution','line_number':241,'multiline':False]
['text':' Profiling Statistics logging options when process terminates','line_number':244,'multiline':False]
['text':' ------------------------------------------------------------','line_number':245,'multiline':False]
['text':' prints all stats (OPERATION_STATS, COPY_STATS, CPU_FALLBACK_STATS) before process terminates','line_number':246,'multiline':False]
['text':' this is convenient to not combine following stats bit flags manually','line_number':247,'multiline':False]
['text':' prints operation stats (GPU times, run count, etc.) before process terminates','line_number':249,'multiline':False]
['text':' prints copies stats (GPU times, copy kinds, sizes, etc.) before process terminates','line_number':251,'multiline':False]
['text':' prints CPU Fallback stats (CPU times, run times, size of MPS<->CPU copies','line_number':253,'multiline':False]
['text':' for tensors, etc.) before process terminates','line_number':254,'multiline':False]
['text':' Metadata format options when logging the info','line_number':257,'multiline':False]
['text':' ---------------------------------------------','line_number':258,'multiline':False]
['text':' if enabled, includes GPU run time in metadata (i.e., GPUEndTime-GPUStartTime','line_number':259,'multiline':False]
['text':' from Metal Command Buffers) (e.g., [GPU=0.324 ms])','line_number':260,'multiline':False]
['text':' if enabled, includes GPU scheduling time in metadata separately','line_number':262,'multiline':False]
['text':' (i.e., KernelEndTime-KernelStartTime from Metal Command Buffers)','line_number':263,'multiline':False]
['text':' e.g., [GPU=0.324 ms, KRNL=0.036 ms]','line_number':264,'multiline':False]
['text':' if enabled, includes the unique buffer ID in metadata for the storage','line_number':266,'multiline':False]
['text':' of a tensor that was allocated on MPSAllocator. This is useful (along with','line_number':267,'multiline':False]
['text':' the EV "PYTORCH_DEBUG_MPS_ALLOCATOR") to identify buffers that are involved','line_number':268,'multiline':False]
['text':' with various operations.','line_number':269,'multiline':False]
['text':' used for sanity check (Change this when new option added)','line_number':272,'multiline':False]
['text':' the handle is either "MPSGraph*" or "id<MTLComputePipelineState>" for Metal Kernels','line_number':279,'multiline':False]
['text':' the beginProfile*() functions return a profileId which is unique per graph/kernel/copy','line_number':280,'multiline':False]
['text':' these are used to hook into Python bindings for torch.mps.profiler module.','line_number':294,'multiline':False]
['text':' this enables generating OS Signpost traces from MPSProfiler on-demand','line_number':295,'multiline':False]
['text':' during runtime (instead of environment variables).','line_number':296,'multiline':False]
['text':' The "mode" could be either "interval", "event", or both "interval,event"','line_number':297,'multiline':False]
['text':' for interval-based and/or event-based signpost tracing.','line_number':298,'multiline':False]
['text':' convenience functions to indicate whether signpost tracing or','line_number':302,'multiline':False]
['text':' logging are enabled for the SignpostTypes','line_number':303,'multiline':False]
['text':' indicates what type of signpost types are enabled and traced by MPS profiler.','line_number':321,'multiline':False]
['text':' technically, it's possible to trace both events and intervals at the same time','line_number':329,'multiline':False]
['text':' so we use separate os_log categories for them','line_number':330,'multiline':False]
['text':' stats logging could run either from destructor or signal handler','line_number':333,'multiline':False]
['text':' so this is used to check if logging has already started.','line_number':334,'multiline':False]
['text':' indicates there are pending completionHandler callbacks that haven't been called yet.','line_number':336,'multiline':False]
['text':' used to capture sigint signal to log profiling stats','line_number':338,'multiline':False]
['text':' We use the following lists for two reasons:','line_number':341,'multiline':False]
['text':' 1- for interval-based signposts the "begin" point won't be in same function','line_number':342,'multiline':False]
['text':' as the "end" point where we need to be able to retrieve signpost's info','line_number':343,'multiline':False]
['text':' 2- if Operations info need to be logged when process ends using LogOptions::OPERATION_INFO.','line_number':344,'multiline':False]
['text':' the pointer key for this map is either "MPSGraph*" or "id<MTLComputePipelineState>" for Metal Kernels','line_number':346,'multiline':False]
['text':' this list is retained and could be logged along with aggregate profiling numbers when the process ends.','line_number':347,'multiline':False]
['text':' the string key for this map is the op name that we fall back to execute on CPU','line_number':349,'multiline':False]
['text':' this list is retained and could be logged along with aggregate profiling numbers when the process ends.','line_number':350,'multiline':False]
['text':' this list contains the info for copies, and its key is the unique profileId','line_number':352,'multiline':False]
['text':' which is generated from m_copy_counter','line_number':353,'multiline':False]
['text':' The copyInfo list is not retained.','line_number':354,'multiline':False]
['text':' a short list that contains copy stats','line_number':356,'multiline':False]
['text':' returns true if logging the profiling info "during the execution" is enabled','line_number':373,'multiline':False]
['text':' logs all the profiling stats that are enabled','line_number':375,'multiline':False]
['text':' logs kernel profiling stats when the process ends.','line_number':377,'multiline':False]
['text':' logs CPU Fallback profiling stats when the process ends.','line_number':379,'multiline':False]
['text':' logs copy profiling stats when the process ends.','line_number':381,'multiline':False]
['text':' namespace Profiler','line_number':389,'multiline':False]
['text':' namespace at::mps','line_number':393,'multiline':False]
