['text':' Struct implementing a sparse CSR tensor. It uses three 1-D tensors for','line_number':8,'multiline':False]
['text':' denoting the data: `crow_indices_`, `col_indices_` and `values_`.','line_number':9,'multiline':False]
['text':' The `crow_indices_` tensor is a integer tensor of shape `(size(0) + 1)`','line_number':10,'multiline':False]
['text':' that represents the compressed row indices of the CSR tensor. The','line_number':11,'multiline':False]
['text':' `col_indices_` tensor is an integer tensor of shape `(nnz())`','line_number':12,'multiline':False]
['text':' that explicitly stores the column indices of each value of the sparse','line_number':13,'multiline':False]
['text':' tensor. The `values_` tensor can be of any pytorch-supported data type','line_number':14,'multiline':False]
['text':' and has shape `(nnz())`.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Since the main advantage of the CSR format over the COO format is speed of','line_number':17,'multiline':False]
['text':' computation, care must be taken to facilitate smooth interfacing of','line_number':18,'multiline':False]
['text':' these data structures with optimized libraries such as MKL and MAGMA.','line_number':19,'multiline':False]
['text':' Since the MKL interface for pytorch currently uses indexing with int32','line_number':20,'multiline':False]
['text':' type, it is important to make sure that the `crow_indices` and `col_indices`','line_number':21,'multiline':False]
['text':' are of type int32 when calling MKL routines such as SPMM or SPMV.','line_number':22,'multiline':False]
['text':'','line_number':23,'multiline':False]
['text':' If not calling MKL, it should be alright to use 64 bit integer tensors','line_number':24,'multiline':False]
['text':' for indexing.','line_number':25,'multiline':False]
['text':'*
   * Return a TensorImpl that is a shallow-copy of this TensorImpl.
   *
   * For usage of `version_counter` and `allow_tensor_metadata_change`,
   * see NOTE [ TensorImpl Shallow-Copying ].
   ','line_number':106,'multiline':True]
['text':'src_sparse_impl=','line_number':118,'multiline':True]
['text':'dest_sparse_impl=','line_number':119,'multiline':True]
['text':'version_counter=','line_number':120,'multiline':True]
['text':'allow_tensor_metadata_change=','line_number':121,'multiline':True]
['text':'*
   * Return a TensorImpl that is a shallow-copy of this TensorImpl.
   *
   * For usage of `version_counter` and `allow_tensor_metadata_change`,
   * see NOTE [ TensorImpl Shallow-Copying ].
   ','line_number':126,'multiline':True]
['text':'src_sparse_impl=','line_number':138,'multiline':True]
['text':'dest_sparse_impl=','line_number':139,'multiline':True]
['text':'version_counter=','line_number':140,'multiline':True]
['text':'allow_tensor_metadata_change=','line_number':141,'multiline':True]
['text':'*
   * Copy the tensor metadata fields (e.g. sizes / strides / storage pointer /
   * storage_offset) from one TensorImpl to another TensorImpl.
   *
   * For usage of `version_counter` and `allow_tensor_metadata_change`, see NOTE
   * [ TensorImpl Shallow-Copying ].
   ','line_number':157,'multiline':True]
['text':' Sparse-specific fields','line_number':175,'multiline':False]
['text':' namespace at','line_number':182,'multiline':False]
