['text':' NOTE [Tracing Mode Switches]','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Historically, tracing function was controlled by two switches:','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' - `AutoDispatchBelowADInplaceOrView` guard','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':'    Tracing function used to be script-generated inside `VariableType_*.cpp`','line_number':13,'multiline':False]
['text':'    kernels, sharing the same `Autograd` dispatch key with autograd function.','line_number':14,'multiline':False]
['text':'    Therefore, before tracing function was moved out of VariableType,','line_number':15,'multiline':False]
['text':'    `AutoDispatchBelowADInplaceOrView` guard can also disable tracing as a','line_number':16,'multiline':False]
['text':'    side effect of disabling `Autograd` dispatching.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' - `setTracingState()` API in `torch/csrc/jit/frontend/tracer.h`','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':'    It stores tracing data in a `TracingState` object in TLS. If the','line_number':21,'multiline':False]
['text':'    `TracingState` object in TLS is `null`, then tracing is paused.','line_number':22,'multiline':False]
['text':'','line_number':23,'multiline':False]
['text':'    The `TracingState` object is created in `tracer::trace()` - the main','line_number':24,'multiline':False]
['text':'    entrance of tracing function. It's temporarily set to `null` inside','line_number':25,'multiline':False]
['text':'    generated VariableType (now TraceType) to bypass tracing for intermediate','line_number':26,'multiline':False]
['text':'    ops (ops being called by other ops). After the intermediate op call','line_number':27,'multiline':False]
['text':'    finishes it's set back to the original `TracingState` object.','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':'    The `TracingState` obect in TLS can also be read/written via its Python','line_number':30,'multiline':False]
['text':'    binding in `python_tracer.cpp`, and `get/setTracingState()` C++ APIs,','line_number':31,'multiline':False]
['text':'    which are also exposed as `TORCH_API`.','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' Two new switches were introduced since tracing function was moved out of','line_number':34,'multiline':False]
['text':' VariableType:','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':' - `tracer::impl::set_dispatch_enabled()` API','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':'    Unlike the special `Autograd` dispatch key which is included in dispatch','line_number':39,'multiline':False]
['text':'    key set by default, `Tracer` dispatch key is off by default. The','line_number':40,'multiline':False]
['text':'    dispatching switch can be toggled via this new API.','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':' - `tracer::impl::NoTracerDispatchMode` guard','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':'    It's used to cover the old semantics of `AutoDispatchBelowADInplaceOrView`','line_number':45,'multiline':False]
['text':'    after tracing was moved out of VariableType.','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':' Before tracing function was moved out of VariableType, tracing was enabled','line_number':48,'multiline':False]
['text':' when the following conditions are satisfied:','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':'    1) `TracingState` object in TLS != null;','line_number':51,'multiline':False]
['text':'       - Either inside the execution scope of `tracer::trace()`, or','line_number':52,'multiline':False]
['text':'       - Eagerly called `setTracingState()` with non-null object.','line_number':53,'multiline':False]
['text':'    2) Not inside `AutoDispatchBelowADInplaceOrView` scope;','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' After:','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':'    1) `TracingState` object in TLS != null;','line_number':58,'multiline':False]
['text':'    2) Has called `tracer::impl::set_dispatch_enabled(true)`;','line_number':59,'multiline':False]
['text':'    3) Not inside `tracer::impl::NonDispatchGuard` scope;','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' [TODOs]','line_number':62,'multiline':False]
['text':'','line_number':63,'multiline':False]
['text':' - `setTracingState()` v.s. `tracer::impl::set_dispatch_enabled()`','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':'   Currently `set_dispatch_enabled()` is set/unset inside `setTracingState()`','line_number':66,'multiline':False]
['text':'   to keep the semantics exactly the same as before - it's confusing to keep','line_number':67,'multiline':False]
['text':'   both switches, though. We should consider simplifying/limiting the exposed','line_number':68,'multiline':False]
['text':'   `setTracingState()` Python/C++ APIs (and other APIs calling it) so that','line_number':69,'multiline':False]
['text':'   these two can be unified.','line_number':70,'multiline':False]
['text':'','line_number':71,'multiline':False]
['text':' - `AutoDispatchBelowADInplaceOrView` v.s.','line_number':72,'multiline':False]
['text':' `tracer::impl::NoTracerDispatchMode`','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':'   We don't need to always set both guards together to keep semantics','line_number':75,'multiline':False]
['text':'   unchanged. For the follow use cases of `AutoDispatchBelowADInplaceOrView`','line_number':76,'multiline':False]
['text':'   we don't need set the new tracer guard:','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':'   * Script-generated VariableType kernels. The guard is not necessary as','line_number':79,'multiline':False]
['text':'     tracing is already disabled explicitly by `setTracingState(null)` in','line_number':80,'multiline':False]
['text':'     generated TraceType kernels - we could keep it as is or use the new guard','line_number':81,'multiline':False]
['text':'     instead.','line_number':82,'multiline':False]
['text':'','line_number':83,'multiline':False]
['text':'   * Custom ops. Will be handled by fallback kernel for `Tracer`.','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':'   * Functions that are not likely to be called in tracing context (no python','line_number':86,'multiline':False]
['text':'     binding / not an operator), e.g.: all mobile forward() wrappers, test','line_number':87,'multiline':False]
['text':'     binaries, and etc.','line_number':88,'multiline':False]
['text':'','line_number':89,'multiline':False]
['text':'   * Where new threads are spawned, e.g.: ATen/native/ConvolutionMM2d.cpp.','line_number':90,'multiline':False]
['text':'     It's not necessary as tracing is off by default.','line_number':91,'multiline':False]
['text':'','line_number':92,'multiline':False]
['text':'   For the rest of cases we might need have both:','line_number':93,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':'   * Functions that might be reachable from eager mode python (especially','line_number':95,'multiline':False]
['text':'     factory methods), e.g.:','line_number':96,'multiline':False]
['text':'     `internal_new_from_data()` in `torch/csrc/utils/tensor_new.cpp`.','line_number':97,'multiline':False]
['text':'     Without the new guard it will add `aten::empty` to the traced graph.','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':'   * Some manually maintained functions, e.g.:','line_number':100,'multiline':False]
['text':'     `torch/csrc/autograd/VariableTypeManual.cpp`.','line_number':101,'multiline':False]
['text':'     Set the new guard if it's not obvious whether `setTracingState(null)`','line_number':102,'multiline':False]
['text':'     has been called before it reaches the `AutoDispatchBelowADInplaceOrView`','line_number':103,'multiline':False]
['text':'     guard.','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':'   We might need tweak the usage of the new guard to optimize/fix things.','line_number':106,'multiline':False]
['text':'   It should only affect the correctness of tracing function, because the','line_number':107,'multiline':False]
['text':'   guard is essentially no-op when the master `setTracingState()` switch is','line_number':108,'multiline':False]
['text':'   off.','line_number':109,'multiline':False]
['text':' TODO: move this from `at::` to `jit::torch::` after','line_number':111,'multiline':False]
['text':' `aten/src/ATen/cpp_custom_type_hack.h` is removed.','line_number':112,'multiline':False]
['text':' namespace at::tracer::impl','line_number':132,'multiline':False]
