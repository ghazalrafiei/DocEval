['text':' The includes of HIPGuard.h','line_number':5,'multiline':False]
['text':' Use of c10::hip namespace here makes hipification easier, because','line_number':18,'multiline':False]
['text':' I don't have to also fix namespaces.  Sorry!','line_number':19,'multiline':False]
['text':' Note [Masquerading as CUDA]','line_number':22,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':23,'multiline':False]
['text':' c10_hip is very easy to understand: it is HIPified from c10_cuda,','line_number':24,'multiline':False]
['text':' and anywhere you said CUDA, the source code now says HIP.  HIPified','line_number':25,'multiline':False]
['text':' PyTorch is much harder to understand: it is HIPified from regular','line_number':26,'multiline':False]
['text':' PyTorch, yes, but NO source-to-source translation from CUDA to','line_number':27,'multiline':False]
['text':' HIP occurs; instead, anywhere we see "CUDA", it actually means "HIP".','line_number':28,'multiline':False]
['text':' For example, when you use HIPified PyTorch, you say x.cuda() to','line_number':29,'multiline':False]
['text':' move a tensor onto ROCm device.  We call this situation "HIP','line_number':30,'multiline':False]
['text':' masquerading as CUDA".','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' This leads to a very awkward situation when we want to call c10_hip','line_number':33,'multiline':False]
['text':' code from PyTorch, since c10_hip is expecting things to be called','line_number':34,'multiline':False]
['text':' HIP, but PyTorch is calling them CUDA (masquerading as HIP).  To','line_number':35,'multiline':False]
['text':' fix this impedance mismatch, we have MasqueradingAsCUDA variants','line_number':36,'multiline':False]
['text':' for all c10_hip classes.  These translate between the "HIP" and "CUDA','line_number':37,'multiline':False]
['text':' masquerading as HIP" worlds.  For example,','line_number':38,'multiline':False]
['text':' HIPGuardImplMasqueradingAsCUDA (this file) provides something like a','line_number':39,'multiline':False]
['text':' HIPGuardImpl, but it reports its DeviceType as CUDA (e.g., type()','line_number':40,'multiline':False]
['text':' returns CUDA, getDevice() reports the current HIP device as a CUDA','line_number':41,'multiline':False]
['text':' device.)','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':' We should be able to delete all of these classes entirely once','line_number':44,'multiline':False]
['text':' we switch PyTorch to calling a HIP a HIP.','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':' When you add a new MasqueradingAsCUDA class/function, you need to','line_number':47,'multiline':False]
['text':' also update the rewrite rules in torch/utils/hipify/cuda_to_hip_mappings.py','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':' By the way, note that the cpp file associated with this also','line_number':52,'multiline':False]
['text':' *overwrites* the entry in the DeviceGuardImpl registry for CUDA with','line_number':53,'multiline':False]
['text':' this HIP implementation.','line_number':54,'multiline':False]
['text':' Event-related functions','line_number':113,'multiline':False]
['text':' Note: hipEventCreateWithFlags should be called on the same device as','line_number':114,'multiline':False]
['text':'  the recording stream's device.','line_number':115,'multiline':False]
['text':' Maps PyTorch's Event::Flag to HIP flag','line_number':119,'multiline':False]
['text':' Moves to stream's device to record','line_number':163,'multiline':False]
['text':' Creates the event (lazily)','line_number':167,'multiline':False]
['text':' Makes the void* point to the (possibly just allocated) HIP event','line_number':170,'multiline':False]
['text':' Resets device','line_number':173,'multiline':False]
['text':'flags (must be zero)=','line_number':188,'multiline':True]
['text':' ignore and clear the error if not ready','line_number':198,'multiline':False]
['text':' Stream-related functions','line_number':204,'multiline':False]
['text':' All of the guards which have HIPGuardImpl burned in need to also have','line_number':223,'multiline':False]
['text':' variants using HIPGuardImplMasqueradingAsCUDA.','line_number':224,'multiline':False]
['text':'/ This code is all a direct copy from c10/cuda/HIPGuardMasqueradingAsCUDA.h, but with','line_number':226,'multiline':False]
['text':'/ the correct InlineDeviceGuard burned in.  Sorry about the','line_number':227,'multiline':False]
['text':'/ copy-pasting.','line_number':228,'multiline':False]
['text':' namespace c10::hip','line_number':353,'multiline':False]
