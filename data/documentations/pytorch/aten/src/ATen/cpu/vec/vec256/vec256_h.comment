['text':' DO NOT DEFINE STATIC DATA IN THIS HEADER!','line_number':3,'multiline':False]
['text':' See Note [Do not compile initializers with AVX]','line_number':4,'multiline':False]
['text':' Note [CPU_CAPABILITY namespace]','line_number':33,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':34,'multiline':False]
['text':' This header, and all of its subheaders, will be compiled with','line_number':35,'multiline':False]
['text':' different architecture flags for each supported set of vector','line_number':36,'multiline':False]
['text':' intrinsics. So we need to make sure they aren't inadvertently','line_number':37,'multiline':False]
['text':' linked together. We do this by declaring objects in an `inline','line_number':38,'multiline':False]
['text':' namespace` which changes the name mangling, but can still be','line_number':39,'multiline':False]
['text':' accessed as `at::vec`.','line_number':40,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CAST (AVX2) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':74,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GATHER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':96,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MASK GATHER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':110,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CONVERT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':126,'multiline':False]
['text':' Only works for inputs in the range: [-2^51, 2^51]','line_number':128,'multiline':False]
['text':' From: https://stackoverflow.com/a/41148578','line_number':129,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ INTERLEAVE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':146,'multiline':False]
['text':' inputs:','line_number':151,'multiline':False]
['text':'   a = {a0, a1, a3, a3}','line_number':152,'multiline':False]
['text':'   b = {b0, b1, b2, b3}','line_number':153,'multiline':False]
['text':' swap lanes:','line_number':155,'multiline':False]
['text':'   a_swapped = {a0, a1, b0, b1}','line_number':156,'multiline':False]
['text':'   b_swapped = {a2, a3, b2, b3}','line_number':157,'multiline':False]
['text':' 0, 2.   4 bits apart','line_number':158,'multiline':False]
['text':' 1, 3.   4 bits apart','line_number':159,'multiline':False]
['text':' group cols crossing lanes:','line_number':161,'multiline':False]
['text':'   return {a0, b0, a1, b1}','line_number':162,'multiline':False]
['text':'          {a2, b2, a3, b3}','line_number':163,'multiline':False]
['text':' 0, 2, 1, 3','line_number':164,'multiline':False]
['text':' 0, 2, 1, 3','line_number':165,'multiline':False]
['text':' inputs:','line_number':171,'multiline':False]
['text':'   a = {a0, a1, a2, a3, a4, a5, a6, a7}','line_number':172,'multiline':False]
['text':'   b = {b0, b1, b2, b3, b4, b5, b6, b7}','line_number':173,'multiline':False]
['text':' swap lanes:','line_number':175,'multiline':False]
['text':'   a_swapped = {a0, a1, a2, a3, b0, b1, b2, b3}','line_number':176,'multiline':False]
['text':'   b_swapped = {a4, a5, a6, a7, b4, b5, b6, b7}','line_number':177,'multiline':False]
['text':' TODO: can we support caching this?','line_number':178,'multiline':False]
['text':' 0, 2.   4 bits apart','line_number':179,'multiline':False]
['text':' 1, 3.   4 bits apart','line_number':180,'multiline':False]
['text':' group cols crossing lanes:','line_number':182,'multiline':False]
['text':'   return {a0, b0, a1, b1, a2, b2, a3, b3}','line_number':183,'multiline':False]
['text':'          {a4, b4, a5, b5, a6, b6, a7, b7}','line_number':184,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DEINTERLEAVE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':190,'multiline':False]
['text':' inputs:','line_number':195,'multiline':False]
['text':'   a = {a0, b0, a1, b1}','line_number':196,'multiline':False]
['text':'   b = {a2, b2, a3, b3}','line_number':197,'multiline':False]
['text':' group cols crossing lanes:','line_number':199,'multiline':False]
['text':'   a_grouped = {a0, a1, b0, b1}','line_number':200,'multiline':False]
['text':'   b_grouped = {a2, a3, b2, b3}','line_number':201,'multiline':False]
['text':' 0, 2, 1, 3','line_number':202,'multiline':False]
['text':' 0, 2, 1, 3','line_number':203,'multiline':False]
['text':' swap lanes:','line_number':205,'multiline':False]
['text':'   return {a0, a1, a2, a3}','line_number':206,'multiline':False]
['text':'          {b0, b1, b2, b3}','line_number':207,'multiline':False]
['text':' 0, 2.   4 bits apart','line_number':208,'multiline':False]
['text':' 1, 3.   4 bits apart','line_number':209,'multiline':False]
['text':' inputs:','line_number':215,'multiline':False]
['text':'   a = {a0, b0, a1, b1, a2, b2, a3, b3}','line_number':216,'multiline':False]
['text':'   b = {a4, b4, a5, b5, a6, b6, a7, b7}','line_number':217,'multiline':False]
['text':' group cols crossing lanes:','line_number':219,'multiline':False]
['text':'   a_grouped = {a0, a1, a2, a3, b0, b1, b2, b3}','line_number':220,'multiline':False]
['text':'   b_grouped = {a4, a5, a6, a7, b4, b5, b6, b7}','line_number':221,'multiline':False]
['text':' TODO: can we support caching this?','line_number':222,'multiline':False]
['text':' swap lanes:','line_number':227,'multiline':False]
['text':'   return {a0, a1, a2, a3, a4, a5, a6, a7}','line_number':228,'multiline':False]
['text':'          {b0, b1, b2, b3, b4, b5, b6, b7}','line_number':229,'multiline':False]
['text':' 0, 2.   4 bits apart','line_number':230,'multiline':False]
['text':' 1, 3.   4 bits apart','line_number':231,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLIP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':234,'multiline':False]
['text':' 27 == _MM_SHUFFLE(0, 1, 2, 3)','line_number':244,'multiline':False]
['text':' 27 == _MM_SHUFFLE(0, 1, 2, 3)','line_number':249,'multiline':False]
['text':' (defined(CPU_CAPABILITY_AVX2) && !defined(_MSC_VER)','line_number':287,'multiline':False]
['text':' namepsace at::vec::CPU_CAPABILITY','line_number':289,'multiline':False]
