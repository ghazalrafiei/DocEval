['text':' DO NOT DEFINE STATIC DATA IN THIS HEADER!','line_number':3,'multiline':False]
['text':' See Note [Do not compile initializers with AVX]','line_number':4,'multiline':False]
['text':' See Note [CPU_CAPABILITY namespace]','line_number':18,'multiline':False]
['text':' bfloat16 conversion','line_number':23,'multiline':False]
['text':' uint32_t lsb = (input >> 16) & 1;','line_number':42,'multiline':False]
['text':' uint32_t rounding_bias = 0x7fff + lsb;','line_number':45,'multiline':False]
['text':' input += rounding_bias;','line_number':48,'multiline':False]
['text':' input = input >> 16;','line_number':51,'multiline':False]
['text':' Check NaN before converting back to bf16','line_number':54,'multiline':False]
['text':' t_hi[4-7] t_lo[4-7] t_hi[0-4] t_lo[0-4]','line_number':58,'multiline':False]
['text':' 11        01        10        00','line_number':59,'multiline':False]
['text':' float16 conversion','line_number':71,'multiline':False]
['text':' dtype conversion between float16/bfloat16 and float32','line_number':91,'multiline':False]
['text':' returns an integer mask where all zero elements are translated to 1-bit and others are translated to 0-bit','line_number':159,'multiline':False]
['text':' copy sign bit (0x8000) from sign and remaining bits from values','line_number':335,'multiline':False]
['text':'is_compare_op','line_number':583,'multiline':True]
['text':' frac. Implement this here so we can use subtraction','line_number':674,'multiline':False]
['text':' Implements the IEEE 754 201X `maximum` operation, which propagates NaN if','line_number':679,'multiline':False]
['text':' either input is a NaN.','line_number':680,'multiline':False]
['text':' Exploit the fact that all-ones is a NaN.','line_number':691,'multiline':False]
['text':' Implements the IEEE 754 201X `minimum` operation, which propagates NaN if','line_number':697,'multiline':False]
['text':' either input is a NaN.','line_number':698,'multiline':False]
['text':' Exploit the fact that all-ones is a NaN.','line_number':709,'multiline':False]
['text':' Load one float vector from an array of doubles','line_number':783,'multiline':False]
['text':' frac. Implement this here so we can use subtraction','line_number':872,'multiline':False]
['text':' Implements the IEEE 754 201X `maximum` operation, which propagates NaN if','line_number':877,'multiline':False]
['text':' either input is a NaN.','line_number':878,'multiline':False]
['text':' Exploit the fact that all-ones is a NaN.','line_number':889,'multiline':False]
['text':' Implements the IEEE 754 201X `minimum` operation, which propagates NaN if','line_number':895,'multiline':False]
['text':' either input is a NaN.','line_number':896,'multiline':False]
['text':' Exploit the fact that all-ones is a NaN.','line_number':907,'multiline':False]
['text':' Load one float vector from an array of doubles','line_number':981,'multiline':False]
['text':' defined(CPU_CAPABILITY_AVX2) && !defined(_MSC_VER)','line_number':1026,'multiline':False]
['text':' defined(CPU_CAPABILITY_AVX2) && !defined(_MSC_VER)','line_number':1051,'multiline':False]
['text':' defined(CPU_CAPABILITY_AVX2) && !defined(_MSC_VER)','line_number':1072,'multiline':False]
['text':' namsepace at::vec::CPU_CAPABILITY','line_number':1091,'multiline':False]
