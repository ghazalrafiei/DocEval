['text':' DO NOT DEFINE STATIC DATA IN THIS HEADER!','line_number':3,'multiline':False]
['text':' See Note [Do not compile initializers with AVX]','line_number':4,'multiline':False]
['text':' See Note [CPU_CAPABILITY namespace]','line_number':14,'multiline':False]
['text':' Ensure uninitialized memory does not change the output value See https://github.com/pytorch/pytorch/issues/32502','line_number':80,'multiline':False]
['text':' for more details. We do not initialize arrays to zero using "={0}" because gcc would compile it to two','line_number':81,'multiline':False]
['text':' instructions while a loop would be compiled to one instruction.','line_number':82,'multiline':False]
['text':' returns an integer mask where all zero elements are translated to 1-bit and others are translated to 0-bit','line_number':102,'multiline':False]
['text':' constants','line_number':161,'multiline':False]
['text':' sign(x)','line_number':170,'multiline':False]
['text':' t = 1 / (p * abs(x) + 1)','line_number':173,'multiline':False]
['text':' r = p5 * t ^ 4 + p4 * t ^ 3 + p3 * t ^ 2 + p2 * t + p1','line_number':176,'multiline':False]
['text':' - exp(- x * x)','line_number':181,'multiline':False]
['text':' auto tmp4 = exp(neg_pow_2);','line_number':184,'multiline':False]
['text':' erf(x) = sign(x) * (1 - r * t * exp(- x * x))','line_number':187,'multiline':False]
['text':' A faster version of exp with ULP=20','line_number':208,'multiline':False]
['text':' 1/factorial(1)','line_number':210,'multiline':False]
['text':' 1/factorial(2)','line_number':212,'multiline':False]
['text':' 1/factorial(3)','line_number':214,'multiline':False]
['text':' 1/factorial(4)','line_number':216,'multiline':False]
['text':' 1/factorial(5)','line_number':218,'multiline':False]
['text':' log2(e)','line_number':220,'multiline':False]
['text':' ln(2)','line_number':225,'multiline':False]
['text':' exp(x) =','line_number':231,'multiline':False]
['text':' = exp(n * ln(2) + r) // divide x by ln(2) and get quot and rem','line_number':232,'multiline':False]
['text':' = 2^n * exp(r) // simplify the exp(n*ln(2)) expression','line_number':233,'multiline':False]
['text':'_CMP_LT_OS','line_number':236,'multiline':True]
['text':' fx = floorf(x * log2ef + 0.5)','line_number':240,'multiline':False]
['text':' x = x - fx * ln2','line_number':244,'multiline':False]
['text':' compute polynomial','line_number':247,'multiline':False]
['text':' compute 2^(n-1)','line_number':255,'multiline':False]
['text':' y = y * 2^n','line_number':264,'multiline':False]
['text':' Comparison using the _CMP_**_OQ predicate.','line_number':368,'multiline':False]
['text':'   `O`: get false if an operand is NaN','line_number':369,'multiline':False]
['text':'   `Q`: do not raise if an operand is NaN','line_number':370,'multiline':False]
['text':' frac. Implement this here so we can use subtraction','line_number':423,'multiline':False]
['text':' Implements the IEEE 754 201X `maximum` operation, which propagates NaN if','line_number':428,'multiline':False]
['text':' either input is a NaN.','line_number':429,'multiline':False]
['text':' Exploit the fact that all-ones is a NaN.','line_number':434,'multiline':False]
['text':' Implements the IEEE 754 201X `minimum` operation, which propagates NaN if','line_number':438,'multiline':False]
['text':' either input is a NaN.','line_number':439,'multiline':False]
['text':' Exploit the fact that all-ones is a NaN.','line_number':444,'multiline':False]
['text':' Used by Inductor CPP codegen','line_number':526,'multiline':False]
['text':' load from src to registers','line_number':533,'multiline':False]
['text':' a: a0  a1  a2  a3  a4  a5  a6  a7','line_number':534,'multiline':False]
['text':' b: b0  b1  b2  b3  b4  b5  b6  b7','line_number':535,'multiline':False]
['text':' c: c0  c1  c2  c3  c4  c5  c6  c7','line_number':536,'multiline':False]
['text':' d: d0  d1  d2  d3  d4  d5  d6  d7','line_number':537,'multiline':False]
['text':' e: e0  e1  e2  e3  e4  e5  e6  e7','line_number':538,'multiline':False]
['text':' f: f0  f1  f2  f3  f4  f5  f6  f7','line_number':539,'multiline':False]
['text':' g: g0  g1  g2  g3  g4  g5  g6  g7','line_number':540,'multiline':False]
['text':' h: h0  h1  h2  h3  h4  h5  h6  h7','line_number':541,'multiline':False]
['text':' unpacking and interleaving 32-bit elements','line_number':552,'multiline':False]
['text':' a0  b0  a1  b1  a4  b4  a5  b5','line_number':553,'multiline':False]
['text':' a2  b2  a3  b3  a6  b6  a7  b7','line_number':554,'multiline':False]
['text':' c0  d0  c1  d1 ...','line_number':555,'multiline':False]
['text':' c2  d2  c3  d3 ...','line_number':556,'multiline':False]
['text':' e0  f0  e1  f1 ...','line_number':557,'multiline':False]
['text':' e2  f2  e3  f3 ...','line_number':558,'multiline':False]
['text':' g0  h0  g1  h1 ...','line_number':559,'multiline':False]
['text':' g2  h2  g3  h3 ...','line_number':560,'multiline':False]
['text':' unpacking and interleaving 64-bit elements','line_number':570,'multiline':False]
['text':'  a0  b0  c0  d0  a4  b4  c4  d4','line_number':571,'multiline':False]
['text':'  a1  b1  c1  d1 ...','line_number':572,'multiline':False]
['text':'  a2  b2  c2  d2 ...','line_number':573,'multiline':False]
['text':'  a3  b3  c3  d3 ...','line_number':574,'multiline':False]
['text':'  e0  f0  g0  h0  e4  f4  g4  h4','line_number':575,'multiline':False]
['text':'  e1  f1  g1  h1 ...','line_number':576,'multiline':False]
['text':'  e2  f2  g2  h2 ...','line_number':577,'multiline':False]
['text':'  e3  f3  g3  h3 ...','line_number':578,'multiline':False]
['text':'  shuffle 128-bits (composed of 4 32-bit elements)','line_number':596,'multiline':False]
['text':'  a0  b0  c0  d0  e0  f0  g0  h0','line_number':597,'multiline':False]
['text':'  a1  b1  c1  d1 ...','line_number':598,'multiline':False]
['text':'  a2  b2  c2  d2 ...','line_number':599,'multiline':False]
['text':'  a3  b3  c3  d3 ...','line_number':600,'multiline':False]
['text':'  a4  b4  c4  d4 ...','line_number':601,'multiline':False]
['text':'  a5  b5  c5  d5 ...','line_number':602,'multiline':False]
['text':'  a6  b6  c6  d6 ...','line_number':603,'multiline':False]
['text':'  a7  b7  c7  d7 ...','line_number':604,'multiline':False]
['text':' store from registers to dst','line_number':614,'multiline':False]
['text':' namespace at::vec::CPU_CAPABILITY','line_number':627,'multiline':False]
