['text':'*
 * CPUGeneratorImplStateLegacy is a POD class needed for memcpys
 * in torch.get_rng_state() and torch.set_rng_state().
 * It is a legacy class and even though it is replaced with
 * at::CPUGeneratorImpl, we need this class and some of its fields
 * to support backward compatibility on loading checkpoints.
 ','line_number':11,'multiline':True]
['text':' The initial seed. ','line_number':19,'multiline':True]
['text':' = 1; ','line_number':21,'multiline':True]
['text':' = 0; ','line_number':22,'multiline':True]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':24,'multiline':False]
['text':' the array for the state vector  ','line_number':25,'multiline':True]
['text':'******************************','line_number':27,'multiline':True]
['text':' For normal distribution ','line_number':29,'multiline':True]
['text':' = 0; ','line_number':33,'multiline':True]
['text':'*
 * CPUGeneratorImplState is a POD class containing
 * new data introduced in at::CPUGeneratorImpl and the legacy state. It is used
 * as a helper for torch.get_rng_state() and torch.set_rng_state()
 * functions.
 ','line_number':36,'multiline':True]
['text':'*
 * PyTorch maintains a collection of default generators that get
 * initialized once. The purpose of these default generators is to
 * maintain a global running state of the pseudo random number generation,
 * when a user does not explicitly mention any generator.
 * getDefaultCPUGenerator gets the default generator for a particular
 * device.
 ','line_number':48,'multiline':True]
['text':'*
 * Utility to create a CPUGeneratorImpl. Returns a shared_ptr
 ','line_number':61,'multiline':True]
['text':'*
 * Helper function to concatenate two 32 bit unsigned int
 * and return them as a 64 bit unsigned int
 ','line_number':68,'multiline':True]
['text':' namespace detail','line_number':76,'multiline':False]
['text':'*
 * CPUGeneratorImpl class implementation
 ','line_number':78,'multiline':True]
['text':'*
 * Manually seeds the engine with the seed input
 * See Note [Acquire lock when using random generators]
 ','line_number':87,'multiline':True]
['text':'*
 * Sets the offset of RNG state.
 * See Note [Acquire lock when using random generators]
 ','line_number':97,'multiline':True]
['text':'*
 * Gets the current offset of CPUGeneratorImpl.
 ','line_number':105,'multiline':True]
['text':'*
 * Gets the current seed of CPUGeneratorImpl.
 ','line_number':112,'multiline':True]
['text':'*
 * Gets a nondeterministic random number from /dev/urandom or time,
 * seeds the CPUGeneratorImpl with it and then returns that number.
 *
 * FIXME: You can move this function to Generator.cpp if the algorithm
 * in getNonDeterministicRandom is unified for both CPU and CUDA
 ','line_number':119,'multiline':True]
['text':'*
 * Sets the internal state of CPUGeneratorImpl. The new internal state
 * must be a strided CPU byte tensor and of the same size as either
 * CPUGeneratorImplStateLegacy (for legacy CPU generator state) or
 * CPUGeneratorImplState (for new state).
 *
 * FIXME: Remove support of the legacy state in the future?
 ','line_number':132,'multiline':True]
['text':' Construct the state of at::CPUGeneratorImpl based on input byte tensor size.','line_number':157,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':158,'multiline':False]
['text':' Note that in CPUGeneratorImplStateLegacy, we didn't have float version','line_number':163,'multiline':False]
['text':' of normal sample and hence we leave the c10::optional<float> as is','line_number':164,'multiline':False]
['text':' Update next_double_normal_sample.','line_number':166,'multiline':False]
['text':' Note that CPUGeneratorImplStateLegacy stores two uniform values (normal_x, normal_y)','line_number':167,'multiline':False]
['text':' and a rho value (normal_rho). These three values were redundant and in the new','line_number':168,'multiline':False]
['text':' DistributionsHelper.h, we store the actual extra normal sample, rather than three','line_number':169,'multiline':False]
['text':' intermediate values.','line_number':170,'multiline':False]
['text':' we return the sin version of the normal sample when in caching mode','line_number':174,'multiline':False]
['text':' update next_float_normal_sample','line_number':180,'multiline':False]
['text':' Update next_double_normal_sample.','line_number':185,'multiline':False]
['text':' Note that in getRNGState, we now return the actual normal sample in normal_y','line_number':186,'multiline':False]
['text':' and if it's valid in normal_is_valid. The redundant normal_x and normal_rho','line_number':187,'multiline':False]
['text':' are squashed to 0.0.','line_number':188,'multiline':False]
['text':' construct engine_','line_number':198,'multiline':False]
['text':' Note that CPUGeneratorImplStateLegacy stored a state array of 64 bit uints, whereas in our','line_number':199,'multiline':False]
['text':' redefined mt19937, we have changed to a state array of 32 bit uints. Hence, we are','line_number':200,'multiline':False]
['text':' doing a std::copy.','line_number':201,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':202,'multiline':False]
['text':'*
 * Gets the current internal state of CPUGeneratorImpl. The internal
 * state is returned as a CPU byte tensor.
 ','line_number':216,'multiline':True]
['text':' accumulate generator data to be copied into byte tensor','line_number':229,'multiline':False]
['text':' we don't use it anymore and this is just a dummy','line_number':237,'multiline':False]
['text':' we don't use it anymore and this is just a dummy','line_number':238,'multiline':False]
['text':'*
 * Gets the DeviceType of CPUGeneratorImpl.
 * Used for type checking during run time.
 ','line_number':256,'multiline':True]
['text':'*
 * Gets a random 32 bit unsigned integer from the engine
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':264,'multiline':True]
['text':'*
 * Gets a random 64 bit unsigned integer from the engine
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':273,'multiline':True]
['text':'*
 * Get the cached normal random in float
 ','line_number':284,'multiline':True]
['text':'*
 * Get the cached normal random in double
 ','line_number':291,'multiline':True]
['text':'*
 * Cache normal random in float
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':298,'multiline':True]
['text':'*
 * Cache normal random in double
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':307,'multiline':True]
['text':'*
 * Get the engine of the CPUGeneratorImpl
 ','line_number':316,'multiline':True]
['text':'*
 * Set the engine of the CPUGeneratorImpl
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':323,'multiline':True]
['text':'*
 * Public clone method implementation
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':332,'multiline':True]
['text':'*
 * Private clone method implementation
 *
 * See Note [Acquire lock when using random generators]
 ','line_number':341,'multiline':True]
['text':' namespace at','line_number':354,'multiline':False]
