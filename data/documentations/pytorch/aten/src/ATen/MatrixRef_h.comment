['text':'/ MatrixRef - Like an ArrayRef, but with an extra recorded strides so that','line_number':8,'multiline':False]
['text':'/ we can easily view it as a multidimensional array.','line_number':9,'multiline':False]
['text':'/','line_number':10,'multiline':False]
['text':'/ Like ArrayRef, this class does not own the underlying data, it is expected','line_number':11,'multiline':False]
['text':'/ to be used in situations where the data resides in some other buffer.','line_number':12,'multiline':False]
['text':'/','line_number':13,'multiline':False]
['text':'/ This is intended to be trivially copyable, so it should be passed by','line_number':14,'multiline':False]
['text':'/ value.','line_number':15,'multiline':False]
['text':'/','line_number':16,'multiline':False]
['text':'/ For now, 2D only (so the copies are actually cheap, without having','line_number':17,'multiline':False]
['text':'/ to write a SmallVector class) and contiguous only (so we can','line_number':18,'multiline':False]
['text':'/ return non-strided ArrayRef on index).','line_number':19,'multiline':False]
['text':'/','line_number':20,'multiline':False]
['text':'/ P.S. dimension 0 indexes rows, dimension 1 indexes columns','line_number':21,'multiline':False]
['text':'/ Underlying ArrayRef','line_number':28,'multiline':False]
['text':'/ Stride of dim 0 (outer dimension)','line_number':31,'multiline':False]
['text':' Stride of dim 1 is assumed to be 1','line_number':34,'multiline':False]
['text':'/ Construct an empty Matrixref.','line_number':37,'multiline':False]
['text':'implicit','line_number':38,'multiline':True]
['text':'/ Construct an MatrixRef from an ArrayRef and outer stride.','line_number':40,'multiline':False]
['text':'implicit','line_number':41,'multiline':True]
['text':'/ @}','line_number':51,'multiline':False]
['text':'/ @name Simple Operations','line_number':52,'multiline':False]
['text':'/ @{','line_number':53,'multiline':False]
['text':'/ empty - Check if the matrix is empty.','line_number':55,'multiline':False]
['text':'/ size - Get size a dimension','line_number':64,'multiline':False]
['text':'/ equals - Check for element-wise equality.','line_number':80,'multiline':False]
['text':'/ @}','line_number':85,'multiline':False]
['text':'/ @name Operator Overloads','line_number':86,'multiline':False]
['text':'/ @{','line_number':87,'multiline':False]
['text':'/ Disallow accidental assignment from a temporary.','line_number':92,'multiline':False]
['text':'/','line_number':93,'multiline':False]
['text':'/ The declaration here is extra complicated so that "arrayRef = {}"','line_number':94,'multiline':False]
['text':'/ continues to select the move assignment operator.','line_number':95,'multiline':False]
['text':'/ Disallow accidental assignment from a temporary.','line_number':100,'multiline':False]
['text':'/','line_number':101,'multiline':False]
['text':'/ The declaration here is extra complicated so that "arrayRef = {}"','line_number':102,'multiline':False]
['text':'/ continues to select the move assignment operator.','line_number':103,'multiline':False]
['text':' end namespace at','line_number':109,'multiline':False]
