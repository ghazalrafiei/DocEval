['text':' ${generated_comment}','line_number':3,'multiline':False]
['text':' NOTE: [TORCH_ASSERT_ONLY_METHOD_OPERATORS]','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' In ATen, certain generated headers files include the definitions of','line_number':22,'multiline':False]
['text':' every single operator in PyTorch. Unfortunately this means every','line_number':23,'multiline':False]
['text':' time an operator signature is updated or changed in','line_number':24,'multiline':False]
['text':' native_functions.yaml, you (and every other PyTorch developer) need','line_number':25,'multiline':False]
['text':' to recompile every source file that includes any of these headers.','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' To break up these header dependencies, and improve incremental','line_number':28,'multiline':False]
['text':' build times for all PyTorch developers. These headers are split','line_number':29,'multiline':False]
['text':' into per-operator headers in the `ATen/ops` folder. This limits','line_number':30,'multiline':False]
['text':' incremental builds to only changes to methods of `Tensor`, or files','line_number':31,'multiline':False]
['text':' that use the specific operator being changed. With `at::sum` as an','line_number':32,'multiline':False]
['text':' example, you should include','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':'   <ATen/ops/sum.h>               // instead of ATen/Functions.h','line_number':35,'multiline':False]
['text':'   <ATen/ops/sum_native.h>        // instead of ATen/NativeFunctions.h','line_number':36,'multiline':False]
['text':'   <ATen/ops/sum_ops.h>           // instead of ATen/Operators.h','line_number':37,'multiline':False]
['text':'   <ATen/ops/sum_cpu_dispatch.h>  // instead of ATen/CPUFunctions.h','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' However, even if you're careful to use this in your own code.','line_number':40,'multiline':False]
['text':' `Functions.h` might be included indirectly through another header','line_number':41,'multiline':False]
['text':' without you realising. To avoid this, you can add','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':'   #define TORCH_ASSERT_ONLY_METHOD_OPERATORS','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':' to the top of your source file. This way any time the non-specific','line_number':46,'multiline':False]
['text':' headers are included, the compiler will error out.','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' Also, be aware that `ops` are not available in all build','line_number':49,'multiline':False]
['text':' configurations (namely fb-internal) so you must guard these','line_number':50,'multiline':False]
['text':' includes with `#ifdef AT_PER_OPERATOR_HEADERS`. e.g.','line_number':51,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':'   #ifndef AT_PER_OPERATOR_HEADERS','line_number':53,'multiline':False]
['text':'   #include <ATen/Functions.h>','line_number':54,'multiline':False]
['text':'   #else','line_number':55,'multiline':False]
['text':'   #include <ATen/ops/sum.h>','line_number':56,'multiline':False]
['text':'   #endif','line_number':57,'multiline':False]
['text':' Special C++ only overloads for std()-like functions (See gh-40287)','line_number':83,'multiline':False]
['text':' These are needed because int -> bool conversion takes precedence over int -> IntArrayRef','line_number':84,'multiline':False]
['text':' So, for example std(0) would select the std(unbiased=False) overload','line_number':85,'multiline':False]
