['text':' NOLINTNEXTLINE(modernize-deprecated-headers)','line_number':49,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-deprecated-headers)','line_number':51,'multiline':False]
['text':'
 * This section is a counterpart to Distributions.cu
 *
 ','line_number':55,'multiline':True]
['text':' The function `sample_poisson`','line_number':60,'multiline':False]
['text':' is adapted from Numpy's distributions.c implementation.','line_number':61,'multiline':False]
['text':' It is MIT licensed, so here is the copyright:','line_number':62,'multiline':False]
['text':' Copyright 2005 Robert Kern (robert.kern@gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':64,'multiline':True]
['text':' transformed rejection method, (Hoermann, 1993)','line_number':91,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':92,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':94,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':123,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':125,'multiline':False]
['text':' namespace','line_number':143,'multiline':False]
['text':' ==================================================== Bernoulli =====================================================','line_number':161,'multiline':False]
['text':' ================================================== LogNormal =======================================================','line_number':198,'multiline':False]
['text':' ==================================================== Cauchy ========================================================','line_number':211,'multiline':False]
['text':' ================================================== Exponential =====================================================','line_number':224,'multiline':False]
['text':' =================================================== Geometric ======================================================','line_number':237,'multiline':False]
['text':' ==================================================== Uniform =======================================================','line_number':250,'multiline':False]
['text':' No-op!','line_number':261,'multiline':False]
['text':' ==================================================== Normal ========================================================','line_number':274,'multiline':False]
['text':' No-op!','line_number':285,'multiline':False]
['text':' inplace','line_number':290,'multiline':False]
['text':' out tensor float','line_number':299,'multiline':False]
['text':' out float tensor','line_number':308,'multiline':False]
['text':' out tensor tensor','line_number':318,'multiline':False]
['text':' functional tensor float','line_number':327,'multiline':False]
['text':' functional float tensor','line_number':336,'multiline':False]
['text':' functional tensor tensor','line_number':345,'multiline':False]
['text':' functional variant, only used by the functionalization pass.','line_number':354,'multiline':False]
['text':' ==================================================== Random ========================================================','line_number':359,'multiline':False]
['text':' No error checking yay','line_number':391,'multiline':False]
['text':' No error checking yay','line_number':396,'multiline':False]
['text':' No error checking yay','line_number':401,'multiline':False]
['text':' ====================================================================================================================','line_number':405,'multiline':False]
['text':'
 * This section is a counterpart to Distributions.cu
 ','line_number':438,'multiline':True]
['text':' See Note [Acquire lock when using random generators]','line_number':451,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':475,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':492,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':519,'multiline':False]
['text':' Generate gamma sample by casting alpha to double to prevent underflow. ','line_number':521,'multiline':True]
['text':' Normalize and cast back to scalar_t. ','line_number':543,'multiline':True]
['text':' The largest consecutive integer representable in float32 (2^24) ','line_number':561,'multiline':True]
['text':' Since the index tensor is float, numCategories cannot exceed max','line_number':584,'multiline':False]
['text':' float integer precision','line_number':585,'multiline':False]
['text':' Fast-path for no replacement or if only one sample is drawn.','line_number':600,'multiline':False]
['text':' Reference:','line_number':601,'multiline':False]
['text':' https://github.com/pytorch/pytorch/issues/11931#issuecomment-625882503','line_number':602,'multiline':False]
['text':' Sanity checks on `self`.','line_number':604,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':609,'multiline':False]
['text':' The algorithm is from gumbel softmax.','line_number':620,'multiline':False]
['text':' s = argmax( logp - log(-log(eps)) ) where eps ~ U(0, 1)','line_number':621,'multiline':False]
['text':' Here we can apply exp to the formula which will not affect result of','line_number':622,'multiline':False]
['text':' argmax or topk. Then we have','line_number':623,'multiline':False]
['text':' s = argmax( p / (-log(eps)) ) where eps ~ U(0, 1).','line_number':624,'multiline':False]
['text':' We can also simplify the formula above by','line_number':625,'multiline':False]
['text':' s = argmax( p / q ) where q ~ Exp(1)','line_number':626,'multiline':False]
['text':' In theory the probability to generate 0 from exponential distribution is','line_number':628,'multiline':False]
['text':' 0. However, on CUDA side there is a protection to avoid 0s, but on CPU','line_number':629,'multiline':False]
['text':' side, there is a very low probability to generate 0 from','line_number':630,'multiline':False]
['text':' exponential<double>. The probability is about 2^(-DBL_MANT_DIG). We just','line_number':631,'multiline':False]
['text':' ignore it here, but there may be some risk to get invalid output on CPU.','line_number':632,'multiline':False]
['text':'dim=','line_number':635,'multiline':True]
['text':'keepdim=','line_number':635,'multiline':True]
['text':' namespace at::native','line_number':658,'multiline':False]
