['text':'**************************************************************************************************
 * Copyright (c) 2017 - 2023 NVIDIA CORPORATION & AFFILIATES. All rights
 *reserved. SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 *LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *POSSIBILITY OF SUCH DAMAGE.
 *
 *************************************************************************************************','line_number':1,'multiline':True]
['text':'! \file
  \brief Epilogue iterator that supports prefetching

  Mostly copied from <cutlass/epilogue/threadblock/predicated_tile_iterator.h>
','line_number':32,'multiline':True]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':53,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':57,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':62,'multiline':False]
['text':'/ Tile iterator used to load and store output tile from global memory in','line_number':64,'multiline':False]
['text':'/ epilogue.','line_number':65,'multiline':False]
['text':'/','line_number':66,'multiline':False]
['text':'/ Satisfies: ReadableTileIterator | PredicatedTileIterator |','line_number':67,'multiline':False]
['text':'/ ForwardTileIterator','line_number':68,'multiline':False]
['text':'/','line_number':69,'multiline':False]
['text':'/< Thread map (conept: OutputTileThreadMap)','line_number':71,'multiline':False]
['text':'/< Element data type','line_number':72,'multiline':False]
['text':'/< Scatter D operand or not','line_number':73,'multiline':False]
['text':'/ Fragment object','line_number':107,'multiline':False]
['text':'/ Memory access size','line_number':114,'multiline':False]
['text':'','line_number':117,'multiline':False]
['text':' Parameters struct','line_number':118,'multiline':False]
['text':'','line_number':119,'multiline':False]
['text':'/ Uses a non-template class','line_number':121,'multiline':False]
['text':'/ Mask object','line_number':138,'multiline':False]
['text':'/ Predicate state','line_number':142,'multiline':False]
['text':'','line_number':145,'multiline':False]
['text':' Mask','line_number':146,'multiline':False]
['text':'','line_number':147,'multiline':False]
['text':'/< Efficiently disables all accesses guarded by mask','line_number':153,'multiline':False]
['text':'/< CUTLASS_HOST_DEVICE enables all accesses guarded by mask','line_number':161,'multiline':False]
['text':'','line_number':171,'multiline':False]
['text':' Data members','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':'/ Parameters structure containing reference and precomputed state.','line_number':175,'multiline':False]
['text':'/ Byte-level pointer','line_number':178,'multiline':False]
['text':'/ Array of boolean values to contain steady-state predicates','line_number':181,'multiline':False]
['text':'/ Extent of the matrix tile in rows','line_number':184,'multiline':False]
['text':'/ Extent of the matrix tile in rows','line_number':187,'multiline':False]
['text':'/ A thread's starting row position (assuming steady-state predicates have','line_number':190,'multiline':False]
['text':'/ been computed)','line_number':191,'multiline':False]
['text':'/ A thread's starting column','line_number':194,'multiline':False]
['text':'/ Internal state counter','line_number':197,'multiline':False]
['text':'/ Scatter indices','line_number':200,'multiline':False]
['text':'','line_number':203,'multiline':False]
['text':' Static asserts about internal strides','line_number':204,'multiline':False]
['text':'','line_number':205,'multiline':False]
['text':'','line_number':214,'multiline':False]
['text':' Methods','line_number':215,'multiline':False]
['text':'','line_number':216,'multiline':False]
['text':'','line_number':219,'multiline':False]
['text':' Methods','line_number':220,'multiline':False]
['text':'','line_number':221,'multiline':False]
['text':'/ Constructor','line_number':223,'multiline':False]
['text':' Initialize predicates','line_number':242,'multiline':False]
['text':' Null pointer performs no accesses','line_number':250,'multiline':False]
['text':' Initialize pointer','line_number':259,'multiline':False]
['text':' Initialize internal state counter','line_number':271,'multiline':False]
['text':'/ Adds a pointer offset in units of Element','line_number':275,'multiline':False]
['text':' on windows using unsigned long here gives the error','line_number':311,'multiline':False]
['text':' error: asm operand type size(4) does not match','line_number':312,'multiline':False]
['text':' type/size implied by constraint 'l'','line_number':313,'multiline':False]
['text':'/ Loads a fragment from memory','line_number':338,'multiline':False]
['text':'/ Loads a fragment from memory','line_number':405,'multiline':False]
['text':'/ Stores a fragment to memory','line_number':411,'multiline':False]
['text':'/ Stores a fragment to memory','line_number':488,'multiline':False]
['text':'/ Loads a fragment from memory','line_number':494,'multiline':False]
['text':'/ Loads a fragment from memory','line_number':569,'multiline':False]
['text':'/ Need to get the thread start row from the tile iterator','line_number':656,'multiline':False]
['text':'/ Need to get the thread start row from the tile iterator','line_number':662,'multiline':False]
['text':'/ Extent of the matrix in rows','line_number':668,'multiline':False]
['text':'/ Extent of the matrix in columns','line_number':674,'multiline':False]
['text':'/ Advances to the next position to load or store','line_number':680,'multiline':False]
['text':'/< Efficiently disables all accesses guarded by mask','line_number':718,'multiline':False]
['text':'/< Efficiently enables all accesses guarded by mask','line_number':723,'multiline':False]
['text':'/< Sets the mask','line_number':728,'multiline':False]
['text':'/< Sets the mask','line_number':733,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':746,'multiline':False]
['text':' namespace threadblock','line_number':748,'multiline':False]
['text':' namespace epilogue','line_number':749,'multiline':False]
['text':' namespace cutlass','line_number':750,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':752,'multiline':False]
