['text':'! \file
  \brief Epilogue for threadblock scoped GEMMs using Tensor Ops.

  The epilogue rearranges the result of a matrix product through shared memory
  to match canonical tensor layouts in global memory. Epilogues support
  conversion and reduction operations.

  This is a copy of cutlass/epilogue/threadblock/epilogue.h that can
  handle "row_id" as a first argument, as uses it to get the corresponding
  `m_prime` / `s_prime` to rescale the output.
','line_number':1,'multiline':True]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':48,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':54,'multiline':False]
['text':'/ Applies a linear combination operator to an array of elements.','line_number':56,'multiline':False]
['text':' output <- alpha * accumulator + beta * source','line_number':57,'multiline':False]
['text':'   with:','line_number':58,'multiline':False]
['text':'     alpha = 1 / s_prime (to normalize when isLast=True, 1 otherwise)','line_number':59,'multiline':False]
['text':'     beta = alpha / m_prime (renormalize the output when the max changes)','line_number':60,'multiline':False]
['text':'     source is the current output','line_number':61,'multiline':False]
['text':'/< Data type used to store tensors','line_number':63,'multiline':False]
['text':'< Data type for source (usually matches','line_number':64,'multiline':False]
['text':'`ElementOutput`)','line_number':65,'multiline':False]
['text':'/< Number of elements computed per operation.','line_number':66,'multiline':False]
['text':'/< Usually it is 128/sizeof_bits<ElementOutput_>,','line_number':67,'multiline':False]
['text':'/< but we use 64 or 32 sometimes when there are not enough data','line_number':68,'multiline':False]
['text':'/< to store','line_number':69,'multiline':False]
['text':'/< Accumulator data type','line_number':70,'multiline':False]
['text':'/< Data type used to compute linear combination','line_number':71,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':' Data members','line_number':95,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':'/ Constructs the function object, possibly loading from pointers in host','line_number':102,'multiline':False]
['text':'/ memory','line_number':103,'multiline':False]
['text':'/ Returns true if source is needed','line_number':110,'multiline':False]
['text':'/ Functionally required for serial reduction in the epilogue','line_number':116,'multiline':False]
['text':'/ Computes linear scaling: D = alpha * accumulator + beta * source','line_number':120,'multiline':False]
['text':' Convert source to interal compute numeric type','line_number':128,'multiline':False]
['text':' Convert to destination numeric type','line_number':134,'multiline':False]
['text':' Perform binary operations','line_number':141,'multiline':False]
['text':' X =  beta * C','line_number':150,'multiline':False]
['text':' D = alpha * Accum + X','line_number':153,'multiline':False]
['text':'/ Computes linear scaling: D = alpha * accumulator','line_number':158,'multiline':False]
['text':' Convert source to interal compute numeric type','line_number':164,'multiline':False]
['text':' Convert to destination numeric type','line_number':168,'multiline':False]
['text':' X =  alpha * C + uniform','line_number':180,'multiline':False]
['text':' namespace thread','line_number':186,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':226,'multiline':False]
['text':' namespace threadblock','line_number':228,'multiline':False]
['text':' namespace epilogue','line_number':229,'multiline':False]
['text':' namespace cutlass','line_number':230,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':232,'multiline':False]
