['text':'*****************************************************************************
 * Copyright (c) 2011-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the NVIDIA CORPORATION nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****************************************************************************','line_number':1,'multiline':True]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':39,'multiline':False]
['text':' Apply the exp to all the elements.','line_number':83,'multiline':False]
['text':' If max is -inf, then all elements must have been -inf (possibly due to masking).','line_number':91,'multiline':False]
['text':' We don't want (-inf - (-inf)) since that would give NaN.','line_number':92,'multiline':False]
['text':' If we don't have float around M_LOG2E the multiplication is done in fp64.','line_number':93,'multiline':False]
['text':' Instead of computing exp(x - max), we compute exp2(x * log_2(e) -','line_number':97,'multiline':False]
['text':' max * log_2(e)) This allows the compiler to use the ffma','line_number':98,'multiline':False]
['text':' instruction instead of fadd and fmul separately.','line_number':99,'multiline':False]
['text':' Apply the exp to all the elements.','line_number':105,'multiline':False]
['text':' If max is -inf, then all elements must have been -inf (possibly due to masking).','line_number':120,'multiline':False]
['text':' We don't want (-inf - (-inf)) since that would give NaN.','line_number':121,'multiline':False]
['text':' Instead of computing exp(x - max), we compute exp2(x * log_2(e) -','line_number':126,'multiline':False]
['text':' max * log_2(e)) This allows the compiler to use the ffma','line_number':127,'multiline':False]
['text':' instruction instead of fadd and fmul separately.','line_number':128,'multiline':False]
['text':' tensor has shape (ncol=(2, MMA_M), nrow=(2, MMA_N))','line_number':140,'multiline':False]
['text':' Without the "make_coord" we get wrong results','line_number':151,'multiline':False]
['text':' tensor has shape (ncol=(2, MMA_M), nrow=(2, MMA_N))','line_number':166,'multiline':False]
['text':' const int row_idx_offset = row_idx_offset_ + lane_id / 4;','line_number':169,'multiline':False]
['text':' if (cute::thread0()) {','line_number':191,'multiline':False]
['text':'     printf("mi = %d, i = %d, row_idx = %d, max_seqlen_k = %d\n", mi, i, row_idx, max_seqlen_k);','line_number':192,'multiline':False]
['text':'     print(tensor(make_coord(i, mi), _));','line_number':193,'multiline':False]
['text':'     // print(tensor(_, j + nj * size<1, 0>(tensor)));','line_number':194,'multiline':False]
['text':' }','line_number':195,'multiline':False]
['text':' Causal masking is equivalent to local masking with window_size_left = infinity and window_size_right = 0','line_number':204,'multiline':False]
['text':'HasWSLeft=','line_number':205,'multiline':True]
['text':' tensor has shape (ncol=(2, MMA_M), nrow=(2, MMA_N))','line_number':214,'multiline':False]
['text':' if (cute::thread0()) {','line_number':228,'multiline':False]
['text':'     printf("ni = %d, j = %d, col_idx = %d, max_seqlen_k = %d\n", ni, j, col_idx, max_seqlen_k);','line_number':229,'multiline':False]
['text':'     print(tensor(_, make_coord(j, ni)));','line_number':230,'multiline':False]
['text':'     // print(tensor(_, j + ni * size<1, 0>(tensor)));','line_number':231,'multiline':False]
['text':' }','line_number':232,'multiline':False]
['text':' tensor has shape (8, MMA_M, MMA_N / 2)','line_number':241,'multiline':False]
['text':' if (cute::thread0()) { printf("threshold2 = 0x%x\n", p_dropout_8bit_in_uint32_t); }','line_number':249,'multiline':False]
['text':' if (cute::thread(32, 0)) { printf("m = %d, n = %d, row = %d, col = %d\n", m, n, int(rowcol.x), int(rowcol.y));}','line_number':255,'multiline':False]
['text':' if (cute::thread0()) { printf("philox = %u, %d, %d, %d\n", random_uint4.x, random_uint4.y, random_uint4.z, random_uint4.w);}','line_number':257,'multiline':False]
['text':' Special implementation for 16-bit types: we duplicate the threshold to the','line_number':259,'multiline':False]
['text':' low and high 16 bits of a 32-bit value, then use the f16x2 comparison instruction','line_number':260,'multiline':False]
['text':' to get a mask. The low 16 bits of the mask will be either 0xffff or 0x0000,','line_number':261,'multiline':False]
['text':' and the high 16 bits will be either 0xffff or 0x0000, depending on whether','line_number':262,'multiline':False]
['text':' the random value is less than the threshold.','line_number':263,'multiline':False]
['text':' We then do a bit-wise AND between the mask and the original value (in 32-bit).','line_number':264,'multiline':False]
['text':' We're exploiting the fact that floating point comparison is equivalent to integer','line_number':265,'multiline':False]
['text':' comparison, since we're comparing unsigned integers whose top 8-bits are zero.','line_number':266,'multiline':False]
['text':' if (cute::thread0()) { printf("random = 0x%x, 0x%x, 0x%x, 0x%x\n", rnd_32[j * 4 + 0], rnd_32[j * 4 + 1], rnd_32[j * 4 + 2], rnd_32[j * 4 + 3]); }','line_number':276,'multiline':False]
['text':' if (cute::thread0()) { printf("tensor_uint32 = 0x%x, 0x%x, 0x%x, 0x%x\n", tensor_uint32(0), tensor_uint32(1), tensor_uint32(2), tensor_uint32(3)); }','line_number':277,'multiline':False]
['text':' if (cute::thread0()) { printf("tensor_uint32 = 0x%x, 0x%x, 0x%x, 0x%x\n", tensor_uint32(0), tensor_uint32(1), tensor_uint32(2), tensor_uint32(3)); }','line_number':284,'multiline':False]
['text':' if (cute::thread0()) { printf("tensor_uint32 = 0x%x, 0x%x, 0x%x, 0x%x\n", tensor_uint32(0), tensor_uint32(1), tensor_uint32(2), tensor_uint32(3)); }','line_number':294,'multiline':False]
['text':' // if ((threadIdx.x == 0) && (blockIdx.x == 0) && (blockIdx.y == 0)) {','line_number':297,'multiline':False]
['text':' //     printf("n = %d, ph  Philox: %u, %u, %u, %u\n", n, rnd_8.x, rnd_8.y, rnd_8.z, rnd_8.w);','line_number':298,'multiline':False]
['text':' // }','line_number':299,'multiline':False]
['text':' namespace pytorch_flash','line_number':304,'multiline':False]
