['text':'**************************************************************************************************
 * Copyright (c) 2017 - 2023 NVIDIA CORPORATION & AFFILIATES. All rights
 *reserved. SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 *LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *POSSIBILITY OF SUCH DAMAGE.
 *
 *************************************************************************************************','line_number':1,'multiline':True]
['text':'! \file
    \brief Template for a double-buffered threadblock-scoped GEMM kernel.
','line_number':32,'multiline':True]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':50,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':56,'multiline':False]
['text':'/ Structure to compute the matrix product targeting CUDA cores and SIMT math','line_number':58,'multiline':False]
['text':'/ instructions.','line_number':59,'multiline':False]
['text':'/ Size of the Gemm problem - concept: gemm::GemmShape<>','line_number':61,'multiline':False]
['text':'/ Iterates over tiles of A operand in global memory','line_number':63,'multiline':False]
['text':'  (concept: ReadableTileIterator | ForwardTileIterator |','line_number':64,'multiline':False]
['text':'  MaskedTileIterator)','line_number':65,'multiline':False]
['text':'/ Iterates over tiles of A operand in shared memory','line_number':67,'multiline':False]
['text':'/ (concept: WriteableTileIterator | RandomAccessTileIterator)','line_number':68,'multiline':False]
['text':'/ Cache operation for operand A','line_number':70,'multiline':False]
['text':'/ Iterates over tiles of B operand in global memory','line_number':72,'multiline':False]
['text':'  (concept: ReadableTileIterator | ForwardTileIterator |','line_number':73,'multiline':False]
['text':'  MaskedTileIterator)','line_number':74,'multiline':False]
['text':'/ Iterates over tiles of B operand in shared memory','line_number':76,'multiline':False]
['text':'/ (concept: WriteableTileIterator | RandomAccessTileIterator)','line_number':77,'multiline':False]
['text':'/ Cache operation for operand B','line_number':79,'multiline':False]
['text':'/ Data type of accumulator matrix','line_number':81,'multiline':False]
['text':'/ Data type of accumulator matrix','line_number':83,'multiline':False]
['text':'/ Policy describing tuning details (concept: MmaPolicy)','line_number':85,'multiline':False]
['text':'/ Number of stages,','line_number':87,'multiline':False]
['text':'/ Use zfill or predicate for out-of-bound cp.async','line_number':89,'multiline':False]
['text':'/ Upper boundon the K dimension','line_number':91,'multiline':False]
['text':'/ Used for partial specialization','line_number':93,'multiline':False]
['text':'/< Base class','line_number':97,'multiline':False]
['text':'/< Size of the Gemm problem - concept: gemm::GemmShape<>','line_number':99,'multiline':False]
['text':'/< Iterates over tiles of A operand in global memory','line_number':101,'multiline':False]
['text':'/< Iterates over tiles of B operand in global memory','line_number':103,'multiline':False]
['text':'/< Data type of accumulator matrix','line_number':105,'multiline':False]
['text':'/< Layout of accumulator matrix','line_number':107,'multiline':False]
['text':'/< Policy describing tuning details','line_number':109,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':' Dependent types','line_number':119,'multiline':False]
['text':'','line_number':120,'multiline':False]
['text':'/ Fragment of accumulator tile','line_number':122,'multiline':False]
['text':'/ Warp-level Mma','line_number':125,'multiline':False]
['text':'/ Minimum architecture is Sm80 to support cp.async','line_number':128,'multiline':False]
['text':'/ Complex transform on A operand','line_number':131,'multiline':False]
['text':'/ Complex transform on B operand','line_number':134,'multiline':False]
['text':'/ Internal structure exposed for introspection.','line_number':137,'multiline':False]
['text':'/ Number of cp.async instructions to load one stage of operand A','line_number':144,'multiline':False]
['text':'/ Number of cp.async instructions to load one stage of operand B','line_number':148,'multiline':False]
['text':'/ Number of stages','line_number':152,'multiline':False]
['text':'/ Number of cp.async instructions to load on group of operand A','line_number':155,'multiline':False]
['text':'/ Number of cp.async instructions to load on group of operand B','line_number':160,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':' Data members','line_number':178,'multiline':False]
['text':'','line_number':179,'multiline':False]
['text':'/ Iterator to write threadblock-scoped tile of A operand to shared memory','line_number':181,'multiline':False]
['text':'/ Iterator to write threadblock-scoped tile of B operand to shared memory','line_number':184,'multiline':False]
['text':' Set to `True` to ensure the accumulator will be zero outside the GEMM','line_number':189,'multiline':False]
['text':' footprint','line_number':190,'multiline':False]
['text':'/ Construct from tensor references','line_number':194,'multiline':False]
['text':'/< Shared storage needed for internal use by threadblock-scoped GEMM','line_number':197,'multiline':False]
['text':'/< ID within the threadblock','line_number':200,'multiline':False]
['text':'/< ID of warp','line_number':202,'multiline':False]
['text':'/< ID of each thread within a warp','line_number':204,'multiline':False]
['text':' Compute warp location within threadblock tile by mapping the warp_id to','line_number':211,'multiline':False]
['text':' three coordinates:','line_number':212,'multiline':False]
['text':'   _m: the warp's position within the threadblock along the M dimension','line_number':213,'multiline':False]
['text':'   _n: the warp's position within the threadblock along the N dimension','line_number':214,'multiline':False]
['text':'   _k: the warp's position within the threadblock along the K dimension','line_number':215,'multiline':False]
['text':' Add per-warp offsets in units of warp-level tiles','line_number':223,'multiline':False]
['text':'/< Shared storage needed for internal use by threadblock-scoped GEMM','line_number':231,'multiline':False]
['text':'/< ID within the threadblock','line_number':233,'multiline':False]
['text':'/< ID of warp','line_number':235,'multiline':False]
['text':'/< ID of each thread within a warp','line_number':237,'multiline':False]
['text':'/< iterator over A operand in global memory','line_number':259,'multiline':False]
['text':'/< iterator over B operand in global memory','line_number':261,'multiline':False]
['text':'/< iterator over A operand in global memory','line_number':278,'multiline':False]
['text':'/< iterator over B operand in global memory','line_number':280,'multiline':False]
['text':' Async Copy for operand A','line_number':301,'multiline':False]
['text':' Async Copy for operand B','line_number':337,'multiline':False]
['text':' Issue several complete stages','line_number':376,'multiline':False]
['text':' Async Copy for operand A','line_number':386,'multiline':False]
['text':' Async Copy for operand B','line_number':416,'multiline':False]
['text':' Move to the next stage','line_number':441,'multiline':False]
['text':' Defines the boundary of a stage of cp.async.','line_number':448,'multiline':False]
['text':'/ Perform a threadblock-scoped matrix multiply-accumulate','line_number':453,'multiline':False]
['text':'/< problem size of GEMM','line_number':456,'multiline':False]
['text':'/< destination accumulator tile','line_number':458,'multiline':False]
['text':'/< iterator over A operand in global memory','line_number':460,'multiline':False]
['text':'/< iterator over B operand in global memory','line_number':462,'multiline':False]
['text':'/< initial value of accumulator','line_number':464,'multiline':False]
['text':'','line_number':466,'multiline':False]
['text':' Prologue','line_number':467,'multiline':False]
['text':'','line_number':468,'multiline':False]
['text':' Perform accumulation in the 'd' output operand','line_number':488,'multiline':False]
['text':'','line_number':491,'multiline':False]
['text':' Clear the remaining tiles of SMEM. This is a functional requirement for','line_number':492,'multiline':False]
['text':' some kernels so that all accumulator elements outside the GEMM footprint','line_number':493,'multiline':False]
['text':' are zero.','line_number':494,'multiline':False]
['text':'','line_number':495,'multiline':False]
['text':'/ Iterator to write threadblock-scoped tile of A operand to shared','line_number':498,'multiline':False]
['text':'/ memory','line_number':499,'multiline':False]
['text':' Async Copy for operand A','line_number':507,'multiline':False]
['text':'/ Iterator to write threadblock-scoped tile of B operand to shared','line_number':519,'multiline':False]
['text':'/ memory','line_number':520,'multiline':False]
['text':' Async Copy for operand B','line_number':527,'multiline':False]
['text':' Waits until kStages-2 stages have committed.','line_number':540,'multiline':False]
['text':' Pair of fragments used to overlap shared memory loads and math','line_number':544,'multiline':False]
['text':' instructions','line_number':545,'multiline':False]
['text':' tf32x3 kernels use staging accumulation. warp_mma uses a temporary','line_number':574,'multiline':False]
['text':' accumulator and this temporary accumulator is added to the final','line_number':575,'multiline':False]
['text':' accumulator once in every mainloop iteration.','line_number':576,'multiline':False]
['text':'','line_number':590,'multiline':False]
['text':' Mainloop','line_number':591,'multiline':False]
['text':'','line_number':592,'multiline':False]
['text':'','line_number':596,'multiline':False]
['text':' Loop over GEMM K dimension','line_number':597,'multiline':False]
['text':'','line_number':598,'multiline':False]
['text':' Computes a warp-level GEMM on data held in shared memory','line_number':600,'multiline':False]
['text':' Each "warp_mma_k" refers to a warp-level matrix multiply-accumulate','line_number':601,'multiline':False]
['text':' Load warp-level tiles from shared memory, wrapping to k offset if','line_number':605,'multiline':False]
['text':' this is the last group as the case may be.','line_number':606,'multiline':False]
['text':' In case of a non-circular buffer ("kSmemContainsEntireMat")','line_number':613,'multiline':False]
['text':' make sure we don't load out of bounds data.','line_number':614,'multiline':False]
['text':' Issue global->shared copies for the this stage','line_number':658,'multiline':False]
['text':' Inserts a memory fence between stages of cp.async instructions.','line_number':688,'multiline':False]
['text':' Waits until kStages-2 stages have committed.','line_number':691,'multiline':False]
['text':' Move to the next stage','line_number':695,'multiline':False]
['text':' Add negative offsets to return iterators to the 'start' of the','line_number':702,'multiline':False]
['text':' circular buffer in shared memory','line_number':703,'multiline':False]
['text':' Do any conversions feeding the first stage at the end of the loop so','line_number':732,'multiline':False]
['text':' we can start right away on mma instructions','line_number':733,'multiline':False]
['text':' commit and drain all pending and predicated cp.async pnz from the GEMM','line_number':753,'multiline':False]
['text':' mainloop','line_number':754,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':762,'multiline':False]
['text':' namespace threadblock','line_number':764,'multiline':False]
['text':' namespace gemm','line_number':765,'multiline':False]
['text':' namespace cutlass','line_number':766,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':768,'multiline':False]
