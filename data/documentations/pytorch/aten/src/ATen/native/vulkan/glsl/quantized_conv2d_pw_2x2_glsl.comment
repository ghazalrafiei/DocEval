['text':'
 * TILE_SIZE = (2, 2, 1)
 * WEIGHT_STORAGE = TEXTURE_3D
 * BIAS_STORAGE = TEXTURE_3D
 ','line_number':5,'multiline':True]
['text':'
 * Output Image
 ','line_number':11,'multiline':True]
['text':'
 * Input Textures
 ','line_number':16,'multiline':True]
['text':'
 * Params Buffer
 ','line_number':23,'multiline':True]
['text':' quantization scales, xyzw corresponds to output, input, kernel, bias','line_number':27,'multiline':False]
['text':' quantization zero points, xyzw corresponds to output, input, kernel, bias','line_number':29,'multiline':False]
['text':' extents of the output texture','line_number':31,'multiline':False]
['text':' extents of the input texture','line_number':33,'multiline':False]
['text':' size of the overlay region of the kernel','line_number':35,'multiline':False]
['text':' width and height of the kernel','line_number':37,'multiline':False]
['text':' convolution parameters','line_number':39,'multiline':False]
['text':'
 * Local Work Group
 ','line_number':47,'multiline':True]
['text':'
 * Dequantizes a float texel based on a scale and zero point.
 ','line_number':52,'multiline':True]
['text':'
 * Quantizes a float texel based on a scale and zero point.
 ','line_number':59,'multiline':True]
['text':'
 * Computes a 2D quantized pointwise convolution. Each shader invocation
 * calculates the output of a 2x2 output tile. Currently this is implemented in
 * a naive way, where inputs are dequantized upon reading in, and requantized
 * upon writing out.
 ','line_number':66,'multiline':True]
['text':' Determine the output positions that will be written to.','line_number':75,'multiline':False]
['text':' +--------+--------+','line_number':76,'multiline':False]
['text':' | pos[0] | pos[1] |','line_number':77,'multiline':False]
['text':' +--------+--------+','line_number':78,'multiline':False]
['text':' | pos[2] | pos[3] |','line_number':79,'multiline':False]
['text':' +--------+--------+','line_number':80,'multiline':False]
['text':' If the top left position is out of bounds, then this invocation will have','line_number':87,'multiline':False]
['text':' no work to do.','line_number':88,'multiline':False]
['text':' Compute the index of the input texture that needs to be loaded for each','line_number':93,'multiline':False]
['text':' output position. Note that negative indices can be produced indicating that','line_number':94,'multiline':False]
['text':' the top-left element is in a region added by padding.','line_number':95,'multiline':False]
['text':' Since the kernel is 1x1, we only have to loop over the depth dimension.','line_number':110,'multiline':False]
['text':' During prepacking, the weight tensor has been permuted so that the','line_number':113,'multiline':False]
['text':' channel (IC) dim is along the x axis, and the batch (OC) dim is along','line_number':114,'multiline':False]
['text':' the z axis.','line_number':115,'multiline':False]
['text':' To explain the calculations below, the contents one in_tex and the','line_number':141,'multiline':False]
['text':' group of 4 texels loaded from uKernel are shown:','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':'   in_tex               uKernel','line_number':144,'multiline':False]
['text':'    -x->                   ---x--->','line_number':145,'multiline':False]
['text':'   +---+              +----+----+----+----+','line_number':146,'multiline':False]
['text':' ^ | w |           ^  | D0 | D1 | D2 | D3 |','line_number':147,'multiline':False]
['text':' | +---+           |  +----+----+----+----+','line_number':148,'multiline':False]
['text':' | | z |           |  | C0 | C1 | C2 | C3 |','line_number':149,'multiline':False]
['text':' z +---+           z  +----+----+----+----+','line_number':150,'multiline':False]
['text':' | | y |           |  | B0 | B2 | B2 | B3 |','line_number':151,'multiline':False]
['text':' | +---+           |  +----+----+----+----+','line_number':152,'multiline':False]
['text':'   | x |              | A0 | A1 | A2 | A3 |','line_number':153,'multiline':False]
['text':'   +---+              +----+----+----+----+','line_number':154,'multiline':False]
['text':'','line_number':155,'multiline':False]
['text':' In the uKernel graphic, cells sharing the same letter are from','line_number':156,'multiline':False]
['text':' the same batch/output channel index, and the number denotes a unique','line_number':157,'multiline':False]
['text':' channel index. To calculate the output texel, the following','line_number':158,'multiline':False]
['text':' calculation is performed:','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':161,'multiline':False]
['text':'  | x | | D0 |   | y | | D1 |   | z | | D2 |   | w | | D3 |','line_number':162,'multiline':False]
['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':163,'multiline':False]
['text':'  | x | | C0 |   | y | | C1 |   | z | | C2 |   | w | | C3 |','line_number':164,'multiline':False]
['text':'  +---+X+----+ + +---+X+----+ + +---+X+----+ + +---+X+----+','line_number':165,'multiline':False]
['text':'  | x | | B0 |   | y | | B1 |   | z | | B2 |   | w | | B3 |','line_number':166,'multiline':False]
['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':167,'multiline':False]
['text':'  | x | | A0 |   | y | | A1 |   | z | | A2 |   | w | | A3 |','line_number':168,'multiline':False]
['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':169,'multiline':False]
['text':'','line_number':170,'multiline':False]
['text':'  which is what is expressed in the following calculations. This is done','line_number':171,'multiline':False]
['text':'  for each output position.','line_number':172,'multiline':False]
