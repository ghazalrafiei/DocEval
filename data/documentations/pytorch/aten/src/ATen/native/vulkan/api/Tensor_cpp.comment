['text':'*
 * Determines an appropriate GPU Memory Layout qualifier based on the the
 * StorageType requested and the c10::MemoryFormat specified.
 ','line_number':11,'multiline':True]
['text':' For texture storage, always return a memory layout that packs the channels','line_number':28,'multiline':False]
['text':' dimension. for now. With the way texture storage currently works, for 2-dim','line_number':29,'multiline':False]
['text':' tensors, a channel dimension is added, as well as 3 channels of zero','line_number':30,'multiline':False]
['text':' padding resulting in a final shape of {4, H, W}. For 1-dim tensors, it is','line_number':31,'multiline':False]
['text':' unsqueezed to size {1, 1, L} and 3 channels of zero padding are added to','line_number':32,'multiline':False]
['text':' produce a final size of {4, 1, L}. This is to ensure that physical texture','line_number':33,'multiline':False]
['text':' positions correspond directly to logical tensor coordinates (so','line_number':34,'multiline':False]
['text':' texelFetch(ivec3(x, y, 0), 0) will correspond to tensor[y, x].','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':' TODO(ssjia): have 2D and 1D tensors use TENSOR_WIDTH_PACKED by default.','line_number':37,'multiline':False]
['text':'
 * Calculates the strides of a contiguous tensor. empty_tensor_restride from
 * TensorImpl.h was used as a reference.
 ','line_number':41,'multiline':True]
['text':'
 * Calculates the strides of a tensor based on the sizes and memory format. Note
 * that strides are only valid for vTensors that are backed by buffer storage;
 * if texture storage is used then the strides are invalid and set to zeros.
 ','line_number':85,'multiline':True]
['text':'
 * When stored on the GPU, one dimension will be aligned to the next multiple of
 * 4 in order to take advantage of vec4 data types. The dimension that is
 * packed is denoted by the GPUMemoryLayout. This function adjusts one of
 * the dimensions based on the desired memory format and storage type and
 * returns a sizes array describing the dimensions of the memory used to store
 * the tensor data on the GPU.
 ','line_number':115,'multiline':True]
['text':' For buffer formats, the innermost dim (i.e. where the stride is 1) will be','line_number':131,'multiline':False]
['text':' aligned up. Which dim is the innermost is described by the GPUMemoryLayout.','line_number':132,'multiline':False]
['text':' If StorageType is not BUFFER, that means TEXTURE storage will be used. For','line_number':160,'multiline':False]
['text':' texture storage, the returned gpu_sizes will be at least 3 dimensional to','line_number':161,'multiline':False]
['text':' represent the extents of the image texture that will be allocated. For 4','line_number':162,'multiline':False]
['text':' dimensional tensors, The gpu_sizes will also be 4 dimensional in order to','line_number':163,'multiline':False]
['text':' preserve the size of the batch dim to facilitate conversion between logical','line_number':164,'multiline':False]
['text':' tensor coordinates and physical texel positions. Based on the GPU memory','line_number':165,'multiline':False]
['text':' layout, whichever dimension is packed will be aligned up to the next','line_number':166,'multiline':False]
['text':' multiple of 4, as each texel shall store 4 consecutive elements from the','line_number':167,'multiline':False]
['text':' packed dimension.','line_number':168,'multiline':False]
['text':' Channel dim will be be aligned to the next multiple of 4','line_number':177,'multiline':False]
['text':' 0-dimension tensors only has 1 element. Hence it is always {4, 1,','line_number':182,'multiline':False]
['text':' 1} when stored as image textures. Channels need to be multiple of','line_number':183,'multiline':False]
['text':' 4 due to packing.','line_number':184,'multiline':False]
['text':' 1-dimension tensors are interpreted as 3-dimensional tensors with','line_number':203,'multiline':False]
['text':' size {1, 1, L} when stored as image textures, thus channel','line_number':204,'multiline':False]
['text':' packing is valid even though the original tensor does not','line_number':205,'multiline':False]
['text':' technically have a channels dimension. In this mode, 3 channels','line_number':206,'multiline':False]
['text':' of zero padding are added to the unsqueezed size of {1, 1, L}','line_number':207,'multiline':False]
['text':' producing a final shape of {4, 1, L}.','line_number':208,'multiline':False]
['text':' 2-dimension tensors are interpreted as 3-dimensional tensors with','line_number':231,'multiline':False]
['text':' size {1, H, W} when stored as image textures, thus channel','line_number':232,'multiline':False]
['text':' packing is valid even though the original tensor does not','line_number':233,'multiline':False]
['text':' technically have a channels dimension. In this mode, 3 channels','line_number':234,'multiline':False]
['text':' of zero padding are added to the unsqueezed size of {1, H, W}','line_number':235,'multiline':False]
['text':' producing a final shape of {4, H, W}.','line_number':236,'multiline':False]
['text':'
 * Creates a uvec3 denoting the extents of the image texture that will be
 * created to store a tensor of a given size.
 ','line_number':297,'multiline':True]
['text':' image extents do not apply to buffer storage','line_number':308,'multiline':False]
['text':' namespace','line_number':360,'multiline':False]
['text':'','line_number':362,'multiline':False]
['text':' vTensor','line_number':363,'multiline':False]
['text':'','line_number':364,'multiline':False]
['text':' Calculate sizes and strides','line_number':374,'multiline':False]
['text':' Vulkan uniform buffer containing sizes and stride info','line_number':379,'multiline':False]
['text':' Construct Tensor storage','line_number':385,'multiline':False]
['text':' Calculate sizes and strides','line_number':403,'multiline':False]
['text':' Vulkan uniform buffer containing sizes and stride info','line_number':408,'multiline':False]
['text':' Quantization params','line_number':414,'multiline':False]
['text':' Construct Tensor storage','line_number':418,'multiline':False]
['text':'','line_number':495,'multiline':False]
['text':' vTensorStorage','line_number':496,'multiline':False]
['text':'','line_number':497,'multiline':False]
['text':' Return an empty VulkanImage by default','line_number':526,'multiline':False]
['text':' Return an empty VulkanBuffer if Buffer storage is not used','line_number':553,'multiline':False]
['text':' Get last stage access','line_number':592,'multiline':False]
['text':' Check for RAW','line_number':649,'multiline':False]
['text':' namespace vulkan','line_number':675,'multiline':False]
['text':' namespace native','line_number':676,'multiline':False]
['text':' namespace at','line_number':677,'multiline':False]
