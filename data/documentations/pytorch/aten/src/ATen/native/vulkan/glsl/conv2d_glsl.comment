['text':'
 * TILE_SIZE = (1, 1, 1)
 * WEIGHT_STORAGE = TEXTURE_2D
 * BIAS_STORAGE = TEXTURE_2D
 * REGISTER_FOR = ('conv2d', ['catchall'])
 ','line_number':5,'multiline':True]
['text':'
 * Output Image
 ','line_number':14,'multiline':True]
['text':'
 * Input Textures
 ','line_number':19,'multiline':True]
['text':'
 * Params Buffer
 ','line_number':26,'multiline':True]
['text':' extents of the output texture','line_number':30,'multiline':False]
['text':' extents of the input texture','line_number':32,'multiline':False]
['text':' size of the overlay region of the kernel','line_number':34,'multiline':False]
['text':' width and height of the kernel','line_number':36,'multiline':False]
['text':' convolution parameters','line_number':38,'multiline':False]
['text':'
 * Local Work Group
 ','line_number':46,'multiline':True]
['text':'
 * Computes a 2D convolution. Each shader invocation calculates the output at
 * a single output location.
 ','line_number':51,'multiline':True]
['text':' Return if this global position is outside output texture bounds','line_number':58,'multiline':False]
['text':' Compute the index of the top-left element of the overlay region. Note that','line_number':63,'multiline':False]
['text':' negative indices can be produced indicating that the top-left element is in','line_number':64,'multiline':False]
['text':' a region added by padding.','line_number':65,'multiline':False]
['text':' Compute the start and end of the input indices to load. Padding is assumed','line_number':68,'multiline':False]
['text':' to be constant 0 padding, so any reads from the padding region is skipped.','line_number':69,'multiline':False]
['text':' Compute the start of the kernel based on how far we are skipping ahead when','line_number':72,'multiline':False]
['text':' reading the input. Note that these are "canonical" indices.','line_number':73,'multiline':False]
['text':' During prepacking, the weight tensor was rearranged in order to optimize','line_number':75,'multiline':False]
['text':' for data access linearity in this shader. Therefore we need to adjust the','line_number':76,'multiline':False]
['text':' canonical coordinates to the corresponding index in the rearranged weight','line_number':77,'multiline':False]
['text':' tensor. the x coordinate is multipled by 4 since each group of 4 channels','line_number':78,'multiline':False]
['text':' is folded into the X axis. The y coordinate is offset based on the z','line_number':79,'multiline':False]
['text':' coordinate because the 2D planes were stacked atop each other vertically.','line_number':80,'multiline':False]
['text':' Perform the convolution by iterating over the overlay region','line_number':84,'multiline':False]
['text':' To explain the calculation below, the contents of in_tex and the','line_number':94,'multiline':False]
['text':' group of 4 texels loaded from uKernel are shown:','line_number':95,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':'   in_tex               uKernel','line_number':97,'multiline':False]
['text':'    -x->                   ---x--->','line_number':98,'multiline':False]
['text':'   +---+              +----+----+----+----+','line_number':99,'multiline':False]
['text':' ^ | w |           ^  | D0 | D1 | D2 | D3 |','line_number':100,'multiline':False]
['text':' | +---+           |  +----+----+----+----+','line_number':101,'multiline':False]
['text':' | | z |           |  | C0 | C1 | C2 | C3 |','line_number':102,'multiline':False]
['text':' z +---+           z  +----+----+----+----+','line_number':103,'multiline':False]
['text':' | | y |           |  | B0 | B2 | B2 | B3 |','line_number':104,'multiline':False]
['text':' | +---+           |  +----+----+----+----+','line_number':105,'multiline':False]
['text':'   | x |              | A0 | A1 | A2 | A3 |','line_number':106,'multiline':False]
['text':'   +---+              +----+----+----+----+','line_number':107,'multiline':False]
['text':'','line_number':108,'multiline':False]
['text':' In the uKernel graphic, cells sharing the same letter are from','line_number':109,'multiline':False]
['text':' the same batch/output channel index, and the number denotes a unique','line_number':110,'multiline':False]
['text':' channel index. To calculate the output texel, the following','line_number':111,'multiline':False]
['text':' calculation is performed:','line_number':112,'multiline':False]
['text':'','line_number':113,'multiline':False]
['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':114,'multiline':False]
['text':'  | x | | D0 |   | y | | D1 |   | z | | D2 |   | w | | D3 |','line_number':115,'multiline':False]
['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':116,'multiline':False]
['text':'  | x | | C0 |   | y | | C1 |   | z | | C2 |   | w | | C3 |','line_number':117,'multiline':False]
['text':'  +---+X+----+ + +---+X+----+ + +---+X+----+ + +---+X+----+','line_number':118,'multiline':False]
['text':'  | x | | B0 |   | y | | B1 |   | z | | B2 |   | w | | B3 |','line_number':119,'multiline':False]
['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':120,'multiline':False]
['text':'  | x | | A0 |   | y | | A1 |   | z | | A2 |   | w | | A3 |','line_number':121,'multiline':False]
['text':'  +---+ +----+   +---+ +----+   +---+ +----+   +---+ +----+','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':'  which is what is expressed in the following calculations.','line_number':124,'multiline':False]
