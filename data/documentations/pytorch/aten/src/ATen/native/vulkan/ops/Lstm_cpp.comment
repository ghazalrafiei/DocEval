['text':'','line_number':21,'multiline':False]
['text':' input_vk: input tensor of shape (L, N, H_in) when batch_first=False or','line_number':22,'multiline':False]
['text':' (N, L, H_in) when batch_first=True containing the features of the input','line_number':23,'multiline':False]
['text':' sequence','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':' hx_vk: tensor of shape (D * num_layers, N, H_out) containing the initial','line_number':26,'multiline':False]
['text':' hidden state for each element in the input sequence.','line_number':27,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':' cx_vk: tensor of shape (D * num_layers, N, H_cell) containing the initial','line_number':29,'multiline':False]
['text':' cell state for each element in the input sequence.','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' output: tensor of shape (L, N, D * H_out) when batch_first=False or','line_number':32,'multiline':False]
['text':' (N, L, D * H_out) when batch_first=True, containing the output features','line_number':33,'multiline':False]
['text':' (h_t) from the last layer of the LSTM, for each t','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' h_n: tensor of shape (D * num_layers, N, H_out) containing the final hidden','line_number':36,'multiline':False]
['text':' state for each element in the sequence.','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' c_n: tensor of shape (D * num_layers, N, H_cell) containing the final cell','line_number':39,'multiline':False]
['text':' state for each element in the sequence.','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':'  where','line_number':42,'multiline':False]
['text':'    L = sequence length','line_number':43,'multiline':False]
['text':'    N = batch size','line_number':44,'multiline':False]
['text':'    D = 2 if bidirectional=True otherwise 1','line_number':45,'multiline':False]
['text':'    H_in = input_size (# of expected features in the input x)','line_number':46,'multiline':False]
['text':'    H_cell = hidden_size (# of features in the hidden state h)','line_number':47,'multiline':False]
['text':'    H_out = hidden_size','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':' input sequence (vulkan)','line_number':51,'multiline':False]
['text':' initial hidden state (vulkan) & initial cell state (vulkan)','line_number':53,'multiline':False]
['text':' weights/biases (cpu)','line_number':54,'multiline':False]
['text':' hidden state output','line_number':95,'multiline':False]
['text':' cell state output','line_number':96,'multiline':False]
['text':' reshape to 2D due to Vulkan at::mm op accepts only 2D','line_number':98,'multiline':False]
['text':' extract each hidden state and squeeze into 2D dim','line_number':105,'multiline':False]
['text':' next input','line_number':149,'multiline':False]
['text':' 2D to 4D for cat op','line_number':151,'multiline':False]
['text':' 2D to 4D for cat op','line_number':153,'multiline':False]
['text':' USE_VULKAN_API ','line_number':170,'multiline':True]
['text':' namespace','line_number':172,'multiline':False]
['text':' weights/biases (cpu)','line_number':230,'multiline':False]
['text':' input sequence (vulkan)','line_number':323,'multiline':False]
['text':' initial hidden state (vulkan)','line_number':324,'multiline':False]
['text':' initial cell state (vulkan)','line_number':325,'multiline':False]
['text':' (b_ii, w_ii), (b_hi, w_hi), (b_if, w_if), (b_hf, w_hf),','line_number':351,'multiline':False]
['text':' (b_ig, w_ig), (b_hg, w_hg), (b_io, w_io), (b_ho, w_ho)','line_number':352,'multiline':False]
['text':' hidden state output','line_number':354,'multiline':False]
['text':' cell state output','line_number':355,'multiline':False]
['text':' reshape to 2D due to Vulkan at::mm op accepts only 2D','line_number':357,'multiline':False]
['text':' extract each hidden state and squeeze into 2D dim','line_number':364,'multiline':False]
['text':' cxt_ii->run(x, 1.0f, 1.0f) + cxt_hi->run(h, 1.0f, 1.0f));','line_number':398,'multiline':False]
['text':' cxt_if->run(x, 1.0f, 1.0f) + cxt_hf->run(h, 1.0f, 1.0f));','line_number':401,'multiline':False]
['text':' cxt_ig->run(x, 1.0f, 1.0f) + cxt_hg->run(h, 1.0f, 1.0f));','line_number':404,'multiline':False]
['text':' cxt_io->run(x, 1.0f, 1.0f) + cxt_ho->run(h, 1.0f, 1.0f));','line_number':407,'multiline':False]
['text':' next input','line_number':410,'multiline':False]
['text':' 2D to 4D for cat op','line_number':412,'multiline':False]
['text':' 2D to 4D for cat op','line_number':414,'multiline':False]
['text':' namespace ops','line_number':425,'multiline':False]
['text':' namespace vulkan','line_number':426,'multiline':False]
['text':' namespace native','line_number':427,'multiline':False]
['text':' namespace at','line_number':428,'multiline':False]
