['text':' produce scalar output when reducing or input is 1d','line_number':77,'multiline':False]
['text':' namespace meta','line_number':134,'multiline':False]
['text':' Returns a contiguous tensor if the source tensor','line_number':140,'multiline':False]
['text':' is defined. Otherwise returns the undefined','line_number':141,'multiline':False]
['text':' source tensor unmodified.','line_number':142,'multiline':False]
['text':' Returns the address of the first element of a tensor','line_number':147,'multiline':False]
['text':' or nullptr if the tensor is undefined.','line_number':148,'multiline':False]
['text':' produce scalar outputs for the reduction case','line_number':204,'multiline':False]
['text':' Here target (and input) have zero elements','line_number':208,'multiline':False]
['text':' Mean reduction on empty tensors produces NaN. See the discussion in','line_number':209,'multiline':False]
['text':' https://github.com/pytorch/pytorch/pull/64572#issuecomment-926504162','line_number':210,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':237,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':239,'multiline':False]
['text':' write result to output tensors','line_number':291,'multiline':False]
['text':' assumed to be int64','line_number':316,'multiline':False]
['text':' assumed to be uint64','line_number':431,'multiline':False]
['text':' namespace','line_number':445,'multiline':False]
['text':' Expand weight to the correct number of dims for broadcasting with input / target','line_number':509,'multiline':False]
['text':' Expand weight to the correct number of dims for broadcasting with input / target','line_number':565,'multiline':False]
['text':' we will collect weights from 0 index which is always valid','line_number':584,'multiline':False]
['text':' and mask them out if they are ignored','line_number':585,'multiline':False]
['text':' TODO: This code can path can be removed if #61309 is resolved','line_number':592,'multiline':False]
['text':' loss is normalized by the weights to be consistent with','line_number':593,'multiline':False]
['text':' nll_loss_nd','line_number':594,'multiline':False]
['text':' Assume soft targets when input and target shapes are the same','line_number':625,'multiline':False]
['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':630,'multiline':False]
['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':637,'multiline':False]
['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':654,'multiline':False]
['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':663,'multiline':False]
['text':' Duplicate of above code for non-symbolic ints. Kept for BC purposes and to minimize breakages.','line_number':670,'multiline':False]
['text':' See [Note: hacky wrapper removal for optional tensor]','line_number':672,'multiline':False]
['text':' dim == 3 or dim > 4','line_number':708,'multiline':False]
['text':' support empty batches, see #15870','line_number':723,'multiline':False]
['text':' namespace native','line_number':745,'multiline':False]
['text':' namespace at','line_number':746,'multiline':False]
