['text':' Steps to add op for MPS backend:','line_number':10,'multiline':False]
['text':' 1. Register the op in aten/src/ATen/native/native_functions.yaml with the "MPS" dispatch key','line_number':11,'multiline':False]
['text':' 2. Define the function interface for the MPS backend similar to other','line_number':12,'multiline':False]
['text':'    backends depending on whether its structured or non-structured','line_number':13,'multiline':False]
['text':' 3. Add boiler-plate error checking code as expected for the Op','line_number':14,'multiline':False]
['text':' 4. The code structure roughly follows the pattern','line_number':15,'multiline':False]
['text':'    a) get the MPS stream handle to encode work onto','line_number':16,'multiline':False]
['text':'    b) get an instance of MPSGraphCache and create a key unique to the Graph','line_number':17,'multiline':False]
['text':'       needed for implementing this Op. Any shape, dataType or parameter','line_number':18,'multiline':False]
['text':'       passed to the MPSGraph during its construction will need to be included','line_number':19,'multiline':False]
['text':'       here.','line_number':20,'multiline':False]
['text':'    c) Create the graph using make_mps_graph() and add operations to the','line_number':21,'multiline':False]
['text':'       instance of MPSGraph. This is if the Cache->lookup() fails.','line_number':22,'multiline':False]
['text':'    d) Store the MPSGraphTensors for inputs and output which are needed at','line_number':23,'multiline':False]
['text':'       runtime.','line_number':24,'multiline':False]
['text':'    e) Use the CachedGraph instance's inputs and output to create Placeholders','line_number':25,'multiline':False]
['text':'       You will need to pass in Tensor to create MPSGraphTensorData objects.','line_number':26,'multiline':False]
['text':'    f) Using MPSGraphTensor and MPSGraphTensorData instances create a feeds','line_number':27,'multiline':False]
['text':'       dictionary.','line_number':28,'multiline':False]
['text':'    g) Then call runMPSGraph() with input params and return the result.','line_number':29,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':' the default value of `m` equals to `n`','line_number':35,'multiline':False]
['text':' This is one example of boiler-plate error checking, taking after CPU/CUDA counterparts','line_number':42,'multiline':False]
['text':' Handle empty outputs','line_number':49,'multiline':False]
['text':' Get MPS stream','line_number':53,'multiline':False]
['text':' workaround for unsupported bool constant on macOS 12.','line_number':59,'multiline':False]
['text':' Derive from MPSCachedGraph','line_number':63,'multiline':False]
['text':' This structure is used to cache an MPSGraph with certain keys, so that we don't have to compile the same MPSGraph','line_number':64,'multiline':False]
['text':' time and time again for the same operation The keys of this structure are based on the inputs and outputs needed','line_number':65,'multiline':False]
['text':' for the operation here, we don't have any input tensors, just an output tensor.','line_number':66,'multiline':False]
['text':' If the operator to be added is unary or binary, instead of creating a new CachedGraph struct yourself, please','line_number':67,'multiline':False]
['text':' consider using `MPSUnaryCachedGraph` or `MPSBinaryCachedGraph` and their corresponding Grad versions in','line_number':68,'multiline':False]
['text':' `OperationUtils.h`.','line_number':69,'multiline':False]
['text':' A key is used to identify the MPSGraph which was created once, and can be reused if the parameters, data types','line_number':76,'multiline':False]
['text':' etc match the earlier created MPSGraph','line_number':77,'multiline':False]
['text':' Here we can call the MPSGraph API needed to execute the operation.','line_number':84,'multiline':False]
['text':' The API details can be found here:','line_number':85,'multiline':False]
['text':' https://developer.apple.com/documentation/metalperformanceshadersgraph/mpsgraph','line_number':86,'multiline':False]
['text':' Create placeholders which use the keys of the CachedGraph to create inputs and outputs of the operation','line_number':95,'multiline':False]
['text':' Create dictionary of inputs/feeds and outputs/results','line_number':98,'multiline':False]
['text':' In this case, there are no inputs, so the feeds are nil','line_number':99,'multiline':False]
['text':' Run the graph','line_number':105,'multiline':False]
['text':' namespace at::native','line_number':112,'multiline':False]
