['text':'  Copyright Â© 2022 Apple Inc.','line_number':1,'multiline':False]
['text':' Pooling ops (1D/2D forward and backward Max and Average pooling)','line_number':35,'multiline':False]
['text':' for max_pool2d_with_indices() we cannot pass ChannelsLast (i.e., NHWC) to 'desc.dataLayout' in MPSGraph.','line_number':62,'multiline':False]
['text':' Because the returned indices will be selected based on NHWC memory layout which will','line_number':63,'multiline':False]
['text':' be incompatible with the PyTorch's global NCHW layout.','line_number':64,'multiline':False]
['text':' the output and indices are 'empty', so we could avoid unnecessary gatherView on empty tensors','line_number':124,'multiline':False]
['text':' by simply restriding them (instead of calling the costly Contiguous()).','line_number':125,'multiline':False]
['text':' workaround for issue #103039644: mismatching MPS vs. CPU results','line_number':143,'multiline':False]
['text':' when both ceil_mode and count_include_pad are True','line_number':144,'multiline':False]
['text':' with desc.dataLayout = NHWC (i.e., ChannelsLast), the results need to be converted back to NCHW','line_number':188,'multiline':False]
['text':' in case of ChannelsLast we don't perform gather() in placeholder to avoid implicit conversion to NCHW','line_number':194,'multiline':False]
['text':' custom divisor isn't supported natively in avgPooling2DWithSourceTensor().','line_number':249,'multiline':False]
['text':' For Float input type, we work around it by multiplying divisor after avgPooling2D.','line_number':250,'multiline':False]
['text':' However, for Long type, the accumulated error when multiplying the divisor','line_number':251,'multiline':False]
['text':' would produce results that mismatch CPU results.','line_number':252,'multiline':False]
['text':' workaround for issue #103039644: mismatching MPS vs. CPU results','line_number':279,'multiline':False]
['text':' when both ceilMode and includeZeroPadToAverage are True','line_number':280,'multiline':False]
['text':' workaround: custom divisor isn't supported by MPS backend, so we scale manually','line_number':304,'multiline':False]
['text':' backward pass','line_number':311,'multiline':False]
['text':' namespace mps','line_number':351,'multiline':False]
['text':' namespace at::native','line_number':531,'multiline':False]
