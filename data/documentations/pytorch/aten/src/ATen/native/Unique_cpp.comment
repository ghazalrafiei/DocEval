['text':' Returns unique elements of input tensor.','line_number':1,'multiline':False]
['text':' This unique implementation when dtype is bool is mapped','line_number':33,'multiline':False]
['text':' from UniqueCub.cu which uses a reduction to find the number of','line_number':34,'multiline':False]
['text':' true values.','line_number':35,'multiline':False]
['text':' write output and counts','line_number':83,'multiline':False]
['text':' check whether the element on index i is `unique`,','line_number':110,'multiline':False]
['text':' in the sorted sequence, the 1st element is always true.','line_number':111,'multiline':False]
['text':'','line_number':112,'multiline':False]
['text':' NaN is propagated to the rear in a sorted sequence,','line_number':113,'multiline':False]
['text':' consider a sorted sequence of','line_number':114,'multiline':False]
['text':'   {1.0, 1.0, 2.0, 2.0, NaN, NaN, NaN}','line_number':115,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':' a. `equal_nan` == true will give:','line_number':117,'multiline':False]
['text':'   {T,   F,   T,   F,   T,   F,   F  }','line_number':118,'multiline':False]
['text':'','line_number':119,'multiline':False]
['text':' b. `equal_nan` == false will give:','line_number':120,'multiline':False]
['text':'   {T,   F,   T,   F,   T,   T,   T  }','line_number':121,'multiline':False]
['text':'','line_number':122,'multiline':False]
['text':' NB: Unique implementation using sort','line_number':143,'multiline':False]
['text':'','line_number':144,'multiline':False]
['text':' The whole algo is taken from NumPy at numpy/lib/arraysetops.py','line_number':145,'multiline':False]
['text':' which firstly do sort on the input sequence and then convert','line_number':146,'multiline':False]
['text':' it to consecutive unique.','line_number':147,'multiline':False]
['text':'','line_number':148,'multiline':False]
['text':' Also improvement has been made upon the NumPy version: parallel','line_number':149,'multiline':False]
['text':' `inverse_indices` and `counts` computation in a fused loop,','line_number':150,'multiline':False]
['text':' which made this part almost a free launch.','line_number':151,'multiline':False]
['text':'','line_number':152,'multiline':False]
['text':' This kernel also implements a `equal_nan` flag which has same','line_number':153,'multiline':False]
['text':' function as NumPy's unique. Currently this is always disabled.','line_number':154,'multiline':False]
['text':'','line_number':155,'multiline':False]
['text':' TODO: add `bool` specialization, use similar approach as UniqueCub','line_number':156,'multiline':False]
['text':'','line_number':157,'multiline':False]
['text':' index of first unique in each consecutive section','line_number':178,'multiline':False]
['text':' this is used to compute counts for parallelization purpose','line_number':179,'multiline':False]
['text':' original behavior with unique on scalar tensor','line_number':182,'multiline':False]
['text':' is to return a output size of ([1]), `flatten` here will do the job','line_number':183,'multiline':False]
['text':' calculate unique count from each thread','line_number':198,'multiline':False]
['text':' calculate thread offset in output and','line_number':208,'multiline':False]
['text':' `unique_count` records total count of uniques at last','line_number':209,'multiline':False]
['text':' do diff to get count','line_number':258,'multiline':False]
['text':' check how many zero dimensions exist','line_number':367,'multiline':False]
['text':' tensor is not well formed as it has 0 sized dimensions','line_number':370,'multiline':False]
['text':' reshape tensor as [dim, -1]','line_number':386,'multiline':False]
['text':' sort indices using data','line_number':396,'multiline':False]
['text':' reshape back','line_number':431,'multiline':False]
['text':' namespace','line_number':441,'multiline':False]
['text':' return_counts ','line_number':448,'multiline':True]
['text':' The current CPU implementation of unique always sort due to','line_number':453,'multiline':False]
['text':' this is faster than hash table','line_number':454,'multiline':False]
['text':' return_counts ','line_number':456,'multiline':True]
['text':' equal_nan ','line_number':456,'multiline':True]
['text':' The current CPU implementation of unique always sort due to','line_number':467,'multiline':False]
['text':' this is faster than hash table','line_number':468,'multiline':False]
['text':' equal_nan ','line_number':470,'multiline':True]
['text':' The current implementation using `dim` always sorts due to unhashable tensors','line_number':477,'multiline':False]
['text':' namespace native','line_number':499,'multiline':False]
['text':' namespace at','line_number':500,'multiline':False]
