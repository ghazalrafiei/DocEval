['text':' Number of threads in a block given an input size up to MAX_BLOCK_SIZE','line_number':68,'multiline':False]
['text':' Return the number of entries in the dense part of a sparse tensor.
     `sizes` is a vector of sparse tensor dimensions.
     `sparse_dim` is the dimension of the sparse part of a sparse tensor.
   ','line_number':84,'multiline':True]
['text':'
    See ATen/native/sparse/SoftMax.cpp:cpu_sparse_coo_softmax for the CPU
    implementation of the sparse softmax algorithm that this implementation is
    based on.
  ','line_number':101,'multiline':True]
['text':'
    See ATen/native/sparse/SoftMax.cpp:cpu_sparse_coo_softmax_backward for
    the CPU implementation of the sparse softmax backward algorithm that this
    implementation is based on.
  ','line_number':163,'multiline':True]
['text':' Compute tmp = - sum_j output_j * grad_j ','line_number':184,'multiline':True]
['text':' Update `tmp_row` accumulator only when limits and pools are valid ','line_number':190,'multiline':True]
['text':' Compute grad_input = output * (grad + tmp)','line_number':201,'multiline':True]
['text':'
    See ATen/native/sparse/SoftMax.cpp:get_offsets for the CPU
    implementation of get_offsets function that this implementation is based on.
  ','line_number':236,'multiline':True]
['text':'
    Return pools of indices that align with the given dimension and the
    corresponding max values for each pool.

    See ATen/native/sparse/SoftMax.cpp:get_offsets and
    ATen/native/sparse/SoftMax.cpp:cpu_sparse_coo_softmax for the CPU
    implementation that this implementation is based on.
  ','line_number':291,'multiline':True]
['text':' {nnz, nvalues}','line_number':348,'multiline':False]
['text':'
    See ATen/native/sparse/SoftMax.cpp:cpu_sparse_coo_softmax for the CPU
    implementation of the sparse softmax algorithm that this implementation is
    based on.
  ','line_number':389,'multiline':True]
['text':' Prepare accessors ','line_number':421,'multiline':True]
['text':' If either nvalues or pool_size are zero, then cuda_sparse_coo_softmax_kernel','line_number':440,'multiline':False]
['text':' won't actually perform any computation. Further, they will be','line_number':441,'multiline':False]
['text':' invalid configuration parameters for the launch. So let's not','line_number':442,'multiline':False]
['text':' launch a kernel unless both are non-zero.','line_number':443,'multiline':False]
['text':'
    See ATen/native/sparse/SoftMax.cpp:cpu_sparse_coo_softmax_backward for
    the CPU implementation of the sparse softmax backward algorithm that this
    implementation is based on.
  ','line_number':466,'multiline':True]
['text':' when dim >= sparse_dim the dense backward is used ','line_number':494,'multiline':True]
['text':'
          Compute output using dense backward only when limits and pools are valid
          If this check is false then a sparse tensor with full of zeros is returned
        ','line_number':518,'multiline':True]
['text':' Compute independent pools of indices ','line_number':565,'multiline':True]
['text':' end anonymous namespace','line_number':595,'multiline':False]
['text':' namespace native','line_number':672,'multiline':False]
['text':' namespace at','line_number':673,'multiline':False]
