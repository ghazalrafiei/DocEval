['text':' Unary float operations always produce floating point','line_number':177,'multiline':False]
['text':' outputs for floating point and integral types','line_number':178,'multiline':False]
['text':' For complex inputs, the output type should be the same as input type.','line_number':179,'multiline':False]
['text':' These are normal unary ops that preserve dtype','line_number':240,'multiline':False]
['text':' Note: this is consistent with NumPy','line_number':262,'multiline':False]
['text':' Note: this is consistent with NumPy','line_number':269,'multiline':False]
['text':' Note: this is consistent with NumPy','line_number':289,'multiline':False]
['text':' namespace meta','line_number':295,'multiline':False]
['text':' NOTE: These are helper functions that reduce redundant code in implementing the most typical kind of unary operators.','line_number':298,'multiline':False]
['text':' YOU ARE NOT OBLIGED TO USE THESE HELPERS---if you're writing something more specialized, please don't try to make','line_number':299,'multiline':False]
['text':' them work for your case, but just write something new instead. Here we use helper functions instead of a flat fat','line_number':300,'multiline':False]
['text':' macro that implements everything, because the former allows some simple preprocessing that are unique to some','line_number':301,'multiline':False]
['text':' operators (more is foreseeable) and is more flexible and elegant than the latter.','line_number':302,'multiline':False]
['text':' This macro is as optional as the one above. torch.(ceil|floor|round|trunc) are no-ops for integers','line_number':308,'multiline':False]
['text':' See gh-70918','line_number':309,'multiline':False]
['text':'includeBool=','line_number':312,'multiline':True]
['text':' since polygamma_ has different signature from its','line_number':399,'multiline':False]
['text':' out and functional variant, we explicitly','line_number':400,'multiline':False]
['text':' define it (instead of using structured kernel).','line_number':401,'multiline':False]
['text':' An alternate version of unary_op_impl_out that follows the same pattern','line_number':429,'multiline':False]
['text':' for non-complex inputs, but returns a floating point tensor','line_number':430,'multiline':False]
['text':' for complex inputs by default.','line_number':431,'multiline':False]
['text':' Note: This is done by running the operation as usual and then copying the','line_number':432,'multiline':False]
['text':' operation's result to the expected result type.','line_number':433,'multiline':False]
['text':' Checks if the corresponding float type can be cast to the desired dtype','line_number':437,'multiline':False]
['text':' Runs the function complex->complex, as TensorIterator expects','line_number':443,'multiline':False]
['text':' Copies the complex result to the actual result and returns it','line_number':448,'multiline':False]
['text':' out_impl passed into unary_op_impl and unary_op_impl_  must go through at:: device dispatch','line_number':461,'multiline':False]
['text':' otherwise it won't dispatch to out-of-source devices like XLA.','line_number':462,'multiline':False]
['text':' For example it must be at::bitwise_not_out instead of bitwise_not_out(which is at::native!).','line_number':463,'multiline':False]
['text':' An alternate version of unary_op_impl that follows the same pattern','line_number':470,'multiline':False]
['text':' for non-complex inputs, but returns a floating point tensor','line_number':471,'multiline':False]
['text':' for complex inputs by default.','line_number':472,'multiline':False]
['text':' arccos, alias for acos','line_number':490,'multiline':False]
['text':' Note: int-> float promotion handled differently from other Unary ops,','line_number':501,'multiline':False]
['text':' as it does not use the usual TensorIterator + Kernel Dispatch pattern.','line_number':502,'multiline':False]
['text':'includeBool=','line_number':504,'multiline':True]
['text':' Note: int-> float promotion handled differently from other Unary ops,','line_number':519,'multiline':False]
['text':' as it does not use the usual TensorIterator + Kernel Dispatch pattern.','line_number':520,'multiline':False]
['text':'includeBool=','line_number':522,'multiline':True]
['text':' arcsin, alias of asin','line_number':531,'multiline':False]
['text':' arctan, alias of atan','line_number':536,'multiline':False]
['text':' Note [Complex abs and angle]','line_number':541,'multiline':False]
['text':' Complex inputs to abs and angle return float results by default.','line_number':542,'multiline':False]
['text':' abs and angle, in both NumPy and C++, returns a float result when given a','line_number':543,'multiline':False]
['text':' complex input. This makes sense mathematically since the absolute value','line_number':544,'multiline':False]
['text':' and angle of a complex number has no imaginary part.','line_number':545,'multiline':False]
['text':'promotes_integer_to_float=','line_number':547,'multiline':True]
['text':' Absolute, alias for abs','line_number':557,'multiline':False]
['text':'promotes_integer_to_float=','line_number':569,'multiline':True]
['text':' preemptively set the negative flag for the final imag tensor','line_number':607,'multiline':False]
['text':' No op if the neg bit is not set','line_number':639,'multiline':False]
['text':' else returns a new negated tensor with neg bit set to 0','line_number':640,'multiline':False]
['text':' negation is materialized in `copy_()` that clone ultimately calls into','line_number':643,'multiline':False]
['text':' No op if the conj bit is not set','line_number':647,'multiline':False]
['text':' else returns a new negated tensor with neg bit set to 0','line_number':648,'multiline':False]
['text':' conjugation is materialized in `copy_()` that clone ultimately calls into','line_number':651,'multiline':False]
['text':' This might look like an infinite recursion but it's not.','line_number':663,'multiline':False]
['text':' This actually calls into `conj()` defined in the Tensor class.','line_number':664,'multiline':False]
['text':' special_exp2, alias for exp2','line_number':668,'multiline':False]
['text':' special_expm1, alias for expm1','line_number':672,'multiline':False]
['text':' special_erf, alias for erf','line_number':676,'multiline':False]
['text':' special_erfc, alias for erfc','line_number':680,'multiline':False]
['text':' special_erfinv, alias for erfinv','line_number':684,'multiline':False]
['text':' special_polygamma, alias for polygamma','line_number':688,'multiline':False]
['text':' special_psi, alias for digamma','line_number':692,'multiline':False]
['text':' special_digamma, alias for digamma','line_number':695,'multiline':False]
['text':' special_i0, alias for i0','line_number':699,'multiline':False]
['text':' special_log1p, alias for log1p','line_number':703,'multiline':False]
['text':' special_round, alias for round','line_number':707,'multiline':False]
['text':' special_sinc, alias for sinc','line_number':711,'multiline':False]
['text':' namespace','line_number':722,'multiline':False]
['text':' special_ndtr','line_number':724,'multiline':False]
['text':' FIXME: remove const_cast once unary_op_impl_out is updated','line_number':749,'multiline':False]
['text':' arccosh, alias for acosh','line_number':758,'multiline':False]
['text':' arcsinh, alias for asinh','line_number':763,'multiline':False]
['text':' arctanh, alias for atanh','line_number':768,'multiline':False]
['text':' special_expit, alias for sigmoid','line_number':798,'multiline':False]
['text':'includeBool=','line_number':818,'multiline':True]
['text':' Alias for trunc','line_number':846,'multiline':False]
['text':'include_bool=','line_number':892,'multiline':True]
['text':' int -> float promotion','line_number':893,'multiline':False]
['text':' torch.frexp is implemented for floating-point dtypes for now,','line_number':954,'multiline':False]
['text':' should add support for integral dtypes in the future.','line_number':955,'multiline':False]
['text':' alias for lgamma, implements special.gammanln equivalent to','line_number':978,'multiline':False]
['text':' scipy.special.gammaln','line_number':979,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':983,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':984,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':985,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':986,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':987,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':988,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':989,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':990,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':991,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':992,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':993,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':994,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':995,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':996,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':997,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':998,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':999,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1000,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1001,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1002,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1003,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1004,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1005,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1006,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1007,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1008,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1009,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1010,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1011,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1012,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1013,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1014,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1015,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1016,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1017,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1018,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1019,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1020,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1021,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1022,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1023,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1024,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1025,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1026,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1027,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1028,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1029,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1030,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1031,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1032,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1033,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1034,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1035,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1036,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1037,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1038,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1039,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1040,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1041,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1042,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1043,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1044,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1045,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1046,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1047,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1048,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1049,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1050,'multiline':False]
['text':' NOLINT(cppcoreguidelines-avoid-non-const-global-variables)','line_number':1051,'multiline':False]
['text':' namespace native','line_number':1053,'multiline':False]
['text':' namespace at','line_number':1054,'multiline':False]
