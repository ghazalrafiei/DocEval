['text':' ROCM hcc doesn't work well with using std:: in kernel functions','line_number':7,'multiline':False]
['text':' we cannot use std::isnan directly due to some incompatibility of','line_number':45,'multiline':False]
['text':' gcc constexpr'ing and nvcc','line_number':46,'multiline':False]
['text':' Here sampler_t should be function type scalar_t(void). For gpu','line_number':50,'multiline':False]
['text':' "sampler" is a device function, but since ROCM doesn't have','line_number':51,'multiline':False]
['text':' equivalent to nvstd::function, we use a template type parameter to','line_number':52,'multiline':False]
['text':' capture it.','line_number':53,'multiline':False]
['text':' The function `sample_gamma` is','line_number':63,'multiline':False]
['text':' is adapted from Numpy's distributions.c implementation.','line_number':64,'multiline':False]
['text':' It is MIT licensed, so here is the copyright:','line_number':65,'multiline':False]
['text':' Copyright 2005 Robert Kern (robert.kern@gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
','line_number':67,'multiline':True]
['text':' Boost alpha for higher acceptance probability.','line_number':93,'multiline':False]
['text':' This implements the acceptance-rejection method of Marsaglia and Tsang (2000)','line_number':100,'multiline':False]
['text':' doi:10.1145/358407.358414','line_number':101,'multiline':False]
['text':' the functions stirling_approx_tail, binomial_inversion, and btrs are adapted
 * from TensorFlow's random_binomial_op.cc implementation. That code is under
 * copyright: 2019 The TensorFlow Authors.
 *
 * It was released under the Apache License, Version 2.0 (the "License"), available at:
 *    http://www.apache.org/licenses/LICENSE-2.0
 ','line_number':120,'multiline':True]
['text':' This is spq in the paper.','line_number':175,'multiline':False]
['text':' Other coefficients for Transformed Rejection sampling.','line_number':178,'multiline':False]
['text':' Reject non-sensical answers.','line_number':195,'multiline':False]
['text':' Region for which the box is tight, and we can return our calculated value.','line_number':199,'multiline':False]
['text':' This should happen 0.86 * v_r times. In the limit as n * p is large,','line_number':200,'multiline':False]
['text':' the acceptance rate converges to ~79% (and in the lower regime it is ~24%).','line_number':201,'multiline':False]
['text':' This deviates from Hormann's BTRS algorithm, as there is a log missing.','line_number':206,'multiline':False]
['text':' For all (u, v) pairs outside of the bounding box, this calculates the','line_number':207,'multiline':False]
['text':' transformed-reject ratio.','line_number':208,'multiline':False]
['text':' btrs','line_number':231,'multiline':False]
['text':' binomial inversion','line_number':234,'multiline':False]
['text':' btrs','line_number':240,'multiline':False]
['text':' count - binomial inversion','line_number':243,'multiline':False]
['text':' prob is nan?','line_number':247,'multiline':False]
['text':'
 * This function is derived from the implementation of the digamma function in the Cephes Math Library.
 * See note [3-Clause BSD License for the Cephes Math Library] in ATen/native/Math.h.
 ','line_number':252,'multiline':True]
['text':' it is more standard to write this as recursion, but','line_number':268,'multiline':False]
['text':' nvcc does not like that','line_number':269,'multiline':False]
['text':' Push x to be >= 10','line_number':275,'multiline':False]
['text':' Compute asymptotic digamma','line_number':285,'multiline':False]
['text':' Computes the reparameterized gradient -(d/dalpha cdf(x;alpha)) / pdf(x;alpha)','line_number':305,'multiline':False]
['text':' for random number x drawn from a standard Gamma distribution Gamma(alpha).','line_number':306,'multiline':False]
['text':' Use a Taylor series expansion for small x.','line_number':309,'multiline':False]
['text':' Use a Rice saddle point expansion for large alpha.','line_number':334,'multiline':False]
['text':' Use a bivariate rational approximation to the reparameterized gradient.','line_number':356,'multiline':False]
['text':' Approximate reparameterized gradient of Beta(x,alpha,beta) wrt alpha.','line_number':376,'multiline':False]
['text':' Assumes x is close to zero and uses a Taylor expansion.','line_number':377,'multiline':False]
['text':' Approximate reparameterized gradient of Beta(x,alpha,beta) wrt beta.','line_number':394,'multiline':False]
['text':' Assumes x is close to zero and uses a Taylor expansion.','line_number':395,'multiline':False]
['text':' Approximate reparameterized gradient of Beta(x,alpha,beta) wrt alpha.','line_number':411,'multiline':False]
['text':' Assumes alpha and beta are both large and uses a Rice saddle point expansion.','line_number':412,'multiline':False]
['text':' To ensure numerical stability, this computation is performed at higher precision.','line_number':413,'multiline':False]
['text':' Avoid the singularity at x = mean.','line_number':420,'multiline':False]
['text':' Computes a scaled reparameterized gradient','line_number':449,'multiline':False]
['text':'   -(d/dalpha cdf(x;alpha,beta)) / pdf(x;alpha,beta) / (1-x)','line_number':450,'multiline':False]
['text':' for random number x drawn from a Beta distribution Beta(alpha,beta).','line_number':451,'multiline':False]
['text':' This function inputs total=alpha+beta to make it easy to implement','line_number':452,'multiline':False]
['text':' Dirichlet reparameterized gradients in terms of Betas.','line_number':453,'multiline':False]
['text':' Use an asymptotic approximation for x close to 0.','line_number':464,'multiline':False]
['text':' Use an asymptotic approximation for x close to 1.','line_number':469,'multiline':False]
['text':' Use an asymptotic approximation when alpha and (total - alpha) are both large.','line_number':474,'multiline':False]
['text':' Use a rational correction to an analytic approximation.','line_number':479,'multiline':False]
['text':' namespace','line_number':518,'multiline':False]
