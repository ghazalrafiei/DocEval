['text':' Normalizes the L1 norm of every row to 1; used by multinomial','line_number':48,'multiline':False]
['text':' ! < 0 for NaN handling','line_number':60,'multiline':False]
['text':' ! < 0 for NaN handling','line_number':66,'multiline':False]
['text':' cumdist[size - 1] = 0 => all zero prob dist','line_number':111,'multiline':False]
['text':' No probability mass or precision problems; just return the','line_number':126,'multiline':False]
['text':' first non-zero element by setting start to size-1 here,','line_number':127,'multiline':False]
['text':' the code below will move it to the last non-zero probability','line_number':128,'multiline':False]
['text':' this actually can happen when the random number is 1','line_number':129,'multiline':False]
['text':' (github pytorch issue #4858).','line_number':130,'multiline':False]
['text':' At the moment, each warp computes one sample value in the binary','line_number':148,'multiline':False]
['text':' search due to divergence. It seems possible to compute multiple','line_number':149,'multiline':False]
['text':' values and limit divergence though later on.','line_number':150,'multiline':False]
['text':' global index formula for 2D grid of 1D blocks','line_number':154,'multiline':False]
['text':' The block determines the distribution for which we generate a point','line_number':163,'multiline':False]
['text':'we are losing 3 out of 4 generated numbers but it's ok','line_number':170,'multiline':False]
['text':'this kernel is not very efficient anyway','line_number':171,'multiline':False]
['text':' Find the bucket that a uniform sample lies in','line_number':175,'multiline':False]
['text':' dist->stride(0)','line_number':196,'multiline':False]
['text':' dist->stride(1)','line_number':197,'multiline':False]
['text':' Each block handles one distribution','line_number':210,'multiline':False]
['text':' First pass, find the total sum of the distribution','line_number':211,'multiline':False]
['text':' threadIdx.x == 0 has the sum value from this','line_number':222,'multiline':False]
['text':' Broadcast sum and sample value','line_number':225,'multiline':False]
['text':' Make sure the sum of our distribution didn't overflow','line_number':227,'multiline':False]
['text':' Choose the first element','line_number':242,'multiline':False]
['text':' All threads in bounds load a value','line_number':255,'multiline':False]
['text':' Perform an inclusive prefix sum of the shared memory contents','line_number':265,'multiline':False]
['text':' Each thread will check to see if the sample falls in its','line_number':280,'multiline':False]
['text':' bucket','line_number':281,'multiline':False]
['text':' We're done; we have the sample','line_number':294,'multiline':False]
['text':' Torch indices are 1-based','line_number':295,'multiline':False]
['text':' Store the previous scan's high value for future use','line_number':300,'multiline':False]
['text':' This should address a rare bug where we don't select a valid index. This likely occurs when','line_number':310,'multiline':False]
['text':' due to floating point arithmetic rounding errors, our cumulative sum does not add up to 1, but','line_number':311,'multiline':False]
['text':' and our uniform sample is greater than this value. In this case we likely have unitialized memory','line_number':312,'multiline':False]
['text':' in dest[curDist]. So basically we will loop through the distribution and pick the largest index','line_number':313,'multiline':False]
['text':' where the distribution is non-zero. This is obviously terribly inefficient, but due to the','line_number':314,'multiline':False]
['text':' rarity in which this occurs, this should not be an issue.','line_number':315,'multiline':False]
['text':' Restructure data for 2d','line_number':340,'multiline':False]
['text':' Optimized allocation-free implementation','line_number':359,'multiline':False]
['text':' To exploit greater parallelism for the sampling, generate the','line_number':360,'multiline':False]
['text':' Uniform random samples in a separate kernel launch, into','line_number':361,'multiline':False]
['text':' temporarily allocated memory. The device RNG is thread-limited','line_number':362,'multiline':False]
['text':' Generic, slow implementation with memory allocations','line_number':383,'multiline':False]
['text':' For sampling without replacement, we modify the distribution','line_number':385,'multiline':False]
['text':' for subsequent samples in this space','line_number':386,'multiline':False]
['text':' dtype ','line_number':389,'multiline':True]
['text':' layout ','line_number':390,'multiline':True]
['text':' device ','line_number':391,'multiline':True]
['text':' pin_memory ','line_number':392,'multiline':True]
['text':' dtype ','line_number':398,'multiline':True]
['text':' layout ','line_number':399,'multiline':True]
['text':' device ','line_number':400,'multiline':True]
['text':' pin_memory ','line_number':401,'multiline':True]
['text':' dtype ','line_number':406,'multiline':True]
['text':' layout ','line_number':407,'multiline':True]
['text':' device ','line_number':408,'multiline':True]
['text':' pin_memory ','line_number':409,'multiline':True]
['text':' Renorm along rows','line_number':412,'multiline':False]
['text':' Prefix sum along rows','line_number':416,'multiline':False]
['text':' Binary search is warp divergent (so effectively we're running','line_number':421,'multiline':False]
['text':' with just a single thread), but for better utilization,','line_number':422,'multiline':False]
['text':' we need each block to have at least 4 warps.','line_number':423,'multiline':False]
['text':' Each block will generate a sample from one','line_number':426,'multiline':False]
['text':' distribution concurrently.','line_number':427,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':431,'multiline':False]
['text':' each thread generates a single sample for (numdist/numblocks.y) distributions, however, since we have to use','line_number':434,'multiline':False]
['text':' curand_uniform4 (See Note [Register spilling in curand call for CUDA < 10]),','line_number':435,'multiline':False]
['text':' offset is 4 times that.','line_number':436,'multiline':False]
['text':' Sample with replacement','line_number':440,'multiline':False]
['text':' namespace at::native','line_number':463,'multiline':False]
