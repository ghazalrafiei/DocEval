['text':'**************************************************************************************************
 * Copyright (c) 2017 - 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *************************************************************************************************','line_number':1,'multiline':True]
['text':'! \file
    \brief Template for a pipelined GEMM kernel. Does not compute batching or support split-K.
','line_number':32,'multiline':True]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':45,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':51,'multiline':False]
['text':'/! Threadblock-scoped matrix multiply-accumulate','line_number':53,'multiline':False]
['text':'/! Epilogue','line_number':54,'multiline':False]
['text':'/! Threadblock swizzling function','line_number':55,'multiline':False]
['text':'/! The Architecture this kernel is compiled for. Used since SIMT kernels lose top-level','line_number':56,'multiline':False]
['text':'/ arch.','line_number':57,'multiline':False]
['text':'/! If true, code supporting split-K via serial reduction is enabled.','line_number':58,'multiline':False]
['text':' Type definitions about the mainloop.','line_number':79,'multiline':False]
['text':'/ Warp count (concept: GemmShape)','line_number':92,'multiline':False]
['text':'/ Parameters structure','line_number':98,'multiline':False]
['text':' Control serial split-k','line_number':109,'multiline':False]
['text':' For gather+scatter operations','line_number':114,'multiline':False]
['text':' Included so we can use Gemm Universal','line_number':119,'multiline':False]
['text':'','line_number':122,'multiline':False]
['text':' Methods','line_number':123,'multiline':False]
['text':'','line_number':124,'multiline':False]
['text':'/ Parameters structure','line_number':156,'multiline':False]
['text':' For gather+scatter operations','line_number':175,'multiline':False]
['text':'','line_number':180,'multiline':False]
['text':' Methods','line_number':181,'multiline':False]
['text':'','line_number':182,'multiline':False]
['text':'/ Shared memory storage structure','line_number':231,'multiline':False]
['text':'','line_number':237,'multiline':False]
['text':' Methods','line_number':238,'multiline':False]
['text':'','line_number':239,'multiline':False]
['text':'/ Determines whether kernel satisfies alignment','line_number':244,'multiline':False]
['text':' The dummy template parameter is not used and exists so that we can compile this code using','line_number':295,'multiline':False]
['text':' a standard earlier than C++17. Prior to C++17, fully specialized templates HAD to exists in','line_number':296,'multiline':False]
['text':' a namespace','line_number':297,'multiline':False]
['text':' Compute threadblock location','line_number':317,'multiline':False]
['text':' Early exit if CTA is out of range','line_number':323,'multiline':False]
['text':' Compute initial location in logical coordinates','line_number':330,'multiline':False]
['text':' Problem size is a function of threadblock index in the K dimension','line_number':341,'multiline':False]
['text':' Compute threadblock-scoped matrix multiply-add','line_number':344,'multiline':False]
['text':' Compute position within threadblock','line_number':347,'multiline':False]
['text':' Construct iterators to A and B operands','line_number':350,'multiline':False]
['text':' Broadcast the warp_id computed by lane 0 to ensure dependent code','line_number':371,'multiline':False]
['text':' is compiled as warp-uniform.','line_number':372,'multiline':False]
['text':'','line_number':376,'multiline':False]
['text':' Main loop','line_number':377,'multiline':False]
['text':'','line_number':378,'multiline':False]
['text':' Construct thread-scoped matrix multiply','line_number':379,'multiline':False]
['text':' Compute threadblock-scoped matrix multiply-add','line_number':387,'multiline':False]
['text':'','line_number':391,'multiline':False]
['text':' Epilogue','line_number':392,'multiline':False]
['text':'','line_number':393,'multiline':False]
['text':'','line_number':397,'multiline':False]
['text':' Masked tile iterators constructed from members','line_number':398,'multiline':False]
['text':'','line_number':399,'multiline':False]
['text':' assume identity swizzle','line_number':403,'multiline':False]
['text':' Construct the semaphore.','line_number':409,'multiline':False]
['text':' If performing a reduction via split-K, fetch the initial synchronization','line_number':412,'multiline':False]
['text':' Fetch the synchronization lock initially but do not block.','line_number':415,'multiline':False]
['text':' Indicate which position in a serial reduction the output operator is currently updating','line_number':418,'multiline':False]
['text':' Tile iterator loading from source tensor.','line_number':422,'multiline':False]
['text':' Tile iterator writing to destination tensor.','line_number':430,'multiline':False]
['text':' Wait on the semaphore - this latency may have been covered by iterator construction','line_number':440,'multiline':False]
['text':' For subsequent threadblocks, the source matrix is held in the 'D' tensor.','line_number':443,'multiline':False]
['text':' Execute the epilogue operator to update the destination tensor.','line_number':451,'multiline':False]
['text':'','line_number':454,'multiline':False]
['text':' Release the semaphore','line_number':455,'multiline':False]
['text':'','line_number':456,'multiline':False]
['text':' The final threadblock resets the semaphore for subsequent grids.','line_number':463,'multiline':False]
['text':' Otherwise, the semaphore is incremented','line_number':467,'multiline':False]
['text':'
        To improve compilation speed, we do not compile the device operator if the CUDA_ARCH does not correspond
        to the ArchTag of the cutlass kernel operator.
      ','line_number':483,'multiline':True]
['text':'/ Executes one GEMM','line_number':487,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':506,'multiline':False]
['text':' namespace kernel','line_number':508,'multiline':False]
['text':' namespace gemm','line_number':509,'multiline':False]
['text':' namespace cutlass','line_number':510,'multiline':False]
