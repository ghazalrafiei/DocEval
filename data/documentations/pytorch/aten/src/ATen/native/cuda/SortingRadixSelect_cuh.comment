['text':' Converts a float to an integer representation with the same','line_number':17,'multiline':False]
['text':' sorting; i.e., for floats f1, f2:','line_number':18,'multiline':False]
['text':' if f1 < f2 then convert(f1) < convert(f2)','line_number':19,'multiline':False]
['text':' We use this to enable radix selection of floating-point values.','line_number':20,'multiline':False]
['text':' This also gives a relative order for NaNs, but that's ok, as they','line_number':21,'multiline':False]
['text':' will all be adjacent','line_number':22,'multiline':False]
['text':' neg inf: signbit=1 exp=ff fraction=0 --> radix = 0 00 ff..','line_number':23,'multiline':False]
['text':' pos inf: signbit=0 exp=ff fraction=0 --> radix = 1 ff 00..','line_number':24,'multiline':False]
['text':' pos nan: signbit=0 exp=ff fraction>0 --> radix = 1 ff x>0','line_number':25,'multiline':False]
['text':' neg nan: signbit=1 exp=ff fraction>0 --> radix = 0 00 x<ff...','line_number':26,'multiline':False]
['text':' This function counts the distribution of all input values in a','line_number':169,'multiline':False]
['text':' slice we are selecting by radix digit at `radixDigitPos`, but only','line_number':170,'multiline':False]
['text':' those that pass the filter `((v & desiredMask) == desired)`.','line_number':171,'multiline':False]
['text':' This produces and broadcasts the seen counts for a single block only.','line_number':172,'multiline':False]
['text':' `smem` must have at least `RadixSize` elements.','line_number':173,'multiline':False]
['text':' Clear out per-thread counts from a previous round','line_number':190,'multiline':False]
['text':' Scan over all the data. Upon a read, the warp will accumulate','line_number':201,'multiline':False]
['text':' counts per each digit in the radix using warp voting.','line_number':202,'multiline':False]
['text':' Must be called outside of loop to ensure all threads participate','line_number':204,'multiline':False]
['text':' Now, for each warp, sum values','line_number':230,'multiline':False]
['text':' For each thread, read in the total counts','line_number':240,'multiline':False]
['text':' Over what radix we are selecting values','line_number':249,'multiline':False]
['text':' digits are base-(2 ^ RADIX_BITS)','line_number':250,'multiline':False]
['text':' 2 ^ RADIX_BITS','line_number':251,'multiline':False]
['text':' This finds the unique value `v` that matches the pattern','line_number':254,'multiline':False]
['text':' ((v & desired) == desiredMask) in our sorted int format','line_number':255,'multiline':False]
['text':' All threads participate in the loop, in order to sync on the flag','line_number':269,'multiline':False]
['text':' There should not be conflicts if we are using findPattern,','line_number':279,'multiline':False]
['text':' since the result is unique','line_number':280,'multiline':False]
['text':' can't use val as the flag, since it could be 0','line_number':282,'multiline':False]
['text':' Check to see if a thread found the value','line_number':292,'multiline':False]
['text':' all threads return this value','line_number':294,'multiline':False]
['text':' should not get here','line_number':299,'multiline':False]
['text':' Returns the top-Kth element found in the data using radix selection','line_number':304,'multiline':False]
['text':' Per-thread buckets into which we accumulate digit counts in our','line_number':314,'multiline':False]
['text':' radix','line_number':315,'multiline':False]
['text':' We only consider elements x such that (x & desiredMask) == desired','line_number':318,'multiline':False]
['text':' Initially, we consider all elements of the array, so the above','line_number':319,'multiline':False]
['text':' statement is true regardless of input.','line_number':320,'multiline':False]
['text':' We are looking for the top kToFind-th element when iterating over','line_number':324,'multiline':False]
['text':' digits; this count gets reduced by elimination when counting','line_number':325,'multiline':False]
['text':' successive digits','line_number':326,'multiline':False]
['text':' We start at the most significant digit in our radix, scanning','line_number':329,'multiline':False]
['text':' through to the least significant digit','line_number':330,'multiline':False]
['text':' Count radix distribution for the current position and reduce','line_number':333,'multiline':False]
['text':' across all threads','line_number':334,'multiline':False]
['text':' All threads have the same value in counts here, so all ','line_number':352,'multiline':True]
['text':' threads will return from the function. ','line_number':353,'multiline':True]
['text':' There is a unique answer. ','line_number':355,'multiline':True]
['text':' The answer is now the unique element v such that: ','line_number':361,'multiline':True]
['text':' (v & desiredMask) == desired ','line_number':362,'multiline':True]
['text':' However, we do not yet know what the actual element is. We ','line_number':363,'multiline':True]
['text':' need to perform a search through the data to find the ','line_number':364,'multiline':True]
['text':' element that matches this pattern. ','line_number':365,'multiline':True]
['text':' The top-Kth element v must now be one such that: ','line_number':385,'multiline':True]
['text':' (v & desiredMask == desired) ','line_number':386,'multiline':True]
['text':' but we haven't narrowed it down; we must check the next ','line_number':387,'multiline':True]
['text':' least-significant digit ','line_number':388,'multiline':True]
['text':' continue the loop','line_number':392,'multiline':False]
['text':' All threads participate in the comparisons below to know the','line_number':395,'multiline':False]
['text':' final result','line_number':396,'multiline':False]
['text':' Process in descending order','line_number':398,'multiline':False]
['text':' Process in ascending order','line_number':410,'multiline':False]
['text':' end digitPos for','line_number':422,'multiline':False]
['text':' There is no unique result, but there is a non-unique result','line_number':424,'multiline':False]
['text':' matching `desired` exactly','line_number':425,'multiline':False]
['text':' namespace native','line_number':428,'multiline':False]
['text':' namespace at','line_number':429,'multiline':False]
