['text':'**************************************************************************************************
 * Copyright (c) 2017 - 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *************************************************************************************************','line_number':1,'multiline':True]
['text':'! \file
    \brief Template for a double-buffered threadblock-scoped GEMM kernel.
','line_number':31,'multiline':True]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':49,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':55,'multiline':False]
['text':'/ Structure to compute the matrix product targeting CUDA cores and SIMT math','line_number':57,'multiline':False]
['text':'/ instructions.','line_number':58,'multiline':False]
['text':'/ Size of the Gemm problem - concept: gemm::GemmShape<>','line_number':60,'multiline':False]
['text':'/ Iterates over tiles of A operand in global memory','line_number':62,'multiline':False]
['text':'  (concept: ReadableTileIterator | ForwardTileIterator |','line_number':63,'multiline':False]
['text':'  MaskedTileIterator)','line_number':64,'multiline':False]
['text':'/ Iterates over tiles of A operand in shared memory','line_number':66,'multiline':False]
['text':'/ (concept: WriteableTileIterator | RandomAccessTileIterator)','line_number':67,'multiline':False]
['text':'/ Cache operation for operand A','line_number':69,'multiline':False]
['text':'/ Iterates over tiles of B operand in global memory','line_number':71,'multiline':False]
['text':'  (concept: ReadableTileIterator | ForwardTileIterator |','line_number':72,'multiline':False]
['text':'  MaskedTileIterator)','line_number':73,'multiline':False]
['text':'/ Iterates over tiles of B operand in shared memory','line_number':75,'multiline':False]
['text':'/ (concept: WriteableTileIterator | RandomAccessTileIterator)','line_number':76,'multiline':False]
['text':'/ Cache operation for operand B','line_number':78,'multiline':False]
['text':'/ Data type for the scales','line_number':80,'multiline':False]
['text':'/ Iterators over scales in shared memory','line_number':82,'multiline':False]
['text':'/ Data type of accumulator matrix','line_number':84,'multiline':False]
['text':'/ Data type of accumulator matrix','line_number':86,'multiline':False]
['text':'/ Policy describing tuning details (concept: MmaPolicy)','line_number':88,'multiline':False]
['text':'/ Number of stages,','line_number':90,'multiline':False]
['text':'/ Converter for B matrix applited immediately after the LDS','line_number':92,'multiline':False]
['text':'/ Use zfill or predicate for out-of-bound cp.async','line_number':94,'multiline':False]
['text':'/ Used for partial specialization','line_number':96,'multiline':False]
['text':'/< Base class','line_number':100,'multiline':False]
['text':'/< Size of the Gemm problem - concept: gemm::GemmShape<>','line_number':102,'multiline':False]
['text':'/< Iterates over tiles of A operand in global memory','line_number':104,'multiline':False]
['text':'/< Iterates over tiles of B operand in global memory','line_number':106,'multiline':False]
['text':'/< Data type of accumulator matrix','line_number':108,'multiline':False]
['text':'/< Layout of accumulator matrix','line_number':110,'multiline':False]
['text':'/< Policy describing tuning details','line_number':112,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':' Dependent types','line_number':129,'multiline':False]
['text':'','line_number':130,'multiline':False]
['text':'/ Fragment of operand Scale loaded from global memory;','line_number':132,'multiline':False]
['text':'/ Fragment of accumulator tile','line_number':135,'multiline':False]
['text':'/ Warp-level Mma','line_number':138,'multiline':False]
['text':'/ Minimum architecture is Sm80 to support cp.async','line_number':141,'multiline':False]
['text':'/ Complex transform on A operand','line_number':147,'multiline':False]
['text':'/ Complex transform on B operand','line_number':150,'multiline':False]
['text':'/ Internal structure exposed for introspection.','line_number':153,'multiline':False]
['text':'/ Number of cp.async instructions to load one stage of operand A','line_number':160,'multiline':False]
['text':'/ Number of cp.async instructions to load one stage of operand B','line_number':163,'multiline':False]
['text':'/ Number of stages','line_number':166,'multiline':False]
['text':'/ Number of cp.async instructions to load on group of operand A','line_number':169,'multiline':False]
['text':'/ Number of cp.async instructions to load on group of operand B','line_number':173,'multiline':False]
['text':'','line_number':192,'multiline':False]
['text':' Data members','line_number':193,'multiline':False]
['text':'','line_number':194,'multiline':False]
['text':'/ Iterator to write threadblock-scoped tile of A operand to shared memory','line_number':196,'multiline':False]
['text':'/ Iterator to write threadblock-scoped tile of B operand to shared memory','line_number':199,'multiline':False]
['text':'/ Iterator to write threadblock-scoped tile of scale operand to shared memory','line_number':202,'multiline':False]
['text':'/ Construct from tensor references','line_number':206,'multiline':False]
['text':'/< Shared storage needed for internal use by threadblock-scoped GEMM','line_number':209,'multiline':False]
['text':'/< ID within the threadblock','line_number':211,'multiline':False]
['text':'/< ID of warp','line_number':213,'multiline':False]
['text':'/< ID of each thread within a warp','line_number':215,'multiline':False]
['text':' Compute warp location within threadblock tile by mapping the warp_id to','line_number':225,'multiline':False]
['text':' three coordinates:','line_number':226,'multiline':False]
['text':'   _m: the warp's position within the threadblock along the M dimension','line_number':227,'multiline':False]
['text':'   _n: the warp's position within the threadblock along the N dimension','line_number':228,'multiline':False]
['text':'   _k: the warp's position within the threadblock along the K dimension','line_number':229,'multiline':False]
['text':' Add per-warp offsets in units of warp-level tiles','line_number':237,'multiline':False]
['text':' Async Copy for operand A','line_number':249,'multiline':False]
['text':' Async Copy for operand B','line_number':280,'multiline':False]
['text':'/ Perform a threadblock-scoped matrix multiply-accumulate','line_number':308,'multiline':False]
['text':'/< problem size of GEMM','line_number':311,'multiline':False]
['text':'/< destination accumulator tile','line_number':313,'multiline':False]
['text':'/< iterator over A operand in global memory','line_number':315,'multiline':False]
['text':'/< iterator over B operand in global memory','line_number':317,'multiline':False]
['text':'/< iterator over scale operand in global memory','line_number':319,'multiline':False]
['text':'/< initial value of accumulator','line_number':321,'multiline':False]
['text':'','line_number':325,'multiline':False]
['text':' Prologue','line_number':326,'multiline':False]
['text':'','line_number':327,'multiline':False]
['text':' NOTE - switch to ldg.sts','line_number':331,'multiline':False]
['text':' Issue this first, so cp.async.commit_group will commit this load as well.','line_number':332,'multiline':False]
['text':' Note: we do not commit here and this load will commit in the same group as','line_number':333,'multiline':False]
['text':'       the first load of A.','line_number':334,'multiline':False]
['text':' Issue several complete stages','line_number':340,'multiline':False]
['text':' Async Copy for operand A','line_number':350,'multiline':False]
['text':' Async Copy for operand B','line_number':376,'multiline':False]
['text':' Move to the next stage','line_number':397,'multiline':False]
['text':' Defines the boundary of a stage of cp.async.','line_number':404,'multiline':False]
['text':' Perform accumulation in the 'd' output operand','line_number':408,'multiline':False]
['text':'','line_number':411,'multiline':False]
['text':' Clear the remaining tiles of SMEM. This is a functional requirement for some kernels','line_number':412,'multiline':False]
['text':' so that all accumulator elements outside the GEMM footprint are zero.','line_number':413,'multiline':False]
['text':'','line_number':414,'multiline':False]
['text':'/ Iterator to write threadblock-scoped tile of A operand to shared memory','line_number':418,'multiline':False]
['text':' Async Copy for operand A','line_number':426,'multiline':False]
['text':'/ Iterator to write threadblock-scoped tile of B operand to shared memory','line_number':438,'multiline':False]
['text':' Async Copy for operand B','line_number':445,'multiline':False]
['text':' Waits until kStages-2 stages have committed.','line_number':458,'multiline':False]
['text':' Pair of fragments used to overlap shared memory loads and math','line_number':462,'multiline':False]
['text':' instructions','line_number':463,'multiline':False]
['text':'','line_number':486,'multiline':False]
['text':' Mainloop','line_number':487,'multiline':False]
['text':'','line_number':488,'multiline':False]
['text':'','line_number':492,'multiline':False]
['text':' Loop over GEMM K dimension','line_number':493,'multiline':False]
['text':'','line_number':494,'multiline':False]
['text':' Computes a warp-level GEMM on data held in shared memory','line_number':496,'multiline':False]
['text':' Each "warp_mma_k" refers to a warp-level matrix multiply-accumulate','line_number':497,'multiline':False]
['text':' Load warp-level tiles from shared memory, wrapping to k offset if','line_number':501,'multiline':False]
['text':' this is the last group as the case may be.','line_number':502,'multiline':False]
['text':' Issue global->shared copies for the this stage','line_number':524,'multiline':False]
['text':' Inserts a memory fence between stages of cp.async instructions.','line_number':541,'multiline':False]
['text':' Waits until kStages-2 stages have committed.','line_number':544,'multiline':False]
['text':' Move to the next stage','line_number':548,'multiline':False]
['text':' Add negative offsets to return iterators to the 'start' of the','line_number':555,'multiline':False]
['text':' circular buffer in shared memory','line_number':556,'multiline':False]
['text':' commit and drain all pending and predicated LDGSTS pnz from the GEMM mainloop','line_number':585,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':593,'multiline':False]
['text':' namespace threadblock','line_number':595,'multiline':False]
['text':' namespace gemm','line_number':596,'multiline':False]
['text':' namespace cutlass','line_number':597,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////','line_number':599,'multiline':False]
