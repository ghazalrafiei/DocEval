['text':' LinearAlgebraStubs.cpp','line_number':1,'multiline':False]
['text':' Mostly a no-op unless BUILD_LAZY_CUDA_LINALG is defined','line_number':2,'multiline':False]
['text':' In that case load library is dynamically loaded when first linalg call is made','line_number':3,'multiline':False]
['text':' This helps reduce size of GPU memory context if linear algebra functions are not used','line_number':4,'multiline':False]
['text':' namespace (anonymous)','line_number':29,'multiline':False]
['text':' Lazy dispatches do nothing but load linalg library and call the stub','line_number':42,'multiline':False]
['text':' Loading the library should override the registration of those with the proper implementation','line_number':43,'multiline':False]
['text':' getTorchLinalgLibrary() throws an exception if library is not found,','line_number':44,'multiline':False]
['text':' which makes it unnecessary to have an explicit error checking','line_number':45,'multiline':False]
['text':' But make sure that this function is called only once, to avoid infinite recursion','line_number':46,'multiline':False]
['text':' anonymous namespace','line_number':154,'multiline':False]
['text':' Old style dispatches','line_number':156,'multiline':False]
['text':' torch_cuda_linalg dynamic library should have a global constructor','line_number':157,'multiline':False]
['text':' that calls regiserLinaglDispatch so in order ot lazy bind','line_number':158,'multiline':False]
['text':' old style dispatch all one have to do is to load library and call disp.func_name','line_number':159,'multiline':False]
['text':' Protect from infinite recursion by initializing dispatch to self and checking','line_number':160,'multiline':False]
['text':' that values are different after linalg library were loaded','line_number':161,'multiline':False]
['text':'namespace cuda::detail','line_number':168,'multiline':False]
['text':'defined(BUILD_LAZY_CUDA_LINALG)','line_number':176,'multiline':True]
['text':' namespace at::native','line_number':178,'multiline':False]
