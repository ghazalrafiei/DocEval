['text':' 4d tensor B x D x H x W','line_number':38,'multiline':False]
['text':'
 * Description:
 *    this function adaptively maxpools an input 4D tensor along dimensions 2 and 3
 *    4D input, 4D output, 4D argmax x and y
 ','line_number':40,'multiline':True]
['text':' iterators','line_number':51,'multiline':False]
['text':' compute offsets based on thread/block ID','line_number':54,'multiline':False]
['text':' select input/output plane','line_number':65,'multiline':False]
['text':' For all output pixels...','line_number':70,'multiline':False]
['text':' Compute the mean of the input image...','line_number':83,'multiline':False]
['text':' -Infinity','line_number':88,'multiline':False]
['text':' next input line','line_number':98,'multiline':False]
['text':' Update output and argmax','line_number':100,'multiline':False]
['text':'
 * Description:
 *    this function computes the gradInput from weight and gradOutput
 ','line_number':107,'multiline':True]
['text':' iterators','line_number':116,'multiline':False]
['text':' compute offsets based on thread/block ID','line_number':119,'multiline':False]
['text':'int k = blockIdx.x % sizeD;','line_number':122,'multiline':False]
['text':' select input/output plane','line_number':132,'multiline':False]
['text':' compute gradInput','line_number':137,'multiline':False]
['text':'
 * Description:
 *    this function computes the gradInput from weight and gradOutput
 *    when kH != dH or kW != dW (uses atomic add)
 ','line_number':153,'multiline':True]
['text':' iterators','line_number':164,'multiline':False]
['text':' compute offsets based on thread/block ID','line_number':167,'multiline':False]
['text':' select input/output plane','line_number':179,'multiline':False]
['text':' compute gradInput','line_number':184,'multiline':False]
['text':' atomic add since different threads could update same variable','line_number':195,'multiline':False]
['text':' namespace','line_number':200,'multiline':False]
['text':' 4d tensor B x D x H x W','line_number':202,'multiline':False]
['text':' cuda blocks & threads:','line_number':240,'multiline':False]
['text':' run maxpool kernel','line_number':246,'multiline':False]
['text':' cuda blocks & threads:','line_number':285,'multiline':False]
['text':' run maxpool kernel','line_number':291,'multiline':False]
['text':' suboptimal, but without atomic it doesn't pass the tests','line_number':341,'multiline':False]
['text':' bool atomic = (isizeH%osizeH != 0) || (isizeW%osizeW != 0);','line_number':355,'multiline':False]
['text':' cuda blocks & threads:','line_number':369,'multiline':False]
['text':' run updateGradInput kernel, accumulate gradients atomically','line_number':376,'multiline':False]
['text':' run updateGradInput kernel','line_number':391,'multiline':False]
['text':' bool atomic = (isizeH%osizeH != 0) || (isizeW%osizeW != 0);','line_number':418,'multiline':False]
['text':' cuda blocks & threads:','line_number':430,'multiline':False]
['text':' run updateGradInput kernel, accumulate gradients atomically','line_number':437,'multiline':False]
['text':' run updateGradInput kernel, accumulate gradients atomically','line_number':452,'multiline':False]
['text':' namespace at::native','line_number':474,'multiline':False]
