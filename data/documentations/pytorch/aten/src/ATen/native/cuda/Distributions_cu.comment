['text':'*
 * Note [Register spilling in curand call for CUDA < 10]
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * For CUDA < 10, curandStatePhilox4_32_10_t engine achieves poor performance (60% SOL bandwidth)
 * when called to generate one random number at a time. This is because the line
 *            unsigned ret = (&state->output.x)[state->STATE++];
 * in
 *            QUALIFIERS unsigned int curand(curandStatePhilox4_32_10_t *state)
 * in curand_kernel.h dynamically indexes into state.output, preventing the compiler from ever
 * storing state.output in registers.
 *
 * CUDA 10 fixed this problem. However, for backwards compatibility, in the following kernels
 * we are using curand distributions that utilize curand4 call. curand4 call doesn't have the
 * register spilling problem.
 ','line_number':25,'multiline':True]
['text':'max_threads_per_block=','line_number':60,'multiline':True]
['text':'min_blocks_per_sm==','line_number':61,'multiline':True]
['text':'need just bits','line_number':69,'multiline':False]
['text':' useless.','line_number':90,'multiline':False]
['text':'max_threads_per_block=','line_number':125,'multiline':True]
['text':'min_blocks_per_sm==','line_number':126,'multiline':True]
['text':' namespace','line_number':129,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':153,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':166,'multiline':False]
['text':' See Note [Acquire lock when using random generators]','line_number':179,'multiline':False]
['text':' namespace at::native','line_number':208,'multiline':False]
