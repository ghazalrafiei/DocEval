['text':' 5d tensor B x D x T x H x W','line_number':40,'multiline':False]
['text':' All kernels view batch dim B and dim D as collapsed.','line_number':41,'multiline':False]
['text':'
 * Description:
 *    this function adaptively average pools an input 5D tensor along dimensions
 * 2, 3, and 4 5D input, 5D output
 *
 *    gridDim.y blocks work together on a single 2D output plane specified by
 *    (blockIdx.x + offsetZ).
 ','line_number':43,'multiline':True]
['text':' iterates on output pixels','line_number':59,'multiline':False]
['text':' compute offsets based on thread/block ID','line_number':62,'multiline':False]
['text':' select output plane','line_number':70,'multiline':False]
['text':' output frame/time','line_number':72,'multiline':False]
['text':' slice/feature','line_number':73,'multiline':False]
['text':' input frame/time range is fixed.','line_number':75,'multiline':False]
['text':' input offset by slice/feature and earliest relevant frame/time','line_number':80,'multiline':False]
['text':' output offset by slice/feature and frame/time','line_number':82,'multiline':False]
['text':' For all output pixels...','line_number':85,'multiline':False]
['text':' Compute the average pooling from corresponding input pixels','line_number':96,'multiline':False]
['text':' next input frame','line_number':109,'multiline':False]
['text':' Update output','line_number':111,'multiline':False]
['text':' each H*W plane is processed by blocksH thread blocks','line_number':127,'multiline':False]
['text':'
 * Description:
 *    This function computes the gradInput from gradOutput.
 *
 *    gridDim.y blocks work together on a single 2D output plane specified by
 *    (blockIdx.x + offsetZ).
 ','line_number':145,'multiline':True]
['text':' iterators on input pixels','line_number':159,'multiline':False]
['text':' compute offsets based on thread/block ID','line_number':162,'multiline':False]
['text':' select input plane','line_number':170,'multiline':False]
['text':' output frame/time','line_number':172,'multiline':False]
['text':' slice/feature','line_number':173,'multiline':False]
['text':' output frame/time range is fixed.','line_number':175,'multiline':False]
['text':' gradInput offset by slice/feature and frame/time.','line_number':179,'multiline':False]
['text':' gradOutput offset by slice/feature and earliest relevant frame/time','line_number':181,'multiline':False]
['text':' For all input pixels...','line_number':184,'multiline':False]
['text':' Compute the gradients from corresponding output pixels','line_number':193,'multiline':False]
['text':' for all relevant output pixels','line_number':197,'multiline':False]
['text':' next output frame','line_number':210,'multiline':False]
['text':' each H*W plane is processed by blocksH thread blocks','line_number':224,'multiline':False]
['text':'
 * Description:
 *    This function computes the gradInput from gradOutput.
 *
 *    gridDim.y blocks work together on a single 2D output plane specified by
 *    (blockIdx.x + offsetZ).
 *
 *    (uses atomic add)
 *
 ','line_number':240,'multiline':True]
['text':' iterators on output pixels','line_number':257,'multiline':False]
['text':' compute offsets based on thread/block ID','line_number':260,'multiline':False]
['text':' select output plane','line_number':268,'multiline':False]
['text':' output frame/time','line_number':270,'multiline':False]
['text':' output slice/feature','line_number':271,'multiline':False]
['text':' input frame/time range is fixed.','line_number':273,'multiline':False]
['text':' gradInput offset by slice/feature and earliest relevant frame/time','line_number':278,'multiline':False]
['text':' gradOutput offset by slice/feature and frame/time','line_number':280,'multiline':False]
['text':' For all output pixels...','line_number':283,'multiline':False]
['text':' Compute the gradients from corresponding input pixels','line_number':294,'multiline':False]
['text':' next input frame','line_number':306,'multiline':False]
['text':' 5D tensor B x D x T x H x w','line_number':334,'multiline':False]
['text':' the jit sometimes passes output_size.size() == 1','line_number':357,'multiline':False]
['text':' namespace','line_number':507,'multiline':False]
['text':' See Note [Writing Nondeterministic Operations]','line_number':527,'multiline':False]
['text':' Nondeterministic because of atomicAdd usage','line_number':528,'multiline':False]
['text':' See Note [Writing Nondeterministic Operations]','line_number':537,'multiline':False]
['text':' Nondeterministic because of atomicAdd usage','line_number':538,'multiline':False]
['text':' namespace at::native','line_number':545,'multiline':False]
