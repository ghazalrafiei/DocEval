['text':' Helper function to return a vector<string>','line_number':30,'multiline':False]
['text':' corresponding to the type of the arguments in parameter pack.','line_number':31,'multiline':False]
['text':' Deals with output','line_number':72,'multiline':False]
['text':' Incorporates input(s)','line_number':76,'multiline':False]
['text':' Defines type names','line_number':146,'multiline':False]
['text':' NOTE: General case is instantiated only for invalid types.','line_number':147,'multiline':False]
['text':' All the valid types have specialization using the TYPE_NAME_FN','line_number':148,'multiline':False]
['text':' macro below.','line_number':149,'multiline':False]
['text':' we can't use static_assert(false) directly as the','line_number':152,'multiline':False]
['text':' program will be not compiled even if the template is not','line_number':153,'multiline':False]
['text':' instantiated, so we use `delayed_false`','line_number':154,'multiline':False]
['text':' to make sure compiler doesn't eagerly raise','line_number':155,'multiline':False]
['text':' fail this assertion.','line_number':156,'multiline':False]
['text':' JIT uses std::complex directly, because nvRTC compile programs','line_number':168,'multiline':False]
['text':' with -default-device, so there is no such issue like:','line_number':169,'multiline':False]
['text':'   "std::sin(complex) is __host__ only"','line_number':170,'multiline':False]
['text':' namespace at::cuda::jit','line_number':215,'multiline':False]
