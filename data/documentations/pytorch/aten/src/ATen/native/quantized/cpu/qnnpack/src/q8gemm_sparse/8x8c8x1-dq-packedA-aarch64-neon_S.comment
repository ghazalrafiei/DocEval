['text':'
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 ','line_number':1,'multiline':True]
['text':' Load output channel index ','line_number':61,'multiline':True]
['text':' Load params ','line_number':63,'multiline':True]
['text':' Load a_zero_point ','line_number':66,'multiline':True]
['text':' Load pointer to per channel zero points array ','line_number':70,'multiline':True]
['text':' Load pointer to per channel multiplier ','line_number':73,'multiline':True]
['text':' Add offset to the base pointer ','line_number':76,'multiline':True]
['text':' Mul by 4 to get byte offset for multiplier ','line_number':78,'multiline':True]
['text':' Add offset to the base pointer for multiplier ','line_number':80,'multiline':True]
['text':' Load b_zero_point ','line_number':83,'multiline':True]
['text':' Load multiplier c0123 ','line_number':85,'multiline':True]
['text':' Load multiplier c4567 ','line_number':87,'multiline':True]
['text':' w12 = w_row_ptr[n], x13 = w_row_ptr[n+1] ','line_number':110,'multiline':True]
['text':' x4 = x4 + W_INDEX_DTYPE_NUM_BYTES_ARG to point to next n ','line_number':111,'multiline':True]
['text':' x10 = temp_packed_w = packed_w + w_row_ptr[n] * 8 ','line_number':114,'multiline':True]
['text':' This points to the first block of nonzero value ','line_number':115,'multiline':True]
['text':' for the nth row. ','line_number':116,'multiline':True]
['text':' x9 = temp_w_block_ids_ptr = w_block_ids_ptr (x5) + w_row_ptr[n] ','line_number':118,'multiline':True]
['text':' LSL for when elements are >1 byte ','line_number':119,'multiline':True]
['text':' (4 bytes: LSL #2, 2 bytes: LSL #1, 1 byte: LSL #0) ','line_number':120,'multiline':True]
['text':' This points to the block id of the first block ','line_number':121,'multiline':True]
['text':' It should contain x13 - x12 number of block ids ','line_number':122,'multiline':True]
['text':' x8 = num_blocks that needs to be processed ','line_number':124,'multiline':True]
['text':' k_loop processes two k values ','line_number':131,'multiline':True]
['text':' Load two 8x1 blocks ','line_number':132,'multiline':True]
['text':' x12 = block_id_ptr[0] ','line_number':138,'multiline':True]
['text':' x13 = block_id_ptr[1] ','line_number':139,'multiline':True]
['text':' Add offset to x2 ','line_number':142,'multiline':True]
['text':' Shift by 3 because each packed block is a block of 8x1 ','line_number':143,'multiline':True]
['text':' which 8 bytes ','line_number':144,'multiline':True]
['text':' Load two 8x1 blocks of activation ','line_number':148,'multiline':True]
['text':' First 8x1 for first channel ','line_number':149,'multiline':True]
['text':' second 8x1 for next channel ','line_number':150,'multiline':True]
['text':' First channel ','line_number':157,'multiline':True]
['text':' Second channel ','line_number':176,'multiline':True]
['text':' x12 = block_id_ptr[0] ','line_number':203,'multiline':True]
['text':' Add offset to x2 ','line_number':205,'multiline':True]
['text':' row 0: v8, v9 ','line_number':230,'multiline':True]
['text':' row 1: v10, v11 ','line_number':231,'multiline':True]
['text':' row 2: v12, v13 ','line_number':232,'multiline':True]
['text':' row 3: v14, v15 ','line_number':233,'multiline':True]
['text':' row 4: v16, v17 ','line_number':234,'multiline':True]
['text':' row 5: v18, v19 ','line_number':235,'multiline':True]
['text':' row 6: v20, v21 ','line_number':236,'multiline':True]
['text':' row 7: v22, v23 ','line_number':237,'multiline':True]
['text':' Load c_stride & params ','line_number':239,'multiline':True]
['text':' Compute c0-c7 ','line_number':296,'multiline':True]
