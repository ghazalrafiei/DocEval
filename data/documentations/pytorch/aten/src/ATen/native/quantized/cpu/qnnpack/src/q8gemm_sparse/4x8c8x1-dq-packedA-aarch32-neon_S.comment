['text':'
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 ','line_number':1,'multiline':True]
['text':' Store nr in r11 as well for late user. ','line_number':89,'multiline':True]
['text':' Load output channel index ','line_number':91,'multiline':True]
['text':' Load quantization params ','line_number':93,'multiline':True]
['text':' - r7 = quantization_params ','line_number':94,'multiline':True]
['text':' Load input_zero_point ','line_number':96,'multiline':True]
['text':' Load pointer to per channel zero points array ','line_number':99,'multiline':True]
['text':' Add output_channel_index to the b_zero_point pointer ','line_number':101,'multiline':True]
['text':' Load w_row_ptr + n ','line_number':104,'multiline':True]
['text':' r7 = blocks_id_ptr ','line_number':106,'multiline':True]
['text':' ip = w_row_ptr[n], lr = w_row_ptr[n+1] ','line_number':118,'multiline':True]
['text':' r5 = r5 + W_INDEX_DTYPE_NUM_BYTES_ARG to point to next n ','line_number':119,'multiline':True]
['text':' r6 = temp_packed_w = packed_w + w_row_ptr[n] * 8 ','line_number':122,'multiline':True]
['text':' * 8 because each block contains 8 values ','line_number':123,'multiline':True]
['text':' This points to the first block of nonzero value ','line_number':124,'multiline':True]
['text':' for the nth row. ','line_number':125,'multiline':True]
['text':' r9 = temp_w_block_ids_ptr = w_block_ids_ptr (r7) + w_row_ptr[n] ','line_number':127,'multiline':True]
['text':' LSL for when elements are >1 byte ','line_number':128,'multiline':True]
['text':' (4 bytes: LSL #2, 2 bytes: LSL #1, 1 byte: LSL #0) ','line_number':129,'multiline':True]
['text':' This points to the col block id of the first block ','line_number':130,'multiline':True]
['text':' It should contain lr - ip number of block ids ','line_number':131,'multiline':True]
['text':' Note that in this kernel sparsity pattern is 8x1. ','line_number':132,'multiline':True]
['text':' Thus each block contains only 1 k as opposed to ','line_number':133,'multiline':True]
['text':' 1x4 where each block contains 4 k. ','line_number':134,'multiline':True]
['text':' r8 = num_blocks that needs to be processed ','line_number':136,'multiline':True]
['text':' Load 2 non zero blocks of weights. Each block = 8x1. ','line_number':143,'multiline':True]
['text':' ip = block_id_ptr[0] ','line_number':147,'multiline':True]
['text':' lr = block_id_ptr[1] ','line_number':148,'multiline':True]
['text':' Add offset to r2 ','line_number':152,'multiline':True]
['text':' Shift by 4 because each packed block is a block of 4x1 ','line_number':153,'multiline':True]
['text':' which 4 bytes ','line_number':154,'multiline':True]
['text':' q9 = vxb ','line_number':156,'multiline':True]
['text':' d4 = 4x1 transposed ','line_number':160,'multiline':True]
['text':' vxa0_t ','line_number':165,'multiline':True]
['text':' d5 = next 4x1 transposed ','line_number':167,'multiline':True]
['text':' vxa1_t ','line_number':170,'multiline':True]
['text':' q0 = d0, d1 = 8x1 block of weight for k ','line_number':172,'multiline':True]
['text':' q1 = d2, d3 = 8x1 block of weight for k + 1 ','line_number':173,'multiline':True]
['text':' q2's d4 = 4x1 block of activation for k ','line_number':174,'multiline':True]
['text':' q3's d6 = 4x1 block of activation for k + 1 ','line_number':175,'multiline':True]
['text':' Generate 4x8 block as two 4x4 blocks ','line_number':177,'multiline':True]
['text':' Load last nonzero block ','line_number':204,'multiline':True]
['text':' For this we will load 4 8 bit values as one 32 bit value ','line_number':205,'multiline':True]
['text':' q9 = vxb ','line_number':207,'multiline':True]
['text':' ip = block_id_ptr[0] ','line_number':210,'multiline':True]
['text':' Add offset to r2 ','line_number':213,'multiline':True]
['text':' Shift by 4 because each packed block is a block of 4x1 ','line_number':214,'multiline':True]
['text':' which 4 bytes ','line_number':215,'multiline':True]
['text':' vxa0_t ','line_number':220,'multiline':True]
['text':' Load output channel index ','line_number':234,'multiline':True]
['text':' Load quantization params ','line_number':236,'multiline':True]
['text':' - r7 = quantization_params ','line_number':237,'multiline':True]
['text':' Load pointer to per channel requant scale ','line_number':240,'multiline':True]
['text':' Now r7 has the base_addr + offset for multipliers ','line_number':242,'multiline':True]
['text':' Load q6: vmultiplier_c0123 ','line_number':246,'multiline':True]
['text':' Load q7: vmultiplier_c4567 ','line_number':248,'multiline':True]
['text':' Load c, c_stride: ','line_number':280,'multiline':True]
['text':' - r1 = c ','line_number':281,'multiline':True]
['text':' - r9 = c_stride ','line_number':282,'multiline':True]
['text':' r1 = c0 = c pointer ','line_number':287,'multiline':True]
['text':' r2 = c1 ','line_number':290,'multiline':True]
['text':' r3 = c2 ','line_number':294,'multiline':True]
['text':' r4 = c3 ','line_number':299,'multiline':True]
