['text':' anonymous namespace','line_number':34,'multiline':False]
['text':' Note: quantize_val is only explicitly used in test outside of this file','line_number':37,'multiline':False]
['text':' Internally, fbgemm::Quantize uses std::nearbyint.','line_number':40,'multiline':False]
['text':' std::nearbyint results in nearest integer value according to the current','line_number':41,'multiline':False]
['text':' rounding mode and the default rounding mode is rounds to even in half-way','line_number':42,'multiline':False]
['text':' cases in most popular processor architectures like x86 and ARM. This is','line_number':43,'multiline':False]
['text':' typically faster than an alternatives like std::round that rounds half-way','line_number':44,'multiline':False]
['text':' cases away from zero, and can be consistent with SIMD implementations for','line_number':45,'multiline':False]
['text':' example in x86 using _mm512_cvtps_epi32 or mm512_round_ps with','line_number':46,'multiline':False]
['text':' _MM_FROUND_CUR_DIRECTION option that also follow the current rounding mode.','line_number':47,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':48,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-signed-char-misuse)','line_number':50,'multiline':False]
['text':'LEGACY','line_number':51,'multiline':True]
['text':'result_precision=','line_number':55,'multiline':True]
['text':'LEGACY','line_number':66,'multiline':True]
['text':' For use when compiling FBGEMM on aarch64 but still supporting x86','line_number':75,'multiline':False]
['text':' intrinsics via simde','line_number':76,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':103,'multiline':False]
['text':' USE_FBGEMM','line_number':109,'multiline':False]
['text':' std::nearbyint results in nearest integer value according to the current','line_number':128,'multiline':False]
['text':' rounding mode and the default rounding mode is rounds to even in half-way','line_number':129,'multiline':False]
['text':' cases in most popular processor architectures like x86 and ARM. This is','line_number':130,'multiline':False]
['text':' typically faster than an alternatives like std::round that rounds half-way','line_number':131,'multiline':False]
['text':' cases away from zero, and can be consistent with SIMD implementations for','line_number':132,'multiline':False]
['text':' example in x86 using _mm512_cvtps_epi32 or mm512_round_ps with','line_number':133,'multiline':False]
['text':' _MM_FROUND_CUR_DIRECTION option that also follow the current rounding mode.','line_number':134,'multiline':False]
['text':' builtin_add_overflow() returns true in case of overflow','line_number':155,'multiline':False]
['text':' zero_point must be a non-negative value between qmin and qmax,','line_number':157,'multiline':False]
['text':' i.e. only overflow can happen.','line_number':158,'multiline':False]
['text':' USE_FBGEMM','line_number':194,'multiline':False]
['text':'
* Quantize value based on the following equation
* Xq = Round(Xf * inv_scale + zero_point)
* where zero_point is in float.
*
* Note: For the case of embedding quantization we will set zero_point
* to (-Xmin/scale), where Xmin is the min value in input tensor row.
','line_number':196,'multiline':True]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':205,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':209,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-signed-char-misuse)','line_number':230,'multiline':False]
['text':' namespace native','line_number':300,'multiline':False]
['text':' namespace at','line_number':301,'multiline':False]
