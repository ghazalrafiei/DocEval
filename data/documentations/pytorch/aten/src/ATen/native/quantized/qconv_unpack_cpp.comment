['text':'
The dispatch registrations at the end of this file applies to fbgemm, qnnpack, and cudnn backends.
The correct unpack backend function is determined using runtime polymorphism through the packed_weight pointer,
which is of type intrusive_ptr<ConvPackedParamsBase<kSpatialDim>> and points to either a PackedConvWeightsQnnp,
PackedConvWeights (Fbgemm), or PackedConvWeightsCudnn at runtime, which all inherit from ConvPackedParamsBase.
The implementations for the unpack functions can be found in /cpu/qconv_unpack_impl.cpp, for fbgemm&qnnpack
and /cudnn/ConvUnpackImpl.cpp, for cudnn.
','line_number':1,'multiline':True]
['text':'
 * QConvPackWeightInt8 expects its input tensor to be in shape
 * [output_channels, kernel_height, kernel_width, input_channels/Groups]
 * Therefore, the unpacking of packed weight tensor using QConvUnpackWeightsInt8
 * results in a tensor of the same shape.
 ','line_number':42,'multiline':True]
['text':' conv_unpack is deprecated, please use conv2d_unpack for 2D conv.','line_number':203,'multiline':False]
['text':' We use  conv2d_unpack to be consistent with conv3d_unpack','line_number':205,'multiline':False]
['text':' ConvTranspose is the same, however, we want to have different name.','line_number':225,'multiline':False]
['text':' namespace','line_number':244,'multiline':False]
['text':' namespace native','line_number':245,'multiline':False]
['text':' namespace at','line_number':246,'multiline':False]
