['text':'
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 ','line_number':1,'multiline':True]
['text':'
     * Compute absolute value of input as unsigned 32-bit int.
     * All further computations will work with unsigned values to avoid
     * undefined behaviour on signed operations.
     ','line_number':47,'multiline':True]
['text':' Compute full 64-bit product of 32-bit factors ','line_number':57,'multiline':True]
['text':'
     * Shift the full 64-bit product right with rounding.
     * Rounding is performed towards closest integer, with midpoints rounded up
     * (same as away from zero).
     *
     * Generally, this operation requires both 64-bit addition and 64-bit shift,
     * but we use two tricks to replace 64-bit operations with 32-bit
     * operations.
     *
     * To avoid full 64-bit addition we make use of three facts:
     * - 64-bit rounding value added before the shift is a power of 2, and thus
     * has only one bit set.
     * - When 0x1.0p-32f <= scale < 0x1.0p-31f, then the non-zero bit in
     * rounding is in the low 32 bits, and rounding is exactly 0x80000000
     * (2**31), because rounding is 2**(scale-1) and scale >= 32. In this case,
     *   addition of rounding can affect high 32 bits of the product only
     * through overflow, which happens if low 32-bit part of the product equals
     * or exceeds 0x80000000. We can reformulate the latter condition as low
     * 32-bit part of the product has the bit 31 set, and then overflow happens
     * if both the low 32-bit part of the product and the low 32-bit part of the
     * rounding value have bit 31 set. Since 32-bit numbers with the bit 31 set
     * are negative when interpreted as signed integers, we can check the
     * overflow condition as (int32_t) (LOW(product) & LOW(rounding)) < 0
     * - When 0x1.0p-31f <= scale < 1.0f, then the non-zero bit is in the high
     * 32 bits of rounding. We just need to do 32-bit addition of high 32 bits
     * of rounding and high 32 bits of product. This addition never overflows
     * because product <= 0x80000000 * 0xFFFFFF00 < 2**63 and rounding =
     * 2**(scale-1) <= 2**62.
     *
     * To avoid full 64-bit shift, we leverage the fact that shift >= 32, and do
     * it in two steps:
     * - Shift by 32, which can be implemented by extracting the high 32-bit word
     * on 32-bit systems.
     * - Shift by (shift - 32), which can be implemented as a 32-bit shift of
     * high word of addition result.
     ','line_number':63,'multiline':True]
['text':' Copy the sign of input to scaled absolute input value ','line_number':122,'multiline':True]
['text':'
     * Clamp scaled value with zero point between (qmin - zero point) and (qmax
     * - zero point).
     ','line_number':128,'multiline':True]
['text':'
     * Add zero point to clamped value.
     * The result is guaranteed to be in [qmin, qmax] range.
     *
     * This addition can not be safely done before clamping, because scaled
     * values are in [-2147483520, 2147483519] range, so addition of zero point
     * (which can be up to 255) can overflow signed 32-bit integer.
     ','line_number':141,'multiline':True]
['text':'
     * Compute absolute value of input as unsigned 32-bit int.
     * All further computations will work with unsigned values to avoid
     * undefined behaviour on signed operations.
     ','line_number':191,'multiline':True]
['text':' Compute full 64-bit product of 32-bit factors ','line_number':201,'multiline':True]
['text':'
     * Shift the full 64-bit product right with rounding.
     * Rounding is performed towards closest integer, with midpoints rounded up
     * (same as away from zero).
     *
     * Note that although rounding is precomputed, it is dependent on shift
     * value, and on processors with 64-bit "right shift with rounding"
     * instruction each line below can be represented by just one such
     * instruction (e.g. VRSHL.U64 on ARM NEON, URSHL in ARM64 Advanced SIMD).
     ','line_number':207,'multiline':True]
['text':'
     * Copy the sign of input to scaled absolute input value.
     *
     * On x86 processors with SSSE3 instruction set, this operation nicely maps
     * to PSIGND instruction.
     ','line_number':222,'multiline':True]
['text':'
     * Clamp scaled value with zero point between (qmin - zero point) and (qmax
     * - zero point).
     ','line_number':233,'multiline':True]
['text':'
     * Add zero point to clamped value.
     * The result is guaranteed to be in [qmin, qmax] range.
     *
     * This addition can not be safely done before clamping, because scaled
     * values are in [-2147483520, 2147483519] range, so addition of zero point
     * (which can be up to 255) can overflow signed 32-bit integer.
     ','line_number':246,'multiline':True]
['text':'
     * Compute full 64-bit product of signed 32-bit factors.
     *
     * Note: multiplier can be treated as either signed or unsigned.
     ','line_number':296,'multiline':True]
['text':'
     * Adjust product before subsequent shift with rounding up to simulate shift
     * with rounding away from zero.
     ','line_number':306,'multiline':True]
['text':'
     * Arithmetically shift the full 64-bit product right with rounding.
     * Rounding is performed towards closest integer, with midpoints rounded up.
     *
     * Note that although rounding is precomputed, it is dependent on shift
     * value, and on processors with 64-bit "right shift with rounding"
     * instruction each line below can be represented by just one such
     * instruction (e.g. VRSHL.S64 on ARM NEON, SRSHL in ARM64 Advanced SIMD).
     ','line_number':315,'multiline':True]
['text':'
     * Clamp scaled value with zero point between (qmin - zero point) and (qmax
     * - zero point).
     ','line_number':333,'multiline':True]
['text':'
     * Add zero point to clamped value.
     * The result is guaranteed to be in [qmin, qmax] range.
     *
     * This addition can not be safely done before clamping, because scaled
     * values are in [-2147483520, 2147483519] range, so addition of zero point
     * (which can be up to 255) can overflow signed 32-bit integer.
     ','line_number':346,'multiline':True]
