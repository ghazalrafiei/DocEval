['text':'
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 ','line_number':1,'multiline':True]
['text':' Load output channel index ','line_number':72,'multiline':True]
['text':' Load params ','line_number':74,'multiline':True]
['text':' Load a_zero_point ','line_number':77,'multiline':True]
['text':' Load pointer to per channel zero points array ','line_number':81,'multiline':True]
['text':' Load pointer to per channel multiplier ','line_number':84,'multiline':True]
['text':' Add offset to the base pointer ','line_number':87,'multiline':True]
['text':' Mul by 4 to get byte offset for multiplier ','line_number':89,'multiline':True]
['text':' Add offset to the base pointer for multiplier ','line_number':91,'multiline':True]
['text':' Load b_zero_point ','line_number':94,'multiline':True]
['text':' Load multiplier c0123 ','line_number':96,'multiline':True]
['text':' Load multiplier c4567 ','line_number':98,'multiline':True]
['text':' v8 := zero ','line_number':109,'multiline':True]
['text':' v9 := zero ','line_number':111,'multiline':True]
['text':' w12 = w_row_ptr[n], x13 = w_row_ptr[n+1] ','line_number':115,'multiline':True]
['text':' x4 = x4 + W_INDEX_DTYPE_NUM_BYTES_ARG to point to next n ','line_number':116,'multiline':True]
['text':' x10 = temp_packed_w = packed_w + w_row_ptr[n] * 4 ','line_number':119,'multiline':True]
['text':' This points to the first block of nonzero value ','line_number':120,'multiline':True]
['text':' for the nth row. ','line_number':121,'multiline':True]
['text':' x9 = temp_w_block_ids_ptr = w_block_ids_ptr (x5) + w_row_ptr[n] ','line_number':123,'multiline':True]
['text':' LSL for when elements are >1 byte ','line_number':124,'multiline':True]
['text':' (4 bytes: LSL #2, 2 bytes: LSL #1, 1 byte: LSL #0) ','line_number':125,'multiline':True]
['text':' This points to the block id of the first block ','line_number':126,'multiline':True]
['text':' It should contain x13 - x12 number of block ids ','line_number':127,'multiline':True]
['text':' x8 = num_blocks that needs to be processed ','line_number':129,'multiline':True]
['text':' b0-7 (channel 0) ','line_number':135,'multiline':True]
['text':' x12 = block_id_ptr[0] ','line_number':139,'multiline':True]
['text':' x13 = block_id_ptr[1] ','line_number':140,'multiline':True]
['text':' Add offset to x2 ','line_number':143,'multiline':True]
['text':' Shift by 5 because each packed block is a block of 8x4 ','line_number':144,'multiline':True]
['text':' which 32 bytes ','line_number':145,'multiline':True]
['text':' b0-7 (channel 0) ','line_number':192,'multiline':True]
['text':' x12 = block_id_ptr[0] ','line_number':196,'multiline':True]
['text':' Add offset to x2 ','line_number':198,'multiline':True]
['text':' Shift by 5 because each packed block is a block of 8x4 ','line_number':199,'multiline':True]
['text':' which 32 bytes ','line_number':200,'multiline':True]
['text':' Store result on stack ','line_number':224,'multiline':True]
['text':' -64 because all d8-d15 are on stack ','line_number':226,'multiline':True]
['text':' + 256 bytes of buffer when nr = 1 ','line_number':227,'multiline':True]
['text':' 256 because we are doing 8x8 block with each value being 4 bytes ','line_number':228,'multiline':True]
['text':' Thus 64 * 4 = 256 ','line_number':229,'multiline':True]
['text':' 256 + 64 = 320 ','line_number':230,'multiline':True]
['text':' This is needed because after processing all nrs we will ','line_number':231,'multiline':True]
['text':' load 256  bytes from stack. ','line_number':232,'multiline':True]
['text':' Thus we will load accumulators back in v8, v9, v10, v11, v12, v13, v14, v15 ','line_number':233,'multiline':True]
['text':' v16, v17, v18, v19, v20, v21, v22, v23 ','line_number':234,'multiline':True]
['text':' When nr < 8, say nr = 1, extra v values will be fetched from stack which may overlap ','line_number':235,'multiline':True]
['text':' with other parts of stack storing local variables. To avoid that we just ','line_number':236,'multiline':True]
['text':' create a buffer of 256 bytes inbetween to make sure pointer increment ','line_number':237,'multiline':True]
['text':' never produces address that is beyond the stack frame of this function. ','line_number':238,'multiline':True]
['text':' Each iteration produce 8 values each of 4 bytes ','line_number':240,'multiline':True]
['text':' Thus 8 x 4 = 32 bytes 2^5 ','line_number':241,'multiline':True]
['text':' In this implementation, first value will be stored at ','line_number':242,'multiline':True]
['text':' 1st value: sp - 64 - r1 * 32 ','line_number':243,'multiline':True]
['text':' 2nd value: sp - 12 - (r1 - 1) * 32 ','line_number':244,'multiline':True]
['text':' and so on. ','line_number':245,'multiline':True]
['text':' Shift zero point vector by 8 to load ','line_number':250,'multiline':True]
['text':' zero point of the next channel ','line_number':251,'multiline':True]
['text':' Check if nr >=1 ','line_number':253,'multiline':True]
['text':' First load all the accumulators from stack ','line_number':257,'multiline':True]
['text':' Load nr ','line_number':258,'multiline':True]
['text':' Now load v8-v15 ','line_number':261,'multiline':True]
['text':' This is 8x4 block (nrxmr) ','line_number':262,'multiline':True]
['text':' We will transpose this to 4x8 (mrxnr) ','line_number':263,'multiline':True]
['text':' v8, v9   : x00, x10, x20, x30; x40, x50, x60, x70 ','line_number':264,'multiline':True]
['text':' v10, v11 : x01, x11, x21, x31; x41, x51, x61, x71 ','line_number':265,'multiline':True]
['text':' v12, v13 : x02, x12, x22, x32; x42, x52, x62, x72 ','line_number':266,'multiline':True]
['text':' v14, v15 : x03, x13, x23, x33; x43, x53, x63, x73 ','line_number':267,'multiline':True]
['text':' ','line_number':268,'multiline':True]
['text':' v16, v17 : x04, x14, x24, x34; x44, x54, x64, x74 ','line_number':269,'multiline':True]
['text':' v18, v19 : x05, x15, x25, x35; x45, x55, x65, x75 ','line_number':270,'multiline':True]
['text':' v20, v21 : x06, x16, x26, x36; x46, x56, x66, x76 ','line_number':271,'multiline':True]
['text':' v22, v23 : x07, x17, x27, x37; x47, x57, x67, x77 ','line_number':272,'multiline':True]
['text':' We can tranpose one 4x4 block using macro ','line_number':290,'multiline':True]
['text':' TRANSPOSE_4X4_S32 v8, v10, v12, v14, v0, v1, v2, v3 ','line_number':291,'multiline':True]
['text':' After this we have ','line_number':292,'multiline':True]
['text':' v8  : x00, x01, x02, x03 ','line_number':293,'multiline':True]
['text':' v10 : x10, x11, x12, x13 ','line_number':294,'multiline':True]
['text':' v12 : x20, x21, x22, x23 ','line_number':295,'multiline':True]
['text':' v14 : x30, x31, x32, x33 ','line_number':296,'multiline':True]
['text':' Then using ','line_number':297,'multiline':True]
['text':' TRANSPOSE_4X4_S32 v16, v18, v20, v22, v4, v5, v6, v7 ','line_number':298,'multiline':True]
['text':' We get ','line_number':299,'multiline':True]
['text':' v16 : x04, x05, x06, x07 ','line_number':300,'multiline':True]
['text':' v18 : x14, x15, x16, x17 ','line_number':301,'multiline':True]
['text':' v20 : x24, x25, x26, x27 ','line_number':302,'multiline':True]
['text':' v22 : x34, x35, x36, x37 ','line_number':303,'multiline':True]
['text':' Similarly we can transpose other two 4x4 blocks and we get ','line_number':304,'multiline':True]
['text':' tranposed 8x8 ','line_number':305,'multiline':True]
['text':' row 0: v8, v16 ','line_number':312,'multiline':True]
['text':' row 1: v10, v18 ','line_number':313,'multiline':True]
['text':' row 2: v12, v20 ','line_number':314,'multiline':True]
['text':' row 3: v14, v22 ','line_number':315,'multiline':True]
['text':' row 4: v9, v17 ','line_number':316,'multiline':True]
['text':' row 5: v11, v19 ','line_number':317,'multiline':True]
['text':' row 6: v13, v21 ','line_number':318,'multiline':True]
['text':' row 7: v15, v23 ','line_number':319,'multiline':True]
['text':' Load c_stride & params ','line_number':321,'multiline':True]
['text':' Compute c0-c7 ','line_number':378,'multiline':True]
