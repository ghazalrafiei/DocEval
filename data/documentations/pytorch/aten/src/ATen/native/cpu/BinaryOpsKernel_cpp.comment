['text':'includeBool','line_number':201,'multiline':True]
['text':' There's no SIMD integer division, so don't try to vectorize it.','line_number':202,'multiline':False]
['text':' TODO: if the divisor is a scalar, rewrite as multiplication by a','line_number':203,'multiline':False]
['text':' constant.','line_number':204,'multiline':False]
['text':' In the special case of unsigned integer division, floor division is','line_number':272,'multiline':False]
['text':' equivalent to truncation division (since the signs of the divisor and','line_number':273,'multiline':False]
['text':' dividend are always the same)','line_number':274,'multiline':False]
['text':'includeBool','line_number':276,'multiline':True]
['text':' There's no SIMD integer division, so don't try to vectorize it.','line_number':277,'multiline':False]
['text':' See NOTE: [Floor Division in Python]','line_number':285,'multiline':False]
['text':'includeBool','line_number':323,'multiline':True]
['text':' Boolean type does not work with ^ (bitwise XOR) in C++. bitwise_xor wraps','line_number':410,'multiline':False]
['text':' this operation for both Boolean and integral types.','line_number':411,'multiline':False]
['text':' See Note [special-case bool outputs]','line_number':440,'multiline':False]
['text':' See Note [special-case bool outputs]','line_number':458,'multiline':False]
['text':' See Note [special-case bool outputs]','line_number':476,'multiline':False]
['text':' right shift value to retain sign bit for signed and no bits for','line_number':499,'multiline':False]
['text':' unsigned','line_number':500,'multiline':False]
['text':' See Note [special-case bool outputs]','line_number':514,'multiline':False]
['text':' See Note [special-case bool outputs]','line_number':534,'multiline':False]
['text':' See Note [special-case bool outputs]','line_number':554,'multiline':False]
['text':' See Note [special-case bool outputs]','line_number':574,'multiline':False]
['text':' See Note [special-case bool outputs]','line_number':594,'multiline':False]
['text':' See Note [special-case bool outputs]','line_number':613,'multiline':False]
['text':'includeBool=','line_number':634,'multiline':True]
['text':'includeBool=','line_number':669,'multiline':True]
['text':'includeBool=','line_number':979,'multiline':True]
['text':' chebyshev_polynomial_t_kernel(TensorIteratorBase& iterator)','line_number':1273,'multiline':False]
['text':' chebyshev_polynomial_u_kernel(TensorIteratorBase& iterator)','line_number':1282,'multiline':False]
['text':' chebyshev_polynomial_v_kernel(TensorIteratorBase& iterator)','line_number':1291,'multiline':False]
['text':' chebyshev_polynomial_w_kernel(TensorIteratorBase& iterator)','line_number':1300,'multiline':False]
['text':' hermite_polynomial_h_kernel(TensorIteratorBase& iterator)','line_number':1309,'multiline':False]
['text':' hermite_polynomial_he_kernel(TensorIteratorBase& iterator)','line_number':1318,'multiline':False]
['text':' laguerre_polynomial_l_kernel(TensorIteratorBase& iterator)','line_number':1327,'multiline':False]
['text':' legendre_polynomial_p_kernel(TensorIteratorBase& iterator)','line_number':1336,'multiline':False]
['text':' shifted_chebyshev_polynomial_t_kernel(TensorIteratorBase& iterator)','line_number':1345,'multiline':False]
['text':' shifted_chebyshev_polynomial_u_kernel(TensorIteratorBase& iterator)','line_number':1354,'multiline':False]
['text':' shifted_chebyshev_polynomial_v_kernel(TensorIteratorBase& iterator)','line_number':1363,'multiline':False]
['text':' shifted_chebyshev_polynomial_w_kernel(TensorIteratorBase& iterator)','line_number':1372,'multiline':False]
['text':' namespace','line_number':1374,'multiline':False]
['text':' Might enable AVX512 dispatch after enabling explicit vectorization for them.','line_number':1426,'multiline':False]
['text':' namespace at::native','line_number':1444,'multiline':False]
