['text':' Scalar math:','line_number':218,'multiline':False]
['text':' for (const auto j : c10::irange(N)) {','line_number':219,'multiline':False]
['text':'   dgamma_data[j] += dY_ptr[j] * (a * X_ptr[j] + b);','line_number':220,'multiline':False]
['text':' }','line_number':221,'multiline':False]
['text':' Scalar math:','line_number':233,'multiline':False]
['text':' for (const auto j : c10::irange(N)) {','line_number':234,'multiline':False]
['text':'   dbeta_data[j] += dY_ptr[j];','line_number':235,'multiline':False]
['text':' }','line_number':236,'multiline':False]
['text':' Scalar math:','line_number':248,'multiline':False]
['text':' for (const auto j : c10::irange(N)) {','line_number':249,'multiline':False]
['text':'   const T gamma_v = gamma_null ? T(1) : gamma_data[j];','line_number':250,'multiline':False]
['text':'   ds += dY_ptr[j] * X_ptr[j] * gamma_v;','line_number':251,'multiline':False]
['text':'   db += dY_ptr[j] * gamma_v;','line_number':252,'multiline':False]
['text':' }','line_number':253,'multiline':False]
['text':' Scalar math:','line_number':281,'multiline':False]
['text':' for (const auto j : c10::irange(N)) {','line_number':282,'multiline':False]
['text':'   const T gamma_v = gamma_null ? T(1) : gamma_data[j];','line_number':283,'multiline':False]
['text':'   dX_ptr[j] = a * dY_ptr[j] * gamma_v + b * X_ptr[j] + c;','line_number':284,'multiline':False]
['text':' }','line_number':285,'multiline':False]
['text':' Scalar math:','line_number':333,'multiline':False]
['text':' for (const auto j : c10::irange(N)) {','line_number':334,'multiline':False]
['text':'   dgamma_data[j] += dY_ptr[j] * (a * X_ptr[j] + b);','line_number':335,'multiline':False]
['text':' }','line_number':336,'multiline':False]
['text':' Scalar math:','line_number':348,'multiline':False]
['text':' for (const auto j : c10::irange(N)) {','line_number':349,'multiline':False]
['text':'   dbeta_data[j] += dY_ptr[j];','line_number':350,'multiline':False]
['text':' }','line_number':351,'multiline':False]
['text':' Scalar math:','line_number':363,'multiline':False]
['text':' for (const auto j : c10::irange(N)) {','line_number':364,'multiline':False]
['text':'   const T gamma_v = gamma_null ? T(1) : gamma_data[j];','line_number':365,'multiline':False]
['text':'   ds += dY_ptr[j] * X_ptr[j] * gamma_v;','line_number':366,'multiline':False]
['text':'   db += dY_ptr[j] * gamma_v;','line_number':367,'multiline':False]
['text':' }','line_number':368,'multiline':False]
['text':' Scalar math:','line_number':460,'multiline':False]
['text':' for (const auto j : c10::irange(N)) {','line_number':461,'multiline':False]
['text':'   const T gamma_v = gamma_null ? T(1) : gamma_data[j];','line_number':462,'multiline':False]
['text':'   dX_ptr[j] = a * dY_ptr[j] * gamma_v + b * X_ptr[j] + c;','line_number':463,'multiline':False]
['text':' }','line_number':464,'multiline':False]
['text':' 1. Use two path parallel reduction for dgamma and dbeta:','line_number':537,'multiline':False]
['text':'    First path: allocate an immediate buffer of size {2, max_threads, N},','line_number':538,'multiline':False]
['text':'        dgamma_buffer = buffer[0], dbeta_buffer = buffer[1]','line_number':539,'multiline':False]
['text':'    Parallel along dim0 and reduce dY and X along dim0 to buffer.','line_number':540,'multiline':False]
['text':'    Second path: parallel along dim1 and reduce buffer to dgamma and dbeta.','line_number':541,'multiline':False]
['text':'','line_number':542,'multiline':False]
['text':' 2. Fuse first path of dgamma/dbeta with dX to reuse X[i] and dY[i] in L1','line_number':543,'multiline':False]
['text':' cache.','line_number':544,'multiline':False]
['text':'','line_number':545,'multiline':False]
['text':' zero the immediate buffer and skip zero dgamma and dbeta','line_number':550,'multiline':False]
['text':' First path of dgamma/dbeta and dX','line_number':555,'multiline':False]
['text':' Second path of dgamma/dbeta','line_number':572,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.NullDereference)','line_number':583,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.NullDereference)','line_number':587,'multiline':False]
['text':' namespace','line_number':618,'multiline':False]
['text':' namespace at::native','line_number':623,'multiline':False]
