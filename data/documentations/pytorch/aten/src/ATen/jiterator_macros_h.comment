['text':' NVRTC on Windows errors if __host__ __device__ attribute is','line_number':7,'multiline':False]
['text':' present on kernel.','line_number':8,'multiline':False]
['text':' error: attribute "__host__" does not apply here','line_number':9,'multiline':False]
['text':' error: attribute "__device__" does not apply here','line_number':10,'multiline':False]
['text':' jiterator_also_stringify_as macro is used to define code (for CPU/ROCm)','line_number':14,'multiline':False]
['text':' and generate code string for `jiterator` (only when compiling for CUDA).','line_number':15,'multiline':False]
['text':' Usage :','line_number':16,'multiline':False]
['text':'      jiterator_also_stringify_as(','line_number':17,'multiline':False]
['text':'          jiterator_code(template <typename T> T identity(T x) { return x; }),','line_number':18,'multiline':False]
['text':'          identity_string);','line_number':19,'multiline':False]
['text':' This will define the template `identity` as present in code and','line_number':20,'multiline':False]
['text':' also define `std::string identity_string` with the code as the string','line_number':21,'multiline':False]
['text':' if this is being compiled for CUDA.','line_number':22,'multiline':False]
['text':' `jiterator_code` macro is to deal with `,` in the kernel code.','line_number':24,'multiline':False]
['text':' These `,`s confuse the preprocessor into thinking we are passing','line_number':25,'multiline':False]
['text':' multiple arguments to the macro.','line_number':26,'multiline':False]
['text':' CPU and CUDA and ROCm case','line_number':29,'multiline':False]
['text':' define the function ','line_number':32,'multiline':True]
['text':' CPU only or CPU and ROCm case','line_number':35,'multiline':False]
['text':' Only needs the function','line_number':36,'multiline':False]
