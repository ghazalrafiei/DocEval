['text':' this is because of something dumb in the ordering of','line_number':12,'multiline':False]
['text':' destruction. Sometimes atexit, the cuda context (or something)','line_number':13,'multiline':False]
['text':' would already be destroyed by the time this gets destroyed. It','line_number':14,'multiline':False]
['text':' happens in fbcode setting. @colesbury and @soumith decided to not destroy','line_number':15,'multiline':False]
['text':' the handle as a workaround.','line_number':16,'multiline':False]
['text':'   - Comments of @soumith copied from cuDNN handle pool implementation','line_number':17,'multiline':False]
['text':' namespace','line_number':26,'multiline':False]
['text':' Thread local PoolWindows are lazily-initialized','line_number':32,'multiline':False]
['text':' to avoid initialization issues that caused hangs on Windows.','line_number':33,'multiline':False]
['text':' See: https://github.com/pytorch/pytorch/pull/22405','line_number':34,'multiline':False]
['text':' This thread local unique_ptrs will be destroyed when the thread terminates,','line_number':35,'multiline':False]
['text':' releasing its reserved handles back to the pool.','line_number':36,'multiline':False]
['text':' namespace at::cuda','line_number':46,'multiline':False]
