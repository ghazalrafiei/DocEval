['text':' NOTE [ USE OF NVRTC AND DRIVER API ]','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':' ATen does not directly link to either libnvrtc or libcuda because they','line_number':12,'multiline':False]
['text':' require libcuda to be installed, yet we want our GPU build to work on CPU','line_number':13,'multiline':False]
['text':' machines as long as CUDA is not initialized.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' Normal CUDA code in torch uses the cuda runtime libraries which can be','line_number':16,'multiline':False]
['text':' installed even if the driver is not installed, but sometimes we specifically','line_number':17,'multiline':False]
['text':' need to use the driver API (e.g., to load JIT compiled code).','line_number':18,'multiline':False]
['text':' To accomplish this, we lazily link libcaffe2_nvrtc which provides a struct','line_number':19,'multiline':False]
['text':' at::cuda::NVRTC that contains function pointers to all of the apis we need.','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' IT IS AN ERROR TO TRY TO CALL ANY nvrtc* or cu* FUNCTION DIRECTLY.','line_number':22,'multiline':False]
['text':' INSTEAD USE, e.g.','line_number':23,'multiline':False]
['text':'   detail::getCUDAHooks().nvrtc().cuLoadModule(...)','line_number':24,'multiline':False]
['text':' or','line_number':25,'multiline':False]
['text':'   globalContext().getNVRTC().cuLoadModule(...)','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' If a function is missing add it to the list in ATen/cuda/nvrtc_stub/ATenNVRTC.h','line_number':28,'multiline':False]
['text':' and edit ATen/cuda/detail/LazyNVRTC.cpp accordingly (e.g., via one of the stub','line_number':29,'multiline':False]
['text':' macros).','line_number':30,'multiline':False]
['text':' NOTE [ ATen NVRTC Stub and HIP ]','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':' ATen's NVRTC stub library, caffe2_nvrtc, provides dynamic loading of both','line_number':78,'multiline':False]
['text':' NVRTC and driver APIs. While the former is not yet supported for HIP, the','line_number':79,'multiline':False]
['text':' later is supported and needed (e.g., in CUDAHooks::getDeviceWithPrimaryContext()','line_number':80,'multiline':False]
['text':' used by tensor.pin_memory()).','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':' The macro below strips out certain unsupported operations on HIP from the full','line_number':83,'multiline':False]
['text':' list above.','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':' HIP doesn't have','line_number':86,'multiline':False]
['text':'   cuGetErrorString  (maps to non-functional hipGetErrorString___)','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' HIP from ROCm 3.5 on renamed hipOccupancyMaxActiveBlocksPerMultiprocessor','line_number':89,'multiline':False]
['text':' to hipModuleOccupancyMaxActiveBlocksPerMultiprocessor.','line_number':90,'multiline':False]
['text':' at::cuda','line_number':126,'multiline':False]
