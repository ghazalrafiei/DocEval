['text':' this is because of something dumb in the ordering of','line_number':14,'multiline':False]
['text':' destruction. Sometimes atexit, the cuda context (or something)','line_number':15,'multiline':False]
['text':' would already be destroyed by the time this gets destroyed. It','line_number':16,'multiline':False]
['text':' happens in fbcode setting. @colesbury and I decided to not destroy','line_number':17,'multiline':False]
['text':' the handle as a workaround.','line_number':18,'multiline':False]
['text':'   - @soumith','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' Further note: this is now disabled globally, because we are seeing','line_number':21,'multiline':False]
['text':' the same issue as mentioned above in CUDA 11 CI.','line_number':22,'multiline':False]
['text':'   - @zasdfgbnm','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':' #ifdef NO_MIOPEN_DESTROY_HANDLE','line_number':25,'multiline':False]
['text':' #else','line_number':26,'multiline':False]
['text':'   miopenDestroy(handle);','line_number':27,'multiline':False]
['text':' #endif','line_number':28,'multiline':False]
['text':' namespace','line_number':33,'multiline':False]
['text':' Thread local PoolWindows are lazily-initialized','line_number':39,'multiline':False]
['text':' to avoid initialization issues that caused hangs on Windows.','line_number':40,'multiline':False]
['text':' See: https://github.com/pytorch/pytorch/pull/22405','line_number':41,'multiline':False]
['text':' This thread local unique_ptrs will be destroyed when the thread terminates,','line_number':42,'multiline':False]
['text':' releasing its reserved handles back to the pool.','line_number':43,'multiline':False]
['text':' namespace at::native','line_number':53,'multiline':False]
