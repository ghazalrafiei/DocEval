['text':' A template environment is a mapping from template variable names, e.g.,','line_number':13,'multiline':False]
['text':' identifier (corresponding to $identifier) to their expansions.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' This template environment supports storing strings, numbers and lists','line_number':16,'multiline':False]
['text':' of strings, and can be chained together (so that lookup proceeds in','line_number':17,'multiline':False]
['text':' in the top level environment, and then recurses into a parent','line_number':18,'multiline':False]
['text':' environment if the key is not found.)','line_number':19,'multiline':False]
['text':' Add a string 'v' to the map at key 'k'.','line_number':26,'multiline':False]
['text':' Add a number 'v' to the map at key 'k'','line_number':32,'multiline':False]
['text':' Retrieve the string representation of the value stored at 'k' from the map.','line_number':39,'multiline':False]
['text':' Raises an exception if the key is not found.','line_number':40,'multiline':False]
['text':' Store a list of strings 'v' in the map at 'k'.','line_number':51,'multiline':False]
['text':' Retrieve a list of strings stored at 'k' from the map.','line_number':57,'multiline':False]
['text':' Raises an exception if the key is not found.','line_number':58,'multiline':False]
['text':' Test if a string 'k' is a string (as opposed to a list.)','line_number':69,'multiline':False]
['text':'
# Match $identifier or ${identifier} and replace with the value in env.
# If this identifier is at the beginning of whitespace on a line
# and its value is a list then it is treated as
# block substitution by indenting all lines of all elements.
# If the identifier is on a line starting with non-whitespace and a list
# then it is comma separated. ${,foo} will insert a comma before the list
# if this list is not empty and ${foo,} will insert one after.
','line_number':92,'multiline':True]
['text':' implicit ','line_number':102,'multiline':True]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':113,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':115,'multiline':False]
['text':' These indentation functions follow the convention that they never emit','line_number':205,'multiline':False]
['text':' leading or trailing newlines when the input string does not have leading','line_number':206,'multiline':False]
['text':' or trailing newlines. It's the responsibility of the calling function','line_number':207,'multiline':False]
['text':' to indent correctly in the context.','line_number':208,'multiline':False]
['text':' namespace jit','line_number':244,'multiline':False]
['text':' namespace at','line_number':245,'multiline':False]
