['text':' Stored in COO format, indices + values.','line_number':17,'multiline':False]
['text':' INVARIANTS:','line_number':19,'multiline':False]
['text':' sparse_dim: range [0, len(shape)]; sparse_dim + dense_dim = len(shape)','line_number':20,'multiline':False]
['text':' dense_dim : range [0, len(shape)]; sparse_dim + dense_dim = len(shape)','line_number':21,'multiline':False]
['text':' _indices.shape: dimensionality: 2,  shape: (sparse_dim, nnz)','line_number':22,'multiline':False]
['text':' _values.shape:  dimensionality: 1 + dense_dim.  shape: (nnz,','line_number':23,'multiline':False]
['text':' shape[sparse_dim:])','line_number':24,'multiline':False]
['text':' number of sparse dimensions','line_number':26,'multiline':False]
['text':' number of dense dimensions','line_number':27,'multiline':False]
['text':' always a LongTensor','line_number':29,'multiline':False]
['text':' A sparse tensor is 'coalesced' if every index occurs at most once in','line_number':32,'multiline':False]
['text':' the indices tensor, and the indices are in sorted order.  (This means','line_number':33,'multiline':False]
['text':' that it is very easy to convert a coalesced tensor to CSR format: you','line_number':34,'multiline':False]
['text':' need only compute CSR format indices.)','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':' Most math operations can only be performed on coalesced sparse tensors,','line_number':37,'multiline':False]
['text':' because many algorithms proceed by merging two sorted lists (of indices).','line_number':38,'multiline':False]
['text':' compute_numel with integer multiplication overflow check, see gh-57542','line_number':41,'multiline':False]
['text':' Public for now...','line_number':47,'multiline':False]
['text':' WARNING: This function does NOT preserve invariants of sparse_dim/dense_dim','line_number':83,'multiline':False]
['text':' with respect to indices and values','line_number':84,'multiline':False]
['text':' NOTE: This function preserves invariants of sparse_dim/dense_dim with','line_number':99,'multiline':False]
['text':' respect to indices and values.','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':' NOTE: This function supports the following cases:','line_number':102,'multiline':False]
['text':' 1. When we keep the number of dense dimensions unchanged, and NOT shrinking','line_number':103,'multiline':False]
['text':' the size of any of the dense dimensions.','line_number':104,'multiline':False]
['text':' 2. When we keep the number of sparse dimensions unchanged, and NOT','line_number':105,'multiline':False]
['text':' shrinking the size of any of the sparse dimensions.','line_number':106,'multiline':False]
['text':' 3. When the sparse tensor has zero nnz, in which case we are free to change','line_number':107,'multiline':False]
['text':' the shapes of both its sparse and dense dimensions.','line_number':108,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':' This function DOESN'T support (and will throw an error) the following','line_number':110,'multiline':False]
['text':' cases:','line_number':111,'multiline':False]
['text':' 1. When we attempt to change the number of sparse dimensions on a non-empty','line_number':112,'multiline':False]
['text':' sparse tensor (such an operation will invalidate the indices stored).','line_number':113,'multiline':False]
['text':' 2. When we attempt to change the number of dense dimensions on a non-empty','line_number':114,'multiline':False]
['text':' sparse tensor (such an operation will behave differently from an equivalent','line_number':115,'multiline':False]
['text':' dense tensor's resize method, and for API consistency we don't support it).','line_number':116,'multiline':False]
['text':' 3. When we attempt to shrink the size of any of the dense dimensions on a','line_number':117,'multiline':False]
['text':' non-empty sparse tensor (such an operation will behave differently from an','line_number':118,'multiline':False]
['text':' equivalent dense tensor's resize method, and for API consistency we don't','line_number':119,'multiline':False]
['text':' support it).','line_number':120,'multiline':False]
['text':' 4. When we attempt to shrink the size of any of the sparse dimensions on a','line_number':121,'multiline':False]
['text':' non-empty sparse tensor (this could make some of the stored indices','line_number':122,'multiline':False]
['text':' out-of-bound and thus unsafe).','line_number':123,'multiline':False]
['text':' NOTE: this function will resize the sparse tensor and also set `indices`','line_number':241,'multiline':False]
['text':' and `values` to empty.','line_number':242,'multiline':False]
['text':' NOTE: this function is only used internally and not exposed to Python','line_number':284,'multiline':False]
['text':' frontend','line_number':285,'multiline':False]
['text':' Takes indices and values and directly puts them into the sparse tensor, no','line_number':299,'multiline':False]
['text':' copy. NOTE: this function is unsafe because it doesn't check whether any','line_number':300,'multiline':False]
['text':' indices are out of boundaries of `sizes`, so it should ONLY be used where','line_number':301,'multiline':False]
['text':' we know that the indices are guaranteed to be within bounds. This used to','line_number':302,'multiline':False]
['text':' be called THSTensor_(_move) NB: This used to be able to avoid a refcount','line_number':303,'multiline':False]
['text':' bump, but I was too lazy to make it happen','line_number':304,'multiline':False]
['text':'*
   * Return a TensorImpl that is a shallow-copy of this TensorImpl.
   *
   * For usage of `version_counter` and `allow_tensor_metadata_change`,
   * see NOTE [ TensorImpl Shallow-Copying ].
   ','line_number':309,'multiline':True]
['text':'src_impl=','line_number':320,'multiline':True]
['text':'dest_impl=','line_number':321,'multiline':True]
['text':'version_counter=','line_number':322,'multiline':True]
['text':'allow_tensor_metadata_change=','line_number':323,'multiline':True]
['text':'*
   * Return a TensorImpl that is a shallow-copy of this TensorImpl.
   *
   * For usage of `version_counter` and `allow_tensor_metadata_change`,
   * see NOTE [ TensorImpl Shallow-Copying ].
   ','line_number':328,'multiline':True]
['text':'src_impl=','line_number':339,'multiline':True]
['text':'dest_impl=','line_number':340,'multiline':True]
['text':'version_counter=','line_number':341,'multiline':True]
['text':'allow_tensor_metadata_change=','line_number':342,'multiline':True]
['text':'*
   * Shallow-copies data from another TensorImpl into this TensorImpl.
   *
   * For why this function doesn't check this TensorImpl's
   * `allow_tensor_metadata_change_`, see NOTE [ TensorImpl Shallow-Copying ].
   ','line_number':347,'multiline':True]
['text':'src_impl=','line_number':357,'multiline':True]
['text':'dest_impl=','line_number':358,'multiline':True]
['text':'version_counter=','line_number':359,'multiline':True]
['text':'allow_tensor_metadata_change=','line_number':360,'multiline':True]
['text':'*
   * Copy the tensor metadata fields (e.g. sizes / strides / storage pointer /
   * storage_offset) from one TensorImpl to another TensorImpl.
   *
   * For usage of `version_counter` and `allow_tensor_metadata_change`, see NOTE
   * [ TensorImpl Shallow-Copying ].
   ','line_number':371,'multiline':True]
['text':' Sparse-specific fields','line_number':389,'multiline':False]
['text':' namespace at','line_number':400,'multiline':False]
