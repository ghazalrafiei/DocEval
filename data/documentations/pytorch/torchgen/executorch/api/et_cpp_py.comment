['text':' Translation of "value types" in JIT schema to C++ API type.  Value','line_number':57,'multiline':False]
['text':' types look the same no matter if they are argument types or return','line_number':58,'multiline':False]
['text':' types.  Returns None if the type in question is not a value type.','line_number':59,'multiline':False]
['text':' For SymInt we simply treat it as int.','line_number':69,'multiline':False]
['text':' All other BaseType currently map directly to BaseCppTypes.','line_number':77,'multiline':False]
['text':' Translation of types occurring in JIT arguments to a C++ argument type.','line_number':96,'multiline':False]
['text':' If remove_non_owning_ref_types is set, we'll guarantee that the outputed CType is not a non-owning reference type.','line_number':97,'multiline':False]
['text':' For example, we'll return std::vector<int> instead of IntArrayRef.','line_number':98,'multiline':False]
['text':' See Note [translation from C++ reference to value types]','line_number':99,'multiline':False]
['text':' If it's a value type, do the value type translation','line_number':107,'multiline':False]
['text':' TODO: fix this discrepancy','line_number':130,'multiline':False]
['text':' TODO: keeping these special cases for Tensor[] and Tensor?[] so that we can hookup with ATen kernels.','line_number':140,'multiline':False]
['text':' Translate a JIT argument into its C++ type','line_number':153,'multiline':False]
['text':' Translation of a (non-multi) return type from JIT to C++','line_number':158,'multiline':False]
['text':' N.B: returntype_type returns a CType, not a NamedCType.','line_number':159,'multiline':False]
['text':' This is mostly because of the mismatch between return types and return names.','line_number':160,'multiline':False]
['text':' e.g. a function with a return type of 'void' has 0 return names,','line_number':161,'multiline':False]
['text':' and a function with a return type of 'std::tuple' has >1 return name.','line_number':162,'multiline':False]
['text':' placeholder is ignored','line_number':164,'multiline':False]
['text':' Note [Tensor Copy Returns]','line_number':177,'multiline':False]
['text':' Currently, we use "Argument.is_write" to determine','line_number':178,'multiline':False]
['text':' whether or not Tensor return types should be copies or references.','line_number':179,'multiline':False]
['text':' If that ever changes, take a look at other locations of this note!','line_number':180,'multiline':False]
['text':' Translation of a single return to its C++ type','line_number':195,'multiline':False]
['text':' Translation of a full (possibly multi) return from JIT to its C++ type','line_number':200,'multiline':False]
['text':' If we have an inplace function, the return argument is','line_number':213,'multiline':False]
['text':' implicitly named self.','line_number':214,'multiline':False]
['text':' TODO: Consider incorporating this into the data model','line_number':215,'multiline':False]
['text':' If we are out function, the name is the name of the','line_number':219,'multiline':False]
['text':' corresponding output function (r.name will get recorded','line_number':220,'multiline':False]
['text':' in field_name later.)','line_number':221,'multiline':False]
['text':' If the return argument is explicitly named...','line_number':224,'multiline':False]
['text':' If there is no explicit name and no fallback name was passed in, we just name the output result,','line_number':233,'multiline':False]
['text':' unless it's a multi-return, in which case it's result0,','line_number':234,'multiline':False]
['text':' result1, etc (zero-indexed)','line_number':235,'multiline':False]
['text':' UGH this one is type directed','line_number':245,'multiline':False]
['text':' Convert a JIT default into C++ expression representing the default','line_number':252,'multiline':False]
['text':' Schema allows single quotes but C++ needs double','line_number':257,'multiline':False]
['text':' NOTE: Sized lists can have scalar defaults','line_number':287,'multiline':False]
['text':' Convert an argument into its C++ API form','line_number':293,'multiline':False]
['text':' Caller is responsible for installing implicit this in context!','line_number':336,'multiline':False]
