['text':' Parses the external backend's yaml, and adds a new BackendIndex for the backend's dispatch key.','line_number':29,'multiline':False]
['text':' Returns a Tuple of (backend_key, autograd_key, cpp_namespace, updated BackendIndex mapping)','line_number':30,'multiline':False]
['text':' Mostly just defaulting to false to stick with LazyTensor convention.','line_number':75,'multiline':False]
['text':' Allow an empty list of supported ops','line_number':88,'multiline':False]
['text':' Allow an empty list of symint ops','line_number':95,'multiline':False]
['text':' full_codegen is ignored by parse_backend_yaml, and re-parsed in gen_lazy_tensor.py','line_number':106,'multiline':False]
['text':' non_native is ignored by parse_backend_yaml, and re-parsed in gen_lazy_tensor.py','line_number':110,'multiline':False]
['text':' ir_gen is ignored by parse_backend_yaml, and re-parsed in gen_lazy_tensor.py','line_number':113,'multiline':False]
['text':' See Note [External Backends Follow Dispatcher API]','line_number':135,'multiline':False]
['text':' TODO: allow structured external backends later.','line_number':139,'multiline':False]
['text':' Quick mapping from each OperatorName used by the external backend','line_number':269,'multiline':False]
['text':' to its backend kernel name','line_number':270,'multiline':False]
['text':' This just looks for lines containing "foo(", and assumes that the kernel foo has been implemented.','line_number':295,'multiline':False]
['text':' It might cause false negatives (we won't catch all cases), but that's ok - if we catch a missing kernel','line_number':296,'multiline':False]
['text':' here, then we get a nicer error message. If we miss it, you get a linker error.','line_number':297,'multiline':False]
['text':' A bit unwieldy (this could probably be moved into regex),','line_number':300,'multiline':False]
['text':' but we don't want to include kernel names that come from function calls,','line_number':301,'multiline':False]
['text':' like "return torch_xla::XLANativeFunctions::empty_strided_symint(...)".','line_number':302,'multiline':False]
['text':' Easy check is to ignore any lines with colons before the class name.','line_number':303,'multiline':False]
['text':' Convert to a set first to remove duplicate kernel names.','line_number':370,'multiline':False]
['text':' Backends are allowed to repeat kernel names; only generate the declaration once!','line_number':371,'multiline':False]
['text':' Sort for deterministic output.','line_number':372,'multiline':False]
['text':' build_in_tree is true for lazy TS backend and affects include paths, not used for external backends','line_number':421,'multiline':False]
['text':' Assumes that this file lives at PYTORCH_ROOT/torchgen/gen_backend_stubs.py','line_number':529,'multiline':False]
['text':' This could be useful if a backend wants to quickly set up a noop yaml file but doesn't have any kernels ready yet.','line_number':562,'multiline':False]
['text':' class_name is an optional argument to backend yaml file.','line_number':566,'multiline':False]
['text':' if specified it allows an external backend to override','line_number':567,'multiline':False]
['text':' the name of the class that all generated kernel definitions live under.','line_number':568,'multiline':False]
['text':' if not specified, its value is given as native_function_class_name.','line_number':569,'multiline':False]
