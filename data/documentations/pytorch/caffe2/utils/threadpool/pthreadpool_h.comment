['text':' pthreadpool header from https://github.com/Maratyszcza/pthreadpool','line_number':1,'multiline':False]
['text':' for NNPACK','line_number':2,'multiline':False]
['text':' for size_t','line_number':8,'multiline':False]
['text':' for uint32_t','line_number':9,'multiline':False]
['text':' This is a hack.','line_number':12,'multiline':False]
['text':' Mainly introduced here because','line_number':13,'multiline':False]
['text':' 1. NNPACK can be compiled to use internal legacy threadpool implementation because much of C2 depends on that.','line_number':14,'multiline':False]
['text':' 2. Then if we want to use NNPACK in PyTorch, which uses new pthreadpool, then we will supply new pthreadpool pointer','line_number':15,'multiline':False]
['text':'    to NNPACK. This will not work if NNPACK is compiled with internal legacy threadpool. Thus this guard','line_number':16,'multiline':False]
['text':'    along with changes in pthreadpool_impl.cc allows us to override that behavior.','line_number':17,'multiline':False]
['text':'    It enables us to use NNPACK from pytorch using `caffe2::pthreadpool_()`','line_number':18,'multiline':False]
['text':'*
 * Creates a thread pool with the specified number of threads.
 *
 * @param[in]  threads_count  The number of threads in the thread pool.
 *    A value of 0 has special interpretation: it creates a thread for each
 *    processor core available in the system.
 *
 * @returns  A pointer to an opaque thread pool object.
 *    On error the function returns NULL and sets errno accordingly.
 ','line_number':59,'multiline':True]
['text':' Returns internal threadpool impl.','line_number':70,'multiline':False]
['text':'*
 * Queries the number of threads in a thread pool.
 *
 * @param[in]  threadpool  The thread pool to query.
 *
 * @returns  The number of threads in the thread pool.
 ','line_number':73,'multiline':True]
['text':'*
 * Processes items in parallel using threads from a thread pool.
 *
 * When the call returns, all items have been processed and the thread pool is
 * ready for a new task.
 *
 * @note If multiple threads call this function with the same thread pool, the
 *    calls are serialized.
 *
 * @param[in]  threadpool  The thread pool to use for parallelisation.
 * @param[in]  function    The function to call for each item.
 * @param[in]  argument    The first argument passed to the @a function.
 * @param[in]  items       The number of items to process. The @a function
 *    will be called once for each item.
 ','line_number':82,'multiline':True]
['text':'*
 * Terminates threads in the thread pool and releases associated resources.
 *
 * @warning  Accessing the thread pool after a call to this function constitutes
 *    undefined behaviour and may cause data corruption.
 *
 * @param[in,out]  threadpool  The thread pool to destroy.
 ','line_number':157,'multiline':True]
['text':' USE_INTERNAL_PTHREADPOOL_IMPL ','line_number':187,'multiline':True]
['text':' extern "C" ','line_number':190,'multiline':True]
['text':' CAFFE2_UTILS_PTHREADPOOL_H_','line_number':193,'multiline':False]
