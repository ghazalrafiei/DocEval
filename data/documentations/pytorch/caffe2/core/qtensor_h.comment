['text':'*
   * @brief Creates a quantized tensor of the given dimension.
   *
   * Note that the actual data allocation is not going to be carried out until
   * the first time mutable_data() is called.
   *
   * The underlying storage of the quantized tensor interleaves elements
   * by bit depth.
   *
   * Labeled memory for tensor of size 6, precision 3
   *   [ E1[0] E2[0] E3[0] E4[0] E5[0] E6[0] ] // Least significant Bits
   *   [ E1[1] E2[1] E3[1] E4[1] E5[1] E6[1] ]
   *   [ E1[2] E2[2] E3[2] E4[2] E5[2] E6[2] ]
   *
   * In the case of sign bits (see enable_sign argument), an extra bit
   * per element is added:
   *
   * Labeled memory for tensor of size 6, precision 3, sign bit enabled
   *   [ E1[0] E2[0] E3[0] E4[0] E5[0] E6[0] ]
   *   [ E1[1] E2[1] E3[1] E4[1] E5[1] E6[1] ]
   *   [ E1[2] E2[2] E3[2] E4[2] E5[2] E6[2] ]
   *   [ E1[s] E2[s] E3[s] E4[s] E5[s] E6[s] ]
   *   Where 's' is 1 if E is negative
   *
   * The reason for this layout is the ability to efficiently multiply
   * many low precision integers as a sum of popcnt(A & B) * 1 << bit.
   * Explained here: https://arxiv.org/abs/1606.06160
   ','line_number':23,'multiline':True]
['text':' TODO: changing at::ArrayRef<int> to at::ArrayRef<int64_t>?','line_number':51,'multiline':False]
['text':' Get the mutable data at bit depth `bit`.','line_number':74,'multiline':False]
['text':' Get the data at bit depth `bit`','line_number':96,'multiline':False]
['text':' TODO: deprecate?','line_number':154,'multiline':False]
['text':'*
   * Returns the number of dimensions of the data.
   ','line_number':163,'multiline':True]
['text':'*
   * Returns the i-th dimension of the qtensor in int.
   ','line_number':186,'multiline':True]
['text':'*
   * Returns the 'canonical' version of a (usually)  user-specified axis,
   * allowing for negative indexing (e.g., -1 for the last axis).
   *
   * @param axis_index the axis index.
   *        If 0 <= index < ndim(), return index.
   *        If -ndim <= index <= -1, return (ndim() - (-index)),
   *        e.g., the last axis index (ndim() - 1) if index == -1,
   *        the second to last if index == -2, etc.
   *        Dies on out of range index.
   ','line_number':196,'multiline':True]
['text':'*
   * Return product of all dimensions starting from K.
   ','line_number':216,'multiline':True]
['text':'*
   * Product of all dims up to.
   ','line_number':227,'multiline':True]
['text':' Precision in bits.','line_number':243,'multiline':False]
['text':' Bit alignment.','line_number':245,'multiline':False]
['text':' Allocated data.','line_number':248,'multiline':False]
['text':' value = scale_ * (x + bias_)','line_number':251,'multiline':False]
['text':' Capacity in bits.','line_number':256,'multiline':False]
['text':' namespace caffe2','line_number':260,'multiline':False]
['text':' CAFFE2_CORE_QTENSOR_H_','line_number':261,'multiline':False]
