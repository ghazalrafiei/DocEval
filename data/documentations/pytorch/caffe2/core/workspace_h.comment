['text':'iter','line_number':36,'multiline':True]
['text':'*
 * Workspace is a class that holds all the related objects created during
 * runtime: (1) all blobs, and (2) all instantiated networks. It is the owner of
 * all these objects and deals with the scaffolding logistics.
 ','line_number':43,'multiline':True]
['text':'*
   * Initializes an empty workspace.
   ','line_number':51,'multiline':True]
['text':'*
   * Initializes an empty workspace with the given root folder.
   *
   * For any operators that are going to interface with the file system, such
   * as load operators, they will write things under this root folder given
   * by the workspace.
   ','line_number':56,'multiline':True]
['text':'*
   * Initializes a workspace with a shared workspace.
   *
   * When we access a Blob, we will first try to access the blob that exists
   * in the local workspace, and if not, access the blob that exists in the
   * shared workspace. The caller keeps the ownership of the shared workspace
   * and is responsible for making sure that its lifetime is longer than the
   * created workspace.
   ','line_number':66,'multiline':True]
['text':'*
   * Initializes workspace with parent workspace, blob name remapping
   * (new name -> parent blob name), no other blobs are inherited from
   * parent workspace
   ','line_number':77,'multiline':True]
['text':'*
   * Initializes a workspace with a root folder and a shared workspace.
   ','line_number':97,'multiline':True]
['text':' This is why we have a bookkeeper_ shared_ptr instead of a naked static! A','line_number':110,'multiline':False]
['text':' naked static makes us vulnerable to out-of-order static destructor bugs.','line_number':111,'multiline':False]
['text':'*
   * Adds blob mappings from workspace to the blobs from parent workspace.
   * Creates blobs under possibly new names that redirect read/write operations
   * to the blobs in the parent workspace.
   * Arguments:
   *  parent - pointer to parent workspace
   *  forwarded_blobs - map from new blob name to blob name in parent's
   * workspace skip_defined_blob - if set skips blobs with names that already
   * exist in the workspace, otherwise throws exception
   ','line_number':116,'multiline':True]
['text':'*
   * Converts previously mapped tensor blobs to local blobs, copies values from
   * parent workspace blobs into new local blobs. Ignores undefined blobs.
   ','line_number':131,'multiline':True]
['text':'*
   * Return list of blobs owned by this Workspace, not including blobs
   * shared from parent workspace.
   ','line_number':159,'multiline':True]
['text':'*
   * Return a list of blob names. This may be a bit slow since it will involve
   * creation of multiple temp variables. For best performance, simply use
   * HasBlob() and GetBlob().
   ','line_number':165,'multiline':True]
['text':'*
   * Return the root folder of the workspace.
   ','line_number':172,'multiline':True]
['text':'*
   * Checks if a blob with the given name is present in the current workspace.
   ','line_number':176,'multiline':True]
['text':' First, check the local workspace,','line_number':180,'multiline':False]
['text':' Then, check the forwarding map, then the parent workspace','line_number':181,'multiline':False]
['text':'*
   * Creates a blob of the given name. The pointer to the blob is returned, but
   * the workspace keeps ownership of the pointer. If a blob of the given name
   * already exists, the creation is skipped and the existing blob is returned.
   ','line_number':202,'multiline':True]
['text':'*
   * Similar to CreateBlob(), but it creates a blob in the local workspace even
   * if another blob with the same name already exists in the parent workspace
   * -- in such case the new blob hides the blob in parent workspace. If a blob
   * of the given name already exists in the local workspace, the creation is
   * skipped and the existing blob is returned.
   ','line_number':208,'multiline':True]
['text':'*
   * Remove the blob of the given name. Return true if removed and false if
   * not exist.
   * Will NOT remove from the shared workspace.
   ','line_number':216,'multiline':True]
['text':'*
   * Gets the blob with the given name as a const pointer. If the blob does not
   * exist, a nullptr is returned.
   ','line_number':222,'multiline':True]
['text':'*
   * Gets the blob with the given name as a mutable pointer. If the blob does
   * not exist, a nullptr is returned.
   ','line_number':227,'multiline':True]
['text':'*
   * Renames a local workspace blob. If blob is not found in the local blob list
   * or if the target name is already present in local or any parent blob list
   * the function will throw.
   ','line_number':233,'multiline':True]
['text':'*
   * Creates a network with the given NetDef, and returns the pointer to the
   * network. If there is anything wrong during the creation of the network, a
   * nullptr is returned. The Workspace keeps ownership of the pointer.
   *
   * If there is already a net created in the workspace with the given name,
   * CreateNet will overwrite it if overwrite=true is specified. Otherwise, an
   * exception is thrown.
   ','line_number':240,'multiline':True]
['text':'*
   * Gets the pointer to a created net. The workspace keeps ownership of the
   * network.
   ','line_number':253,'multiline':True]
['text':'*
   * Deletes the instantiated network with the given name.
   ','line_number':258,'multiline':True]
['text':'*
   * Finds and runs the instantiated network with the given name. If the network
   * does not exist or there are errors running the network, the function
   * returns false.
   ','line_number':262,'multiline':True]
['text':'*
   * Returns a list of names of the currently instantiated networks.
   ','line_number':269,'multiline':True]
['text':'*
   * Runs a plan that has multiple nets and execution steps.
   ','line_number':280,'multiline':True]
['text':'
   * Returns a CPU threadpool instance for parallel execution of
   * work. The threadpool is created lazily; if no operators use it,
   * then no threadpool will be created.
   ','line_number':286,'multiline':True]
['text':' RunOperatorOnce and RunNetOnce runs an operator or net once. The difference','line_number':293,'multiline':False]
['text':' between RunNet and RunNetOnce lies in the fact that RunNet allows you to','line_number':294,'multiline':False]
['text':' have a persistent net object, while RunNetOnce creates a net and discards','line_number':295,'multiline':False]
['text':' it on the fly - this may make things like database read and random number','line_number':296,'multiline':False]
['text':' generators repeat the same thing over multiple calls.','line_number':297,'multiline':False]
['text':'*
   * Applies a function f on each workspace that currently exists.
   *
   * This function is thread safe and there is no race condition between
   * workspaces being passed to f in this thread and destroyed in another.
   ','line_number':301,'multiline':True]
['text':' namespace caffe2','line_number':340,'multiline':False]
['text':' CAFFE2_CORE_WORKSPACE_H_','line_number':342,'multiline':False]
