['text':' NOLINT','line_number':7,'multiline':False]
['text':' Net is a thin struct that owns all the operators together with the operator','line_number':35,'multiline':False]
['text':' contexts.','line_number':36,'multiline':False]
['text':' by default just wait till all events are finished','line_number':48,'multiline':False]
['text':' Benchmarks a network for one individual run so that we can feed new
   * inputs on additional calls.
   * This function returns the number of microseconds spent
   * during the benchmark
   ','line_number':67,'multiline':True]
['text':'*
   * Benchmarks a network.
   *
   * This function returns a vector of float recording the number of milli-
   * seconds spent during the benchmark. The 0-th item is the time spent per
   * each network run, and if a net instantiation supports run_individual,
   * the remainder of the vector returns the number of milliseconds spent per
   * operator.
   ','line_number':74,'multiline':True]
['text':'warmup_runs','line_number':84,'multiline':True]
['text':'main_runs','line_number':85,'multiline':True]
['text':'run_individual','line_number':86,'multiline':True]
['text':' Used to attach Observers to operators of a Net
   *
   * Returns pointers to objects owned with unique_ptrs.
   * Use with caution.
   ','line_number':96,'multiline':True]
['text':'*
 * @brief Creates a network, accessing / creating blobs in the given workspace.
 *
 * Note that this is different from Workspace::CreateNet. The latter adds the
 * created net object to the workspace's net map, while this function returns
 * a standalone net object.
 ','line_number':157,'multiline':True]
['text':' namespace caffe2','line_number':173,'multiline':False]
['text':' CAFFE2_CORE_NET_H_','line_number':175,'multiline':False]
