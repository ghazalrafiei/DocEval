['text':'*
 *  Graph representation of an operator.
 ','line_number':16,'multiline':True]
['text':' Empty constructor for resize','line_number':21,'multiline':False]
['text':' Alternate constructor','line_number':24,'multiline':False]
['text':' The OperatorDef which this node represents.','line_number':32,'multiline':False]
['text':' Keeps track of if an operator has been deleted through a transformation.','line_number':35,'multiline':False]
['text':' Stores a pair (idx, blob_list),','line_number':38,'multiline':False]
['text':'  idx = index of the child','line_number':39,'multiline':False]
['text':'  blob_list = a list of strings, containing the blobs that connect the nodes','line_number':40,'multiline':False]
['text':'*
 *  Graph representation of a Netdef.
 ','line_number':45,'multiline':True]
['text':'*
   * Given a subgraph, gets all of the parents of the subgraph, as well as
   * their associated blob names. Sorted by blob names.
   *
   * <string, int> := (name of blob writing into subgraph,
   *                  index of node that writes into subgraph using that blob)
   ','line_number':50,'multiline':True]
['text':'*
   * Given a subgraph, gets all of the children of the subgraph, as well as
   * their associated blob names. Sorted by blob names.
   *
   * <string, int> := (name of blob reading from subgraph,
   *                  index of node that reads from subgraph using that blob)
   ','line_number':60,'multiline':True]
['text':'*
   * Graph generation.
   * Given a netdef, returns a Graph.
   *
   * Each node represents an operator.
   * An edge exists between two nodes if the parent op writes to a blob, which
   * is the input of the child blob, with no other op writing to the blob in
   * between the execution order.
   *
   * Time Complexity: O(E), where E is the number of blobs
   ','line_number':70,'multiline':True]
['text':'*
   * Generates a NetDef Representation for the current graph.
   * Nodes are visited in topological order, which is proper Opdef ordering.
   * TODO(benz):
   * There exists conflicts with repeated blob names, where topological sorting
   * is not sufficient for correct netdef representation, unless blobs are
   * renamed.
   * For example, if after a transformation, We have operator ancestry:
   * A --> B --> C, and also A --> D --> E, where B -> C and D -> E uses the
   * same blob name, then A, B, D, E, C is a correct topological ordering,
   * but D will write to the blob that C reads from, instead of B.
   * Currently believe that there will always be ambiguity unless blobs are
   * renamed.
   * This is solved by performing SSA on all transformed blob names.
   ','line_number':83,'multiline':True]
['text':'*
   * Deactivate a subgraph, and get rid of all edges into this subgraph.
   ','line_number':100,'multiline':True]
['text':' Index safe, less verbose way to access nodes','line_number':117,'multiline':False]
['text':' Stores the netdef representation. Is updated upon calls to GetNetDef.','line_number':143,'multiline':False]
['text':' Stores which blobs the graph reads from, and writes to.','line_number':146,'multiline':False]
['text':' Keeps track of all the Operators currently within graph, even if inactive.','line_number':150,'multiline':False]
['text':' namespace transform','line_number':154,'multiline':False]
['text':' Adds an operator def to a netdef.','line_number':156,'multiline':False]
['text':' Returns the ptr, if you want to add anything extra (such as device_option)','line_number':157,'multiline':False]
['text':'*
 * This allows for the use of * and | to match operator types,
 * engines, or any other property that is represented by strings.
 *
 * For example, if we wanted to match an operator to Conv or FC, we can give:
 * "Conv|FC" as the type() of that op.
 ','line_number':164,'multiline':True]
['text':'*
 * This ensures that each named arg that exists in the pattern exists in g_op,
 * is equal in value.
 ','line_number':173,'multiline':True]
['text':' namespace caffe2','line_number':179,'multiline':False]
