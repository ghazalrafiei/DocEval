['text':' @brief A struct that abstracts on top of dense and sparse blobs.
 *
 * For a dense blob, its gradient name should be written into dense_, and for
 * a sparse blob, its gradient name should be written into indice_ for
 * the sparse indices and value_ for the values.
 ','line_number':11,'multiline':True]
['text':'*
 * A struct that holds the gradient operators and related gradient maps.
 ','line_number':33,'multiline':True]
['text':'*
   * @brief Returns the gradient ops meta.
   *
   * If your gradient op generator only use standard input and output
   * manipulations, you can simply implement GetGradientDefs() that
   * returns vector<OperatorDef>. In that, you can call GI, GI_V and GI_I
   * that will automatically create the gradient registration for you.
   *
   * If you need to do custom gradient name registration, overload this
   * function directly.
   ','line_number':74,'multiline':True]
['text':' Helper functions to return names for the gradient computation.','line_number':103,'multiline':False]
['text':' I(idx), O(idx): return the input and output names.','line_number':104,'multiline':False]
['text':' GO(idx): return the name of the gradient for output idx.','line_number':105,'multiline':False]
['text':' GI(idx), GI_I(idx), GI_V(idx): return the name of the gradient for','line_number':106,'multiline':False]
['text':'     input idx, and also registers that name into the gradient','line_number':107,'multiline':False]
['text':'     registry to be returned.','line_number':108,'multiline':False]
['text':' Function to add a gradient pair to map.','line_number':175,'multiline':False]
['text':'*
   * @brief a helper function to allow one to create one single operator
   * def, which is usually the case for many simple operators.
   ','line_number':194,'multiline':True]
['text':'*
    * Returns map that returns the parameters that the gradients are for.
    ','line_number':204,'multiline':True]
['text':' NOTE: how to go beyond string-matching?','line_number':208,'multiline':False]
['text':' Utility functions for gradient name computation. We don't expose them','line_number':219,'multiline':False]
['text':' in order to discourage the use of such names explicitly.','line_number':220,'multiline':False]
['text':' We make the member variables protected in case someone wants to write','line_number':243,'multiline':False]
['text':' a fully custom Get() function.','line_number':244,'multiline':False]
['text':'*
 * @brief A helper class to indicate that the operator does not need gradient
 * computation.
 *
 * Use the macro NO_GRADIENT to register operators that do not have gradients.
 * Note that this is different fron SHOULD_NOT_DO_GRADIENT: the latter means
 * that the gradient computation should not flow through it at all, and throws
 * an error if it is called.
 ','line_number':250,'multiline':True]
['text':'*
 * @brief A helper class to indicate that the operator should have no gradient.
 *
 * This is used when the operator definition is designed to not have a gradient.
 * Calling a gradient on this operator def will cause Caffe2 to quit.
 ','line_number':266,'multiline':True]
['text':'*
 * @brief A helper class to indicate that the gradient mechanism is not ready.
 *
 * This should only be used sparsely when the gradient does exist, but we have
 * not implemented it yet and are using this as a lazy excuse. Eventually, a
 * gradient operator should be implemented.
 ','line_number':279,'multiline':True]
['text':' No gradients. ','line_number':304,'multiline':True]
['text':' No gradients. ','line_number':305,'multiline':True]
['text':' NO_GRADIENT means that the operator does not need any gradient computation.','line_number':316,'multiline':False]
['text':' SHOULD_NOT_DO_GRADIENT means that the operator is not designed to have','line_number':319,'multiline':False]
['text':' gradient operators. If you attempt to call the gradient, a log fatal will','line_number':320,'multiline':False]
['text':' occur.','line_number':321,'multiline':False]
['text':'*
 * @brief Gets the GradientOpsMeta for the given operator def.
 ','line_number':328,'multiline':True]
['text':' namespace caffe2','line_number':335,'multiline':False]
['text':' CAFFE2_CORE_OPERATOR_GRADIENT_H_','line_number':337,'multiline':False]
