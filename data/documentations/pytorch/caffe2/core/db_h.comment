['text':'*
 * The mode of the database, whether we are doing a read, write, or creating
 * a new database.
 ','line_number':15,'multiline':True]
['text':'*
 * An abstract class for the cursor of the database while reading.
 ','line_number':21,'multiline':True]
['text':'*
   * Seek to a specific key (or if the key does not exist, seek to the
   * immediate next). This is optional for dbs, and in default, SupportsSeek()
   * returns false meaning that the db cursor does not support it.
   ','line_number':28,'multiline':True]
['text':'*
   * Seek to the first key in the database.
   ','line_number':37,'multiline':True]
['text':'*
   * Go to the next location in the database.
   ','line_number':41,'multiline':True]
['text':'*
   * Returns the current key.
   ','line_number':45,'multiline':True]
['text':'*
   * Returns the current value.
   ','line_number':49,'multiline':True]
['text':'*
   * Returns whether the current location is valid - for example, if we have
   * reached the end of the database, return false.
   ','line_number':53,'multiline':True]
['text':'*
 * An abstract class for the current database transaction while writing.
 ','line_number':62,'multiline':True]
['text':'*
   * Puts the key value pair to the database.
   ','line_number':69,'multiline':True]
['text':'*
   * Commits the current writes.
   ','line_number':73,'multiline':True]
['text':'*
 * An abstract class for accessing a database of key-value pairs.
 ','line_number':81,'multiline':True]
['text':'source','line_number':86,'multiline':True]
['text':'*
   * Closes the database.
   ','line_number':88,'multiline':True]
['text':'*
   * Returns a cursor to read the database. The caller takes the ownership of
   * the pointer.
   ','line_number':92,'multiline':True]
['text':'*
   * Returns a transaction to write data to the database. The caller takes the
   * ownership of the pointer.
   ','line_number':97,'multiline':True]
['text':'*
   * Set DB options.
   *
   * These options should apply for the lifetime of the DB, or until a
   * subsequent SetOptions() call overrides them.
   *
   * This is used by the Save operator to allow the client to pass in
   * DB-specific options to control the behavior.  This is an opaque string,
   * where the format is specific to the DB type.  DB types may pass in a
   * serialized protobuf message here if desired.
   ','line_number':103,'multiline':True]
['text':' options ','line_number':114,'multiline':True]
['text':' Database classes are registered by their names so we can do optional','line_number':122,'multiline':False]
['text':' dependencies.','line_number':123,'multiline':False]
['text':'*
 * Returns a database object of the given database type, source and mode. The
 * caller takes the ownership of the pointer. If the database type is not
 * supported, a nullptr is returned. The caller is responsible for examining the
 * validity of the pointer.
 ','line_number':128,'multiline':True]
['text':'*
 * Returns whether or not a database exists given the database type and path.
 ','line_number':141,'multiline':True]
['text':' Warning! We assume that creating a DB throws an exception if the DB','line_number':145,'multiline':False]
['text':' does not exist. If the DB constructor does not follow this design','line_number':146,'multiline':False]
['text':' pattern,','line_number':147,'multiline':False]
['text':' the returned output (the existence tensor) can be wrong.','line_number':148,'multiline':False]
['text':'*
 * A reader wrapper for DB that also allows us to serialize it.
 ','line_number':158,'multiline':True]
['text':' Note(jiayq): resetting is needed when we re-open e.g. leveldb where no','line_number':200,'multiline':False]
['text':' concurrent access is allowed.','line_number':201,'multiline':False]
['text':'*
   * Read a set of key and value from the db and move to next. Thread safe.
   *
   * The string objects key and value must be created by the caller and
   * explicitly passed in to this function. This saves one additional object
   * copy.
   *
   * If the cursor reaches its end, the reader will go back to the head of
   * the db. This function can be used to enable multiple input ops to read
   * the same db.
   *
   * Note(jiayq): we loosen the definition of a const function here a little
   * bit: the state of the cursor is actually changed. However, this allows
   * us to pass in a DBReader to an Operator without the need of a duplicated
   * output blob.
   ','line_number':229,'multiline':True]
['text':' In sharded mode, each read skips num_shards_ records','line_number':251,'multiline':False]
['text':' Suppress unused variable','line_number':253,'multiline':False]
['text':'*
   * @brief Seeks to the first key. Thread safe.
   ','line_number':262,'multiline':True]
['text':'*
   * Returns the underlying cursor of the db reader.
   *
   * Note that if you directly use the cursor, the read will not be thread
   * safe, because there is no mechanism to stop multiple threads from
   * accessing the same cursor. You should consider using Read() explicitly.
   ','line_number':271,'multiline':True]
['text':' Suppress unused variable','line_number':298,'multiline':False]
['text':'*
   * Serializes a DBReader. Note that this blob has to contain DBReader,
   * otherwise this function produces a fatal error.
   ','line_number':318,'multiline':True]
['text':' namespace db','line_number':334,'multiline':False]
['text':' namespace caffe2','line_number':335,'multiline':False]
['text':' CAFFE2_CORE_DB_H_','line_number':337,'multiline':False]
