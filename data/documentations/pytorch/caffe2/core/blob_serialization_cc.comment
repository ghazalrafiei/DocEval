['text':' This is a simplified copy of folly::Range.','line_number':40,'multiline':False]
['text':' This is similar to c10::ArrayRef but it can point to non-const data.','line_number':41,'multiline':False]
['text':'*
 * Return a mutable Range pointing to a portion of the tensor's data field.
 *
 * Returns a Range pointing to the elements starting at the specified start
 * index, and including the specified number of elements.
 ','line_number':74,'multiline':True]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':86,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':103,'multiline':False]
['text':' if typeSize == 1, endianness does not matter. Else check for endianness.','line_number':116,'multiline':False]
['text':' Check if special casing for float is enabled if','line_number':127,'multiline':False]
['text':' caffe2_serialize_using_bytes_as_holder is not enabled.','line_number':128,'multiline':False]
['text':' Each element is serialized as a 2-byte bfloat16','line_number':142,'multiline':False]
['text':' protobuf will use varint encoding, so it won't be a fixed field width','line_number':148,'multiline':False]
['text':' per integer, and will use between 1 and 5 bytes.  Just return 4 bytes','line_number':149,'multiline':False]
['text':' as an estimate.  With randomized data the actual value may be higher','line_number':150,'multiline':False]
['text':' than this, since around half the numbers will have the high bit set and','line_number':151,'multiline':False]
['text':' would require 5 bytes to encode.','line_number':152,'multiline':False]
['text':' Same varint reasoning as for the INT32 case.','line_number':155,'multiline':False]
['text':' We unfortunately cannot estimate the size well for strings, without','line_number':158,'multiline':False]
['text':' knowing the individual element lengths.  Just return 50 bytes per','line_number':159,'multiline':False]
['text':' string as a guess.','line_number':160,'multiline':False]
['text':' Depending on EnableByteEncoding() this is either serialized in','line_number':163,'multiline':False]
['text':' byte_data or int32_data, but in either case it takes 1 byte per element','line_number':164,'multiline':False]
['text':' (since bool values will only take 1 byte when varint encoded in','line_number':165,'multiline':False]
['text':' int32_data).','line_number':166,'multiline':False]
['text':' Unfortunately when storing uint8_t values in int32_data any values','line_number':172,'multiline':False]
['text':' over 127 will require 2 bytes to store due to varint encoding.','line_number':173,'multiline':False]
['text':' With random data we would expect around 1.5 bytes per element.  Round','line_number':174,'multiline':False]
['text':' up to 2.','line_number':175,'multiline':False]
['text':' Unfortunately when storing int8_t values in int32_data any negative','line_number':182,'multiline':False]
['text':' values will require 2 bytes to store due to varint encoding.  With','line_number':183,'multiline':False]
['text':' random data we would expect around 1.5 bytes per element.  Round up','line_number':184,'multiline':False]
['text':' to 2.','line_number':185,'multiline':False]
['text':' With random data, varint encoding will end up requiring closer to 3','line_number':192,'multiline':False]
['text':' bytes per element.','line_number':193,'multiline':False]
['text':' With random data, varint encoding will end up requiring closer to 3','line_number':200,'multiline':False]
['text':' bytes per element.','line_number':201,'multiline':False]
['text':' The data will be stored as uint16_t values in the int32_data.','line_number':208,'multiline':False]
['text':' Due to varint encoding many values may require 3 bytes.','line_number':209,'multiline':False]
['text':' These data types should never be hit during serialization','line_number':219,'multiline':False]
['text':' namespace','line_number':232,'multiline':False]
['text':'*
 * @brief StringSerializer is the serializer for String.
 *
 * StringSerializer takes in a blob that contains a String, and serializes it
 * into a BlobProto protocol buffer.
 ','line_number':234,'multiline':True]
['text':'*
   * Serializes a Blob. Note that this blob has to contain Tensor,
   * otherwise this function produces a fatal error.
   ','line_number':244,'multiline':True]
['text':' Add 20 for the "std::string" type field plus other overhead for the','line_number':268,'multiline':False]
['text':' BlobProto message serialization.','line_number':269,'multiline':False]
['text':'*
 * @brief StringDeserializer is the deserializer for Strings.
 *
 ','line_number':274,'multiline':True]
['text':' should be called once with kNoChunking','line_number':303,'multiline':False]
['text':' namespace','line_number':311,'multiline':False]
['text':' to account for empty tensors','line_number':366,'multiline':False]
['text':' Poorman's IOBound ThreadPool','line_number':390,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':393,'multiline':False]
['text':' Serialize whole vector. If vector is empty, it's shape still needs to be','line_number':410,'multiline':False]
['text':' serialized in empty proto','line_number':411,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':413,'multiline':False]
['text':' Sync mode for small tensors','line_number':421,'multiline':False]
['text':' Since Android does not have std::future, we will always do sync mode','line_number':425,'multiline':False]
['text':' to account for empty tensors','line_number':448,'multiline':False]
['text':' There is a small amount of fixed overhead per chunk to serialize the','line_number':453,'multiline':False]
['text':' fixed TensorProto message data independent from the chunk contents.','line_number':454,'multiline':False]
['text':' This normally appears to be around 50 bytes.','line_number':455,'multiline':False]
['text':' The blob name is also written out in the BlobProto for each chunk.','line_number':456,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':475,'multiline':False]
['text':'*
 * SerializeParams is just a helper class to consolidate the parameters
 * required for serializing tensor data so they can be passed around more
 * easily.
 *
 * It also contains some helper functions to perform some operations on the
 * parameters that are shared by multiple serialization functions.
 ','line_number':489,'multiline':True]
['text':' Unfortunately we can't include folly/lang/Bits.h here,','line_number':552,'multiline':False]
['text':' so provide our own byte-swapping code.','line_number':553,'multiline':False]
['text':' Note that we support src and dest pointing to the same location.','line_number':566,'multiline':False]
['text':' We currently only use this function on big-endian machines, so it isn't','line_number':567,'multiline':False]
['text':' worth trying to build a fancier SIMD version.','line_number':568,'multiline':False]
['text':' namespace','line_number':573,'multiline':False]
['text':' USE_FBGEMM','line_number':574,'multiline':False]
['text':' The FLOAT_BFLOAT16 option requests doing a conversion to bfloat16.  This','line_number':577,'multiline':False]
['text':' reduces the serialized data size at the cost of some lost precision.','line_number':578,'multiline':False]
['text':' We currently only support doing this when compiled with fbgemm.','line_number':579,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':583,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':585,'multiline':False]
['text':' TODO: it would be nice if we could use','line_number':596,'multiline':False]
['text':' folly::resizeWithoutInitialization() here','line_number':597,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.CallAndMessage)','line_number':606,'multiline':False]
['text':' Note: technically a platform can have different integer from floating','line_number':609,'multiline':False]
['text':' point endianness, and we ideally should check floating point endianness','line_number':610,'multiline':False]
['text':' here.  However, the fbgemm code doesn't appear to make this distinction,','line_number':611,'multiline':False]
['text':' and at least in the Bfloat16ToFloat_ref() code it appears to assume that','line_number':612,'multiline':False]
['text':' floating point and integer endianness are the same.','line_number':613,'multiline':False]
['text':' namespace','line_number':646,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':656,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':662,'multiline':False]
['text':' TODO: use CUDAGuard here instead of context and employ explicit sync','line_number':692,'multiline':False]
['text':' copy','line_number':693,'multiline':False]
['text':' Note: we intentially do not provide "default:" so if any new data types','line_number':734,'multiline':False]
['text':' are added, the compiler should warn the user to add the case here.','line_number':735,'multiline':False]
['text':' The actual serialization registry objects.','line_number':748,'multiline':False]
['text':' This is a tensor object. Depending on the device type, we will','line_number':767,'multiline':False]
['text':' use the corresponding TensorDeserializer.','line_number':768,'multiline':False]
['text':' Tensor's deserializer should always be registered, but we will double','line_number':772,'multiline':False]
['text':' check if it is not null anyway.','line_number':773,'multiline':False]
['text':' === Local helper functions ===','line_number':786,'multiline':False]
['text':' Get dimensions from Tensor proto','line_number':787,'multiline':False]
['text':' Get number of elements from Tensor proto','line_number':792,'multiline':False]
['text':' Get data type from Tensor proto','line_number':801,'multiline':False]
['text':' Get TensorOptions from Tensor proto','line_number':814,'multiline':False]
['text':' Assumes TensorProto is not empty','line_number':815,'multiline':False]
['text':' === Local helper functions ===','line_number':828,'multiline':False]
['text':' TODO: remove when serialization of dtype uninitialized tensor is removed','line_number':835,'multiline':False]
['text':' TODO: remove after empty Tensor serialization is forbidden','line_number':853,'multiline':False]
['text':' Backward compatibility with models which used int32_data field','line_number':898,'multiline':False]
['text':'*
 * DeserializeParams is just a helper class to consolidate the parameters
 * required for deserializing tensor data so they can be passed around more
 * easily.
 *
 * It also contains some helper functions to perform some operations on the
 * parameters that are shared by multiple deserialization functions.
 ','line_number':907,'multiline':True]
['text':' Simply copy the data as-is from src to dest','line_number':921,'multiline':False]
['text':'*
 * DeserializeTensorData() is specialized for each supported combination of
 * SerializationFormat and output type.
 *
 * The default implementation throws an exception, but this function can be
 * specialized to support different combinations.
 ','line_number':948,'multiline':True]
['text':' The BYTE format should only be used for very old blobs that don't','line_number':1001,'multiline':False]
['text':' have a data_format field in the first place.  Let's log this case but','line_number':1002,'multiline':False]
['text':' continue attempting deserialization anyway.','line_number':1003,'multiline':False]
['text':' If we are on a big-endian machine, byte-swap the serialized data.','line_number':1031,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':1032,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':1034,'multiline':False]
['text':' If we are on a non-CPU device, we need an intermediate CPU buffer for the','line_number':1044,'multiline':False]
['text':' bfloat16 to float conversion.','line_number':1045,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':1046,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':1048,'multiline':False]
['text':' We cannot load serialized bfloat16 data without fbgemm.','line_number':1062,'multiline':False]
['text':' This can happen if the blob was serialized by a newer version of the code','line_number':1104,'multiline':False]
['text':' using some new format value that we don't understand.','line_number':1105,'multiline':False]
['text':' If the data_type field is not set, this either means it was not present','line_number':1142,'multiline':False]
['text':' in the serialized data, or it was set to an enum value that we don't know','line_number':1143,'multiline':False]
['text':' about.  This likely means that the serialized data was written by a','line_number':1144,'multiline':False]
['text':' different version of the software using a new data type value that we','line_number':1145,'multiline':False]
['text':' don't understand.','line_number':1146,'multiline':False]
['text':' If the data_format field is not present this is an older buffer','line_number':1151,'multiline':False]
['text':' serialized with the FMT_PROTOBUF format.','line_number':1152,'multiline':False]
['text':' BYTE is special, since it is a legacy data type value that effectively','line_number':1171,'multiline':False]
['text':' means the same thing as UINT8, except that it used to be serialized in','line_number':1172,'multiline':False]
['text':' a different format.  Recent code always writes out byte data with the','line_number':1173,'multiline':False]
['text':' UINT8 type, never BYTE, but let's leave legacy deserialization code in','line_number':1174,'multiline':False]
['text':' place for now just in case we ever encounter an old blob using this','line_number':1175,'multiline':False]
['text':' format.','line_number':1176,'multiline':False]
['text':' Note: we intentially do not provide "default:" so if any new data types','line_number':1212,'multiline':False]
['text':' We should never reach here unless there is a bug and protobuf somehow','line_number':1215,'multiline':False]
['text':' returns an unexpected value.  protobuf should filter out all unknown enum','line_number':1216,'multiline':False]
['text':' values, and the has_data_type() check above will catch that case.','line_number':1217,'multiline':False]
['text':' namespace','line_number':1224,'multiline':False]
['text':' We create a local context for deserializing. Since Caffe2 contexts are','line_number':1232,'multiline':False]
['text':' usually lightweight, this should not involve too much overhead.','line_number':1233,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':1246,'multiline':False]
['text':' Serialization Helpers','line_number':1247,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':1248,'multiline':False]
['text':' Serialize Tensor','line_number':1265,'multiline':False]
['text':' Serialize std::string','line_number':1268,'multiline':False]
['text':' namespace','line_number':1271,'multiline':False]
['text':' namespace caffe2','line_number':1272,'multiline':False]
