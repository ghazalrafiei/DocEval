['text':'=== nomnigraph/Transformations/Match.h - Graph matching utils -*- C++ -*-===//','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' TODO Licensing.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' This file defines utilities for matching subgraphs.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':9,'multiline':False]
['text':' First we sort both the matching graph topologically.','line_number':36,'multiline':False]
['text':' This could give us a useful anchor in the best case.','line_number':37,'multiline':False]
['text':' Base case','line_number':49,'multiline':False]
['text':' Recurse and accumulate matches','line_number':54,'multiline':False]
['text':' No match here, early bailout','line_number':67,'multiline':False]
['text':' Try each node in the candidate graph as the anchor.','line_number':77,'multiline':False]
['text':' namespace nom','line_number':92,'multiline':False]
['text':' NOM_TRANFORMATIONS_MATCH_H','line_number':94,'multiline':False]
