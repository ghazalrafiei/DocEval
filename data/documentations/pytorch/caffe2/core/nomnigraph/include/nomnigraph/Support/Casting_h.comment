['text':'===- nomnigraph/Support/Casting.h - Allow casting checks ------*- C++ -*-===//','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' This is taken directly from LLVM's source code.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' The original file is distributed under the University of Illinois Open Source','line_number':5,'multiline':False]
['text':' License.','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' This file defines the isa<X>() function for checking downcastibility.','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':12,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':20,'multiline':False]
['text':'                          isa<x> Support Templates','line_number':21,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':22,'multiline':False]
['text':'/ NOMNIGRAPH_NODISCARD - Warn if a type or return value is discarded.','line_number':24,'multiline':False]
['text':' Workaround for llvm.org/PR23435, since clang 3.6 and below emit a spurious','line_number':31,'multiline':False]
['text':' error when __has_cpp_attribute is given a scoped attribute in C mode.','line_number':32,'multiline':False]
['text':'/ \brief If T is a pointer, just return it. If it is not, return T&.','line_number':40,'multiline':False]
['text':'/ \brief If T is a pointer to X, return a pointer to const X. If it is not,','line_number':46,'multiline':False]
['text':'/ return const T.','line_number':47,'multiline':False]
['text':' Define a template that can be specialized by smart pointers to reflect the','line_number':53,'multiline':False]
['text':' fact that they are automatically dereferenced, and are not involved with the','line_number':54,'multiline':False]
['text':' template selection process...  the default implementation is a noop.','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':' The real type this represents...','line_number':59,'multiline':False]
['text':' An accessor to get the real value...','line_number':61,'multiline':False]
['text':' The core of the implementation of isa<X> is here; To and From should be','line_number':79,'multiline':False]
['text':' the names of classes.  This template can be specialized to customize the','line_number':80,'multiline':False]
['text':' implementation of isa<> without rewriting it from scratch.','line_number':81,'multiline':False]
['text':'/ \brief Always allow upcasts, and perform no dynamic check for them.','line_number':89,'multiline':False]
['text':' When From != SimplifiedType, we can simplify the type some more by using','line_number':156,'multiline':False]
['text':' the simplify_type template.','line_number':157,'multiline':False]
['text':' When From == SimpleType, we are as simple as we are going to get.','line_number':169,'multiline':False]
['text':' isa<X> - Return true if the parameter to the template is an instance of the','line_number':175,'multiline':False]
['text':' template type argument.  Used like this:','line_number':176,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':'  if (isa<Type>(myVal)) { ... }','line_number':178,'multiline':False]
['text':'','line_number':179,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':188,'multiline':False]
['text':'                          cast<x> Support Templates','line_number':189,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':190,'multiline':False]
['text':' Calculate what type the 'cast' function should return, based on a requested','line_number':195,'multiline':False]
['text':' type of To and a source type of From.','line_number':196,'multiline':False]
['text':' Normal case, return Ty&','line_number':199,'multiline':False]
['text':' Normal case, return Ty&','line_number':203,'multiline':False]
['text':' Pointer arg case, return Ty*','line_number':208,'multiline':False]
['text':' Constant pointer arg case, return const Ty*','line_number':213,'multiline':False]
['text':' Constant pointer arg case, return const Ty*','line_number':218,'multiline':False]
['text':' When the simplified type and the from type are not the same, use the type','line_number':233,'multiline':False]
['text':' simplifier to reduce the type, then reuse cast_retty_impl to get the','line_number':234,'multiline':False]
['text':' resultant type.','line_number':235,'multiline':False]
['text':' When the simplified type is equal to the from type, use it directly.','line_number':241,'multiline':False]
['text':' Ensure the non-simple values are converted using the simplify_type template','line_number':253,'multiline':False]
['text':' that may be specialized by smart pointers...','line_number':254,'multiline':False]
['text':'','line_number':255,'multiline':False]
['text':' This is not a simple type, use the template to simplify it...','line_number':258,'multiline':False]
['text':' This _is_ a simple type, just cast it.','line_number':270,'multiline':False]
['text':' cast<X> - Return the argument parameter cast to the specified type.  This','line_number':284,'multiline':False]
['text':' casting operator asserts that the type is correct, so it does not return null','line_number':285,'multiline':False]
['text':' on failure.  It does not allow a null argument (use cast_or_null for that).','line_number':286,'multiline':False]
['text':' It is typically used like this:','line_number':287,'multiline':False]
['text':'','line_number':288,'multiline':False]
['text':'  cast<Instruction>(myVal)->getParent()','line_number':289,'multiline':False]
['text':'','line_number':290,'multiline':False]
['text':' cast_or_null<X> - Functionally identical to cast, except that a null value is','line_number':327,'multiline':False]
['text':' accepted.','line_number':328,'multiline':False]
['text':'','line_number':329,'multiline':False]
['text':' dyn_cast<X> - Return the argument parameter cast to the specified type.  This','line_number':369,'multiline':False]
['text':' casting operator returns null if the argument is of the wrong type, so it can','line_number':370,'multiline':False]
['text':' be used to test for a type as well as cast if successful.  This should be','line_number':371,'multiline':False]
['text':' used in the context of an if statement like this:','line_number':372,'multiline':False]
['text':'','line_number':373,'multiline':False]
['text':'  if (const Instruction *I = dyn_cast<Instruction>(myVal)) { ... }','line_number':374,'multiline':False]
['text':'','line_number':375,'multiline':False]
['text':' dyn_cast_or_null<X> - Functionally identical to dyn_cast, except that a null','line_number':397,'multiline':False]
['text':' value is accepted.','line_number':398,'multiline':False]
['text':'','line_number':399,'multiline':False]
['text':' unique_dyn_cast<X> - Given a unique_ptr<Y>, try to return a unique_ptr<X>,','line_number':422,'multiline':False]
['text':' taking ownership of the input pointer iff isa<X>(Val) is true.  If the','line_number':423,'multiline':False]
['text':' cast is successful, From refers to nullptr on exit and the casted value','line_number':424,'multiline':False]
['text':' is returned.  If the cast is unsuccessful, the function returns nullptr','line_number':425,'multiline':False]
['text':' and From is unchanged.','line_number':426,'multiline':False]
['text':' dyn_cast_or_null<X> - Functionally identical to unique_dyn_cast, except that','line_number':441,'multiline':False]
['text':' a null value is accepted.','line_number':442,'multiline':False]
['text':' NOM_SUPPORT_CASTING_H','line_number':457,'multiline':False]
