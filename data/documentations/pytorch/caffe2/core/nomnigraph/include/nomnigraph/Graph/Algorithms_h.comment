['text':'===- nomnigraph/Graph/Algorithms.h - Graph algorithms ---------*- C++ -*-===//','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' TODO Licensing.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' This file defines algorithms that only require Graph level annotations.','line_number':7,'multiline':False]
['text':' Tarjans is defined.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':10,'multiline':False]
['text':'/ \brief Helper for dominator tree finding.','line_number':28,'multiline':False]
['text':'/ \brief A dominator tree finder.  Runs in O(M*N), there exist','line_number':43,'multiline':False]
['text':'/ more efficient implementations.','line_number':44,'multiline':False]
['text':'/','line_number':45,'multiline':False]
['text':'/ High level description of the algorithm:','line_number':46,'multiline':False]
['text':'/','line_number':47,'multiline':False]
['text':'/ 1) Find a map of {node}->{dominator set}','line_number':48,'multiline':False]
['text':'/ --','line_number':49,'multiline':False]
['text':'/ allNodes = reachable(root)','line_number':50,'multiline':False]
['text':'/ for n in nodes:','line_number':51,'multiline':False]
['text':'/   temporarily delete n from the graph','line_number':52,'multiline':False]
['text':'/   dom[n] = allNodes - reachable(root)','line_number':53,'multiline':False]
['text':'/   restore n to the graph','line_number':54,'multiline':False]
['text':'/','line_number':55,'multiline':False]
['text':'/ 2) Construct tree from that map','line_number':56,'multiline':False]
['text':'/ --','line_number':57,'multiline':False]
['text':'/ starting at root, BFS in dominatorMap:','line_number':58,'multiline':False]
['text':'/   if newnode has inedge, delete it','line_number':59,'multiline':False]
['text':'/   draw edge from parent to child','line_number':60,'multiline':False]
['text':'/ \brief Map all nodes in the graph to their immediate dominators.','line_number':134,'multiline':False]
['text':' Sanity check, really should never happen.','line_number':141,'multiline':False]
['text':' In degenerate cases, or for the root node, we self dominate.','line_number':145,'multiline':False]
['text':'/ \brief Map all nodes to their dominance frontiers:','line_number':156,'multiline':False]
['text':'/ a set of nodes that does not strictly dominate the given node but does','line_number':157,'multiline':False]
['text':'/ dominate an immediate predecessor.  This is useful as it is the exact','line_number':158,'multiline':False]
['text':'/ location for the insertion of phi nodes in SSA representation.','line_number':159,'multiline':False]
['text':' This variable will track all the way up the dominator tree.','line_number':174,'multiline':False]
['text':'/ \brief Induces edges on a subgraph by connecting all nodes','line_number':185,'multiline':False]
['text':'/ that are connected in the original graph.','line_number':186,'multiline':False]
['text':' We can scan only the inEdges','line_number':190,'multiline':False]
['text':'/ \brief Create subgraph object from graph.','line_number':199,'multiline':False]
['text':' namespace algorithm','line_number':210,'multiline':False]
['text':' namespace nom','line_number':211,'multiline':False]
['text':' NOM_GRAPH_ALGORITHMS_H','line_number':213,'multiline':False]
