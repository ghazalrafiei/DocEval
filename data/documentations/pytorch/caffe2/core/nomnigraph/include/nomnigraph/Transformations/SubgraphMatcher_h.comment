['text':'*
 * MatchGraph is a graph of MatchPredicate.
 *
 * MatchPredicate needs a predicate for node matching and
 * - includeInSubgraph: whether this node and nodes/edges reachable from it
 * should be included in the return matched subgraph (if the pattern matches).
 * This is useful in case we would like to specify a matching pattern but do not
 * want part of the pattern to be included in the returned subgraph.
 * - A count, which means we may want to match this node multiple times from its
 * incoming edges. The count can be unlimited (think about it as a regex star).
 * - If nonTerminal flag is set, it means we will not consider outgoing edges
 * from the node when doing subgraph matching.
 ','line_number':18,'multiline':True]
['text':' MatchGraph is a graph of MatchPredicate and it contains utilities for','line_number':100,'multiline':False]
['text':' subgraph matching.','line_number':101,'multiline':False]
['text':' (TODO) the subgraph matching methods currently still','line_number':102,'multiline':False]
['text':' requires a root match node to be passed in. We should improve the matching','line_number':103,'multiline':False]
['text':' algorithm to eliminate this requirement.','line_number':104,'multiline':False]
['text':' Check if there can be a subgraph that matches the given criteria that','line_number':121,'multiline':False]
['text':' is rooted at the given rootNode.','line_number':122,'multiline':False]
['text':' The flag invertGraphTraversal specify if we should follow out edges or','line_number':123,'multiline':False]
['text':' in edges. The default is true which is useful for a functional','line_number':124,'multiline':False]
['text':' interpretation of a dataflow graph.','line_number':125,'multiline':False]
['text':' Create a matched result that owns a matched subgraph object and pass','line_number':131,'multiline':False]
['text':' the subgraph object around to construct it during matching.','line_number':132,'multiline':False]
['text':' Utility to transform a graph by looking for subgraphs that match','line_number':145,'multiline':False]
['text':' a given pattern and then allow callers to mutate the graph based on','line_number':146,'multiline':False]
['text':' subgraphs that are found.','line_number':147,'multiline':False]
['text':' The current implementation doesn't handle any graph transformation','line_number':148,'multiline':False]
['text':' itself. Callers should be responsible for all intended mutation, including','line_number':149,'multiline':False]
['text':' deleting nodes in the subgraphs found by this algorithm.','line_number':150,'multiline':False]
['text':' Note: if the replaceFunction lambda returns false, the entire procedure','line_number':151,'multiline':False]
['text':' is aborted. This maybe useful in certain cases when we want to terminate','line_number':152,'multiline':False]
['text':' the subgraph search early.','line_number':153,'multiline':False]
['text':' invertGraphTraversal flag: see documentation in isSubgraphMatch','line_number':154,'multiline':False]
['text':' Make sure the node is still in the graph.','line_number':161,'multiline':False]
['text':' If replaceFunction returns false, it means that we should abort','line_number':169,'multiline':False]
['text':' the entire procedure.','line_number':170,'multiline':False]
['text':' If rootCriteriaRef has been matched before (without multiplicity),','line_number':192,'multiline':False]
['text':' we should look up the corresponding matched node in the graph','line_number':193,'multiline':False]
['text':' and verify if it is the same.','line_number':194,'multiline':False]
['text':' This is sufficient to be a match if this criteria specifies a non','line_number':222,'multiline':False]
['text':' terminal node.','line_number':223,'multiline':False]
['text':' The current algorithm implies that the ordering of the children is','line_number':239,'multiline':False]
['text':' important. The children nodes will be matched with the children subgraph','line_number':240,'multiline':False]
['text':' criteria in the given order.','line_number':241,'multiline':False]
['text':' Continue to match subsequent edges with the current children criteria.','line_number':254,'multiline':False]
['text':' Note that if the child criteria is a * pattern, this greedy algorithm','line_number':255,'multiline':False]
['text':' will attempt to find the longest possible sequence that matches the','line_number':256,'multiline':False]
['text':' children criteria.','line_number':257,'multiline':False]
['text':' If the current criteria isn't a * pattern, this indicates a','line_number':277,'multiline':False]
['text':' failure.','line_number':278,'multiline':False]
['text':' Otherwise, we should move on to the next children criteria.','line_number':292,'multiline':False]
['text':' Fails because there are not enough matches as specified by the','line_number':303,'multiline':False]
['text':' criteria.','line_number':304,'multiline':False]
['text':' Fails because there are unmatched edges.','line_number':319,'multiline':False]
['text':' TODO: Reuse convertToDotString once convertToDotString can work','line_number':338,'multiline':False]
['text':' with subgraph.','line_number':339,'multiline':False]
['text':' Map from match node to corresponding node in the graph to be scanned.','line_number':370,'multiline':False]
['text':' namespace matcher','line_number':425,'multiline':False]
['text':' namespace nom','line_number':427,'multiline':False]
['text':' NOM_TRANFORMATIONS_SUBGRAPH_MATCHER_H','line_number':429,'multiline':False]
