['text':'=== nomnigraph/Representations/NeuralNet.h - NN interface -----*- C++ -*-===//','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' TODO Licensing.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' This file defines classes that can be used in a','line_number':7,'multiline':False]
['text':' nom::Graph<nom::repr::NeuralNetOperator, nom::repr::NeuralNetData> graph.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'===----------------------------------------------------------------------===//','line_number':10,'multiline':False]
['text':' Expose supported attribute types to this namespace.','line_number':33,'multiline':False]
['text':'/ \brief Annotations allow for generic manipulation of','line_number':39,'multiline':False]
['text':'/ neural network operations.  The base class contains','line_number':40,'multiline':False]
['text':'/ a saved void* pointer for external use.  Derived classes','line_number':41,'multiline':False]
['text':'/ add richer semantics to the annotation and it is encouraged','line_number':42,'multiline':False]
['text':'/ to use them.','line_number':43,'multiline':False]
['text':'/ Discriminator for LLVM-style RTTI (isa<>)','line_number':62,'multiline':False]
['text':'/ An optional tensor-type specifier.','line_number':71,'multiline':False]
['text':'/ \brief Validate the inputs and outputs to this operator.','line_number':111,'multiline':False]
['text':'/','line_number':112,'multiline':False]
['text':'/ \p inputs A vector of references to NeuralNetData types that','line_number':113,'multiline':False]
['text':'/ represent the data being fed into the operator.','line_number':114,'multiline':False]
['text':'/ \p outputs A vector of references to NeuralNetData types that','line_number':115,'multiline':False]
['text':'/ represent the data being outputted by the operator.','line_number':116,'multiline':False]
['text':'/ \return true if the inputs and outputs are compatible with the operator.','line_number':117,'multiline':False]
['text':' Mutable attribute, much like a type cast','line_number':131,'multiline':False]
['text':'/ Discriminator for LLVM-style RTTI (isa<>)','line_number':137,'multiline':False]
['text':' Replace subgraph sg by node, using the order of
   * node_inputs and node_outputs to determine how to link
   * them to the node.  node_inputs *must* enumerate all the
   * inputs to the subgraph (NeuralNetData that do not
   * have producers inside the subgraph).  Same for node_outputs
   *
   * New output names may be created in the case that an inputs
   * and an output have the same name (to avoid in place ops).
   * This may cause issues with external_output -- be sure to check
   * after running this function (and perhaps inserting a copy/alias op).
   *','line_number':257,'multiline':True]
['text':' Simple wrapper of replaceSubgraph where the node is created for you.','line_number':277,'multiline':False]
['text':' Returns a NodeRef to the node containing the operator that was created','line_number':278,'multiline':False]
['text':' Although these seem generic, they make subtle assumptions','line_number':298,'multiline':False]
['text':' about the structure of the graph that is 100% valid for NNModule graphs','line_number':299,'multiline':False]
['text':' but not any graph (such as data being a unique_ptr).','line_number':300,'multiline':False]
['text':' This is just a way to fix issues when the isa<> implementation','line_number':312,'multiline':False]
['text':' can't automatically downcast.','line_number':313,'multiline':False]
['text':' This is just a way to fix issues when the dyn_cast<> implementation','line_number':350,'multiline':False]
['text':' can't automatically downcast.','line_number':351,'multiline':False]
['text':'/ NeuralNetData specific helpers.','line_number':466,'multiline':False]
['text':' Get the name of the node regardless of underlying type.','line_number':479,'multiline':False]
['text':' Replace the producer of the first argument with the second argument','line_number':482,'multiline':False]
['text':' Set all consumers of first argument to consume the second argument','line_number':486,'multiline':False]
['text':' Set the second argument to consume the inputs of the first argument','line_number':490,'multiline':False]
['text':' Create an output tensor node','line_number':495,'multiline':False]
['text':' Hack for windows compiler.','line_number':499,'multiline':False]
['text':' Create an operator','line_number':503,'multiline':False]
['text':' Commonly used node predicate.','line_number':517,'multiline':False]
['text':' The node has a single output and the output has a single consumer.','line_number':519,'multiline':False]
['text':' The node has a unique consumer (there may be multiple edges from output','line_number':521,'multiline':False]
['text':' to the single consumer).','line_number':522,'multiline':False]
['text':' namespace nn','line_number':527,'multiline':False]
['text':' namespace repr','line_number':529,'multiline':False]
['text':' namespace nom','line_number':530,'multiline':False]
['text':' NOM_REPRESENTATIONS_NEURALNET_H','line_number':532,'multiline':False]
