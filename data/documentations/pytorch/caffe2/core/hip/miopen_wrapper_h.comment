['text':' Copyright 2004-present Facebook. All Rights Reserved.','line_number':1,'multiline':False]
['text':'*
 * MIOPENWorkspace is a wrapper around a raw cuda pointer that holds the miopen
 * scratch space. This struct is meant to be only used in MIOPENWrapper to
 * provide a program-wide scratch space for MIOPEN. The reason behind it is that
 * miopen function calls are usually very efficient, hence one probably does not
 * want to run multiple miopen calls at the same time. As a result, one should
 * not need more than one miopen workspace per device.
 ','line_number':14,'multiline':True]
['text':' MIOPENState is the owner of the MIOPENWorkspace, and serializes all','line_number':49,'multiline':False]
['text':' executions of operations that use the state onto it's own stream','line_number':50,'multiline':False]
['text':' (so multiple Net workers can reuse the same workspace from','line_number':51,'multiline':False]
['text':' different threads and HIP streams).','line_number':52,'multiline':False]
['text':'*
 * MIOPENWrapper is a class that wraps the miopen handles and miopen workspaces.
 *
 * The wrapper ensures that for each thread and each gpu, there is one
 * identical miopen handle, which is also associated with the thread-local
 * per-device hip stream. The wrapper also hosts the device-specific miopen
 * workspace (scratch space for some miopen functions).
 *
 ','line_number':99,'multiline':True]
['text':'*
     * Creates a miopen wrapper associated with a HIPContext object. Note that
     * the HIPContext object should outlive the MIOPENWrapper.
     ','line_number':111,'multiline':True]
['text':'*
     * Returns the inline miopen handle that executes on the current
     * thread's hip_stream.
     ','line_number':117,'multiline':True]
['text':' Executes the closure F on the MIOPENState associated with state_idx','line_number':123,'multiline':False]
['text':' We need to serialize execution on the MIOPENState as we can't','line_number':132,'multiline':False]
['text':' allow multiple threads to race through the cudaEventRecord','line_number':133,'multiline':False]
['text':' calls (so a worker thread might wait on another worker thread's','line_number':134,'multiline':False]
['text':' execution)','line_number':135,'multiline':False]
['text':' Pointer to an external cuda context that the miopen wrapper will use.','line_number':145,'multiline':False]
['text':' namespace caffe2','line_number':164,'multiline':False]
