['text':' AsyncTaskGraph represents an execution of a net, it owns the tasks and','line_number':11,'multiline':False]
['text':' associated futures, sets up future callbacks and propagates errors.','line_number':12,'multiline':False]
['text':' Usage steps:','line_number':13,'multiline':False]
['text':' - Adding graph nodes and edges through CreateNode/AddDependency;','line_number':14,'multiline':False]
['text':' - Freezing the graph (FreezeGraph), after the freezing a future','line_number':15,'multiline':False]
['text':'   can be obtained using GetFuture;','line_number':16,'multiline':False]
['text':' - Execution of the graph is scheduled through ExecuteGraph, after each','line_number':17,'multiline':False]
['text':'   execution Reset must be called to prepare the graph for the next run','line_number':18,'multiline':False]
['text':' used to, e.g., get access to executor's thread pools','line_number':59,'multiline':False]
['text':' TODO: pass tracer and counters through ExecutorHelper','line_number':60,'multiline':False]
['text':' namespace caffe2','line_number':76,'multiline':False]
['text':' CAFFE2_NET_ASYNC_TASK_GRAPH_H','line_number':78,'multiline':False]
