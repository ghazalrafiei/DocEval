['text':' NOLINTNEXTLINE(modernize-pass-by-value)','line_number':10,'multiline':False]
['text':' Check the number of inputs.','line_number':31,'multiline':False]
['text':' Check the number of outputs.','line_number':43,'multiline':False]
['text':' If the number of outputs can be calculated, check if the number matches.','line_number':60,'multiline':False]
['text':' Check in-place settings.','line_number':72,'multiline':False]
['text':' If an input is the same as an output but in-place is not opt-in','line_number':75,'multiline':False]
['text':' either as allowed or enforced, we will fail the verification.','line_number':76,'multiline':False]
['text':' Phew. All verifications passed.','line_number':112,'multiline':False]
['text':'input_types','line_number':283,'multiline':True]
['text':' NOLINTNEXTLINE(modernize-use-emplace)','line_number':310,'multiline':False]
['text':' filler.h: SparseLengths->FixedSum will select FD_FIXEDSUM distribution','line_number':365,'multiline':False]
['text':' filler.h SparseSegments will select FD_UNIFORM or FD_SYNTHETIC distribution','line_number':385,'multiline':False]
['text':' namespace','line_number':392,'multiline':False]
['text':' The helper is build sparse input with values, keys, and lengths; e.g.:','line_number':394,'multiline':False]
['text':' values  = [1, 2, 3, 2, 4, 6, 7, 3, 6]','line_number':395,'multiline':False]
['text':' keys    = [0, 1, 4, 0, 1, 2, 5, 1, 2]','line_number':396,'multiline':False]
['text':'            \_____/  \________/  \__/','line_number':397,'multiline':False]
['text':' lengths =    [3,        4,       2]','line_number':398,'multiline':False]
['text':' fill in the length (value_index is used to get the correct shape)','line_number':406,'multiline':False]
['text':' fill in the keys (value_index is used to get the correct shape)','line_number':408,'multiline':False]
['text':' The helper is build sparse input with values, keys, and lengths; e.g.:','line_number':415,'multiline':False]
['text':' values  = [1, 2, 3, 2, 4, 6, 7, 3, 6]','line_number':416,'multiline':False]
['text':' keys    = [0, 1, 4, 0, 1, 2, 5, 1, 2]','line_number':417,'multiline':False]
['text':' weights = [1, 1, 1, 0, 2, 2, 2, 1, 2]','line_number':418,'multiline':False]
['text':'            \_____/  \________/  \__/','line_number':419,'multiline':False]
['text':' lengths =    [3,        4,       2]','line_number':420,'multiline':False]
['text':' fill in the length (value_index is used to get the correct shape)','line_number':429,'multiline':False]
['text':' fill in the keys (value_index is used to get the correct shape)','line_number':431,'multiline':False]
['text':' fill in the weights','line_number':433,'multiline':False]
['text':' The helper is build sparse input with values and lengths; e.g.:','line_number':440,'multiline':False]
['text':' values  = [1, 2, 3, 2, 4, 6, 7, 3, 6]','line_number':441,'multiline':False]
['text':'            \_____/  \________/  \__/','line_number':442,'multiline':False]
['text':' lengths =    [3,        4,       2]','line_number':443,'multiline':False]
['text':' fill in the length (value_index is used to get the correct shape)','line_number':450,'multiline':False]
['text':' unused ','line_number':459,'multiline':True]
['text':' NOLINTNEXTLINE(performance-inefficient-vector-operation)','line_number':475,'multiline':False]
['text':' namespace caffe2','line_number':546,'multiline':False]
