['text':' Copy over operators','line_number':16,'multiline':False]
['text':' For any blob, which operator was the last to write to it?','line_number':21,'multiline':False]
['text':' In python, this is known as "versions".','line_number':22,'multiline':False]
['text':' Traverse opposite direction to find external outputs','line_number':41,'multiline':False]
['text':' For any blob, which operator was the last to read to from it?','line_number':43,'multiline':False]
['text':' This helper function will either get:','line_number':69,'multiline':False]
['text':'    1) a list for the blobs that write INTO a subgraph','line_number':70,'multiline':False]
['text':'    2) a list of for the blobs that are written FROM a subgraph.','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':' The "from_children" flag determines if it is case 1 (true) or case 2 (false).','line_number':73,'multiline':False]
['text':' x is not in subgraph','line_number':83,'multiline':False]
['text':' but has a parent that is in subgraph','line_number':88,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-use-emplace)','line_number':90,'multiline':False]
['text':' return the list in sorted order, to allow binary searching','line_number':97,'multiline':False]
['text':' Copy over all the properties of the netdef we're based on','line_number':105,'multiline':False]
['text':' But we're going to put in our own operators.','line_number':108,'multiline':False]
['text':' Keeps track of the number of parents yet to be processed.','line_number':111,'multiline':False]
['text':' We will perform a topological traversal on the nodes, but we will prefer','line_number':114,'multiline':False]
['text':' nodes that come earlier in the execution order.','line_number':115,'multiline':False]
['text':' This is a min-heap, which stores its elements in ascending order.','line_number':117,'multiline':False]
['text':' This stores the nodes in the order we process them to be in.','line_number':118,'multiline':False]
['text':' This guarantees the lowest lexicographical topological ordering.','line_number':119,'multiline':False]
['text':' This also means the original nodes will be kept in their execution order.','line_number':121,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-use-transparent-functors)','line_number':122,'multiline':False]
['text':' In our graph, G, the nodes don't have a strict ordering. But in the netdef,','line_number':125,'multiline':False]
['text':' they must (since nets are operators executed in some order).','line_number':126,'multiline':False]
['text':' How do we make sure that the order of operators in our generated netdef','line_number':127,'multiline':False]
['text':' is valid?','line_number':128,'multiline':False]
['text':' 1) The ordering of the netdef must be topologically sorted, respect to G.','line_number':129,'multiline':False]
['text':'    If A -> B is an edge in the graph G, then A must come before B in the','line_number':130,'multiline':False]
['text':'    netdef's ordering.','line_number':131,'multiline':False]
['text':' 2) No blob conflicts: If A -> B is an edge in the graph G, and A writes to','line_number':132,'multiline':False]
['text':'    blob X and B reads from blob X, then there cannot be an op that writes','line_number':133,'multiline':False]
['text':'    to blob X between A and B in the ordering.','line_number':134,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':' Perform a Topological Sort, to find an order for the Operators to be in.','line_number':136,'multiline':False]
['text':' We will keep track of the number of parents each node has.','line_number':137,'multiline':False]
['text':' We begin with an empty queue, and push in all nodes that do not have any','line_number':138,'multiline':False]
['text':' parents. Then, we keep track of all unprocessed parents for each node.','line_number':139,'multiline':False]
['text':' When a node has no more unprocessed parents, we can push it into the queue','line_number':140,'multiline':False]
['text':' to be processed. This guarantees condition 1 is satisfied.','line_number':141,'multiline':False]
['text':' TODO(benz): Currently, condition 2 is not guaranteed to be satisified.','line_number':143,'multiline':False]
['text':' However, giving each blob unique names via SSA will satisfy this condition.','line_number':144,'multiline':False]
['text':' Then, the resulting graph can be optimized with memonger.','line_number':145,'multiline':False]
['text':' Creates a new OperatorDef in NetDef','line_number':161,'multiline':False]
['text':' Sets it equal to the OperatorDef at node(idx)','line_number':163,'multiline':False]
['text':' remove all edges connected to inactive node','line_number':181,'multiline':False]
['text':' actually mark flags as false','line_number':190,'multiline':False]
['text':' namespace transform','line_number':195,'multiline':False]
['text':' star accepts anything','line_number':217,'multiline':False]
['text':' TODO(benz): memoize this. (high constant factor boost in performance)','line_number':220,'multiline':False]
['text':' namespace caffe2','line_number':287,'multiline':False]
