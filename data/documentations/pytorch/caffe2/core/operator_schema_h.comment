['text':' A const value returned by OpSchema::CalculateOutput() if the number of','line_number':23,'multiline':False]
['text':' output cannot be determined.','line_number':24,'multiline':False]
['text':'*
 * @brief A class to record the schema of an op.
 *
 * OpSchema records the common interface of an op specified by its name. This
 * is optional for each operator implemented in Caffe2 but is strongly
 * recommended.
 *
 * To register an OpSchema, one can use the macro OPERATOR_SCHEMA(name) and
 * then append the various functions in the class. For example, for an op
 * that takes in two inputs, one output, and the first input and output
 * could be in-place, can be written as
 *
 *     OPERATOR_SCHEMA(name)
 *         .NumInputs(2).NumOutputs(1).AllowInplace({{0, 0}});
 ','line_number':27,'multiline':True]
['text':'*
   * @brief Returns the file that the op schema is registered from.
   ','line_number':47,'multiline':True]
['text':'*
   * @brief Returns the line in file that the op schema is registered from.
   ','line_number':54,'multiline':True]
['text':'*
   * @brief Returns the docstring of the op schema.
   ','line_number':61,'multiline':True]
['text':'*
   * @brief Verifies if an operator definition protobuf matches the pattern
   * specified in the schema.
   ','line_number':68,'multiline':True]
['text':' Functions to set the property of the operator schemas.','line_number':74,'multiline':False]
['text':' Sets the number of inputs, either a fixed number or a min and a max.','line_number':75,'multiline':False]
['text':'*
   * @brief A single input.
   ','line_number':77,'multiline':True]
['text':'*
   * @brief Input could be in range [min, max], inclusive.
   ','line_number':81,'multiline':True]
['text':'*
   * @brief Input could be one of the values specified in allowed_input_nums.
   ','line_number':85,'multiline':True]
['text':'*
   * @brief Input is checked with a specified function.
   ','line_number':89,'multiline':True]
['text':' Sets the number of outputs, either a fixed number, a min and a max,','line_number':94,'multiline':False]
['text':' or a function that takes in the input number and produces an output','line_number':95,'multiline':False]
['text':' number. Use only one function in the set below.','line_number':96,'multiline':False]
['text':'*
   * @brief A single output.
   ','line_number':97,'multiline':True]
['text':'*
   * @brief Output could be in range [min, max], inclusive.
   ','line_number':101,'multiline':True]
['text':'*
   * @brief Output could be one of the values specified in allowed_output_nums.
   ','line_number':105,'multiline':True]
['text':'*
   * @brief Output is checked with a specified function.
   ','line_number':109,'multiline':True]
['text':'*
   * @brief Relationship between inputs and outputs is checked with a specified
   * function.
   ','line_number':114,'multiline':True]
['text':' Set the function that can calculate the number of output based on the','line_number':120,'multiline':False]
['text':' number of input. Use only one function in the set below.','line_number':121,'multiline':False]
['text':'*
   * @brief Set the output calculator to a user-defined function.
   ','line_number':122,'multiline':True]
['text':'*
   * @brief Set the number of outputs to be the same as the number of inputs.
   ','line_number':126,'multiline':True]
['text':' Sets the rule to allow optional in-place operation.','line_number':131,'multiline':False]
['text':' Sets the rule to enforce in-place operation.','line_number':135,'multiline':False]
['text':' Functions to deal with type and shape inference. Basically, this registers','line_number':140,'multiline':False]
['text':' a function that takes in an OperatorDef and a series of input type and','line_number':141,'multiline':False]
['text':' shape specified by TensorProto objects (whose data fields are empty), and','line_number':142,'multiline':False]
['text':' produces a series of output type and shape.','line_number':143,'multiline':False]
['text':'*
   * @brief Sets the tensor inference function, which is a std::function object
   * defined in operator_schema.h.
   ','line_number':148,'multiline':True]
['text':'*
   * A wrapper that makes an infer tensor function to return unknown
   * shape for all outputs if any one of the inputs has unknown shape
   ','line_number':154,'multiline':True]
['text':'*
   * @brief Sets the corresponding onnx schema name
   ','line_number':162,'multiline':True]
['text':'*
   * @brief Shortcut to InheritOnnxSchema(type_)
   ','line_number':167,'multiline':True]
['text':'*
   * @brief Sets the tensor inference function to produce the same output as
   * the input.
   ','line_number':174,'multiline':True]
['text':'*
   * @brief A function to allow one to infer the type and shape from the op
   * schema.
   ','line_number':184,'multiline':True]
['text':'
   * @brief A struct to store various cost information about
   * an operator such as FLOPs, total memory use and parameters.
   ','line_number':198,'multiline':True]
['text':' Floating point operations.','line_number':203,'multiline':False]
['text':' Total memory read.','line_number':204,'multiline':False]
['text':' Total memory written.','line_number':205,'multiline':False]
['text':' Memory read for parameters.','line_number':206,'multiline':False]
['text':'*
   * @brief Registers a function that takes in an OperatorDef
   * and a series of input shapes and returns the total "cost"
   * required to run the operator via struct by value.
   ','line_number':208,'multiline':True]
['text':'*
   * @brief Register the Cost inference function.
   ','line_number':217,'multiline':True]
['text':' def _MSC_VER','line_number':222,'multiline':False]
['text':'*
   * @brief Register the Cost inference function via a pointer.
   ','line_number':223,'multiline':True]
['text':' Note: This is here in order to resolve an MSVC compiler issue: it','line_number':231,'multiline':False]
['text':' does not automatically convert a function pointer to a std::function,','line_number':232,'multiline':False]
['text':' and needs an explicit conversion.','line_number':233,'multiline':False]
['text':' _MSC_VER','line_number':236,'multiline':False]
['text':' Functions to do documentation for the operator schema.','line_number':250,'multiline':False]
['text':' Calls the passed function with `this` as an argument. Useful for','line_number':288,'multiline':False]
['text':' adding docs for templated/macro ops.','line_number':289,'multiline':False]
['text':' Remove from documentation','line_number':292,'multiline':False]
['text':' This op can pass data across devices','line_number':295,'multiline':False]
['text':'*
   * @brief A function to allow one to get the number of outputs based on the
   * number of inputs, if this schema supports it.
   ','line_number':298,'multiline':True]
['text':'*
   * @brief Returns the required device location of inputs and outputs.
   ','line_number':365,'multiline':True]
['text':'*
   * @brief Infer required device location of an op's inputs and outputs
   ','line_number':374,'multiline':True]
['text':' The helper is build sparse input with values, keys, weights and lengths;','line_number':382,'multiline':False]
['text':' e.g.:','line_number':383,'multiline':False]
['text':' values  = [1, 2, 3, 2, 4, 6, 7, 3, 6]','line_number':384,'multiline':False]
['text':' keys    = [0, 1, 4, 0, 1, 2, 5, 1, 2]','line_number':385,'multiline':False]
['text':' weights = [1, 2, 3, 4, 5, 6, 7, 8, 9]','line_number':386,'multiline':False]
['text':'            \_____/  \________/  \__/','line_number':387,'multiline':False]
['text':' lengths =    [3,        4,       2]','line_number':388,'multiline':False]
['text':' The helper is build sparse input with values, keys, weights and lengths;','line_number':395,'multiline':False]
['text':' e.g.:','line_number':396,'multiline':False]
['text':' values  = [1, 2, 3, 2, 4, 6, 7, 3, 6]','line_number':397,'multiline':False]
['text':' keys    = [0, 1, 4, 0, 1, 2, 5, 1, 2]','line_number':398,'multiline':False]
['text':'            \_____/  \________/  \__/','line_number':399,'multiline':False]
['text':' lengths =    [3,        4,       2]','line_number':400,'multiline':False]
['text':' The helper is build sparse input with values and lengths; e.g.:','line_number':406,'multiline':False]
['text':' values  = [1, 2, 3, 2, 4, 6, 7, 3, 6]','line_number':407,'multiline':False]
['text':'            \_____/  \________/  \__/','line_number':408,'multiline':False]
['text':' lengths =    [3,        4,       2]','line_number':409,'multiline':False]
['text':' In default, any in-place operation is neither allowed nor enforced.','line_number':442,'multiline':False]
['text':'*
 * @brief A registry to hold all the operator schemas.
 ','line_number':461,'multiline':True]
['text':' OpSchemaRegistry should not need to be instantiated.','line_number':480,'multiline':False]
['text':'*
   * @brief Returns the underlying string to OpSchema map.
   *
   * You should not manually manipulate the map object returned. Instead, use
   * the macros defined such as OPERATOR_SCHEMA to register your operator
   * schema.
   *
   * We wrap it inside a function to avoid the static initialization order
   * fiasco.
   ','line_number':483,'multiline':True]
['text':' Helper function for creating simple tensorproto with dimension and type','line_number':496,'multiline':False]
['text':' Helper function','line_number':509,'multiline':False]
['text':' Helper function','line_number':518,'multiline':False]
['text':' Helper function','line_number':529,'multiline':False]
['text':' Helper function for infer op inputs and outputs device information.','line_number':541,'multiline':False]
['text':' op_schema found','line_number':546,'multiline':False]
['text':' No schema for op.type registered','line_number':550,'multiline':False]
['text':' unused ','line_number':558,'multiline':True]
['text':' namespace caffe2','line_number':576,'multiline':False]
['text':' CAFFE2_NO_OPERATOR_SCHEMA','line_number':591,'multiline':False]
['text':' CAFFE2_NO_OPERATOR_SCHEMA','line_number':598,'multiline':False]
['text':' CAFFE2_CORE_OPERATOR_SCHEMA_H_','line_number':612,'multiline':False]
