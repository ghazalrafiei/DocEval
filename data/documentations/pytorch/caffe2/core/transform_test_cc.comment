['text':' unused ','line_number':17,'multiline':True]
['text':'*
 * This TransformDummy transform will find all subgraphs of shape
 * (TransformDummyOp1 -> TransformDummyOp2) and replaces them with
 * (TransformDummyOp3). Simple unit test.
 ','line_number':44,'multiline':True]
['text':' Finds all patterns of the form (TransformDummyOp1 -> TransformDummyOp2)','line_number':51,'multiline':False]
['text':' which index are we trying to append the new node to?','line_number':57,'multiline':False]
['text':' type doesn't match','line_number':59,'multiline':False]
['text':' not that head, and doesn't have exactly 1 parent','line_number':63,'multiline':False]
['text':' not that tail, and doesn't have exactly 1 child','line_number':67,'multiline':False]
['text':' Checks if the subgraph matched is (TransformDummyOp1 -> TransformDummyOp2)','line_number':76,'multiline':False]
['text':' Replaces a match of (TransformDummyOp1 -> TransformDummyOp2) with','line_number':88,'multiline':False]
['text':' (TransformDummyOp3)','line_number':89,'multiline':False]
['text':' for each node parent in the head of the match, connect it to our new node','line_number':100,'multiline':False]
['text':' for each child in the tail of the match, connect it to our new node','line_number':112,'multiline':False]
['text':'*
 * Transform with Sorted Order matching.
 * Matches two operators of type TransformDummyOp1, even if disconnected.
 * These operators will be given in execution order,
 * but doesn't need connectivity.
 * Changes them to TransformDummyOp2.
 ','line_number':212,'multiline':True]
['text':'*
 * General subgraph transform.
 * Matches a TransformDummyOp1, and a TransformDummyOp2.
 * Order doesn't matter. Connectedness doesn't matter.
 * Turns them into TransformDummyOp3.
 ','line_number':270,'multiline':True]
['text':' unused ','line_number':333,'multiline':True]
['text':' unused ','line_number':349,'multiline':True]
['text':'*
 * This TransformDummy transform will find all operators of type old_type,
 * and replace them with type new_type.
 ','line_number':362,'multiline':True]
['text':' Determine the actual strings through inheriting from derived type.','line_number':368,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-pass-by-value)','line_number':369,'multiline':False]
['text':' Really simple, only accept if it's a FastSleepOp, and no match so far.','line_number':373,'multiline':False]
['text':' Checks if the subgraph matched is a FastSleepOp','line_number':381,'multiline':False]
['text':' Replaces op of original type to new type.','line_number':391,'multiline':False]
['text':' This is important for this function.','line_number':427,'multiline':False]
['text':' Make sure the transform would work normally.','line_number':429,'multiline':False]
['text':' Should be still transform normally.','line_number':433,'multiline':False]
['text':' This is important for this function.','line_number':446,'multiline':False]
['text':' Make sure the transform would work normally.','line_number':448,'multiline':False]
['text':' Should not actually change!','line_number':452,'multiline':False]
['text':' namespace','line_number':458,'multiline':False]
['text':' namespace caffe2','line_number':460,'multiline':False]
