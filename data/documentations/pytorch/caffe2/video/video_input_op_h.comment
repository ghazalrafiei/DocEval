['text':' override methods','line_number':32,'multiline':False]
['text':' thread pool for parse + decode','line_number':119,'multiline':False]
['text':' check whether the input parameters are valid or not','line_number':126,'multiline':False]
['text':' print out the parameter settings','line_number':210,'multiline':False]
['text':' mean and std for normalizing different optical flow data type;','line_number':371,'multiline':False]
['text':' Example statistics generated from SOA are shown below, and you may','line_number':372,'multiline':False]
['text':' want to change them if you are running on a different dataset;','line_number':373,'multiline':False]
['text':' 7 channels: (flow_x, flow_y, flow_magitude, gray, Red, Green, Blue)','line_number':375,'multiline':False]
['text':' if we need RGB as an input','line_number':381,'multiline':False]
['text':' how many frames we need for RGB','line_number':383,'multiline':False]
['text':' if we need optical flow as an input','line_number':413,'multiline':False]
['text':' how many frames we need for optical flow','line_number':415,'multiline':False]
['text':' set the parameters for different input data types','line_number':420,'multiline':False]
['text':' early fusion with gray','line_number':438,'multiline':False]
['text':' early fusion with RGB','line_number':449,'multiline':False]
['text':' Always need a dbreader, even when using local video files','line_number':469,'multiline':False]
['text':' In case clip_start_positions are given, set the clip_per_video arg','line_number':476,'multiline':False]
['text':' for RGB data','line_number':481,'multiline':False]
['text':' for optical flow data','line_number':490,'multiline':False]
['text':' If do_multi_label is used, output label is a binary vector','line_number':496,'multiline':False]
['text':' of length num_of_class indicating which labels present','line_number':497,'multiline':False]
['text':' For multiple label case, output label is a binary vector','line_number':535,'multiline':False]
['text':' where presented concepts are marked 1','line_number':536,'multiline':False]
['text':' encoded image string.','line_number':566,'multiline':False]
['text':' We use a cv::Mat to wrap the encoded str so we do not need a copy.','line_number':570,'multiline':False]
['text':' raw image content.','line_number':582,'multiline':False]
['text':' start_frm is only valid when sampling 1 clip per video without','line_number':653,'multiline':False]
['text':' temporal jitterring','line_number':654,'multiline':False]
['text':' assign labels','line_number':678,'multiline':False]
['text':' initializing the decoding params','line_number':688,'multiline':False]
['text':' for decoding from buffer','line_number':705,'multiline':False]
['text':' for decoding from file','line_number':706,'multiline':False]
['text':' TODO: does this works?','line_number':721,'multiline':False]
['text':' get the video resolution after decoding','line_number':755,'multiline':False]
['text':' Decode the video from memory or read from a local file','line_number':763,'multiline':False]
['text':' get the rectangle for cropping','line_number':779,'multiline':False]
['text':' using random crop for training','line_number':788,'multiline':False]
['text':' using multiple spatial crops','line_number':794,'multiline':False]
['text':' normally 3 crops','line_number':795,'multiline':False]
['text':' LOG(INFO) << "crop " << j << "-th " << h_off << " & " << w_off;','line_number':803,'multiline':False]
['text':' using center crop for testing','line_number':804,'multiline':False]
['text':' randomly mirror the image or not','line_number':817,'multiline':False]
['text':' We will get the reader pointer from input.','line_number':876,'multiline':False]
['text':' If we use local clips, db will store the list','line_number':877,'multiline':False]
['text':' Call mutable_data() once to allocate the underlying memory.','line_number':880,'multiline':False]
['text':' Prefetching handled with a thread pool of "decode_threads" threads.','line_number':887,'multiline':False]
['text':' get the clip data pointer for the item_id -th example','line_number':900,'multiline':False]
['text':' get the optical flow data for the current clip','line_number':905,'multiline':False]
['text':' get the label data pointer for the item_id -th example','line_number':910,'multiline':False]
['text':' get the video id data pointer for the item_id -th example','line_number':915,'multiline':False]
['text':' read data','line_number':923,'multiline':False]
['text':' for over the batch','line_number':937,'multiline':False]
['text':' If the context is not CPUContext, we will need to do a copy in the','line_number':940,'multiline':False]
['text':' prefetch function as well.','line_number':941,'multiline':False]
['text':' namespace caffe2','line_number':1022,'multiline':False]
['text':' CAFFE2_VIDEO_VIDEO_INPUT_OP_H_','line_number':1024,'multiline':False]
