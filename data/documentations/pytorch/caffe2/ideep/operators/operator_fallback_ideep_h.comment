['text':'*
 * @brief A templated class to allow one to wrap a CPU operator as an IDEEP
 * operator.
 *
 * This class can be used when one does not have the IDEEP implementation ready
 * yet for an operator. Essentially, what this op does is to automatically
 * deal with data copy for you. Plausibly, this causes a lot of overhead and
 * is not optimal, so you should use this operator mostly for quick prototyping
 * purpose.
 *
 * All the input and output of the original operator should be TensorCPU.
 *
 * Example usage: if you have a class MyMagicOp that is CPU based, and you use
 * the registration code
 *     REGISTER_CPU_OPERATOR(MyMagic, MyMagicOp);
 * to register the CPU side, you can create its corresponding IDEEP operator
 * (with performance hits of course) via
 *     REGISTER_IDEEP_OPERATOR(MyMagic,
 *                            IDEEPFallbackOp<MyMagicOp>);
 *
 * Advanced usage: if you want to have some specific outputs never copied, you
 * can use the SkipOutputCopy template argument to do that. For example, if
 * MyMagic produces two outputs and the first output is always going to live on
 * the CPU, you can do
 *     REGISTER_IDEEP_OPERATOR(MyMagic,
 *                            IDEEPFallbackOp<MyMagicOp, SkipIndices<0>>);
 ','line_number':11,'multiline':True]
['text':' base_def_ runs on CPU, so we will set its device option to CPU.','line_number':48,'multiline':False]
['text':' Copy to allow random_seed to be correctly propagated.','line_number':49,'multiline':False]
['text':' Create output blobs in parent workspace,','line_number':52,'multiline':False]
['text':' then forward output blobs to local workspace.','line_number':53,'multiline':False]
['text':' For in-place case, the in/output tensor for local_ws must be','line_number':56,'multiline':False]
['text':' re-created, instead of forwarding from current workspace.','line_number':57,'multiline':False]
['text':' Set up the symbols for the local workspace.','line_number':74,'multiline':False]
['text':' If fallback from INT8, the public format of original input is nhwc.','line_number':95,'multiline':False]
['text':' While the required format is nchw, need to reorder to nchw.','line_number':96,'multiline':False]
['text':' Note(jiayq): This removes a const but conceptually','line_number':112,'multiline':False]
['text':' local_input_blobs will only be used as const blob input for the','line_number':113,'multiline':False]
['text':' base op so we are still fine.','line_number':114,'multiline':False]
['text':' Some CPU ops inherited from OperatorBase directly might need this default','line_number':123,'multiline':False]
['text':' input argument '0' like 'PrefetchOperator'.','line_number':124,'multiline':False]
['text':' The output tensor must be ideep tensor with public format.','line_number':144,'multiline':False]
['text':' If reusing ideep tensor with non-public format, the tensor buffer','line_number':145,'multiline':False]
['text':' will be interpreted incorrectly.','line_number':146,'multiline':False]
['text':' namespace caffe2','line_number':190,'multiline':False]
