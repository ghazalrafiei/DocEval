['text':' Helper data structure used locally','line_number':8,'multiline':False]
['text':' Storing boxes used by this CUDA block in the shared memory','line_number':35,'multiline':False]
['text':' Same thing with areas','line_number':37,'multiline':False]
['text':' The condition of the for loop is common to all threads in the block','line_number':39,'multiline':False]
['text':' This is necessary to be able to call __syncthreads() inside of the loop','line_number':40,'multiline':False]
['text':' One 1D line load the boxes for x-dimension','line_number':45,'multiline':False]
['text':' Note : We can do everything using multiplication,','line_number':60,'multiline':False]
['text':' and use fp16 - we are comparing against a low precision','line_number':61,'multiline':False]
['text':' threshold','line_number':62,'multiline':False]
['text':' This thread will compare Box i and Box j','line_number':66,'multiline':False]
['text':' The following code will not be valid with empty boxes','line_number':76,'multiline':False]
['text':' fdimf computes the positive difference between xx2+1 and xx1','line_number':84,'multiline':False]
['text':' Testing for a/b > t','line_number':89,'multiline':False]
['text':' eq with a > b*t (b is !=0)','line_number':90,'multiline':False]
['text':' avoiding divisions','line_number':91,'multiline':False]
['text':' eq. to if ovr > thresh','line_number':95,'multiline':False]
['text':' we have score[j] <= score[i]','line_number':97,'multiline':False]
['text':' making sure everyone is done reading smem','line_number':106,'multiline':False]
['text':' namespace','line_number':109,'multiline':False]
['text':' Making sure we respect the __align(16)__ we promised to the compiler','line_number':121,'multiline':False]
['text':' The next kernel expects squares','line_number':125,'multiline':False]
['text':' Overlapping CPU computes and D2H memcpy','line_number':145,'multiline':False]
['text':' both take about the same time','line_number':146,'multiline':False]
['text':' Waiting for previous copy','line_number':172,'multiline':False]
['text':' Including duplicates based on get_intersection_points()','line_number':208,'multiline':False]
['text':' y: top --> down; x: left --> right','line_number':224,'multiline':False]
['text':' We do a sign test to see on which side the point lies.','line_number':235,'multiline':False]
['text':' If the point lies on the same side for all 4 sides of the rect,','line_number':236,'multiline':False]
['text':' then it lies within the rectangle.','line_number':237,'multiline':False]
['text':' Line equation: Ax + By + C = 0.','line_number':240,'multiline':False]
['text':' See which side of the line this point is at.','line_number':241,'multiline':False]
['text':' float causes underflow!','line_number':242,'multiline':False]
['text':' Special case for rect1 == rect2','line_number':267,'multiline':False]
['text':' Calculate line vectors.','line_number':275,'multiline':False]
['text':' A line from p1 to p2 is: p1 + (p2-p1)*t, t=[0,1].','line_number':276,'multiline':False]
['text':' Line test - test all line combos for intersection','line_number':286,'multiline':False]
['text':' Solve for 2x2 Ax=b','line_number':291,'multiline':False]
['text':' This takes care of parallel lines','line_number':298,'multiline':False]
['text':' Check for vertices of rect1 inside rect2','line_number':315,'multiline':False]
['text':' Reverse the check - check for vertices of rect2 inside rect1','line_number':322,'multiline':False]
['text':' Compute center point','line_number':337,'multiline':False]
['text':' Calculate distance of each point from center and store the x component','line_number':346,'multiline':False]
['text':' Order points based on x component of the distance.','line_number':359,'multiline':False]
['text':' Could use thrust::sort_by_key(thrust::seq, xs, xs + count, pts),','line_number':360,'multiline':False]
['text':' but it results in a big perf hit.','line_number':361,'multiline':False]
['text':' Storing box areas used by this CUDA block in the shared memory','line_number':403,'multiline':False]
['text':' Same thing with vertices of boxes','line_number':405,'multiline':False]
['text':' The condition of the for loop is common to all threads in the block','line_number':408,'multiline':False]
['text':' This is necessary to be able to call __syncthreads() inside of the loop','line_number':409,'multiline':False]
['text':' One 1D line load the boxes for x-dimension','line_number':414,'multiline':False]
['text':' This thread will compare Box i and Box j','line_number':434,'multiline':False]
['text':' The following code will not be valid with empty boxes','line_number':441,'multiline':False]
['text':' Testing for a/b > t','line_number':452,'multiline':False]
['text':' eq with a > b*t (b is !=0)','line_number':453,'multiline':False]
['text':' avoiding divisions','line_number':454,'multiline':False]
['text':' eq. to if ovr > thresh','line_number':458,'multiline':False]
['text':' we have score[j] <= score[i]','line_number':460,'multiline':False]
['text':' making sure everyone is done reading smem','line_number':469,'multiline':False]
['text':' namespace','line_number':472,'multiline':False]
['text':' The next kernel expects squares','line_number':483,'multiline':False]
['text':' Overlapping CPU computes and D2H memcpy','line_number':503,'multiline':False]
['text':' both take about the same time','line_number':504,'multiline':False]
['text':' Waiting for previous copy','line_number':530,'multiline':False]
['text':' namespace utils','line_number':596,'multiline':False]
['text':' namespace caffe2','line_number':597,'multiline':False]
