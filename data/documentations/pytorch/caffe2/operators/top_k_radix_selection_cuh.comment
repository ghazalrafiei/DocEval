['text':' From the cutorch library','line_number':14,'multiline':False]
['text':' Converts a float to an integer representation with the same','line_number':30,'multiline':False]
['text':' sorting; i.e., for floats f1, f2:','line_number':31,'multiline':False]
['text':' if f1 < f2 then convert(f1) < convert(f2)','line_number':32,'multiline':False]
['text':' We use this to enable radix selection of floating-point values.','line_number':33,'multiline':False]
['text':' This also gives a relative order for NaNs, but that's ok, as they','line_number':34,'multiline':False]
['text':' will all be adjacent','line_number':35,'multiline':False]
['text':'static_assert fails on windows, so leave it as CUDA_KERNEL_ASSERT','line_number':109,'multiline':False]
['text':' This function counts the distribution of all input values in a','line_number':135,'multiline':False]
['text':' slice we are selecting by radix digit at `radixDigitPos`, but only','line_number':136,'multiline':False]
['text':' those that pass the filter `((v & desiredMask) == desired)`.','line_number':137,'multiline':False]
['text':' This produces and broadcasts the seen counts for a single block only.','line_number':138,'multiline':False]
['text':' `smem` must have at least `RadixSize` elements.','line_number':139,'multiline':False]
['text':' Clear out per-thread counts from a previous round','line_number':152,'multiline':False]
['text':' Scan over all the data. Upon a read, the warp will accumulate','line_number':163,'multiline':False]
['text':' counts per each digit in the radix using warp voting.','line_number':164,'multiline':False]
['text':' Must be called outside of loop to ensure all threads participate','line_number':166,'multiline':False]
['text':' USE_ROCM','line_number':182,'multiline':False]
['text':' Now, for each warp, sum values','line_number':190,'multiline':False]
['text':' For each thread, read in the total counts','line_number':200,'multiline':False]
['text':' Over what radix we are selecting values','line_number':209,'multiline':False]
['text':' digits are base-(2 ^ RADIX_BITS)','line_number':210,'multiline':False]
['text':' 2 ^ RADIX_BITS','line_number':211,'multiline':False]
['text':' This finds the unique value `v` that matches the pattern','line_number':214,'multiline':False]
['text':' ((v & desired) == desiredMask) in our sorted int format','line_number':215,'multiline':False]
['text':' All threads participate in the loop, in order to sync on the flag','line_number':227,'multiline':False]
['text':' There should not be conflicts if we are using findPattern,','line_number':234,'multiline':False]
['text':' since the result is unique','line_number':235,'multiline':False]
['text':' can't use val as the flag, since it could be 0','line_number':237,'multiline':False]
['text':' Check to see if a thread found the value','line_number':247,'multiline':False]
['text':' all threads return this value','line_number':249,'multiline':False]
['text':' should not get here','line_number':254,'multiline':False]
['text':' Returns the top-Kth element found in the data using radix selection','line_number':259,'multiline':False]
['text':' Per-thread buckets into which we accumulate digit counts in our','line_number':266,'multiline':False]
['text':' radix','line_number':267,'multiline':False]
['text':' We only consider elements x such that (x & desiredMask) == desired','line_number':270,'multiline':False]
['text':' Initially, we consider all elements of the array, so the above','line_number':271,'multiline':False]
['text':' statement is true regardless of input.','line_number':272,'multiline':False]
['text':' We are looking for the top kToFind-th element when iterating over','line_number':276,'multiline':False]
['text':' digits; this count gets reduced by elimination when counting','line_number':277,'multiline':False]
['text':' successive digits','line_number':278,'multiline':False]
['text':' We start at the most significant digit in our radix, scanning','line_number':281,'multiline':False]
['text':' through to the least significant digit','line_number':282,'multiline':False]
['text':' Count radix distribution for the current position and reduce','line_number':288,'multiline':False]
['text':' across all threads','line_number':289,'multiline':False]
['text':' All threads participate in the comparisons below to know the','line_number':297,'multiline':False]
['text':' final result','line_number':298,'multiline':False]
['text':' All threads have the same value in counts here, so all ','line_number':304,'multiline':True]
['text':' threads will return from the function. ','line_number':305,'multiline':True]
['text':' There is a unique answer. ','line_number':307,'multiline':True]
['text':' The answer is now the unique element v such that: ','line_number':312,'multiline':True]
['text':' (v & desiredMask) == desired ','line_number':313,'multiline':True]
['text':' However, we do not yet know what the actual element is. We ','line_number':314,'multiline':True]
['text':' need to perform a search through the data to find the ','line_number':315,'multiline':True]
['text':' element that matches this pattern. ','line_number':316,'multiline':True]
['text':' The top-Kth element v must now be one such that: ','line_number':328,'multiline':True]
['text':' (v & desiredMask == desired) ','line_number':329,'multiline':True]
['text':' but we haven't narrowed it down; we must check the next ','line_number':330,'multiline':True]
['text':' least-significant digit ','line_number':331,'multiline':True]
['text':' Process in descending order','line_number':338,'multiline':False]
['text':' Process in ascending order','line_number':344,'multiline':False]
['text':' end digitPos for','line_number':351,'multiline':False]
['text':' There is no unique result, but there is a non-unique result','line_number':353,'multiline':False]
['text':' matching `desired` exactly','line_number':354,'multiline':False]
['text':' aka `k`','line_number':361,'multiline':False]
['text':' one per each warp, up to warp limit','line_number':365,'multiline':False]
['text':' Find the start offset for our slice','line_number':372,'multiline':False]
['text':' Find the k-th highest element in our input','line_number':377,'multiline':False]
['text':' Every value that is strictly less/greater than `pattern`','line_number':384,'multiline':False]
['text':' (depending on sort dir) in sorted int format is in the top-K.','line_number':385,'multiline':False]
['text':' The top-K value itself might not be unique.','line_number':386,'multiline':False]
['text':'','line_number':387,'multiline':False]
['text':' Since there are a variable number of elements that we see that','line_number':388,'multiline':False]
['text':' are within the top-k, we don't know at what index to write out','line_number':389,'multiline':False]
['text':' the resulting values.','line_number':390,'multiline':False]
['text':' In order to get this, we perform an exclusive prefix sum of','line_number':391,'multiline':False]
['text':' `hasTopK`. This will return the resulting index into which we','line_number':392,'multiline':False]
['text':' need to write the result, if a thread has a result.','line_number':393,'multiline':False]
['text':' All threads need to participate in the loop and the prefix sum,','line_number':395,'multiline':False]
['text':' but not necessarily in the load; hence loop bounds being rounded','line_number':396,'multiline':False]
['text':' up to a multiple of the block dim.','line_number':397,'multiline':False]
['text':' We need to fill in the rest with actual == top-K values.','line_number':429,'multiline':False]
['text':' The number that we need is outputSliceSize -','line_number':430,'multiline':False]
['text':' writeIndexStart. There might be more than that number available,','line_number':431,'multiline':False]
['text':' in which case we have to choose the first seen set. We do this','line_number':432,'multiline':False]
['text':' via a prefix sum to calculate indices for writing results.','line_number':433,'multiline':False]
['text':' namespace caffe2','line_number':470,'multiline':False]
['text':' CAFFE2_OPERATORS_TOP_K_RADIX_SELECTION_H_','line_number':472,'multiline':False]
