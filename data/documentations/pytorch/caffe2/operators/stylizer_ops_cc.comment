['text':'','line_number':15,'multiline':False]
['text':' ARM Neon code utilities','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':' unnamed namespace','line_number':56,'multiline':False]
['text':' defined(__ARM_NEON__) || defined(__ARM_NEON)','line_number':57,'multiline':False]
['text':' Expect this many channels as input','line_number':62,'multiline':False]
['text':' Expect this many channels as output','line_number':65,'multiline':False]
['text':' We read this much noise per vectorized cycle','line_number':68,'multiline':False]
['text':' prime to avoid artifacts ','line_number':81,'multiline':True]
['text':' Initialize random noise on first use.','line_number':84,'multiline':False]
['text':' Cache it to maintain temporal consistency.','line_number':85,'multiline':False]
['text':' Noise space is larger for vectorized code due to the','line_number':89,'multiline':False]
['text':' vectorized load','line_number':90,'multiline':False]
['text':' Assume BGR or BGRA','line_number':101,'multiline':False]
['text':' !defined(__ARM_NEON__) && !defined(__ARM_NEON)','line_number':132,'multiline':False]
['text':' For ARM NEON, we read in multiples of kNeonNoiseReadSize since','line_number':136,'multiline':False]
['text':' the inner loop is vectorized. Round up to the next highest','line_number':137,'multiline':False]
['text':' multiple of kNeonNoiseReadSize','line_number':138,'multiline':False]
['text':' defined(__ARM_NEON__) || defined(__ARM_NEON)','line_number':149,'multiline':False]
['text':'C','line_number':153,'multiline':True]
['text':' defined(__ARM_NEON__) || defined(__ARM_NEON)','line_number':171,'multiline':False]
['text':' !defined(__ARM_NEON__) && !defined(__ARM_NEON)','line_number':198,'multiline':False]
['text':' Vectorized load parameters:','line_number':209,'multiline':False]
['text':' Loop unroll factor','line_number':211,'multiline':False]
['text':' FIXME: this doesn't actually unroll; clang has per-loop unroll','line_number':212,'multiline':False]
['text':' pragmas but GCC does not','line_number':213,'multiline':False]
['text':' How much data we load for each inner loop','line_number':216,'multiline':False]
['text':' What we write out','line_number':219,'multiline':False]
['text':' We load 16 pixels at a time, with 4 channels each','line_number':222,'multiline':False]
['text':' How many pixels we load per loop','line_number':226,'multiline':False]
['text':' We need at least this much noise each loop through','line_number':229,'multiline':False]
['text':' Vectorized portion','line_number':239,'multiline':False]
['text':' If the slice is not aligned, then we have to use the','line_number':242,'multiline':False]
['text':' un-vectorized version','line_number':243,'multiline':False]
['text':' Because we are writing to output at offsets of planeSize,','line_number':246,'multiline':False]
['text':' planeSize has to be an even multiple of kInnerStoreSize','line_number':247,'multiline':False]
['text':' What portion the vectorized loop will handle','line_number':250,'multiline':False]
['text':' Unroll load/update/store by kUnroll','line_number':255,'multiline':False]
['text':' We load 16 pixels x 4 channels at a time','line_number':257,'multiline':False]
['text':' The compiler doesn't want to unroll this when we put it in a','line_number':263,'multiline':False]
['text':' loop, and in GCC there's no per-loop unroll pragma, so we do','line_number':264,'multiline':False]
['text':' it manually.','line_number':265,'multiline':False]
['text':' This seems to involve no register spillage, crossing fingers','line_number':266,'multiline':False]
['text':' that it remains that way.','line_number':267,'multiline':False]
['text':' Epilogue: non-vectorized remainder','line_number':365,'multiline':False]
['text':'  defined(__ARM_NEON__) || defined(__ARM_NEON)','line_number':379,'multiline':False]
['text':' unnamed namespace','line_number':398,'multiline':False]
['text':' Expect this many channels as input','line_number':405,'multiline':False]
['text':' Expect this many channels as output','line_number':408,'multiline':False]
['text':' Assume BGR or BGRA','line_number':417,'multiline':False]
['text':' RGB','line_number':420,'multiline':False]
['text':'C','line_number':437,'multiline':True]
['text':'  defined(__ARM_NEON__) || defined(__ARM_NEON)','line_number':453,'multiline':False]
['text':' alpha','line_number':473,'multiline':False]
['text':' !defined(__ARM_NEON__) && !defined(__ARM_NEON)','line_number':478,'multiline':False]
['text':' Vectorized load parameters:','line_number':487,'multiline':False]
['text':' We load in chunks of this size','line_number':489,'multiline':False]
['text':' We store in chunks of this size','line_number':493,'multiline':False]
['text':' The vector portion loads this many f32 pixels at a time (8)','line_number':496,'multiline':False]
['text':' Vectorized portion','line_number':503,'multiline':False]
['text':' If the slice is not aligned, then we have to use the','line_number':506,'multiline':False]
['text':' un-vectorized version','line_number':507,'multiline':False]
['text':' Because we are reading from input at offsets of planeSize,','line_number':510,'multiline':False]
['text':' planeSize has to be an even multiple of kLoadUnit','line_number':511,'multiline':False]
['text':' What portion the vectorized loop will handle','line_number':514,'multiline':False]
['text':' Load 8 f32 pixels from each channel; loading 16 involves','line_number':518,'multiline':False]
['text':' register spills it seems','line_number':519,'multiline':False]
['text':' This is the alpha channel','line_number':547,'multiline':False]
['text':' We now have 8 bytes of each channel in a separate vector','line_number':550,'multiline':False]
['text':' Write BGRA interleaved to output','line_number':551,'multiline':False]
['text':' Epilogue: non-vectorized remainder','line_number':556,'multiline':False]
['text':' alpha','line_number':564,'multiline':False]
['text':' defined(__ARM_NEON__) || defined(__ARM_NEON)','line_number':569,'multiline':False]
['text':' namespace','line_number':595,'multiline':False]
['text':' namespace caffe2','line_number':596,'multiline':False]
