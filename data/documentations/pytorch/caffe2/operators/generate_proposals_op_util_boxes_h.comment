['text':' Bounding box utils for generate_proposals_op','line_number':8,'multiline':False]
['text':' Reference: facebookresearch/Detectron/detectron/utils/boxes.py','line_number':9,'multiline':False]
['text':' Default value for minimum bounding box width and height after bounding box','line_number':14,'multiline':False]
['text':'     transformation (bbox_transform()) in log-space','line_number':15,'multiline':False]
['text':' Forward transform that maps proposal boxes to ground-truth boxes using','line_number':19,'multiline':False]
['text':'     bounding-box regression deltas.','line_number':20,'multiline':False]
['text':' boxes: pixel coordinates of the bounding boxes','line_number':21,'multiline':False]
['text':'     size (M, 4), format [x1; y1; x2; y2], x2 >= x1, y2 >= y1','line_number':22,'multiline':False]
['text':' deltas: bounding box translations and scales','line_number':23,'multiline':False]
['text':'     size (M, 4), format [dx; dy; dw; dh]','line_number':24,'multiline':False]
['text':'     dx, dy: scale-invariant translation of the center of the bounding box','line_number':25,'multiline':False]
['text':'     dw, dh: log-space scaling of the width and height of the bounding box','line_number':26,'multiline':False]
['text':' weights: weights [wx, wy, ww, wh] for the deltas','line_number':27,'multiline':False]
['text':' bbox_xform_clip: minimum bounding box width and height in log-space after','line_number':28,'multiline':False]
['text':'     transofmration','line_number':29,'multiline':False]
['text':' correct_transform_coords: Correct bounding box transform coordinates. Set to','line_number':30,'multiline':False]
['text':'     true to match the detectron code, set to false for backward compatibility','line_number':31,'multiline':False]
['text':' return: pixel coordinates of the bounding boxes','line_number':32,'multiline':False]
['text':'     size (M, 4), format [x1; y1; x2; y2]','line_number':33,'multiline':False]
['text':' see "Rich feature hierarchies for accurate object detection and semantic','line_number':34,'multiline':False]
['text':'     segmentation" Appendix C for more details','line_number':35,'multiline':False]
['text':' reference: detectron/lib/utils/boxes.py bbox_transform()','line_number':36,'multiline':False]
['text':' x1','line_number':75,'multiline':False]
['text':' y1','line_number':77,'multiline':False]
['text':' x2','line_number':79,'multiline':False]
['text':' y2','line_number':81,'multiline':False]
['text':' Like bbox_transform_upright, but works on rotated boxes.','line_number':87,'multiline':False]
['text':' boxes: pixel coordinates of the bounding boxes','line_number':88,'multiline':False]
['text':'     size (M, 5), format [ctr_x; ctr_y; width; height; angle (in degrees)]','line_number':89,'multiline':False]
['text':' deltas: bounding box translations and scales','line_number':90,'multiline':False]
['text':'     size (M, 5), format [dx; dy; dw; dh; da]','line_number':91,'multiline':False]
['text':'     dx, dy: scale-invariant translation of the center of the bounding box','line_number':92,'multiline':False]
['text':'     dw, dh: log-space scaling of the width and height of the bounding box','line_number':93,'multiline':False]
['text':'     da: delta for angle in radians','line_number':94,'multiline':False]
['text':' return: pixel coordinates of the bounding boxes','line_number':95,'multiline':False]
['text':'     size (M, 5), format [ctr_x; ctr_y; width; height; angle (in degrees)]','line_number':96,'multiline':False]
['text':' Convert back to degrees','line_number':130,'multiline':False]
['text':' new ctr_x','line_number':134,'multiline':False]
['text':' new ctr_y','line_number':136,'multiline':False]
['text':' new width','line_number':138,'multiline':False]
['text':' new height','line_number':140,'multiline':False]
['text':' new angle','line_number':142,'multiline':False]
['text':' Normalize angle to be within [angle_bound_lo, angle_bound_hi].','line_number':146,'multiline':False]
['text':' Deltas are guaranteed to be <= period / 2 while computing training','line_number':147,'multiline':False]
['text':' targets by bbox_transform_inv.','line_number':148,'multiline':False]
['text':' Upright boxes','line_number':177,'multiline':False]
['text':' Rotated boxes with angle info','line_number':181,'multiline':False]
['text':' x_ctr','line_number':205,'multiline':False]
['text':' y_ctr','line_number':206,'multiline':False]
['text':' w','line_number':207,'multiline':False]
['text':' h','line_number':208,'multiline':False]
['text':' x1','line_number':224,'multiline':False]
['text':' y1','line_number':225,'multiline':False]
['text':' x2','line_number':226,'multiline':False]
['text':' y2','line_number':227,'multiline':False]
['text':' Clip boxes to image boundaries','line_number':231,'multiline':False]
['text':' boxes: pixel coordinates of bounding box, size (M * 4)','line_number':232,'multiline':False]
['text':' x1 >= 0 && x1 < width','line_number':243,'multiline':False]
['text':' y1 >= 0 && y1 < height','line_number':245,'multiline':False]
['text':' x2 >= 0 && x2 < width','line_number':247,'multiline':False]
['text':' y2 >= 0 && y2 < height','line_number':249,'multiline':False]
['text':' Similar to clip_boxes_upright but handles rotated boxes with angle info.','line_number':255,'multiline':False]
['text':' boxes: size (M, 5), format [ctr_x; ctr_y; width; height; angle (in degrees)]','line_number':256,'multiline':False]
['text':'','line_number':257,'multiline':False]
['text':' Clipping is only performed for boxes that are almost upright','line_number':258,'multiline':False]
['text':' (within a given `angle_thresh` tolerance) to maintain backward compatibility','line_number':259,'multiline':False]
['text':' for non-rotated boxes.','line_number':260,'multiline':False]
['text':'','line_number':261,'multiline':False]
['text':' We don't clip rotated boxes due to a couple of reasons:','line_number':262,'multiline':False]
['text':' (1) There are potentially multiple ways to clip a rotated box to make it','line_number':263,'multiline':False]
['text':'     fit within the image.','line_number':264,'multiline':False]
['text':' (2) It's tricky to make the entire rectangular box fit within the image and','line_number':265,'multiline':False]
['text':'     still be able to not leave out pixels of interest.','line_number':266,'multiline':False]
['text':' Therefore, we rely on upstream ops like RoIAlignRotated safely handling this.','line_number':267,'multiline':False]
['text':' Filter boxes that are upright (with a tolerance of angle_thresh)','line_number':279,'multiline':False]
['text':' Convert to [x1, y1, x2, y2] format and clip them','line_number':284,'multiline':False]
['text':' Convert back to [x_ctr, y_ctr, w, h, angle] and update upright boxes','line_number':290,'multiline':False]
['text':' Clip boxes to image boundaries.','line_number':302,'multiline':False]
['text':' Upright boxes','line_number':312,'multiline':False]
['text':' Rotated boxes with angle info','line_number':315,'multiline':False]
['text':' Only keep boxes with both sides >= min_size and center within the image.','line_number':321,'multiline':False]
['text':' boxes: pixel coordinates of bounding box, size (M * 4)','line_number':322,'multiline':False]
['text':' im_info: [height, width, img_scale]','line_number':323,'multiline':False]
['text':' return: row indices for 'boxes'','line_number':324,'multiline':False]
['text':' Scale min_size to match image scale','line_number':333,'multiline':False]
['text':' Similar to filter_boxes_upright but works for rotated boxes.','line_number':350,'multiline':False]
['text':' boxes: pixel coordinates of the bounding boxes','line_number':351,'multiline':False]
['text':'     size (M, 5), format [ctr_x; ctr_y; width; height; angle (in degrees)]','line_number':352,'multiline':False]
['text':' im_info: [height, width, img_scale]','line_number':353,'multiline':False]
['text':' return: row indices for 'boxes'','line_number':354,'multiline':False]
['text':' Scale min_size to match image scale','line_number':362,'multiline':False]
['text':' Upright boxes','line_number':386,'multiline':False]
['text':' Rotated boxes with angle info','line_number':389,'multiline':False]
['text':' namespace utils','line_number':394,'multiline':False]
['text':' namespace caffe2','line_number':395,'multiline':False]
['text':' CAFFE2_OPERATORS_UTILS_BOXES_H_','line_number':397,'multiline':False]
