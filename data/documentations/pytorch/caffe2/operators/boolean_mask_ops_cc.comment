['text':' NOLINTNEXTLINE(bugprone-fold-init-type)','line_number':30,'multiline':False]
['text':' namespace','line_number':48,'multiline':False]
['text':' mask was true and either a) became false, or b) sequence finished','line_number':90,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':94,'multiline':False]
['text':' mask was false and became true','line_number':104,'multiline':False]
['text':' TODO: we should support any type, not just float','line_number':126,'multiline':False]
['text':'github.com/pytorch/pytorch/blob/main/caffe2/operators/boolean_mask_ops.cc','line_number':154,'multiline':False]
['text':'github.com/pytorch/pytorch/blob/main/caffe2/operators/boolean_mask_ops.cc','line_number':220,'multiline':False]
['text':' namespace','line_number':287,'multiline':False]
['text':' Template this on a functor object so we can generate different','line_number':289,'multiline':False]
['text':' implementations at compile time and have a better chance of inlining','line_number':290,'multiline':False]
['text':' with batching','line_number':300,'multiline':False]
['text':' collapse tensor to 3-dim view [B, N, M] where:','line_number':301,'multiline':False]
['text':' B is product of dims up to and including batch','line_number':302,'multiline':False]
['text':' N is product of dims between batch and axis, exclusive','line_number':303,'multiline':False]
['text':' M is product of dimensions at/after axis','line_number':304,'multiline':False]
['text':' then mask each batch [i, :, :] (note that this is N x M matrix)','line_number':305,'multiline':False]
['text':' when [i, :, :] is laid out in row major order','line_number':309,'multiline':False]
['text':' N * M * i + M * j + k is index of entry in N x M matrix','line_number':310,'multiline':False]
['text':' with coordinates (row = j, col = k)','line_number':311,'multiline':False]
['text':' without batching','line_number':317,'multiline':False]
['text':' TODO(T20952436): vector implementation','line_number':318,'multiline':False]
['text':' collapse tensor to 2-dim view [N, M], where','line_number':319,'multiline':False]
['text':' N is product of dimensions before axis','line_number':320,'multiline':False]
['text':' M is product of dimensions at/after axis','line_number':321,'multiline':False]
['text':' and mask N by M matrix','line_number':322,'multiline':False]
['text':' Repeat masking along continuous segments (right axes) of size D','line_number':332,'multiline':False]
['text':' val','line_number':358,'multiline':True]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':359,'multiline':False]
['text':' val','line_number':372,'multiline':True]
['text':' val ','line_number':383,'multiline':True]
['text':' val ','line_number':390,'multiline':True]
['text':' val ','line_number':397,'multiline':True]
['text':' val ','line_number':404,'multiline':True]
['text':' namespace','line_number':409,'multiline':False]
['text':' canonical_batch is non-negative if batching, -1 otherwise','line_number':433,'multiline':False]
['text':' make sure batch < axis','line_number':439,'multiline':False]
['text':' if no batch, then left is product of dims up to axis','line_number':444,'multiline':False]
['text':' otherwise, left is product of dims between batch and axis','line_number':445,'multiline':False]
['text':' product of dims from 1 to batch','line_number':452,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':454,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-core.CallAndMessage)','line_number':494,'multiline':False]
['text':' namespace caffe2','line_number':640,'multiline':False]
