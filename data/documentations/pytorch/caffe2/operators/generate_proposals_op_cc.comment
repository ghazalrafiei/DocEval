['text':' Compute the 1-d index of a n-dimensional contiguous row-major tensor for','line_number':9,'multiline':False]
['text':'     a given n-dimensional index 'index'','line_number':10,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':17,'multiline':False]
['text':' Get a sub tensor view from 'tensor' using data pointer from 'tensor'','line_number':25,'multiline':False]
['text':' namespace','line_number':48,'multiline':False]
['text':' Upright boxes in [x1, y1, x2, y2] format','line_number':68,'multiline':False]
['text':' Rotated boxes in [ctr_x, ctr_y, w, h, angle] format.','line_number':74,'multiline':False]
['text':' Zero shift for width, height and angle.','line_number':75,'multiline':False]
['text':' Broadcast anchors over shifts to enumerate all anchors at all positions','line_number':84,'multiline':False]
['text':' in the (H, W) grid:','line_number':85,'multiline':False]
['text':'   - add A anchors of shape (1, A, box_dim) to','line_number':86,'multiline':False]
['text':'   - K shifts of shape (K, 1, box_dim) to get','line_number':87,'multiline':False]
['text':'   - all shifted anchors of shape (K, A, box_dim)','line_number':88,'multiline':False]
['text':'   - reshape to (K*A, box_dim) shifted anchors','line_number':89,'multiline':False]
['text':' equivalent to python code','line_number':92,'multiline':False]
['text':'  all_anchors = (','line_number':93,'multiline':False]
['text':'        self._model.anchors.reshape((1, A, box_dim)) +','line_number':94,'multiline':False]
['text':'        shifts.reshape((1, K, box_dim)).transpose((1, 0, 2)))','line_number':95,'multiline':False]
['text':'    all_anchors = all_anchors.reshape((K * A, box_dim))','line_number':96,'multiline':False]
['text':' all_anchors_vec: (K, A * box_dim)','line_number':97,'multiline':False]
['text':' use the following to reshape to (K * A, box_dim)','line_number':101,'multiline':False]
['text':' Eigen::Map<const ERMatXf> all_anchors(','line_number':102,'multiline':False]
['text':'            all_anchors_vec.data(), K * A, box_dim);','line_number':103,'multiline':False]
['text':' Order is flattened in (A, H, W) format. Unravel the indices.','line_number':117,'multiline':False]
['text':' Generate shifts for each location in the H * W grid corresponding','line_number':124,'multiline':False]
['text':' to the sorted scores in (A, H, W) order.','line_number':125,'multiline':False]
['text':' Upright boxes in [x1, y1, x2, y2] format','line_number':130,'multiline':False]
['text':' Rotated boxes in [ctr_x, ctr_y, w, h, angle] format.','line_number':133,'multiline':False]
['text':' Zero shift for width, height and angle.','line_number':134,'multiline':False]
['text':' Apply shifts to the relevant anchors.','line_number':139,'multiline':False]
['text':' Equivalent to python code `all_anchors = self._anchors[order_A] + shifts`','line_number':140,'multiline':False]
['text':' namespace utils','line_number':147,'multiline':False]
['text':' scores are (A, H, W) format from conv output.','line_number':171,'multiline':False]
['text':' Maintain the same order without transposing (which is slow)','line_number':172,'multiline':False]
['text':' and compute anchors accordingly.','line_number':173,'multiline':False]
['text':' 4. sort all (proposal, score) pairs by score from highest to lowest','line_number':181,'multiline':False]
['text':' 5. take top pre_nms_topN (e.g. 6000)','line_number':182,'multiline':False]
['text':' Avoid sorting possibly large arrays; First partition to get top K','line_number':187,'multiline':False]
['text':' unsorted and then sort just those (~20x faster for 200k scores)','line_number':188,'multiline':False]
['text':' bbox_deltas are (A * box_dim, H, W) format from conv output.','line_number':200,'multiline':False]
['text':' Order them based on scores maintaining the same format without','line_number':201,'multiline':False]
['text':' expensive transpose.','line_number':202,'multiline':False]
['text':' Note that order corresponds to (A, H * W) in row-major whereas','line_number':203,'multiline':False]
['text':' bbox_deltas are in (A, box_dim, H * W) in row-major. Hence, we','line_number':204,'multiline':False]
['text':' obtain a sub-view of bbox_deltas for each dim (4 for RPN, 5 for RRPN)','line_number':205,'multiline':False]
['text':' in (A, H * W) with an outer stride of box_dim * H * W. Then we apply','line_number':206,'multiline':False]
['text':' the ordering and filtering for each dim iteratively.','line_number':207,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':215,'multiline':False]
['text':' Compute anchors specific to the ordered and pre-filtered indices','line_number':221,'multiline':False]
['text':' in (A, H, W) format.','line_number':222,'multiline':False]
['text':' Transform anchors into proposals via bbox transformations','line_number':226,'multiline':False]
['text':' 2. clip proposals to image (may result in proposals with zero area','line_number':238,'multiline':False]
['text':' that will be removed in the next step)','line_number':239,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':241,'multiline':False]
['text':' 3. remove predicted boxes with either height or width < min_size','line_number':244,'multiline':False]
['text':' 6. apply loose nms (e.g. threshold = 0.7)','line_number':249,'multiline':False]
['text':' 7. take after_nms_topN (e.g. 300)','line_number':250,'multiline':False]
['text':' 8. return the top proposals (-> RoIs top)','line_number':251,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':252,'multiline':False]
['text':' Generate outputs','line_number':266,'multiline':False]
['text':' bbox_deltas: (num_images, A * box_dim, H, W)','line_number':287,'multiline':False]
['text':' im_info_tensor: (num_images, 3), format [height, width, scale; ...]','line_number':292,'multiline':False]
['text':' anchors: (A, box_dim)','line_number':297,'multiline':False]
['text':' write rois','line_number':350,'multiline':False]
['text':' write rois_probs','line_number':355,'multiline':False]
['text':' For backward compatibility','line_number':366,'multiline':False]
['text':' For backward compatibility','line_number':418,'multiline':False]
['text':' For backward compatibility','line_number':422,'multiline':False]
['text':' namespace caffe2','line_number':425,'multiline':False]
['text':' clang-format off','line_number':427,'multiline':False]
['text':' clang-format on','line_number':447,'multiline':False]
