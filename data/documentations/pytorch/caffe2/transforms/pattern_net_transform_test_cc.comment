['text':' unused ','line_number':17,'multiline':True]
['text':'*
 * P = ---> (Op1) ---> (Op2) --->
 *
 * R = ---> (Op3) ---> (Op3) --->
 ','line_number':47,'multiline':True]
['text':' test pattern match','line_number':72,'multiline':False]
['text':'*
 * P = ---> (Op1) ---> (Op2) --->
 *
 * R = ---> (Op3) ---> (Op3) --->
 ','line_number':106,'multiline':True]
['text':' test pattern match','line_number':133,'multiline':False]
['text':'*
 * P = ---> (Op1) ---> (Op3) ---> (Op2) --->
 *            |------> (Op3) -------|
 *
 * R = ---> (Op1) --------------> (Op3) --->
 *          |_(Op3)-->(Op3)-->(Op2)_|
 *
 ','line_number':153,'multiline':True]
['text':' Segment 1 (differs from P because of type)','line_number':166,'multiline':False]
['text':' Segment 2 (differs from P because of structure)','line_number':172,'multiline':False]
['text':' Segment 3','line_number':181,'multiline':False]
['text':' Should only match Segment 3','line_number':188,'multiline':False]
['text':' start of match 1','line_number':233,'multiline':False]
['text':' end of match 1','line_number':235,'multiline':False]
['text':' start of match 2','line_number':236,'multiline':False]
['text':' end of match 2','line_number':238,'multiline':False]
['text':' should not match','line_number':262,'multiline':False]
['text':' should not match','line_number':296,'multiline':False]
['text':' Will match','line_number':341,'multiline':False]
['text':' Has bad args, will not match','line_number':352,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':363,'multiline':False]
['text':' Has no args, will not match','line_number':364,'multiline':False]
['text':' Has different names','line_number':365,'multiline':False]
['text':' Will match','line_number':376,'multiline':False]
['text':'*
 *           |--(Op2)--|
 * P = --->(Op1)----->(Op3)--->
 *           |--(Op2)--|
 *
 * R = ---> (Op2) --->
 *
 *                |--(Op2)--|
 *           -->(Op1)----->(Op3)---
 *           |    |--(Op2)--|     |
 * G = ---> (Op1)                (Op3) --->
 *           |    |--(Op2)--|     |
 *           -->(Op1)----->(Op3)--
 *                |--(Op2)--|
 *
 * In this test, the two "parallel" modules have intersecting execution orders.
 * We wish to test that the pattern match can still detect the two modules,
 * separately.
 *
 * Furthermore, we will apply the transform to G, TWICE.
 * It should reduce G to a single operator.
 ','line_number':405,'multiline':True]
['text':' Head','line_number':432,'multiline':False]
['text':' 2 intertwined segments, each matching P. No strict ordering.','line_number':435,'multiline':False]
['text':' Tail','line_number':445,'multiline':False]
['text':' apply the transform again','line_number':466,'multiline':False]
['text':' the entire net should get transformed this time','line_number':467,'multiline':False]
['text':'*
 *      --->(Op1)----->(Op2)--->
 *            |          ^
 * P =        |----------|
 *            |          v
 *      --->(Op1)----->(Op2)--->
 *
 * R =  ---> (Op3) --->
 *
 * G = P -> P
 *
 * In this test, we fuse a subgraph with two inputs and two outputs, into one
 * operator.
 *
 * This will ensure that we can allow a single edge to represent
 * multiple blob names (the input and output of R are both 2 blobs).
 *
 * This will also ensure that patternmatch can traverse "backwards", from a node
 * to its parent.
 *
 * Furthermore, this tests for repeat matches, since matching on either of the
 * first two Op1 nodes will produce a match, but they are identical.
 * So, the pattern should match 4 times, but only be replaced twice.
 ','line_number':472,'multiline':True]
['text':' has 2 children','line_number':502,'multiline':False]
['text':' has 2 children','line_number':503,'multiline':False]
['text':' has 2 children','line_number':506,'multiline':False]
['text':' has 2 children','line_number':507,'multiline':False]
['text':' has 2 children','line_number':512,'multiline':False]
['text':' has 2 children','line_number':513,'multiline':False]
['text':' namespace','line_number':531,'multiline':False]
['text':' namespace caffe2','line_number':533,'multiline':False]
