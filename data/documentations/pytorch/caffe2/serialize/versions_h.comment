['text':' Versions (i.e. why was the version number bumped?)','line_number':11,'multiline':False]
['text':' Note [Dynamic Versions and torch.jit.save vs. torch.save]','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':' Our versioning scheme has a "produced file format version" which','line_number':15,'multiline':False]
['text':' describes how an archive is to be read. The version written in an archive','line_number':16,'multiline':False]
['text':' is at least this current produced file format version, but may be greater','line_number':17,'multiline':False]
['text':' if it includes certain symbols. We refer to these conditional versions','line_number':18,'multiline':False]
['text':' as "dynamic," since they are identified at runtime.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' Dynamic versioning is useful when an operator's semantics are updated.','line_number':21,'multiline':False]
['text':' When using torch.jit.save we want those semantics to be preserved. If','line_number':22,'multiline':False]
['text':' we bumped the produced file format version on every change, however,','line_number':23,'multiline':False]
['text':' then older versions of PyTorch couldn't read even simple archives, like','line_number':24,'multiline':False]
['text':' a single tensor, from newer versions of PyTorch. Instead, we','line_number':25,'multiline':False]
['text':' assign dynamic versions to these changes that override the','line_number':26,'multiline':False]
['text':' produced file format version as needed. That is, when the semantics','line_number':27,'multiline':False]
['text':' of torch.div changed it was assigned dynamic version 4, and when','line_number':28,'multiline':False]
['text':' torch.jit.saving modules that use torch.div those archives also have','line_number':29,'multiline':False]
['text':' (at least) version 4. This prevents earlier versions of PyTorch','line_number':30,'multiline':False]
['text':' from accidentally performing the wrong kind of division. Modules','line_number':31,'multiline':False]
['text':' that don't use torch.div or other operators with dynamic versions','line_number':32,'multiline':False]
['text':' can write the produced file format version, and these programs will','line_number':33,'multiline':False]
['text':' run as expected on earlier versions of PyTorch.','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' While torch.jit.save attempts to preserve operator semantics,','line_number':36,'multiline':False]
['text':' torch.save does not. torch.save is analogous to pickling Python, so','line_number':37,'multiline':False]
['text':' a function that uses torch.div will have different behavior if torch.saved','line_number':38,'multiline':False]
['text':' and torch.loaded across PyTorch versions. From a technical perspective,','line_number':39,'multiline':False]
['text':' torch.save ignores dynamic versioning.','line_number':40,'multiline':False]
['text':' 1. Initial version','line_number':42,'multiline':False]
['text':' 2. Removed op_version_set version numbers','line_number':43,'multiline':False]
['text':' 3. Added type tags to pickle serialization of container types','line_number':44,'multiline':False]
['text':' 4. (Dynamic) Stopped integer division using torch.div','line_number':45,'multiline':False]
['text':'      (a versioned symbol preserves the historic behavior of versions 1--3)','line_number':46,'multiline':False]
['text':' 5. (Dynamic) Stops torch.full inferring a floating point dtype','line_number':47,'multiline':False]
['text':'      when given bool or integer fill values.','line_number':48,'multiline':False]
['text':' 6. Write version string to `./data/version` instead of `version`.','line_number':49,'multiline':False]
['text':' [12/15/2021]','line_number':51,'multiline':False]
['text':' kProducedFileFormatVersion is set to 7 from 3 due to a different','line_number':52,'multiline':False]
['text':' interpretation of what file format version is.','line_number':53,'multiline':False]
['text':' Whenever there is new upgrader introduced,','line_number':54,'multiline':False]
['text':' this number should be bumped.','line_number':55,'multiline':False]
['text':' The reasons that version is bumped in the past:','line_number':56,'multiline':False]
['text':'     1. aten::div is changed at version 4','line_number':57,'multiline':False]
['text':'     2. aten::full is changed at version 5','line_number':58,'multiline':False]
['text':'     3. torch.package uses version 6','line_number':59,'multiline':False]
['text':'     4. Introduce new upgrader design and set the version number to 7','line_number':60,'multiline':False]
['text':'        mark this change','line_number':61,'multiline':False]
['text':' --------------------------------------------------','line_number':62,'multiline':False]
['text':' We describe new operator version bump reasons here:','line_number':63,'multiline':False]
['text':' 1) [01/24/2022]','line_number':64,'multiline':False]
['text':'     We bump the version number to 8 to update aten::linspace','line_number':65,'multiline':False]
['text':'     and aten::linspace.out to error out when steps is not','line_number':66,'multiline':False]
['text':'     provided. (see: https://github.com/pytorch/pytorch/issues/55951)','line_number':67,'multiline':False]
['text':' 2) [01/30/2022]','line_number':68,'multiline':False]
['text':'     Bump the version number to 9 to update aten::logspace and','line_number':69,'multiline':False]
['text':'     and aten::logspace.out to error out when steps is not','line_number':70,'multiline':False]
['text':'     provided. (see: https://github.com/pytorch/pytorch/issues/55951)','line_number':71,'multiline':False]
['text':' 3) [02/11/2022]','line_number':72,'multiline':False]
['text':'     Bump the version number to 10 to update aten::gelu and','line_number':73,'multiline':False]
['text':'     and aten::gelu.out to support the new approximate kwarg.','line_number':74,'multiline':False]
['text':'     (see: https://github.com/pytorch/pytorch/pull/61439)','line_number':75,'multiline':False]
['text':' Absolute minimum version we will write packages. This','line_number':78,'multiline':False]
['text':' means that every package from now on will always be','line_number':79,'multiline':False]
['text':' greater than this number.','line_number':80,'multiline':False]
['text':' The version we write when the archive contains bytecode.','line_number':83,'multiline':False]
['text':' It must be higher or eq to kProducedFileFormatVersion.','line_number':84,'multiline':False]
['text':' Because torchscript changes is likely introduce bytecode change.','line_number':85,'multiline':False]
['text':' If kProducedFileFormatVersion is increased, kProducedBytecodeVersion','line_number':86,'multiline':False]
['text':' should be increased too. The relationship is:','line_number':87,'multiline':False]
['text':' kMaxSupportedFileFormatVersion >= (most likely ==) kProducedBytecodeVersion','line_number':88,'multiline':False]
['text':'   >= kProducedFileFormatVersion','line_number':89,'multiline':False]
['text':' If a format change is forward compatible (still readable by older','line_number':90,'multiline':False]
['text':' executables), we will not increment the version number, to minimize the','line_number':91,'multiline':False]
['text':' risk of breaking existing clients. TODO: A better way would be to allow','line_number':92,'multiline':False]
['text':' the caller that creates a model to specify a maximum version that its','line_number':93,'multiline':False]
['text':' clients can accept.','line_number':94,'multiline':False]
['text':' Versions:','line_number':95,'multiline':False]
['text':'  0x1L: Initial version','line_number':96,'multiline':False]
['text':'  0x2L: (Comment missing)','line_number':97,'multiline':False]
['text':'  0x3L: (Comment missing)','line_number':98,'multiline':False]
['text':'  0x4L: (update) Added schema to function tuple. Forward-compatible change.','line_number':99,'multiline':False]
['text':'  0x5L: (update) Update bytecode is sharing constant tensor files from','line_number':100,'multiline':False]
['text':'  torchscript, and only serialize extra tensors that are not in the','line_number':101,'multiline':False]
['text':'  torchscript constant table. Also update tensor storage schema adapting to','line_number':102,'multiline':False]
['text':'  the unify format, the root key of tensor storage is updated from {index} to','line_number':103,'multiline':False]
['text':'  {the_pointer_value_the_tensor.storage}, for example:','line_number':104,'multiline':False]
['text':'  `140245072983168.storage` Forward-compatibility change.','line_number':105,'multiline':False]
['text':'  0x6L: Implicit opereator versioning using number of specified argument.','line_number':106,'multiline':False]
['text':'  Refer to the summary of https://github.com/pytorch/pytorch/pull/56845 for','line_number':107,'multiline':False]
['text':'  details.','line_number':108,'multiline':False]
['text':'  0x7L: Enable support for operators with default arguments plus out','line_number':109,'multiline':False]
['text':'  arguments. Refer. See https://github.com/pytorch/pytorch/pull/63651 for','line_number':110,'multiline':False]
['text':'  details.','line_number':111,'multiline':False]
['text':'  0x8L: Emit promoted operators as instructions. See','line_number':112,'multiline':False]
['text':'  https://github.com/pytorch/pytorch/pull/71662 for details.','line_number':113,'multiline':False]
['text':'  0x9L: Change serialization format from pickle to format This version is to','line_number':114,'multiline':False]
['text':'  serve migration. v8 pickle and v9 flatbuffer are the same. Refer to the','line_number':115,'multiline':False]
['text':'  summary of https://github.com/pytorch/pytorch/pull/75201 for more details.','line_number':116,'multiline':False]
['text':' static_assert(','line_number':119,'multiline':False]
['text':'     kProducedBytecodeVersion >= kProducedFileFormatVersion,','line_number':120,'multiline':False]
['text':'     "kProducedBytecodeVersion must be higher or equal to','line_number':121,'multiline':False]
['text':'     kProducedFileFormatVersion.");','line_number':122,'multiline':False]
['text':' Introduce kMinSupportedBytecodeVersion and kMaxSupportedBytecodeVersion','line_number':124,'multiline':False]
['text':' for limited backward/forward compatibility support of bytecode. If','line_number':125,'multiline':False]
['text':' kMinSupportedBytecodeVersion <= model_version <= kMaxSupportedBytecodeVersion','line_number':126,'multiline':False]
['text':' (in loader), we should support this model_version. For example, we provide a','line_number':127,'multiline':False]
['text':' wrapper to handle an updated operator.','line_number':128,'multiline':False]
['text':' namespace serialize','line_number':132,'multiline':False]
['text':' namespace caffe2','line_number':133,'multiline':False]
