['text':'# @package control_ops_grad','line_number':1,'multiline':False]
['text':' Module caffe2.python.control_ops_grad','line_number':2,'multiline':False]
['text':' From the outer net point of view:','line_number':27,'multiline':False]
['text':'  Do is an operator that has some number of inputs and outputs;','line_number':28,'multiline':False]
['text':'  we have to generate a gradient operator that writes into','line_number':29,'multiline':False]
['text':'  corresponding input gradient blobs and has access to inputs, outputs','line_number':30,'multiline':False]
['text':'  and gradient output blobs','line_number':31,'multiline':False]
['text':' From the inner net point of view:','line_number':32,'multiline':False]
['text':'  Do is an operator with a subnet and blob bindings,','line_number':33,'multiline':False]
['text':'  we need to forward Do's output blob gradients into inner workspace,','line_number':34,'multiline':False]
['text':'  use them to run backward pass generation and forward Do's input blob','line_number':35,'multiline':False]
['text':'  gradients back into outer workspace','line_number':36,'multiline':False]
['text':' remove workspace pointer blob','line_number':39,'multiline':False]
['text':' remove workspace pointer blob','line_number':41,'multiline':False]
['text':' link inner_output_name to corresponding inner_grad_output_name for','line_number':49,'multiline':False]
['text':' backward pass generation;','line_number':50,'multiline':False]
['text':' It is possible that inner_grad_input_name will need to be','line_number':74,'multiline':False]
['text':' linked to another outer blob. For example:','line_number':75,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':'    // y - param initialized in init_net','line_number':77,'multiline':False]
['text':'    x = ...','line_number':78,'multiline':False]
['text':'    z = ...','line_number':79,'multiline':False]
['text':'    with ops.IfNet(...):','line_number':80,'multiline':False]
['text':'        ops.Add([z, x], y) # inner Do block','line_number':81,'multiline':False]
['text':'    loss = f(..., y, ...)','line_number':82,'multiline':False]
['text':'','line_number':83,'multiline':False]
['text':' In this case x, y and z are external for the inner Do block,','line_number':84,'multiline':False]
['text':' the inputs of the Do block are z and x and the output is y.','line_number':85,'multiline':False]
['text':' When computing the gradient of input x given the gradient','line_number':86,'multiline':False]
['text':' of output y it's easy to see that they are equal.','line_number':87,'multiline':False]
['text':' During the generation of gradient Do operator, we link','line_number':88,'multiline':False]
['text':' external gradient y (y_grad) to the internal name','line_number':89,'multiline':False]
['text':' (y/_DO_OPERATOR_INNER_GRAD_) and generate the backward pass','line_number':90,'multiline':False]
['text':' for the internal Do net. As a result we get gradient operators','line_number':91,'multiline':False]
['text':' for the gradient Do and gradient map that maps internal Do','line_number':92,'multiline':False]
['text':' blobs to their computed gradients.','line_number':93,'multiline':False]
['text':' In this example, gradient map may have blob x linked to','line_number':94,'multiline':False]
['text':' gradient blob y/_DO_OPERATOR_INNER_GRAD_.','line_number':95,'multiline':False]
['text':' We should export gradient for x outside of Do, so','line_number':96,'multiline':False]
['text':' we add a blob mapping from inner gradient blob','line_number':97,'multiline':False]
['text':' (y/_DO_OPERATOR_INNER_GRAD_) to a new outer name (x_grad).','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':' (Note: since we use transparent blob mapping between outer and','line_number':100,'multiline':False]
['text':' inner (Do's) workspace, these operations do not involve copying','line_number':101,'multiline':False]
['text':' but are merely using blobs in outer workspace in the Do's operator','line_number':102,'multiline':False]
['text':' workspace under (possibly) different names)','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':' At the same time, we need to add a blob mapping from inner name','line_number':105,'multiline':False]
['text':' y/_DO_OPERATOR_INNER_GRAD_ to the outer blob y_grad','line_number':106,'multiline':False]
['text':' Hence in this case, we cannot use existing blob mapping scheme','line_number':107,'multiline':False]
['text':' that requires a bijection between subset of inner blob names and','line_number':108,'multiline':False]
['text':' a set of all (Do's input and output) outer blob names','line_number':109,'multiline':False]
['text':' TODO(iliacher): Remove unnecessary blob copying','line_number':111,'multiline':False]
['text':' check if this is an external blob','line_number':133,'multiline':False]
['text':' check if this is an external gradient blob','line_number':136,'multiline':False]
['text':' this is a local blob, we'll get it's value from','line_number':145,'multiline':False]
['text':' a saved forward op workspace','line_number':146,'multiline':False]
['text':' add inner gradient copy ops','line_number':150,'multiline':False]
['text':' When generation a gradient op it's possible to receive the same gradient','line_number':170,'multiline':False]
['text':' blob corresponding to different forward op output blobs, Do operator','line_number':171,'multiline':False]
['text':' requires a bijection between inner and outer names, make sure we do','line_number':172,'multiline':False]
['text':' deduplication','line_number':173,'multiline':False]
['text':' Constructs gradient While op, arguments:','line_number':253,'multiline':False]
['text':'  fwd_op - forward While op','line_number':254,'multiline':False]
['text':'  input_names - input blob names for a gradient op','line_number':255,'multiline':False]
['text':'  output_names - output blob names for a gradient op','line_number':256,'multiline':False]
['text':'  loop_grad_net - gradient loop body net','line_number':257,'multiline':False]
['text':'  workspace_blob - blob that holds forward workspaces stack','line_number':258,'multiline':False]
['text':'  init_grad_map - initial gradient to forward blob map','line_number':259,'multiline':False]
['text':'  loop_grad_map - gradient blob map for loop's body','line_number':260,'multiline':False]
['text':' Construct condition net - check that there're still forward workspaces','line_number':276,'multiline':False]
['text':' left using HasScope op','line_number':277,'multiline':False]
['text':' first input is the condition blob','line_number':336,'multiline':False]
['text':' map from if's output blob to output gradient blob','line_number':345,'multiline':False]
['text':' shouldn't call without at least one output gradient available','line_number':352,'multiline':False]
['text':' map from blob to gradient blob','line_number':355,'multiline':False]
['text':' consider case: else doesn't update blob's gradient and keeps original','line_number':372,'multiline':False]
['text':' from init_grad_map, but then updates the gradient','line_number':373,'multiline':False]
['text':' if both then and else branches have grad blob name for the same','line_number':377,'multiline':False]
['text':' blob and grad names are different, then one of the branches','line_number':378,'multiline':False]
['text':' doesn't use blob and has original grad blob name in it's grad map,','line_number':379,'multiline':False]
['text':' and another branch uses blob and has <blob_name>_grad name','line_number':380,'multiline':False]
['text':' in it's grad map (might be different from original grad blob)','line_number':381,'multiline':False]
['text':' make sure gradients of blobs that were not computed','line_number':396,'multiline':False]
['text':' by the selected if's branch are initialized with zeros','line_number':397,'multiline':False]
['text':' make sure condition blob is the first in the list','line_number':426,'multiline':False]
['text':' remove last input blob that holds pointer to workspace','line_number':521,'multiline':False]
['text':' remove last output blob that holds pointer to workspace','line_number':527,'multiline':False]
['text':' workspace pointer blob','line_number':589,'multiline':False]
['text':' workspace pointer blob','line_number':593,'multiline':False]
['text':' get the corresponding output name blob and use it in ConstantFill','line_number':631,'multiline':False]
['text':' so that grad_output has the same shape','line_number':632,'multiline':False]
['text':' make sure that we do not overwrite existing gradients with zeros','line_number':641,'multiline':False]
['text':' in case we use a different gradient blob name, copy gradient','line_number':644,'multiline':False]
