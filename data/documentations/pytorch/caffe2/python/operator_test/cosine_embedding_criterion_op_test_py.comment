['text':' This checks the op implementation against a reference function in','line_number':31,'multiline':False]
['text':' python.','line_number':32,'multiline':False]
['text':' This checks the op implementation over multiple device options (e.g.','line_number':34,'multiline':False]
['text':' CPU and CUDA). [0] means that the 0-th output is checked.','line_number':35,'multiline':False]
['text':' Now, since this operator's output has a "kink" around the margin','line_number':38,'multiline':False]
['text':' value, we move the S vector away from the margin a little bit. This','line_number':39,'multiline':False]
['text':' is a standard trick to avoid gradient check to fail on subgradient','line_number':40,'multiline':False]
['text':' points.','line_number':41,'multiline':False]
['text':' This checks the operator's gradient. the first 0 means that we are','line_number':43,'multiline':False]
['text':' checking the gradient of the first input (S), and the second [0] means','line_number':44,'multiline':False]
['text':' that the gradient check should initiate from the 0-th output.','line_number':45,'multiline':False]
