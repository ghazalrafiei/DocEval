['text':'# @package dataio','line_number':1,'multiline':False]
['text':' Module caffe2.python.dataio','line_number':2,'multiline':False]
['text':' Passing everything down since you could wrap a PipedReaderBuilder in','line_number':250,'multiline':False]
['text':' another PipedReaderBuilder','line_number':251,'multiline':False]
['text':' Check if limiting constraint is met.','line_number':358,'multiline':False]
['text':' Call original reader.','line_number':362,'multiline':False]
['text':' Check if original reader is done.','line_number':367,'multiline':False]
['text':' Copy to the same blob as the counter output to trigger reader','line_number':369,'multiline':False]
['text':' stopping - this is ok because execution will check should_stop_blob','line_number':370,'multiline':False]
['text':' after every single operation, so it has already been checked on this','line_number':371,'multiline':False]
['text':' iteration by this point.','line_number':372,'multiline':False]
['text':' Update externally-accessible flag indicating if reader is done','line_number':374,'multiline':False]
['text':' First, instantiate all the reader nets','line_number':545,'multiline':False]
['text':' Use the stop blob of the last reader as stop blob of composite reader.','line_number':557,'multiline':False]
['text':' Skip adding stop net because Or([A, A], A) doesn't pass operator','line_number':562,'multiline':False]
['text':' schema check','line_number':563,'multiline':False]
['text':' limiter is stateful; it can only be used once. Since','line_number':600,'multiline':False]
['text':' CompositeReader stops when one of the reader stops,','line_number':601,'multiline':False]
['text':' this is fine.','line_number':602,'multiline':False]
['text':' The limiter must be applied to the last reader so that the','line_number':609,'multiline':False]
['text':' batch counter is incremented only if every reader has data','line_number':610,'multiline':False]
