['text':' Because of CMake setup, we can't depend on script module here just yet -','line_number':46,'multiline':False]
['text':' it pulls in generated files from a different directory and it','line_number':47,'multiline':False]
['text':' probabilistically breaks the build.','line_number':48,'multiline':False]
['text':' TODO: enable if once shared libraries are unified in CMake','line_number':49,'multiline':False]
['text':' A dummy variable to overcome the pybind11 py::arg::operator= ambiguity','line_number':57,'multiline':False]
['text':' for some earlier versions of pybind11.','line_number':58,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-use-equals-default)','line_number':63,'multiline':False]
['text':' Note: Add more types here.','line_number':116,'multiline':False]
['text':' USE_NUMPY','line_number':122,'multiline':False]
['text':' Note: Add more types here.','line_number':145,'multiline':False]
['text':' USE_NUMPY','line_number':152,'multiline':False]
['text':' Python Op implementations.','line_number':162,'multiline':False]
['text':' Always leak the objects registered here.','line_number':166,'multiline':False]
['text':' If there is no fetcher registered, return a metainfo string.','line_number':192,'multiline':False]
['text':' If all branches failed, we will return a metainfo string.','line_number':193,'multiline':False]
['text':' This function can only return true, but keeping it for backward compatibility','line_number':201,'multiline':False]
['text':' If we have a device option passed in, read it.','line_number':208,'multiline':False]
['text':' numpy array','line_number':213,'multiline':False]
['text':' default to inplace feed ','line_number':217,'multiline':True]
['text':' USE_NUMPY','line_number':222,'multiline':False]
['text':' namespace python_detail','line_number':245,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-vector-operation)','line_number':259,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-loop-convert)','line_number':266,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-loop-convert)','line_number':278,'multiline':False]
['text':' Always allow running in-place','line_number':299,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-pass-by-value)','line_number':314,'multiline':False]
['text':' return any device Tensor','line_number':396,'multiline':False]
['text':' legacy API that resets tensor to CPUTensor if it's not already','line_number':407,'multiline':False]
['text':' TODO: This is marginally less efficient than it could','line_number':453,'multiline':False]
['text':' be, since we're doing an extra allocation we didn't','line_number':454,'multiline':False]
['text':' need to do.  But I don't remember how to clue in','line_number':455,'multiline':False]
['text':' pybind11 how to convert ArrayRef to vector.','line_number':456,'multiline':False]
['text':' keep this behavior for backward compatibility','line_number':471,'multiline':False]
['text':' USE_NUMPY','line_number':491,'multiline':False]
['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':517,'multiline':False]
['text':' We return a raw non-owning pointer here, we rely on surrounding','line_number':519,'multiline':False]
['text':' code to keep the original tensor alive','line_number':520,'multiline':False]
['text':' type ','line_number':618,'multiline':True]
['text':' Gradients','line_number':629,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-use-emplace)','line_number':649,'multiline':False]
['text':' DB','line_number':658,'multiline':False]
['text':', std::unique_ptr<DB>','line_number':674,'multiline':True]
['text':' OpSchema','line_number':683,'multiline':False]
['text':' Note: this does not work yet, we will need to figure out how to pass','line_number':698,'multiline':False]
['text':' protobuf objects.','line_number':699,'multiline':False]
['text':' USE_NUMPY','line_number':826,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-loop-convert)','line_number':842,'multiline':False]
['text':' USE_NUMPY','line_number':855,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-vector-operation)','line_number':860,'multiline':False]
['text':' Note that we return two lists of serialized ops. The first set is','line_number':889,'multiline':False]
['text':' init_ops and the second set is ops for pred net. When converting','line_number':890,'multiline':False]
['text':' RNN related op, it is possible that we will create ops in the','line_number':891,'multiline':False]
['text':' init_net. Hence the return structure here','line_number':892,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-loop-convert)','line_number':954,'multiline':False]
['text':' USE_NUMPY','line_number':967,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-vector-operation)','line_number':972,'multiline':False]
['text':' USE_NUMPY','line_number':997,'multiline':False]
['text':' The old mkl backend has been removed permanently, but we','line_number':1019,'multiline':False]
['text':' keep this Python attribute for BC','line_number':1020,'multiline':False]
['text':' USE_MKLDNN','line_number':1026,'multiline':False]
['text':' USE_MKLDNN','line_number':1028,'multiline':False]
['text':' if the binary is built with USE_ROCM, this is a ROCm build','line_number':1031,'multiline':False]
['text':' and therefore we need to ignore dyndep failures (because the module','line_number':1032,'multiline':False]
['text':' may not have a ROCm equivalent yet e.g. nccl)','line_number':1033,'multiline':False]
['text':' USE_ROCM','line_number':1037,'multiline':False]
['text':' USE_ROCM','line_number':1039,'multiline':False]
['text':' CAFFE2_USE_TRT','line_number':1045,'multiline':False]
['text':' CAFFE2_USE_TRT','line_number':1047,'multiline':False]
['text':' CAFFE2_NO_OPERATOR_SCHEMA','line_number':1053,'multiline':False]
['text':' CAFFE2_NO_OPERATOR_SCHEMA','line_number':1055,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-vector-operation,cppcoreguidelines-pro-type-const-cast)','line_number':1088,'multiline':False]
['text':' Ensure we are lexicographically ordered.','line_number':1098,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-vector-operation)','line_number':1101,'multiline':False]
['text':' create_if_missing not used by necessary for pybind to do','line_number':1107,'multiline':False]
['text':' properly do function overloading.','line_number':1108,'multiline':False]
['text':'create_if_missing','line_number':1110,'multiline':True]
['text':' TODO','line_number':1111,'multiline':False]
['text':' NOLINTNEXTLINE(performance-for-range-copy)','line_number':1168,'multiline':False]
['text':' Run an operator multiple times.','line_number':1341,'multiline':False]
['text':' This is needed for microbenchmarking as we want the benchmark loop to be in','line_number':1342,'multiline':False]
['text':' C++ to minimize overhead.','line_number':1343,'multiline':False]
['text':' Parse protobuffers to NetDefs','line_number':1502,'multiline':False]
['text':' NOLINTNEXTLINE(performance-for-range-copy)','line_number':1505,'multiline':False]
['text':' Parse protobuffers to NetDefs','line_number':1524,'multiline':False]
['text':' NOLINTNEXTLINE(performance-for-range-copy)','line_number':1527,'multiline':False]
['text':' Parse protobuffers to NetDefs','line_number':1547,'multiline':False]
['text':' NOLINTNEXTLINE(performance-for-range-copy)','line_number':1550,'multiline':False]
['text':' NOLINTNEXTLINE(performance-for-range-copy)','line_number':1558,'multiline':False]
['text':' we support 2 possible signatures of python op: (inputs, outputs) or','line_number':1626,'multiline':False]
['text':' (inputs, outputs, workspace)','line_number':1627,'multiline':False]
['text':' For global sanity gradient ops shouldn't access workspace','line_number':1650,'multiline':False]
['text':' device_info is a pair of vector of DeviceOption.','line_number':1656,'multiline':False]
['text':' `first` is for inputs, `second` is for outputs.','line_number':1657,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-use-emplace)','line_number':1665,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-use-emplace)','line_number':1671,'multiline':False]
['text':' Transformations are exposed as functions here and wrapped','line_number':1884,'multiline':False]
['text':' into a python interface in transformations.py','line_number':1885,'multiline':False]
['text':' Prefix the transformation with transform_ to avoid clobbering the','line_number':1886,'multiline':False]
['text':' function namespace.','line_number':1887,'multiline':False]
['text':' Initialization of the module','line_number':1944,'multiline':False]
['text':' import_array1() forces a void return value.','line_number':1947,'multiline':False]
['text':' USE_NUMPY','line_number':1950,'multiline':False]
['text':' Single threaded, so safe','line_number':1951,'multiline':False]
['text':' We will create a default workspace for us to run stuff.','line_number':1956,'multiline':False]
['text':' namespace python','line_number':1976,'multiline':False]
['text':' namespace caffe2','line_number':1977,'multiline':False]
