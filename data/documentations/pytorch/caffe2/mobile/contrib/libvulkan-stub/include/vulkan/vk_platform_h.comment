['text':'','line_number':1,'multiline':False]
['text':' File: vk_platform.h','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'
** Copyright (c) 2014-2015 The Khronos Group Inc.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
','line_number':4,'multiline':True]
['text':' __cplusplus','line_number':27,'multiline':False]
['text':'
***************************************************************************************************
*   Platform-specific directives and type declarations
***************************************************************************************************
','line_number':29,'multiline':True]
['text':' Platform-specific calling convention macros.
 *
 * Platforms should define these so that Vulkan clients call Vulkan commands
 * with the same calling conventions that the Vulkan implementation expects.
 *
 * VKAPI_ATTR - Placed before the return type in function declarations.
 *              Useful for C++11 and GCC/Clang-style function attribute syntax.
 * VKAPI_CALL - Placed after the return type in function declarations.
 *              Useful for MSVC-style calling convention syntax.
 * VKAPI_PTR  - Placed between the '(' and '*' in function pointer types.
 *
 * Function declaration:  VKAPI_ATTR void VKAPI_CALL vkCommand(void);
 * Function pointer type: typedef void (VKAPI_PTR *PFN_vkCommand)(void);
 ','line_number':35,'multiline':True]
['text':' On Windows, Vulkan commands use the stdcall convention','line_number':50,'multiline':False]
['text':' On Android 32-bit ARM targets, Vulkan functions use the "hardfloat"','line_number':57,'multiline':False]
['text':' calling convention, i.e. float parameters are passed in registers. This','line_number':58,'multiline':False]
['text':' is true even if the rest of the application passes floats on the stack,','line_number':59,'multiline':False]
['text':' as it does by default when compiling for the armeabi-v7a NDK ABI.','line_number':60,'multiline':False]
['text':' On other platforms, use the default calling convention','line_number':65,'multiline':False]
['text':' !defined(VK_NO_STDINT_H)','line_number':86,'multiline':False]
['text':' extern "C"','line_number':89,'multiline':False]
['text':' __cplusplus','line_number':90,'multiline':False]
['text':' Platform-specific headers required by platform window system extensions.','line_number':92,'multiline':False]
['text':' These are enabled prior to #including "vulkan.h". The same enable then','line_number':93,'multiline':False]
['text':' controls inclusion of the extension interfaces in vulkan.h.','line_number':94,'multiline':False]
