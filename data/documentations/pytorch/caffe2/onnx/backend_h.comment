['text':' \brief This struct holds the converted ops after the onnx->c2 conversion.','line_number':44,'multiline':False]
['text':' Notice that for RNN ops, it may create ops in init_net. Hence we have the','line_number':45,'multiline':False]
['text':' `init_ops` field.','line_number':46,'multiline':False]
['text':' A convenient class to query attributes of a NodeProto. Note that the','line_number':53,'multiline':False]
['text':' NodeProto can not be modified during the query of OnnxAttributes object','line_number':54,'multiline':False]
['text':' Get attribute given attribute name, specialied on data type T. Note that','line_number':73,'multiline':False]
['text':' the return value is copied','line_number':74,'multiline':False]
['text':' convenient class for onnx node','line_number':122,'multiline':False]
['text':' Since we still have this Python-C++ hybrid flow, we will need to take the','line_number':133,'multiline':False]
['text':' DummyName generator from Python as a pointer. In this case, Python env owns','line_number':134,'multiline':False]
['text':' the DummyName object and we don't need to keep track of its life time in','line_number':135,'multiline':False]
['text':' C++. Therefore in this case, we use a null dtor to prevent C++ shared_ptr','line_number':136,'multiline':False]
['text':' from releasing the object','line_number':137,'multiline':False]
['text':' LUT related getters','line_number':264,'multiline':False]
['text':' Dummy name generator','line_number':276,'multiline':False]
['text':' namespace onnx','line_number':280,'multiline':False]
['text':' namespace caffe2','line_number':281,'multiline':False]
