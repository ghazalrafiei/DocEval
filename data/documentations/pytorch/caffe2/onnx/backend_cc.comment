['text':' pull in all the operators upon first invocation','line_number':54,'multiline':False]
['text':' Intentional leaky','line_number':55,'multiline':False]
['text':' For proto, we convert it to serialized string','line_number':134,'multiline':False]
['text':' namespace','line_number':148,'multiline':False]
['text':' If the attribute was rewritten, we use it instead. Note that the','line_number':230,'multiline':False]
['text':' rewritten attribute still has the unmapped name','line_number':231,'multiline':False]
['text':' If rewritten attribute doesn't appear in the original attributes, this is','line_number':240,'multiline':False]
['text':' a newlly added one and we need to add this to argument too','line_number':241,'multiline':False]
['text':' Temporary hack for RNN related operators, as we don't have C++ interface in','line_number':259,'multiline':False]
['text':' C2 to build those operators yet','line_number':260,'multiline':False]
['text':' Operators that are different between Caffe2 and','line_number':268,'multiline':False]
['text':' ONNX but only in their name.','line_number':269,'multiline':False]
['text':' In most cases, this should be empty - as the effort of ONNX is','line_number':270,'multiline':False]
['text':' to unify the operator definitions.','line_number':271,'multiline':False]
['text':' operators whose behavior is different beyond renaming','line_number':320,'multiline':False]
['text':' the value is an attribute of this class that is a','line_number':321,'multiline':False]
['text':' function from ToffeIR node_def to caffe2 op_def','line_number':322,'multiline':False]
['text':'============================','line_number':363,'multiline':False]
['text':' Special Operator Converters','line_number':364,'multiline':False]
['text':'============================','line_number':365,'multiline':False]
['text':'  Note [Caffe2 ConvPoolOpBase]','line_number':482,'multiline':False]
['text':'  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':483,'multiline':False]
['text':'  To understand what is going on here, we have to talk a little bit about','line_number':484,'multiline':False]
['text':'  Caffe2's internals.','line_number':485,'multiline':False]
['text':'','line_number':486,'multiline':False]
['text':'  First, it's important to know that all of Caffe2's pooling and convolution','line_number':487,'multiline':False]
['text':'  operators inherit from "ConvPoolOpBase", which is an abstract class that','line_number':488,'multiline':False]
['text':'  defines all of the attributes (kernels, dilations, strides, etc) which one','line_number':489,'multiline':False]
['text':'  sees on these operators.  Unfortunately, Caffe2's documentation generator','line_number':490,'multiline':False]
['text':'  doesn't know how to handle cases like this, so for example, if you look at','line_number':491,'multiline':False]
['text':'  the docs for MaxPool at','line_number':492,'multiline':False]
['text':'  <https://caffe2.ai/docs/operators-catalogue.html#maxpool> you won't see any','line_number':493,'multiline':False]
['text':'  of the attributes.  You have to go source diving to find the information; in','line_number':494,'multiline':False]
['text':'  particular, you want to look at:','line_number':495,'multiline':False]
['text':'  https://github.com/caffe2/caffe2/blob/master/caffe2/operators/conv_pool_op_base.h','line_number':496,'multiline':False]
['text':'  This class handles *global* pooling as well.','line_number':497,'multiline':False]
['text':'','line_number':498,'multiline':False]
['text':'  Second, it's important to know what Caffe2 expects for padding, which can','line_number':499,'multiline':False]
['text':'  be somewhat difficult to understand from the code because Caffe2 handles','line_number':500,'multiline':False]
['text':'  both singular/pluralized spellings of padding, and there is also legacy','line_number':501,'multiline':False]
['text':'  padding business.  The short version of the story is that, for NON-legacy','line_number':502,'multiline':False]
['text':'  padding (which is what we want to output), padding is expected to be','line_number':503,'multiline':False]
['text':'  *twice* the size of kernels.  So if you have a 2D convolution, Caffe2','line_number':504,'multiline':False]
['text':'  will accept two values in 'kernels', but FOUR values in 'pads';','line_number':505,'multiline':False]
['text':'  furthermore, this is *mandatory.*','line_number':506,'multiline':False]
['text':'','line_number':507,'multiline':False]
['text':'  Finally, ConvPoolOpBase is not the only class of it's kind; there is','line_number':508,'multiline':False]
['text':'  be tricked by the fact that Conv and ConvTranspose have similar','line_number':509,'multiline':False]
['text':'  parameters; they exercise different codepaths and need to be handled','line_number':510,'multiline':False]
['text':'  differently.','line_number':511,'multiline':False]
['text':' Caffe2 requires pads to be twice the size of kernels.','line_number':533,'multiline':False]
['text':' The native Caffe2 op doesn't support broadcasting, so we defer the handling','line_number':581,'multiline':False]
['text':' of this op to the ATen library that does.','line_number':582,'multiline':False]
['text':' Native Caffe2 doesn't support NonZero, fallback to ATen.','line_number':596,'multiline':False]
['text':' ATen nonzero is equivalent to Transpose(ONNX::NonZero).','line_number':597,'multiline':False]
['text':' Fallback to ATen.','line_number':619,'multiline':False]
['text':' ATen::Multinomial takes probabilities as input, ONNX Multinomial expects','line_number':620,'multiline':False]
['text':' input to be log probabilities.','line_number':621,'multiline':False]
['text':' ONNX Multinomial only supports replacement=True.','line_number':631,'multiline':False]
['text':' ONNX Multinomial has attribute dtype in {int64, int32}, which specifies','line_number':640,'multiline':False]
['text':' output datatype. ATen::Multinomial output dtype is always int64.','line_number':641,'multiline':False]
['text':' Support broadcast by default when opset_version > 6.','line_number':765,'multiline':False]
['text':' If the c's shape information is available and c is a 1d tensor(except','line_number':769,'multiline':False]
['text':' c is a scalar), use FC aggressively.','line_number':770,'multiline':False]
['text':' c is a scalar.','line_number':785,'multiline':False]
['text':' If the b's shape is not available, skip FC.','line_number':789,'multiline':False]
['text':' If b's last dim is not 1, skip FC.','line_number':796,'multiline':False]
['text':' Guard the invalid (negative) pads attribute.','line_number':858,'multiline':False]
['text':' first two dim is for batch and channel. Note that now all the values are','line_number':865,'multiline':False]
['text':' non-negative','line_number':866,'multiline':False]
['text':' rewrite the padding info','line_number':873,'multiline':False]
['text':' TODO: Caffe2 Concat has an extra output. It should be only','line_number':883,'multiline':False]
['text':' used when doing training, so we should change Caffe2 to allow','line_number':884,'multiline':False]
['text':' 1 output.','line_number':885,'multiline':False]
['text':' Slice only accepts starts as int','line_number':1021,'multiline':False]
['text':' attach the original op at the end','line_number':1052,'multiline':False]
['text':' Do the following:','line_number':1067,'multiline':False]
['text':' for a given index tensor (i.e. `starts` or `ends`):','line_number':1068,'multiline':False]
['text':' 1) Hilariously subtract 1 from the value if it is negative. This due to','line_number':1069,'multiline':False]
['text':'    the behavior of Caffe2's slice operator not matching that of ONNX's slice','line_number':1070,'multiline':False]
['text':' 2) Fully expand the index tensor out to the rank of the data tensor.','line_number':1071,'multiline':False]
['text':'    pseudocode: indices_full = zeros(rank); indices_full[axes] = indices.int()','line_number':1072,'multiline':False]
['text':' Subtract 1 from each element of the indices tensor that is negative','line_number':1103,'multiline':False]
['text':' Fill in values specified from the partially-specified ONNX indices tensor','line_number':1137,'multiline':False]
['text':' First get the shape of the input tensor','line_number':1163,'multiline':False]
['text':' Now get the rank of the tensor by getting the shape of the shape of','line_number':1168,'multiline':False]
['text':' the input tensor','line_number':1169,'multiline':False]
['text':' Axes tensor will be used to populate the fully-specified starts and ends','line_number':1174,'multiline':False]
['text':' arguments to the caffe2 Slice operator.','line_number':1175,'multiline':False]
['text':' Useful int tensors','line_number':1185,'multiline':False]
['text':' starts','line_number':1208,'multiline':False]
['text':' ends','line_number':1218,'multiline':False]
['text':' attach the original op at the end','line_number':1225,'multiline':False]
['text':' Slice the input {1, 1, height, width} -> {height, width}','line_number':1324,'multiline':False]
['text':' Upsample','line_number':1339,'multiline':False]
['text':'==============================================','line_number':1382,'multiline':False]
['text':' Rest of the member functions for Caffe2Backend','line_number':1383,'multiline':False]
['text':'==============================================','line_number':1384,'multiline':False]
['text':'  This translator performs the basic translation of ONNX nodes into','line_number':1407,'multiline':False]
['text':'  Caffe2 operators.  Besides doing a straightforward marshalling from','line_number':1408,'multiline':False]
['text':'  one format to another, it also does these extra things:','line_number':1409,'multiline':False]
['text':'','line_number':1410,'multiline':False]
['text':'    - Renames operators based on 'renamed_operators'','line_number':1411,'multiline':False]
['text':'    - Renames attributes based on 'renamed_attrs' and','line_number':1412,'multiline':False]
['text':'      'get_per_op_renamed_attrs'','line_number':1413,'multiline':False]
['text':'','line_number':1414,'multiline':False]
['text':'  If you're writing a custom translator, consider calling this first,','line_number':1415,'multiline':False]
['text':'  and then fixing things up further.','line_number':1416,'multiline':False]
['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':1428,'multiline':False]
['text':' A number of C2 operators do not declare proper arguments. Let's log the','line_number':1502,'multiline':False]
['text':' error','line_number':1503,'multiline':False]
['text':' Convert initializer if necessary','line_number':1553,'multiline':False]
['text':' For RNN operators, we rely on Python code to convert them for us, and','line_number':1582,'multiline':False]
['text':' we simply deserilize the string. This is hack and eventually we want to','line_number':1583,'multiline':False]
['text':' get rid of this to have one flow. Note that we need to update the dummy','line_number':1584,'multiline':False]
['text':' name generator to avoid having duplicated names between Python and C++','line_number':1585,'multiline':False]
['text':' generated dummies','line_number':1586,'multiline':False]
['text':' TODO: avoid extra copy by directly feed initializers to backend blobs','line_number':1677,'multiline':False]
['text':' Get a list of uninitialized inputs to help with the inference setup','line_number':1687,'multiline':False]
['text':' if shape_name is empty, we generate GivenTensorFill','line_number':1770,'multiline':False]
['text':' otherwise, we generate ConstantFill, which accept shape as input','line_number':1771,'multiline':False]
['text':' GivenTensor*Fill uses values','line_number':1773,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-branch-clone)','line_number':1797,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':1846,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':1857,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':1868,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':1879,'multiline':False]
['text':' TODO: to support more data type','line_number':1885,'multiline':False]
['text':' ConstantFill uses value','line_number':1890,'multiline':False]
['text':' namespace onnx','line_number':1902,'multiline':False]
['text':' namespace caffe2','line_number':1903,'multiline':False]
