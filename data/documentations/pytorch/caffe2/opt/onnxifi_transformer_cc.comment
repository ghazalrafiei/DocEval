['text':' Convert ShapeInfo map to TensorShape map','line_number':24,'multiline':False]
['text':' Given a net, with primiary inputs and outputs defined in its','line_number':65,'multiline':False]
['text':' external_inputs/outputs, and given the set of weights and extra weights','line_number':66,'multiline':False]
['text':' (created during conversion to ONNX if exists), we check whether some of the','line_number':67,'multiline':False]
['text':' weights are used in the net, and if so, we put it in the initialize_list and','line_number':68,'multiline':False]
['text':' add it to the external_inputs too.','line_number':69,'multiline':False]
['text':' \param net [in] c2 net (cutoff from a bigger net)','line_number':70,'multiline':False]
['text':' \param weights_in_ws [in] all the weights in the workspace','line_number':71,'multiline':False]
['text':' \param extra_weights [in] extra weights possibly generated during ONNX','line_number':72,'multiline':False]
['text':' conversion \param initialization_list [out] weights that needs to be offload','line_number':73,'multiline':False]
['text':' to backend \param total_inputs_vec [out] total #inputs of the net that','line_number':74,'multiline':False]
['text':' doesn't have a producer','line_number':75,'multiline':False]
['text':' extra weights is definitely extra weights/inputs','line_number':84,'multiline':False]
['text':' Boundary inputs that should not be weights','line_number':92,'multiline':False]
['text':' We add weights as inputs too','line_number':105,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':214,'multiline':False]
['text':' Heuristic: the input has to be of float type, 2-dimensional and the first','line_number':257,'multiline':False]
['text':' dimension has to be of batch size','line_number':258,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':265,'multiline':False]
['text':' TODO: a possible optimization is to fuse the fp16 conversion into Concat','line_number':325,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-string-concatenation)','line_number':342,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-string-concatenation)','line_number':349,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-string-concatenation)','line_number':351,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-string-concatenation)','line_number':358,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-string-concatenation)','line_number':379,'multiline':False]
['text':' namespace','line_number':392,'multiline':False]
['text':' If fallback, we just replace the original slss op with a normal sls','line_number':424,'multiline':False]
['text':' op','line_number':425,'multiline':False]
['text':' Otherwise, we replace slss with slss_lookup followed by a normal sls','line_number':432,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':525,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-pass-by-value)','line_number':538,'multiline':False]
['text':' Add the names of the initializer blobs that we want to fetch from the','line_number':600,'multiline':False]
['text':' workspace later','line_number':601,'multiline':False]
['text':' Add the input/output','line_number':608,'multiline':False]
['text':' Find out the index of input that has a nominal batch size','line_number':625,'multiline':False]
['text':' Add output size hints for max batch size','line_number':647,'multiline':False]
['text':' Add output size hints per batch size','line_number':667,'multiline':False]
['text':' Tell Onnxifi op that the model is in onnx or c2 proto format','line_number':697,'multiline':False]
['text':' Tell Onnxifi op which backend id to use','line_number':700,'multiline':False]
['text':' Add model_id and net_pos to the onnxifi model','line_number':703,'multiline':False]
['text':' Add output resizing hints','line_number':707,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':734,'multiline':False]
['text':' We already have all the ops and external inputs and outputs!','line_number':738,'multiline':False]
['text':' Remove the second output of Concat/Reshape from external_output. Remove','line_number':741,'multiline':False]
['text':' rest of the outputs of LayerNorm too. In addition, we remove those outputs','line_number':742,'multiline':False]
['text':' from the Onnxifi op too.','line_number':743,'multiline':False]
['text':' TODO: This approach is a bit hacky as we assume that the second output is','line_number':744,'multiline':False]
['text':' never used. A more appropriate approach can be learned from the ONNX path,','line_number':745,'multiline':False]
['text':' where we statically computes the split_info given input shape and insert a','line_number':746,'multiline':False]
['text':' GivenTensorIntFill op','line_number':747,'multiline':False]
['text':' Figure out weights and add it to external_inputs too','line_number':790,'multiline':False]
['text':' Add partition info','line_number':817,'multiline':False]
['text':' Add initializers (weights) list to the net as an arg','line_number':822,'multiline':False]
['text':' Build ONNXIFI Op','line_number':829,'multiline':False]
['text':' Debugging stuff','line_number':846,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':867,'multiline':False]
['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':874,'multiline':False]
['text':' Convert c2 ops to onnx ops, add const weights if there are any','line_number':877,'multiline':False]
['text':' Feed into workspace as CPU Tensors','line_number':901,'multiline':False]
['text':' Add mappings','line_number':925,'multiline':False]
['text':' Convert outputs and compute output shape hints','line_number':930,'multiline':False]
['text':' Convert inputs and figure out weights','line_number':943,'multiline':False]
['text':' Onnx model is ready. Build ONNXIFI Op','line_number':960,'multiline':False]
['text':' Debugging stuff','line_number':972,'multiline':False]
['text':' NB: this might not be a hard constraint as we can just export C2','line_number':993,'multiline':False]
['text':' domain specific ops to ONNX','line_number':994,'multiline':False]
['text':' nodes are in topological order, so we just need to iterate','line_number':1009,'multiline':False]
['text':' The input is not seen and it's not referred by any nodes before as','line_number':1014,'multiline':False]
['text':' output, we count it as an boundary input','line_number':1015,'multiline':False]
['text':' For reshape node, if it has more than 1 inputs, we need to feed the','line_number':1024,'multiline':False]
['text':' second input which contains the shape info','line_number':1025,'multiline':False]
['text':' Second iteration to account all the boundary outputs, which is a newly','line_number':1030,'multiline':False]
['text':' seen output and is not referred as input before','line_number':1031,'multiline':False]
['text':' Add input/output shape info','line_number':1050,'multiline':False]
['text':' Build a c2 net with one op','line_number':1094,'multiline':False]
['text':' Remove the second output of Concat/Reshape from the external_output','line_number':1108,'multiline':False]
['text':' Encode the input/output shapes to an argument','line_number':1119,'multiline':False]
['text':' Annnote the inputs that are weights','line_number':1165,'multiline':False]
['text':' We know that current op is not going to be supported. Might as well','line_number':1226,'multiline':False]
['text':' blocklist it too','line_number':1227,'multiline':False]
['text':' Try to find a backend that support Caffe2 proto. Note that this is quite','line_number':1268,'multiline':False]
['text':' opportunistic as we don't officially support Caffe2 proto.','line_number':1269,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':1270,'multiline':False]
['text':' NOLINTNEXTLINE(clang-diagnostic-sign-compare)','line_number':1272,'multiline':False]
['text':' function to tell whether the ONNXIFI backend supports a given C2 op or not','line_number':1322,'multiline':False]
['text':' function to convert runnable subgraph into an onnxifi op. We need to keep','line_number':1329,'multiline':False]
['text':' the same exporter throughout the process to avoid duplicated dummy name','line_number':1330,'multiline':False]
['text':' generation','line_number':1331,'multiline':False]
['text':' Cutting off the runnable part and replace with ONNXIFI ops. Asssume the nets','line_number':1355,'multiline':False]
['text':' were topologically sorted','line_number':1356,'multiline':False]
['text':' Get model id and reset Onnxifi op id to 0','line_number':1370,'multiline':False]
['text':' Unroll If ops','line_number':1374,'multiline':False]
['text':' SSA Rewrite the net if it has not been rewritten','line_number':1380,'multiline':False]
['text':' Populate shape info','line_number':1393,'multiline':False]
['text':' TODO(yingz): We should not need to create mapped_ws since we did not change','line_number':1394,'multiline':False]
['text':' any input mappings during ssarewrite. However this is here for the','line_number':1395,'multiline':False]
['text':' following reason: BlackBoxPredictor calls RunNetOnce before onnxifi to','line_number':1396,'multiline':False]
['text':' populate dimension info. However during this, it was observed, that new','line_number':1397,'multiline':False]
['text':' blob for output is created. This causes problem if inferShape uses original','line_number':1398,'multiline':False]
['text':' ws since it does not expect the output blob to be present.','line_number':1399,'multiline':False]
['text':' Get backend id','line_number':1429,'multiline':False]
['text':' Apply some filtering rules','line_number':1432,'multiline':False]
['text':' Transform the net','line_number':1438,'multiline':False]
['text':' Need to figure out a proper place to handle device option','line_number':1454,'multiline':False]
['text':' namespace caffe2','line_number':1469,'multiline':False]
