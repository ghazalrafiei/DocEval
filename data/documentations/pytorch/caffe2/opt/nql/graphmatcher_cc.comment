['text':' For cases like
   %x, %y = Foo(%z)
   for now we just say that both %x and %y are defined by node Foo, we don't
   distinguish them (i.e. we don't keep any information about their order. ','line_number':58,'multiline':True]
['text':' TODO: Cleanup this.','line_number':84,'multiline':False]
['text':' Temporary solution, which works because we don't','line_number':87,'multiline':False]
['text':' allow empty graphs.','line_number':88,'multiline':False]
['text':' Helper function for convertToNQLString function.','line_number':129,'multiline':False]
['text':' Given a node and a renameMap return the unique name for this node.','line_number':130,'multiline':False]
['text':' Helper function for convertToNQLString function.','line_number':140,'multiline':False]
['text':' Given a node and a renameMap return a string representing the node, which','line_number':141,'multiline':False]
['text':' looks something like:','line_number':142,'multiline':False]
['text':'   %a = Op(%b, %c, %d)','line_number':143,'multiline':False]
['text':' Helper function for convertToNQLString function.','line_number':166,'multiline':False]
['text':' It takes a list of nodes and returns a map node->unique_name. The new names','line_number':167,'multiline':False]
['text':' are based on the existing ones, but are also unique.','line_number':168,'multiline':False]
['text':' Attempt to match at each node','line_number':197,'multiline':False]
['text':' This is a map from the internal TestMatchGraph to the nodes in the','line_number':203,'multiline':False]
['text':' NNGraph','line_number':204,'multiline':False]
['text':' We iterate through the "varMap_" map (string ->','line_number':206,'multiline':False]
['text':' TestMatchGraph::NodeRef) to generate string -> NNGraph::NodeRef','line_number':207,'multiline':False]
['text':' \brief Return a short string name for the given \param node.','line_number':226,'multiline':False]
['text':' The function works with both tensors and operators.','line_number':227,'multiline':False]
['text':' \brief Return a string representing the given graph \param g.','line_number':245,'multiline':False]
['text':' The returned string is a valid NQL query.','line_number':246,'multiline':False]
['text':' Order nodes in a topological order.','line_number':248,'multiline':False]
['text':' TODO: Currently tarjans mutates the graph, and that's the only reason we','line_number':249,'multiline':False]
['text':' are not using const reference for `g`. We need to fix tarjans so that it','line_number':250,'multiline':False]
['text':' doesn't mutate the graph and use const reference in this function too.','line_number':251,'multiline':False]
['text':' Different nodes might have the same name. We want to change that so that','line_number':263,'multiline':False]
['text':' they are distinguishable by the name. NQL assumes that names are unique.','line_number':264,'multiline':False]
['text':' Going from top to bottom (nodes are in topological order), print all','line_number':268,'multiline':False]
['text':' nodes.','line_number':269,'multiline':False]
['text':' namespace nql','line_number':280,'multiline':False]
['text':' namespace nom','line_number':281,'multiline':False]
