['text':' lower 2 bits as rounding mode in FCR','line_number':170,'multiline':False]
['text':' Translate to float_rounding_mode','line_number':175,'multiline':False]
['text':' float_flag_inexact','line_number':182,'multiline':False]
['text':' float_flag_underflow','line_number':184,'multiline':False]
['text':' float_flag_overflow','line_number':186,'multiline':False]
['text':' float_flag_divbyzero','line_number':188,'multiline':False]
['text':' float_flag_invalid','line_number':190,'multiline':False]
['text':'    if ( ( ! roundNearestEven ) && ( roundingMode !=','line_number':204,'multiline':False]
['text':'    float_round_ties_away) ) {','line_number':205,'multiline':False]
['text':' Extract the sign bit, exponent and significant  ','line_number':292,'multiline':True]
['text':' Flag to indicate fusedMultiplyAdd(0, inf,  or fusedMultiplyAdd(inf, 0 c) ','line_number':305,'multiline':True]
['text':' CASE1: if any input is NaN =>  NaN propagate ','line_number':310,'multiline':True]
['text':' It is implementation-defined whether the cases of (0,inf,qnan)
   * and (inf,0,qnan) raise InvalidOperation or not (and what QNaN
   * they return if they do), so we have to hand this information
   * off to the target-specific pick-a-NaN routine.
   ','line_number':312,'multiline':True]
['text':' IEEE754 7.2 - Invalid: fusedMultiplyAdd(0, inf, c) or
   * fusedMultiplyAdd(inf, 0 , c) unless c is a quiet NaN; If c is a
   * quiet NaN then it is implementation defined whether the invalid operation
   * exception is signaled.
   ','line_number':318,'multiline':True]
['text':' Work out the sign and type of the product ','line_number':328,'multiline':True]
['text':' CASE2: fusedMultiplyAdd(0, inf, c) or fusedMultiplyAdd(inf,0,  c) and c is
   * not NaN  => raise invalid ','line_number':334,'multiline':True]
['text':' CASE3 and CASE4: c is inf, p is number or inf','line_number':344,'multiline':True]
['text':' CASE3: addition of opposite-signed infinities => InvalidOperation ','line_number':347,'multiline':True]
['text':' CASE4: Otherwise generate an infinity of the same sign ','line_number':351,'multiline':True]
['text':' CASE5: c is number and p is inf ','line_number':355,'multiline':True]
['text':' CASE6: c is number, p is zero ','line_number':360,'multiline':True]
['text':' Adding two exact zeroes ','line_number':364,'multiline':True]
['text':' CASE7: Zero plus something non-zero : just return the something ','line_number':375,'multiline':True]
['text':' Calculate the actual result a * b + c ','line_number':386,'multiline':True]
['text':' NOTE: we subtract 0x7e where float16_mul() subtracts 0x7f
   * because we want the true exponent, not the "one-less-than"
   * flavour that roundAndPackFloat16() takes.
   ','line_number':388,'multiline':True]
['text':' Now pSig32 is the significand of the multiply, with the explicit bit in
   * position 30.
   ','line_number':403,'multiline':True]
['text':' Throw out the special case of c being an exact zero now ','line_number':408,'multiline':True]
['text':' Addition ','line_number':421,'multiline':True]
['text':' scale c to match p ','line_number':423,'multiline':True]
['text':' scale p to match c ','line_number':427,'multiline':True]
['text':' no scaling needed ','line_number':431,'multiline':True]
['text':' Add significands and make sure explicit bit ends up in posn 62 ','line_number':434,'multiline':True]
['text':' Subtraction ','line_number':442,'multiline':True]
['text':' Exact zero ','line_number':460,'multiline':True]
['text':' Normalize to put the explicit bit back into bit 62. ','line_number':469,'multiline':True]
['text':' Extract rounding mode from FCR/FSR to softfloat','line_number':487,'multiline':False]
['text':' Call softfloat lib','line_number':490,'multiline':False]
['text':'*fsr_o =  PutException(float_exception_flags, fsr_i);','line_number':492,'multiline':False]
['text':' Call fp utility','line_number':505,'multiline':False]
['text':' Output result','line_number':507,'multiline':False]
['text':' namespace fp16_fma','line_number':540,'multiline':False]
