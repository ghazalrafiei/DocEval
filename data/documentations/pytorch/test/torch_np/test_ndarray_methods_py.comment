['text':' Owner(s): ["module: dynamo"]','line_number':1,'multiline':False]
['text':' reshape(*shape_tuple)','line_number':63,'multiline':False]
['text':' reshape keeps the base','line_number':65,'multiline':False]
['text':' arr is intact','line_number':66,'multiline':False]
['text':' XXX: move out to dedicated test(s)','line_number':68,'multiline':False]
['text':' reshape(shape_tuple)','line_number':71,'multiline':False]
['text':' XXX : order='C' / 'F'','line_number':86,'multiline':False]
['text':'        tgt = [[1, 4, 7, 10],','line_number':87,'multiline':False]
['text':'               [2, 5, 8, 11],','line_number':88,'multiline':False]
['text':'               [3, 6, 9, 12]]','line_number':89,'multiline':False]
['text':'        assert np.all(arr.T.reshape((3, 4), order='C') == tgt)','line_number':90,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':'        tgt = [[1, 10, 8, 6], [4, 2, 11, 9], [7, 5, 3, 12]]','line_number':92,'multiline':False]
['text':'        assert_equal(arr.reshape((3, 4), order='F'), tgt)','line_number':93,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':' test special sparse condition boolean code path','line_number':163,'multiline':False]
['text':' Tests that the array method','line_number':179,'multiline':False]
['text':' call to nonzero works','line_number':180,'multiline':False]
['text':' arr = np.random.normal(size=size)','line_number':223,'multiline':False]
['text':' contiguous arrays','line_number':226,'multiline':False]
['text':' non-contiguous arrays','line_number':255,'multiline':False]
['text':' one dimension lesser for non-zero sized','line_number':275,'multiline':False]
['text':' array should raise an error','line_number':276,'multiline':False]
['text':' a = np.random.normal(0, 1, (4, 5, 6, 7, 8))','line_number':293,'multiline':False]
['text':' see also gh-616','line_number':306,'multiline':False]
['text':' Check some simple shape mismatches','line_number':310,'multiline':False]
['text':' these could be relaxed possibly (used to allow even the previous)','line_number':320,'multiline':False]
['text':' make sure both ndarray.argmax/argmin and','line_number':342,'multiline':False]
['text':' numpy.argmax/argmin support out/axis args','line_number':343,'multiline':False]
['text':' a = np.random.normal(size=(2, 3))','line_number':344,'multiline':False]
['text':' check keyword args','line_number':348,'multiline':False]
['text':' check positional args','line_number':361,'multiline':False]
['text':' To hit the tail of SIMD multi-level(x4, x1) inner loops','line_number':401,'multiline':False]
['text':' on variant SIMD widthes','line_number':402,'multiline':False]
['text':'      with suppress_warnings() as sup:','line_number':455,'multiline':False]
['text':'          sup.filter(RuntimeWarning,','line_number':456,'multiline':False]
['text':'                      "invalid value encountered in reduce")','line_number':457,'multiline':False]
['text':'        if np.asarray(arr).dtype.kind in "c":','line_number':458,'multiline':False]
['text':'            pytest.xfail(reason="'max_values_cpu' not implemented for 'ComplexDouble'")','line_number':459,'multiline':False]
['text':' , err_msg="%r" % arr)','line_number':463,'multiline':False]
['text':' , err_msg="%r" % arr)','line_number':464,'multiline':False]
['text':' add padding to test SIMD loops','line_number':466,'multiline':False]
['text':' To hit the tail of SIMD multi-level(x4, x1) inner loops','line_number':525,'multiline':False]
['text':' on variant SIMD widthes','line_number':526,'multiline':False]
['text':'        with suppress_warnings() as sup:','line_number':572,'multiline':False]
['text':'            sup.filter(RuntimeWarning, "invalid value encountered in reduce")','line_number':573,'multiline':False]
['text':' add padding to test SIMD loops','line_number':579,'multiline':False]
['text':' make sure ndarray does not carry extra methods/attributes','line_number':638,'multiline':False]
['text':' >>> set(dir(a)) - set(dir(a.tensor.numpy()))','line_number':639,'multiline':False]
['text':' numpy generates array scalars, we do 0D arrays','line_number':650,'multiline':False]
['text':' numpy iterates over the 0th axis','line_number':657,'multiline':False]
