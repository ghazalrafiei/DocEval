['text':' Owner(s): ["module: dynamo"]','line_number':1,'multiline':False]
['text':' If we are going to trace through these, we should use NumPy','line_number':33,'multiline':False]
['text':' If testing on eager mode, we use torch._numpy','line_number':34,'multiline':False]
['text':'  assert_raises_regex, HAS_LAPACK64, IS_WASM','line_number':60,'multiline':False]
['text':'  assert_raises_regex, HAS_LAPACK64, IS_WASM','line_number':94,'multiline':False]
['text':' For ndarray subclass input, our output should have the same subclass','line_number':105,'multiline':False]
['text':' (non-ndarray input gets converted to ndarray).','line_number':106,'multiline':False]
['text':' Choose a safe rtol','line_number':130,'multiline':False]
['text':' used to categorize tests','line_number':137,'multiline':False]
['text':' mutually exclusive','line_number':141,'multiline':False]
['text':' optional additions','line_number':144,'multiline':False]
['text':' prevent shared tags','line_number':160,'multiline':False]
['text':'','line_number':183,'multiline':False]
['text':' Base test cases','line_number':184,'multiline':False]
['text':'','line_number':185,'multiline':False]
['text':' square test cases','line_number':191,'multiline':False]
['text':' non-square test-cases','line_number':239,'multiline':False]
['text':' hermitian test-cases','line_number':322,'multiline':False]
['text':'','line_number':342,'multiline':False]
['text':' Gufunc test cases','line_number':343,'multiline':False]
['text':'','line_number':344,'multiline':False]
['text':'','line_number':378,'multiline':False]
['text':' Test different routines against the above cases','line_number':379,'multiline':False]
['text':'','line_number':380,'multiline':False]
['text':' filter by require and exclude','line_number':394,'multiline':False]
['text':' matrix x matrix','line_number':468,'multiline':False]
['text':' matrix x vector','line_number':471,'multiline':False]
['text':' kept apart from TestSolve for use for testing with matrices.','line_number':494,'multiline':False]
['text':' Test system of 0x0 matrices','line_number':513,'multiline':False]
['text':' Test errors for non-square and only b's dimension being 0','line_number':522,'multiline':False]
['text':' Test broadcasting error','line_number':526,'multiline':False]
['text':' broadcasting error','line_number':527,'multiline':False]
['text':' Test zero "single equations" with 0x0 matrices.','line_number':531,'multiline':False]
['text':' test zero multiple equation (K=0) case.','line_number':545,'multiline':False]
['text':' test both zero.','line_number':557,'multiline':False]
['text':' Check that all kinds of 0-sized arrays work','line_number':580,'multiline':False]
['text':' Check that all kinds of 0-sized arrays work','line_number':615,'multiline':False]
['text':' This is just for documentation, it might make sense to change:','line_number':623,'multiline':False]
['text':' This is just for documentation, it might make sense to change:','line_number':630,'multiline':False]
['text':' Check that all kinds of 0-sized arrays work','line_number':661,'multiline':False]
['text':' This is just for documentation, it might make sense to change:','line_number':671,'multiline':False]
['text':' This is just for documentation, it might make sense to change:','line_number':680,'multiline':False]
['text':' cond(x, p) for p in (None, 2, -2)','line_number':762,'multiline':False]
['text':' a might be a matrix','line_number':765,'multiline':False]
['text':' +-2 norms','line_number':770,'multiline':False]
['text':' Other norms','line_number':788,'multiline':False]
['text':' Smoketest the non-svd norms','line_number':824,'multiline':False]
['text':' Singular matrices have infinite condition number for','line_number':833,'multiline':False]
['text':' positive norms, and negative norms shouldn't raise','line_number':834,'multiline':False]
['text':' exceptions','line_number':835,'multiline':False]
['text':' Inversion may not hit exact infinity, so just check the','line_number':840,'multiline':False]
['text':' number is large','line_number':841,'multiline':False]
['text':' (','line_number':846,'multiline':False]
['text':'    True, run=False, reason="Platform/LAPACK-dependent failure, see gh-18914"','line_number':847,'multiline':False]
['text':' )','line_number':848,'multiline':False]
['text':' nans should be passed through, not converted to infs','line_number':850,'multiline':False]
['text':' Check behavior when only some of the stacked matrices are','line_number':874,'multiline':False]
['text':' singular','line_number':875,'multiline':False]
['text':' `a @ a_ginv == I` does not hold if a is singular','line_number':897,'multiline':False]
['text':' `a @ a_ginv == I` does not hold if a is singular','line_number':912,'multiline':False]
['text':' NB: comment out tests of type(det) == double : we return zero-dim arrays','line_number':946,'multiline':False]
['text':'    assert_equal(type(linalg.det([[0.0]])), double)','line_number':948,'multiline':False]
['text':'    assert_equal(type(linalg.det([[0.0j]])), cdouble)','line_number':950,'multiline':False]
['text':'    assert_equal(type(linalg.slogdet([[0.0]])[0]), double)','line_number':953,'multiline':False]
['text':'    assert_equal(type(linalg.slogdet([[0.0]])[1]), double)','line_number':954,'multiline':False]
['text':'    assert_equal(type(linalg.slogdet([[0.0j]])[0]), cdouble)','line_number':957,'multiline':False]
['text':'    assert_equal(type(linalg.slogdet([[0.0j]])[1]), double)','line_number':958,'multiline':False]
['text':'     assert_almost_equal(sv, sv.__array_wrap__(s))','line_number':1001,'multiline':False]
['text':' .view(type(x))','line_number':1011,'multiline':False]
['text':' (reason="Lstsq: we use the future default =None")','line_number':1020,'multiline':False]
['text':' Warning should be raised exactly once (first command)','line_number':1040,'multiline':False]
['text':'    (4, 2, 0),    # Intel MKL ERROR: Parameter 4 was incorrect on entry to DLALSD.','line_number':1051,'multiline':False]
['text':' residuals are exactly the squared norms of b's columns','line_number':1064,'multiline':False]
['text':' use modified version of docstring example','line_number':1071,'multiline':False]
['text':'        with assert_raises_regex(LinAlgError, "Incompatible dimensions"):','line_number':1075,'multiline':False]
['text':' @xfail  #(reason="no block()")','line_number':1080,'multiline':False]
['text':' FIXME: otherwise fails in setUp calling np.block','line_number':1081,'multiline':False]
['text':' FIXME the 'e' dtype might work in future','line_number':1092,'multiline':False]
['text':' note that eigenvalue arrays returned by eig must be sorted since','line_number':1175,'multiline':False]
['text':' their order isn't guaranteed.','line_number':1176,'multiline':False]
['text':' Check default is 'L'','line_number':1206,'multiline':False]
['text':' Check 'L'','line_number':1209,'multiline':False]
['text':' Check 'l'','line_number':1212,'multiline':False]
['text':' Check 'U'','line_number':1215,'multiline':False]
['text':' Check 'u'','line_number':1218,'multiline':False]
['text':' Check that all kinds of 0-sized arrays work','line_number':1223,'multiline':False]
['text':'     class ArraySubclass(np.ndarray):','line_number':1224,'multiline':False]
['text':'         pass','line_number':1225,'multiline':False]
['text':' .view(ArraySubclass)','line_number':1226,'multiline':False]
['text':' This is just for documentation, it might make sense to change:','line_number':1230,'multiline':False]
['text':' .view(ArraySubclass)','line_number':1233,'multiline':False]
['text':' This is just for documentation, it might make sense to change:','line_number':1237,'multiline':False]
['text':' note that eigenvalue arrays returned by eig must be sorted since','line_number':1244,'multiline':False]
['text':' their order isn't guaranteed.','line_number':1245,'multiline':False]
['text':' Check default is 'L'','line_number':1289,'multiline':False]
['text':' Check 'L'','line_number':1292,'multiline':False]
['text':' Check 'l'','line_number':1295,'multiline':False]
['text':' Check 'U'','line_number':1298,'multiline':False]
['text':' Check 'u'','line_number':1301,'multiline':False]
['text':' Check that all kinds of 0-sized arrays work','line_number':1306,'multiline':False]
['text':'        class ArraySubclass(np.ndarray):','line_number':1307,'multiline':False]
['text':'            pass','line_number':1308,'multiline':False]
['text':' .view(ArraySubclass)','line_number':1309,'multiline':False]
['text':' This is just for documentation, it might make sense to change:','line_number':1315,'multiline':False]
['text':' .view(ArraySubclass)','line_number':1318,'multiline':False]
['text':' This is just for documentation, it might make sense to change:','line_number':1324,'multiline':False]
['text':' For integer input, don't have to test float precision of output.','line_number':1337,'multiline':False]
['text':' np.typecodes["AllInteger"]','line_number':1350,'multiline':False]
['text':' np.typecodes["AllFloat"]','line_number':1351,'multiline':False]
['text':' FIXME: move looping to parametrize, add decorators=[xfail]','line_number':1359,'multiline':False]
['text':' pytest.xfail("float16**float64 => float64 (?)")','line_number':1360,'multiline':False]
['text':' Vector norms.','line_number':1425,'multiline':False]
['text':' Compare the use of `axis` with computing the norm of each row','line_number':1426,'multiline':False]
['text':' or column separately.','line_number':1427,'multiline':False]
['text':' Matrix norms.','line_number':1435,'multiline':False]
['text':' The logic using k_index only works for nd = 3.','line_number':1452,'multiline':False]
['text':' This has to be changed if nd is increased.','line_number':1453,'multiline':False]
['text':' check the order=None, axis=None case','line_number':1473,'multiline':False]
['text':' Vector norms.','line_number':1485,'multiline':False]
['text':' Matrix norms.','line_number':1501,'multiline':False]
['text':' Define the part for 2d arrays separately, so we can subclass this','line_number':1520,'multiline':False]
['text':' and run the tests using np.matrix in matrixlib.tests.test_matrix_linalg.','line_number':1521,'multiline':False]
['text':' np.typecodes["AllInteger"]','line_number':1529,'multiline':False]
['text':' float32, complex64, float64, complex128 types are the only types','line_number':1531,'multiline':False]
['text':' allowed by `linalg`, which performs the matrix operations used','line_number':1532,'multiline':False]
['text':' within `norm`.','line_number':1533,'multiline':False]
['text':' Lower bar needed to support low precision floats.','line_number':1573,'multiline':False]
['text':' They end up being off by 1 in the 7th place.','line_number':1574,'multiline':False]
['text':' This test has been added because the 2x2 example','line_number':1594,'multiline':False]
['text':' happened to have equal nuclear norm and induced 1-norm.','line_number':1595,'multiline':False]
['text':' The 1/10 scaling factor accommodates the absolute tolerance','line_number':1596,'multiline':False]
['text':' used in assert_almost_equal.','line_number':1597,'multiline':False]
['text':' Check that bad arguments raise the appropriate exceptions.','line_number':1610,'multiline':False]
['text':' Using `axis=<integer>` or passing in a 1-D array implies vector','line_number':1615,'multiline':False]
['text':' norms are being computed, so also using `ord='fro'`','line_number':1616,'multiline':False]
['text':' or `ord='nuc'` or any other string raises a ValueError.','line_number':1617,'multiline':False]
['text':' Similarly, norm should raise an exception when ord is any finite','line_number':1624,'multiline':False]
['text':' number other than 1, 2, -1 or -2 when computing matrix norms.','line_number':1625,'multiline':False]
['text':' Invalid axis','line_number':1631,'multiline':False]
['text':' Non-regression test: p-norm of signed integer would previously do','line_number':1643,'multiline':False]
['text':' float cast and abs in the wrong order.','line_number':1644,'multiline':False]
['text':' Separate definitions so we can use them for matrix tests.','line_number':1649,'multiline':False]
['text':' Full rank matrix','line_number':1679,'multiline':False]
['text':' rank deficient matrix','line_number':1681,'multiline':False]
['text':' All zeros - zero rank','line_number':1685,'multiline':False]
['text':' 1 dimension - rank 1 unless all 0','line_number':1687,'multiline':False]
['text':' accepts array-like','line_number':1690,'multiline':False]
['text':' greater than 2 dimensions treated as stacked matrices','line_number':1692,'multiline':False]
['text':' works on scalar','line_number':1695,'multiline':False]
['text':' rank deficient matrix','line_number':1702,'multiline':False]
['text':' manually supplied tolerance','line_number':1706,'multiline':False]
['text':' Test matrices with reduced rank','line_number':1712,'multiline':False]
['text':'  rng = np.random.RandomState(20120714)','line_number':1713,'multiline':False]
['text':' Make a rank deficient matrix','line_number':1716,'multiline':False]
['text':' Assert that matrix_rank detected deficiency','line_number':1719,'multiline':False]
['text':' This test expects the argument `a` to be an ndarray or','line_number':1728,'multiline':False]
['text':' a subclass of an ndarray of inexact type.','line_number':1729,'multiline':False]
['text':' mode == 'complete'','line_number':1735,'multiline':False]
['text':' mode == 'reduced'','line_number':1747,'multiline':False]
['text':' mode == 'r'','line_number':1759,'multiline':False]
['text':' (reason="torch does not allow qr(..., mode='raw'")','line_number':1765,'multiline':False]
['text':' (reason="torch does not allow qr(..., mode='raw'")','line_number':1779,'multiline':False]
['text':' The factorization is not unique and varies between libraries,','line_number':1781,'multiline':False]
['text':' so it is not possible to check against known values. Functional','line_number':1782,'multiline':False]
['text':' testing is a possibility, but awaits the exposure of more','line_number':1783,'multiline':False]
['text':' of the functions in lapack_lite. Consequently, this test is','line_number':1784,'multiline':False]
['text':' very limited in scope. Note that the results are in FORTRAN','line_number':1785,'multiline':False]
['text':' order, hence the h arrays are transposed.','line_number':1786,'multiline':False]
['text':' Test double','line_number':1789,'multiline':False]
['text':' This test expects the argument `a` to be an ndarray or','line_number':1820,'multiline':False]
['text':' a subclass of an ndarray of inexact type.','line_number':1821,'multiline':False]
['text':' mode == 'complete'','line_number':1827,'multiline':False]
['text':' mode == 'reduced'','line_number':1841,'multiline':False]
['text':' mode == 'r'','line_number':1855,'multiline':False]
['text':' TODO: are there no other tests for cholesky?','line_number':1874,'multiline':False]
['text':' Check A = L L^H','line_number':1879,'multiline':False]
['text':'     class ArraySubclass(np.ndarray):','line_number':1898,'multiline':False]
['text':'         pass','line_number':1899,'multiline':False]
['text':' .view(ArraySubclass)','line_number':1900,'multiline':False]
['text':' for documentation purpose:','line_number':1904,'multiline':False]
['text':' .view(ArraySubclass)','line_number':1907,'multiline':False]
['text':' (reason="endianness")','line_number':1915,'multiline':False]
['text':' Byte order check should pass for native order','line_number':1917,'multiline':False]
['text':' Normal call','line_number':1929,'multiline':False]
['text':' Native but not '='','line_number':1931,'multiline':False]
['text':' Swapped','line_number':1933,'multiline':False]
['text':' It should raise an error even if the error doesn't occur in the','line_number':1938,'multiline':False]
['text':' last iteration of the ufunc inner loop','line_number':1939,'multiline':False]
['text':' Check that our xerbla has been successfully linked in. If it is not,','line_number':1951,'multiline':False]
['text':' the default xerbla routine is called, which prints a message to stdout','line_number':1952,'multiline':False]
['text':' and may, or may not, abort the process depending on the LAPACK package.','line_number':1953,'multiline':False]
['text':' fork failed, or not running on POSIX','line_number':1960,'multiline':False]
['text':' noqa: TRY200','line_number':1961,'multiline':False]
['text':' child; close i/o file handles','line_number':1964,'multiline':False]
['text':' Avoid producing core files.','line_number':1967,'multiline':False]
['text':' These calls may abort.','line_number':1971,'multiline':False]
['text':' <- invalid value','line_number':1983,'multiline':False]
['text':' success, reuse error code to mark success as','line_number':1986,'multiline':False]
['text':' FORTRAN STOP returns as success.','line_number':1987,'multiline':False]
['text':' Did not abort, but our xerbla was not linked in.','line_number':1990,'multiline':False]
['text':' parent','line_number':1993,'multiline':False]
['text':' Regression test that loading certain other libraries does not','line_number':2001,'multiline':False]
['text':' result to wrong results in float32 linear algebra.','line_number':2002,'multiline':False]
['text':'','line_number':2003,'multiline':False]
['text':' There's a bug gh-8577 on OSX that can trigger this, and perhaps','line_number':2004,'multiline':False]
['text':' there are also other situations in which it occurs.','line_number':2005,'multiline':False]
['text':'','line_number':2006,'multiline':False]
['text':' Do the check in a separate process.','line_number':2007,'multiline':False]
['text':' Swapped import order','line_number':2031,'multiline':False]
['text':' multi_dot with three arguments uses a fast hand coded algorithm to','line_number':2040,'multiline':False]
['text':' determine the optimal order. Therefore test it separately.','line_number':2041,'multiline':False]
['text':' separate code path with two arguments','line_number':2050,'multiline':False]
['text':' multi_dot with four or more arguments uses the dynamic programming','line_number':2058,'multiline':False]
['text':' optimization and therefore deserve a separate','line_number':2059,'multiline':False]
['text':' The first argument can be 1-D','line_number':2067,'multiline':False]
['text':' 1-D','line_number':2068,'multiline':False]
['text':' the result should be 1-D','line_number':2073,'multiline':False]
['text':' The last argument can be 1-D','line_number':2077,'multiline':False]
['text':' 1-D','line_number':2081,'multiline':False]
['text':' the result should be 1-D','line_number':2083,'multiline':False]
['text':' The first and last arguments can be 1-D','line_number':2087,'multiline':False]
['text':' 1-D','line_number':2088,'multiline':False]
['text':' 1-D','line_number':2091,'multiline':False]
['text':' the result should be a scalar','line_number':2093,'multiline':False]
['text':' multi_dot with three arguments uses a fast hand coded algorithm to','line_number':2097,'multiline':False]
['text':' determine the optimal order. Therefore test it separately.','line_number':2098,'multiline':False]
['text':' separate code path with two arguments','line_number':2110,'multiline':False]
['text':' multi_dot with four or more arguments uses the dynamic programming','line_number':2120,'multiline':False]
['text':' optimization and therefore deserve a separate test','line_number':2121,'multiline':False]
['text':' Test for the dynamic programming part','line_number':2132,'multiline':False]
['text':' This test is directly taken from Cormen page 376.','line_number':2133,'multiline':False]
['text':' Cormen uses 1-based index, python does not.','line_number':2163,'multiline':False]
['text':' Only the upper triangular part (without the diagonal) is interesting.','line_number':2167,'multiline':False]
['text':' examples from docstring','line_number':2192,'multiline':False]
['text':' mimic a docstring example','line_number':2217,'multiline':False]
['text':' (reason="TODO")','line_number':2251,'multiline':False]
['text':' linalg gracefully handles unsupported type','line_number':2253,'multiline':False]
['text':' with assert_raises_regex(TypeError, "unsupported in linalg"):','line_number':2255,'multiline':False]
['text':' @slow','line_number':2259,'multiline':False]
['text':' @pytest.mark.xfail(not HAS_LAPACK64, run=False,','line_number':2260,'multiline':False]
['text':'                   reason="Numpy not compiled with 64-bit BLAS/LAPACK")','line_number':2261,'multiline':False]
['text':' @requires_memory(free_bytes=16e9)','line_number':2262,'multiline':False]
['text':' (','line_number':2273,'multiline':False]
['text':'    not HAS_LAPACK64, reason="Numpy not compiled with 64-bit BLAS/LAPACK"','line_number':2274,'multiline':False]
['text':' )','line_number':2275,'multiline':False]
['text':' Smoke test LAPACK geqrf lwork call with 64-bit integers','line_number':2277,'multiline':False]
['text':' Dummy arrays, not referenced by the lapack routine, so don't','line_number':2285,'multiline':False]
['text':' need to be of the right size','line_number':2286,'multiline':False]
['text':' Size query','line_number':2291,'multiline':False]
['text':' Should result to an integer of a reasonable size','line_number':2297,'multiline':False]
