['text':' Owner(s): ["module: dynamo"]','line_number':1,'multiline':False]
['text':' Setup for optimize einsum','line_number':28,'multiline':False]
['text':' Need enough arguments','line_number':38,'multiline':False]
['text':' subscripts must be a string','line_number':44,'multiline':False]
['text':' out parameter must be an array','line_number':47,'multiline':False]
['text':' order parameter must be a valid order','line_number':50,'multiline':False]
['text':' casting parameter must be a valid casting','line_number':60,'multiline':False]
['text':' dtype parameter must be a valid dtype','line_number':63,'multiline':False]
['text':' other keyword arguments are rejected','line_number':68,'multiline':False]
['text':' issue 4528 revealed a segfault with this call','line_number':71,'multiline':False]
['text':' number of operands must match count in subscripts string','line_number':76,'multiline':False]
['text':' can't have more subscripts than dimensions in the operand','line_number':87,'multiline':False]
['text':' invalid ellipsis','line_number':107,'multiline':False]
['text':' invalid subscript character','line_number':125,'multiline':False]
['text':' output subscripts must appear in input','line_number':136,'multiline':False]
['text':' output subscripts may only be specified once','line_number':141,'multiline':False]
['text':' dimensions much match when being collapsed','line_number':150,'multiline':False]
['text':' broadcasting to new dimensions must be enabled explicitly','line_number':166,'multiline':False]
['text':' , match="'b'"):','line_number':182,'multiline':False]
['text':' gh-11221 - 'c' erroneously appeared in the error message','line_number':183,'multiline':False]
['text':' Check order kwarg, asanyarray allows 1d to pass through','line_number':188,'multiline':False]
['text':' (reason="a view into smth else")','line_number':198,'multiline':False]
['text':' pass-through','line_number':200,'multiline':False]
['text':' output is writeable whenever input is writeable','line_number':219,'multiline':False]
['text':' transpose','line_number':226,'multiline':False]
['text':' diagonal','line_number':238,'multiline':False]
['text':' diagonal with various ways of broadcasting an additional dimension','line_number':250,'multiline':False]
['text':' triple diagonal','line_number':310,'multiline':False]
['text':' swap axes','line_number':322,'multiline':False]
['text':'  @np._no_nep50_warning()','line_number':334,'multiline':False]
['text':' Check various sums.  Does many sizes to exercise unrolled loops.','line_number':337,'multiline':False]
['text':' sum(a, axis=-1)','line_number':339,'multiline':False]
['text':' sum(a, axis=0)','line_number':360,'multiline':False]
['text':' trace(a)','line_number':383,'multiline':False]
['text':' torch?','line_number':388,'multiline':False]
['text':' gh-15961: should accept numpy int64 type in subscript list','line_number':392,'multiline':False]
['text':'     np_array = np.asarray([0, 0])','line_number':393,'multiline':False]
['text':'     assert_equal(np.einsum(a, np_array, optimize=do_opt),','line_number':394,'multiline':False]
['text':'                  np.trace(a).astype(dtype))','line_number':395,'multiline':False]
['text':'     assert_equal(np.einsum(a, list(np_array), optimize=do_opt),','line_number':396,'multiline':False]
['text':'                  np.trace(a).astype(dtype))','line_number':397,'multiline':False]
['text':' multiply(a, b)','line_number':399,'multiline':False]
['text':' scalar case','line_number':400,'multiline':False]
['text':' inner(a,b)','line_number':412,'multiline':False]
['text':' outer(a,b)','line_number':433,'multiline':False]
['text':' Suppress the complex warnings for the 'as f8' tests','line_number':440,'multiline':False]
['text':'         sup.filter(np.ComplexWarning)','line_number':442,'multiline':False]
['text':' matvec(a,b) / a.dot(b) where a is matrix, b is vector','line_number':444,'multiline':False]
['text':' matmat(a,b) / a.dot(b) where a is matrix, b is matrix','line_number':509,'multiline':False]
['text':' matrix triple product (note this is not currently an efficient','line_number':542,'multiline':False]
['text':' way to multiply 3 matrices)','line_number':543,'multiline':False]
['text':' tensordot(a, b)','line_number':588,'multiline':False]
['text':' logical_and(logical_and(a!=0, b!=0), c!=0)','line_number':636,'multiline':False]
['text':' Various stride0, contiguous, and SSE aligned variants','line_number':659,'multiline':False]
['text':' An object array, summed as the data type','line_number':689,'multiline':False]
['text':'    a = np.arange(9, dtype=object)','line_number':690,'multiline':False]
['text':'','line_number':691,'multiline':False]
['text':'    b = np.einsum("i->", a, dtype=dtype, casting='unsafe')','line_number':692,'multiline':False]
['text':'    assert_equal(b, np.sum(a))','line_number':693,'multiline':False]
['text':'    assert_equal(b.dtype, np.dtype(dtype))','line_number':694,'multiline':False]
['text':'','line_number':695,'multiline':False]
['text':'    b = np.einsum(a, [0], [], dtype=dtype, casting='unsafe')','line_number':696,'multiline':False]
['text':'    assert_equal(b, np.sum(a))','line_number':697,'multiline':False]
['text':'    assert_equal(b.dtype, np.dtype(dtype))','line_number':698,'multiline':False]
['text':' A case which was failing (ticket #1885)','line_number':700,'multiline':False]
['text':' singleton dimensions broadcast (gh-10343)','line_number':706,'multiline':False]
['text':' a blas-compatible contraction broadcasting case which was failing','line_number':715,'multiline':False]
['text':' for optimize=True (ticket #10930)','line_number':716,'multiline':False]
['text':' all-ones array was bypassing bug (ticket #10930)','line_number':722,'multiline':False]
['text':' Cases which were failing (gh-10899)','line_number':735,'multiline':False]
['text':' contig_contig_outstride0_two','line_number':740,'multiline':False]
['text':' stride0_contig_outstride0_two','line_number':743,'multiline':False]
['text':' contig_stride0_outstride0_two','line_number':746,'multiline':False]
['text':' (reason="int overflow differs in numpy and pytorch")','line_number':748,'multiline':False]
['text':' (reason="int overflow differs in numpy and pytorch")','line_number':752,'multiline':False]
['text':' (reason="int overflow differs in numpy and pytorch")','line_number':756,'multiline':False]
['text':' (reason="np.float16(4641) == 4640.0")','line_number':767,'multiline':False]
['text':' This call used to crash because of a bug in','line_number':786,'multiline':False]
['text':' PyArray_AssignZero','line_number':787,'multiline':False]
['text':' Regression test for issue #10369 (test unicode inputs with Python 2)','line_number':793,'multiline':False]
['text':' The iterator had an issue with buffering this reduction','line_number':800,'multiline':False]
['text':' Issue #2027, was a problem in the contiguous 3-argument','line_number':811,'multiline':False]
['text':' inner loop implementation','line_number':812,'multiline':False]
['text':' Ensure explicitly setting out=None does not cause an error','line_number':831,'multiline':False]
['text':' see issue gh-15776 and issue gh-15256','line_number':832,'multiline':False]
['text':' Issue #7741, make sure that all letters of Latin alphabet (both uppercase & lowercase) can be used','line_number':836,'multiline':False]
['text':' when creating a subscript from arrays','line_number':837,'multiline':False]
['text':' Issue #2455 change in handling ellipsis','line_number':853,'multiline':False]
['text':' remove the 'middle broadcast' error','line_number':854,'multiline':False]
['text':' only use the 'RIGHT' iteration in prepare_op_axes','line_number':855,'multiline':False]
['text':' adds auto broadcast on left where it belongs','line_number':856,'multiline':False]
['text':' broadcast on right has to be explicit','line_number':857,'multiline':False]
['text':' We need to test the optimized parsing as well','line_number':858,'multiline':False]
['text':' used to raise error','line_number':868,'multiline':False]
['text':' used to raise error','line_number':878,'multiline':False]
['text':' used to raise error','line_number':881,'multiline':False]
['text':' used to raise error','line_number':891,'multiline':False]
['text':' used to raise error','line_number':901,'multiline':False]
['text':' Issue #4485 obscure einsum bug','line_number':904,'multiline':False]
['text':' This case revealed a bug in nditer where it reported a stride','line_number':905,'multiline':False]
['text':' as 'fixed' (0) when it was in fact not fixed during processing','line_number':906,'multiline':False]
['text':' (0 or 4). The reason for the bug was that the check for a fixed','line_number':907,'multiline':False]
['text':' stride was using the information from the 2D inner loop reuse','line_number':908,'multiline':False]
['text':' to restrict the iteration dimensions it had to validate to be','line_number':909,'multiline':False]
['text':' the same, but that 2D inner loop reuse logic is only triggered','line_number':910,'multiline':False]
['text':' during the buffer copying step, and hence it was invalid to','line_number':911,'multiline':False]
['text':' rely on those values. The fix is to check all the dimensions','line_number':912,'multiline':False]
['text':' of the stride in question, which in the test case reveals that','line_number':913,'multiline':False]
['text':' the stride is not fixed.','line_number':914,'multiline':False]
['text':'','line_number':915,'multiline':False]
['text':' NOTE: This test is triggered by the fact that the default buffersize,','line_number':916,'multiline':False]
['text':'       used by einsum, is 8192, and 3*2731 = 8193, is larger than that','line_number':917,'multiline':False]
['text':'       and results in a mismatch between the buffering and the','line_number':918,'multiline':False]
['text':'       striding for operand A.','line_number':919,'multiline':False]
['text':' The following is the original test case from the bug report,','line_number':925,'multiline':False]
['text':' made repeatable by changing random arrays to aranges.','line_number':926,'multiline':False]
['text':' Issue #5147.','line_number':934,'multiline':False]
['text':' The bug only occurred when output argument of einssum was used.','line_number':935,'multiline':False]
['text':' Issues gh-14692 and gh-12689','line_number':944,'multiline':False]
['text':' Bug with signed vs unsigned char errored on power9 and s390x Linux','line_number':945,'multiline':False]
['text':' (reason="no base")','line_number':951,'multiline':False]
['text':' Issue gh-5907, tests that the all contiguous special case','line_number':953,'multiline':False]
['text':' actually checks the contiguity of the output','line_number':954,'multiline':False]
['text':' Always worked (inner iteration is done with 0-stride):','line_number':959,'multiline':False]
['text':' Example 1:','line_number':962,'multiline':False]
['text':' Example 2, buffering causes x to be contiguous but','line_number':966,'multiline':False]
['text':' special cases do not catch the operation before:','line_number':967,'multiline':False]
['text':' Test originally added to cover broken float16 path: gh-20305','line_number':977,'multiline':False]
['text':' Likely most are covered elsewhere, at least partially.','line_number':978,'multiline':False]
['text':' Simple test, designed to excersize most specialized code paths,','line_number':980,'multiline':False]
['text':' note the +0.5 for floats.  This makes sure we use a float value','line_number':981,'multiline':False]
['text':' where the results must be exact.','line_number':982,'multiline':False]
['text':' contig -> scalar:','line_number':986,'multiline':False]
['text':' contig, contig -> contig:','line_number':989,'multiline':False]
['text':' noncontig, noncontig -> contig:','line_number':992,'multiline':False]
['text':' contig + contig -> scalar','line_number':995,'multiline':False]
['text':' contig + scalar -> contig (with out)','line_number':997,'multiline':False]
['text':' scalar + contig -> contig (with out)','line_number':1001,'multiline':False]
['text':' scalar + contig -> scalar','line_number':1004,'multiline':False]
['text':' Use einsum to compare to not have difference due to sum round-offs:','line_number':1006,'multiline':False]
['text':' contig + scalar -> scalar','line_number':1008,'multiline':False]
['text':' Use einsum to compare to not have difference due to sum round-offs:','line_number':1010,'multiline':False]
['text':' contig + contig + contig -> scalar','line_number':1012,'multiline':False]
['text':' FIXME make xfail','line_number':1015,'multiline':False]
['text':' four arrays:','line_number':1021,'multiline':False]
['text':' See gh-5946.','line_number':1026,'multiline':False]
['text':' Use array of True embedded in False.','line_number':1027,'multiline':False]
['text':' Tests all paths of the optimization function against','line_number':1041,'multiline':False]
['text':' conventional einsum','line_number':1042,'multiline':False]
['text':' Hadamard outer products','line_number':1059,'multiline':False]
['text':' Simple index transformation cases','line_number':1064,'multiline':False]
['text':' Long test cases','line_number':1070,'multiline':False]
['text':' Inner products','line_number':1081,'multiline':False]
['text':' Outer products','line_number':1090,'multiline':False]
['text':' Difficult edge cases for optimization','line_number':1099,'multiline':False]
['text':' Inner products','line_number':1114,'multiline':False]
['text':' Randomly built test cases','line_number':1122,'multiline':False]
['text':' gh-10792','line_number':1136,'multiline':False]
['text':' Ensures broadcasting cases are not mistaken for GEMM','line_number':1142,'multiline':False]
['text':' Edge case found in gh-11308','line_number':1157,'multiline':False]
['text':' (reason="order='F' not supported")','line_number':1161,'multiline':False]
['text':' Ensure output order is respected for optimize cases, the below','line_number':1163,'multiline':False]
['text':' conraction should yield a reshaped tensor view','line_number':1164,'multiline':False]
['text':' gh-16415','line_number':1165,'multiline':False]
['text':' Builds views based off initial operands','line_number':1202,'multiline':False]
['text':' Checks if list of tuples are equivalent','line_number':1212,'multiline':False]
['text':' Ensure memory constraints are satisfied','line_number':1221,'multiline':False]
['text':' Long complex cases','line_number':1239,'multiline':False]
['text':' Long test 1','line_number':1241,'multiline':False]
['text':' Long test 2','line_number':1253,'multiline':False]
['text':' Difficult edge cases','line_number':1266,'multiline':False]
['text':' Edge test1','line_number':1268,'multiline':False]
['text':' Edge test2','line_number':1276,'multiline':False]
['text':' Edge test3','line_number':1284,'multiline':False]
['text':' Edge test4','line_number':1292,'multiline':False]
['text':' Edge test5','line_number':1300,'multiline':False]
['text':' Test explicit path handling','line_number':1311,'multiline':False]
['text':' Double check einsum works on the input path','line_number':1324,'multiline':False]
['text':' gh-20962','line_number':1330,'multiline':False]
['text':' Double check einsum works on the input path','line_number':1337,'multiline':False]
['text':' gh-10794','line_number':1354,'multiline':False]
['text':' no error for any spacing','line_number':1357,'multiline':False]
['text':' sanity check','line_number':1366,'multiline':False]
['text':' gh-10080, out overlaps one of the operands','line_number':1369,'multiline':False]
