['text':' Owner(s): ["module: dynamo"]','line_number':1,'multiline':False]
['text':' Note torch validates index arguments "depth-first", so will prioritise','line_number':75,'multiline':False]
['text':' raising TypeError over IndexError, e.g.','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':'     >>> a = np.array([[[5]]])','line_number':78,'multiline':False]
['text':'     >>> a[0.0:, 0.0]','line_number':79,'multiline':False]
['text':'     IndexError: only integers, slices (`:`), ellipsis (`...`),','line_number':80,'multiline':False]
['text':'     numpy.newaxis #     (`None`) and integer or boolean arrays are','line_number':81,'multiline':False]
['text':'     valid indices','line_number':82,'multiline':False]
['text':'     >>> t = torch.as_tensor([[[5]]])  # identical to a','line_number':83,'multiline':False]
['text':'     >>> t[0.0:, 0.0]','line_number':84,'multiline':False]
['text':'     TypeError: slice indices must be integers or None or have an','line_number':85,'multiline':False]
['text':'     __index__ method','line_number':86,'multiline':False]
['text':'','line_number':87,'multiline':False]
['text':' start as float.','line_number':94,'multiline':False]
['text':' stop as float.','line_number':100,'multiline':False]
['text':' step as float.','line_number':106,'multiline':False]
['text':' mixed.','line_number':112,'multiline':False]
['text':' should still get the DeprecationWarning if step = 0.','line_number':119,'multiline':False]
['text':' No non-scalar arrays.','line_number':124,'multiline':False]
['text':' Conversely, using scalars doesn't raise in NumPy, e.g.','line_number':128,'multiline':False]
['text':'','line_number':129,'multiline':False]
['text':'     >>> i = np.int64(1)','line_number':130,'multiline':False]
['text':'     >>> a[i:i:i]','line_number':131,'multiline':False]
['text':'     array([], shape=(0, 1, 1), dtype=int64)','line_number':132,'multiline':False]
['text':'','line_number':133,'multiline':False]
['text':' `None` index adds newaxis','line_number':136,'multiline':False]
['text':' Empty tuple index creates a view','line_number':143,'multiline':False]
['text':' Indexes should be cast with same-kind and not safe, even if that','line_number':151,'multiline':False]
['text':' is somewhat unsafe. So test various different code paths.','line_number':152,'multiline':False]
['text':' i.e. cast to default uint indexing dtype','line_number':154,'multiline':False]
['text':' Empty list index creates an empty array','line_number':171,'multiline':False]
['text':' with the same dtype (but with weird shape)','line_number':172,'multiline':False]
['text':' `a[...]` was `a` in numpy <1.9.','line_number':188,'multiline':False]
['text':' Slicing with ellipsis can skip an','line_number':190,'multiline':False]
['text':' arbitrary number of dimensions','line_number':191,'multiline':False]
['text':' Slicing with ellipsis always results','line_number':196,'multiline':False]
['text':' in an array, not a scalar','line_number':197,'multiline':False]
['text':' Assignment with `(Ellipsis,)` on 0-d arrays','line_number':200,'multiline':False]
['text':' numpy ndarrays do not have `.tensor` attribute','line_number':205,'multiline':False]
['text':' `a[...]` was `a` in numpy <1.9.','line_number':210,'multiline':False]
['text':' Single integer index selects one row','line_number':214,'multiline':False]
['text':' Index out of bounds produces IndexError','line_number':220,'multiline':False]
['text':' Index overflow produces IndexError','line_number':222,'multiline':False]
['text':' Note torch raises RuntimeError here','line_number':223,'multiline':False]
['text':' Single boolean index','line_number':227,'multiline':False]
['text':' Indexing a 2-dimensional array with','line_number':248,'multiline':False]
['text':' boolean array of length one','line_number':249,'multiline':False]
['text':' boolean assignment','line_number':253,'multiline':False]
['text':' A boolean assignment should fail when the shape of the values','line_number':259,'multiline':False]
['text':' cannot be broadcast to the subscription. (see also gh-3458)','line_number':260,'multiline':False]
['text':' Indexing a 2-dimensional array with','line_number':271,'multiline':False]
['text':' 2-dimensional boolean array','line_number':272,'multiline':False]
['text':' boolean assignment','line_number':279,'multiline':False]
['text':' Regression test for #13715. It's a use-after-free bug which the','line_number':284,'multiline':False]
['text':' test won't directly catch, but it will show up in valgrind.','line_number':285,'multiline':False]
['text':' Two variants of the test because the first takes a fast path','line_number':288,'multiline':False]
['text':' This tests that the strides are not reversed for simple and','line_number':293,'multiline':False]
['text':' subspace fancy indexing.','line_number':294,'multiline':False]
['text':' If the strides are not reversed, the 0 in the arange comes last.','line_number':300,'multiline':False]
['text':' This also tests that the subspace buffer is initialized:','line_number':303,'multiline':False]
['text':' Test a bug when calculating the output strides for a result array','line_number':310,'multiline':False]
['text':' when the subspace size was 1 (and test other cases as well)','line_number':311,'multiline':False]
['text':' During development there was a bug activating a skip logic','line_number':319,'multiline':False]
['text':' based on ndim instead of size.','line_number':320,'multiline':False]
['text':' Just documents behaviour, this is a small limitation.','line_number':331,'multiline':False]
['text':' 32 is NPY_MAXDIMS','line_number':332,'multiline':False]
['text':' NumPy bools can be used as boolean index (python ones as of yet not)','line_number':336,'multiline':False]
['text':' After deprecating bools as integers:','line_number':341,'multiline':False]
['text':' a = np.array([0,1,2])','line_number':342,'multiline':False]
['text':' assert_equal(a[True, :], a[None, :])','line_number':343,'multiline':False]
['text':' assert_equal(a[:, True], a[:, None])','line_number':344,'multiline':False]
['text':'','line_number':345,'multiline':False]
['text':' assert_(not np.may_share_memory(a, a[True, :]))','line_number':346,'multiline':False]
['text':' Before `...` would return a itself.','line_number':349,'multiline':False]
['text':' Test that the fast path for trivial assignment is not incorrectly','line_number':373,'multiline':False]
['text':' used when the index is not contiguous or 1D, see also gh-11467.','line_number':374,'multiline':False]
['text':' this case must not go into the fast path, note that idx is','line_number':379,'multiline':False]
['text':' a non-contiuguous none 1D array here.','line_number':380,'multiline':False]
['text':' This is not necessary to preserve. Memory layouts for','line_number':388,'multiline':False]
['text':' more complex indices are not as simple.','line_number':389,'multiline':False]
['text':' Takes a different implementation branch:','line_number':394,'multiline':False]
['text':' XXX: flaky, depends on implementation details','line_number':398,'multiline':False]
['text':' Reference count of intp for index checks','line_number':400,'multiline':False]
['text':' item setting always checks indices in separate function:','line_number':404,'multiline':False]
['text':' A tuple subclass should also be an nd-index','line_number':416,'multiline':False]
['text':' Unlike the non nd-index:','line_number':423,'multiline':False]
['text':' (reason="XXX: low-prio behaviour to support")','line_number':426,'multiline':False]
['text':' See https://github.com/numpy/numpy/issues/5063','line_number':428,'multiline':False]
['text':' If we have an object which claims to be a sequence, but fails','line_number':429,'multiline':False]
['text':' on item getting, this should not be converted to an nd-index (tuple)','line_number':430,'multiline':False]
['text':' If this object happens to be a valid index otherwise, it should work','line_number':431,'multiline':False]
['text':' This object here is very dubious and probably bad though:','line_number':432,'multiline':False]
['text':' also test that field indexing does not segfault','line_number':446,'multiline':False]
['text':' for a similar reason, by indexing a structured array','line_number':447,'multiline':False]
['text':' See also gh-6221','line_number':452,'multiline':False]
['text':' the shapes used here come from the issue and create the correct','line_number':453,'multiline':False]
['text':' size for the iterator buffering size.','line_number':454,'multiline':False]
['text':' single advanced index case','line_number':460,'multiline':False]
['text':' higher dimensional advanced index','line_number':462,'multiline':False]
['text':' From gh-8264,','line_number':467,'multiline':False]
['text':' core dumps if negative strides are used in iteration','line_number':468,'multiline':False]
['text':' These are limitations based on the number of arguments we can process.','line_number':480,'multiline':False]
['text':' For `num=32` (and all boolean cases), the result is actually define;','line_number':481,'multiline':False]
['text':' but the use of NpyIter (NPY_MAXARGS) limits it for technical reasons.','line_number':482,'multiline':False]
['text':' unskipped cases fail because of assigning too many indices','line_number':484,'multiline':False]
['text':' Fancy with subspace with and without transpose','line_number':516,'multiline':False]
['text':' Fancy without subspace (with broadcasting)','line_number':519,'multiline':False]
['text':' Too large and not only ones.','line_number':527,'multiline':False]
['text':' will never broadcast below','line_number':557,'multiline':False]
['text':' Simple case of fancy index broadcasting of the index.','line_number':569,'multiline':False]
['text':' (','line_number':584,'multiline':False]
['text':'    reason="XXX: low-prio to support assigning complex values on floating arrays"','line_number':585,'multiline':False]
['text':' )','line_number':586,'multiline':False]
['text':' Setup the boolean index and float arrays.','line_number':588,'multiline':False]
['text':' Assigning float is fine.','line_number':594,'multiline':False]
['text':' Fancy indexing works, although we get a cast warning.','line_number':598,'multiline':False]
['text':' No complex part','line_number':602,'multiline':False]
['text':' Cast complex to float, throwing away the imaginary portion.','line_number':604,'multiline':False]
['text':' (reason="XXX: requires broadcast() and broadcast_to()")','line_number':611,'multiline':False]
['text':' Boolean indices, up to 3-d for some special cases of eating up','line_number':641,'multiline':False]
['text':' dimensions, also need to test all False','line_number':642,'multiline':False]
['text':' Some slices:','line_number':646,'multiline':False]
['text':' Some Fancy indexes:','line_number':651,'multiline':False]
['text':' empty and can be broadcast','line_number':652,'multiline':False]
['text':' trigger too large array.','line_number':657,'multiline':False]
['text':' invalid datatype','line_number':659,'multiline':False]
['text':' Some simpler indices that still cover a bit more','line_number':660,'multiline':False]
['text':' Very simple ones to fill the rest:','line_number':662,'multiline':False]
['text':' if False, this is a fancy or boolean index','line_number':691,'multiline':False]
['text':' number of fancy/scalar indexes that are not consecutive','line_number':693,'multiline':False]
['text':' number of dimensions indexed by a "fancy" index','line_number':695,'multiline':False]
['text':' NOTE: This is a funny twist (and probably OK to change).','line_number':697,'multiline':False]
['text':' The boolean array has illegal indexes, but this is','line_number':698,'multiline':False]
['text':' allowed if the broadcast fancy-indices are 0-sized.','line_number':699,'multiline':False]
['text':' This variable is to catch that case.','line_number':700,'multiline':False]
['text':' We need to handle Ellipsis and make arrays from indices, also','line_number':703,'multiline':False]
['text':' check if this is fancy indexing (set no_copy).','line_number':704,'multiline':False]
['text':' define here mostly to replace all but first.','line_number':706,'multiline':False]
['text':' boolean indices can have higher dimensions','line_number':714,'multiline':False]
['text':' do not increment ndim counter','line_number':721,'multiline':False]
['text':' This could be open for changes in numpy.','line_number':727,'multiline':False]
['text':' numpy should maybe raise an error if casting to intp','line_number':728,'multiline':False]
['text':' is not safe. It rejects np.array([1., 2.]) but not','line_number':729,'multiline':False]
['text':' [1., 2.] as index (same for ie. np.take).','line_number':730,'multiline':False]
['text':' (Note the importance of empty lists if changing this here)','line_number':731,'multiline':False]
['text':' we can't take more dimensions then we have, not even for 0-d','line_number':747,'multiline':False]
['text':' arrays.  since a[()] makes sense, but not a[(),]. We will','line_number':748,'multiline':False]
['text':' raise an error later on, unless a broadcasting error occurs','line_number':749,'multiline':False]
['text':' first.','line_number':750,'multiline':False]
['text':' Well we have no indexes or one Ellipsis. This is legal.','line_number':754,'multiline':False]
['text':' convert to an index array','line_number':764,'multiline':False]
['text':' this is like taking a slice with one element from a new axis:','line_number':769,'multiline':False]
['text':' fill with 0s instead, and raise error later','line_number':783,'multiline':False]
['text':' concatenate axis into a single one:','line_number':785,'multiline':False]
['text':' This could be changed, a 0-d boolean index can','line_number':794,'multiline':False]
['text':' make sense (even outside the 0-d indexed array case)','line_number':795,'multiline':False]
['text':' Note that originally this is could be interpreted as','line_number':796,'multiline':False]
['text':' integer in the full integer special case.','line_number':797,'multiline':False]
['text':' If the index is a singleton, the bounds check is done','line_number':800,'multiline':False]
['text':' before the broadcasting. This used to be different in <1.9','line_number':801,'multiline':False]
['text':' The index is a scalar. This used to be two fold, but if','line_number':806,'multiline':False]
['text':' fancy indexing was active, the check was done later,','line_number':807,'multiline':False]
['text':' possibly after broadcasting it away (1.7. or earlier).','line_number':808,'multiline':False]
['text':' Now it is always done.','line_number':809,'multiline':False]
['text':' NOTE: There could still have been a 0-sized Ellipsis','line_number':813,'multiline':False]
['text':' between them. Checked that with ellipsis_pos.','line_number':814,'multiline':False]
['text':' We have a fancy index that is not after an existing one.','line_number':817,'multiline':False]
['text':' NOTE: A 0-d array triggers this as well, while one may','line_number':818,'multiline':False]
['text':' expect it to not trigger it, since a scalar would not be','line_number':819,'multiline':False]
['text':' considered fancy indexing.','line_number':820,'multiline':False]
['text':' We have to flush the fancy indexes left','line_number':825,'multiline':False]
['text':' axis we are at','line_number':841,'multiline':False]
['text':' and now we need to transpose arr:','line_number':843,'multiline':False]
['text':' We only have one 'f' index now and arr is transposed accordingly.','line_number':846,'multiline':False]
['text':' Now handle newaxis by reshaping...','line_number':847,'multiline':False]
['text':' First of all, reshape arr to combine fancy axes into one:','line_number':853,'multiline':False]
['text':' Check if broadcasting works','line_number':862,'multiline':False]
['text':' unfortunately the indices might be out of bounds. So check','line_number':864,'multiline':False]
['text':' that first, and use mode='wrap' then. However only if','line_number':865,'multiline':False]
['text':' there are any indices...','line_number':866,'multiline':False]
['text':' Work around for a crash or IndexError with 'wrap'','line_number':877,'multiline':False]
['text':' in some 0-sized cases.','line_number':878,'multiline':False]
['text':' This happens with 0-sized orig_slice (sometimes?)','line_number':884,'multiline':False]
['text':' here it is a ValueError, but indexing gives a:','line_number':885,'multiline':False]
['text':' Maybe never happens...','line_number':890,'multiline':False]
['text':' too many dimensions, probably','line_number':896,'multiline':False]
['text':' If we are here, we have a 1D array for take:','line_number':901,'multiline':False]
['text':' Test item getting','line_number':917,'multiline':False]
['text':' Check if we got a view, unless its a 0-sized or 0-d array.','line_number':961,'multiline':False]
['text':' (then its not a view, and that does not matter)','line_number':962,'multiline':False]
['text':' Check reference count of the original array','line_number':965,'multiline':False]
['text':' refcount increases by one:','line_number':968,'multiline':False]
['text':' Test non-broadcast setitem:','line_number':973,'multiline':False]
['text':' nothing to compare here...','line_number':977,'multiline':False]
['text':' change indexed_arr in-place to manipulate original:','line_number':979,'multiline':False]
['text':' Use the fact that the array is originally an arange:','line_number':983,'multiline':False]
['text':' NOTE: This is different from normal broadcasting, as','line_number':992,'multiline':False]
['text':' arr[boolean_array] works like in a multi index. Which means','line_number':993,'multiline':False]
['text':' it is aligned to the left. This is probably correct for','line_number':994,'multiline':False]
['text':' consistency with arr[boolean_array,] also no broadcasting','line_number':995,'multiline':False]
['text':' is done at all','line_number':996,'multiline':False]
['text':' Automatically test combinations with complex indexes on 2nd (or 1st)','line_number':1002,'multiline':False]
['text':' spot and the simple ones in one other spot.','line_number':1003,'multiline':False]
['text':' This is so that np.array(True) is not accepted in a full integer','line_number':1005,'multiline':False]
['text':' index, when running the file separately.','line_number':1006,'multiline':False]
['text':' Check very simple item getting:','line_number':1026,'multiline':False]
['text':' Also check (simple cases of) too many indices:','line_number':1029,'multiline':False]
['text':' These should raise no errors.','line_number':1050,'multiline':False]
['text':' These should raise no errors.','line_number':1060,'multiline':False]
['text':' NumPy scalar sequence multiply should not work with non-integers','line_number':1084,'multiline':False]
['text':' following should be OK','line_number':1089,'multiline':False]
['text':' Using a boolean as integer argument/indexing is an error.','line_number':1101,'multiline':False]
['text':' Note that operator.index(np.array(True)) does not work, a boolean','line_number':1106,'multiline':False]
['text':' array is thus also deprecated, but not with the same message:','line_number':1107,'multiline':False]
['text':' assert_warns(DeprecationWarning, operator.index, np.True_)','line_number':1108,'multiline':False]
['text':' Weird boolean indexing things','line_number':1117,'multiline':False]
['text':' These used to either give the wrong error, or incorrectly give no','line_number':1124,'multiline':False]
['text':' error.','line_number':1125,'multiline':False]
['text':' This used to incorrectly work (and give an array of shape (0,))','line_number':1128,'multiline':False]
['text':' This used to incorrectly give a ValueError: operands could not be broadcast together','line_number':1133,'multiline':False]
['text':' This is the same as it used to be. The above two should work like this.','line_number':1138,'multiline':False]
['text':' This used to give ValueError: non-broadcastable operand','line_number':1143,'multiline':False]
['text':' so no exception is expected. The raising is effectively tested above.','line_number':1154,'multiline':False]
['text':' The following is valid','line_number':1189,'multiline':False]
['text':' (','line_number':1196,'multiline':False]
['text':'    reason=(','line_number':1197,'multiline':False]
['text':'        "torch currently consumes multiple ellipsis, no bother raising "','line_number':1198,'multiline':False]
['text':'        "here. See https://github.com/pytorch/pytorch/issues/59787#issue-917252204"','line_number':1199,'multiline':False]
['text':'    )','line_number':1200,'multiline':False]
['text':' )','line_number':1201,'multiline':False]
