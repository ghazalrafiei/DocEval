['text':' Owner(s): ["module: dynamo"]','line_number':1,'multiline':False]
['text':' If we are going to trace through these, we should use NumPy','line_number':34,'multiline':False]
['text':' If testing on eager mode, we use torch._numpy','line_number':35,'multiline':False]
['text':' assert_array_max_ulp, HAS_REFCOUNT, IS_WASM','line_number':46,'multiline':False]
['text':' assert_array_max_ulp, HAS_REFCOUNT, IS_WASM','line_number':58,'multiline':False]
['text':' See also gh-6740','line_number':102,'multiline':False]
['text':' check that non-array arguments to functions wrap them in arrays','line_number':117,'multiline':False]
['text':' (reason="TODO implement compress(...)")','line_number':132,'multiline':False]
['text':'    with warnings.catch_warnings(record=True) as w:','line_number':162,'multiline':False]
['text':'        warnings.filterwarnings('always', '', RuntimeWarning)','line_number':163,'multiline':False]
['text':'        assert_(w[0].category is RuntimeWarning)','line_number':166,'multiline':False]
['text':' (reason="scalar instances")','line_number':206,'multiline':False]
['text':' pytest.param(','line_number':232,'multiline':False]
['text':'    2**31 - 1, -1, marks=pytest.mark.xfail(reason="Out of range of int32")','line_number':233,'multiline':False]
['text':' ),','line_number':234,'multiline':False]
['text':' (reason="scalar instances")','line_number':249,'multiline':False]
['text':' (raises=AssertionError, reason="gh-15896")','line_number':263,'multiline':False]
['text':'  with warnings.catch_warnings(record=True) as w:','line_number':297,'multiline':False]
['text':'      warnings.filterwarnings('always', '', RuntimeWarning)','line_number':298,'multiline':False]
['text':'      assert_(w[0].category is RuntimeWarning)','line_number':301,'multiline':False]
['text':'  with warnings.catch_warnings(record=True) as w:','line_number':339,'multiline':False]
['text':'      warnings.filterwarnings('always', '', RuntimeWarning)','line_number':340,'multiline':False]
['text':'      assert_(w[0].category is RuntimeWarning)','line_number':343,'multiline':False]
['text':' (reason="TODO")','line_number':346,'multiline':False]
['text':' PEP 3141','line_number':356,'multiline':False]
['text':' offset for simd tests','line_number':403,'multiline':False]
['text':' check bad element in all positions','line_number':423,'multiline':False]
['text':' big array test for blocked libc loops','line_number':432,'multiline':False]
['text':' generate values for all permutation of 256bit simd vectors','line_number':495,'multiline':False]
['text':' offset for alignment test','line_number':537,'multiline':False]
['text':' check bool == 0x1','line_number':550,'multiline':False]
['text':' isnan on amd64 takes the same code path','line_number':555,'multiline':False]
['text':' offset for alignment test','line_number':563,'multiline':False]
['text':' check bool == 0x1','line_number':576,'multiline':False]
['text':' isnan on amd64 takes the same code path','line_number':581,'multiline':False]
['text':' (reason="TODO")','line_number':589,'multiline':False]
['text':' (reason="TODO")','line_number':648,'multiline':False]
['text':' Check that fpe exception is raised.','line_number':663,'multiline':False]
['text':'','line_number':664,'multiline':False]
['text':' Given a floating operation `flop` and two scalar values, check that','line_number':665,'multiline':False]
['text':' the operation raises the floating point exception specified by','line_number':666,'multiline':False]
['text':' `fpeerr`. Tests all variants with 0-d array scalars as well.','line_number':667,'multiline':False]
['text':' Test for all real and complex float types','line_number':674,'multiline':False]
['text':' Test basic arithmetic function errors','line_number':678,'multiline':False]
['text':' Get some extreme values for the type','line_number':681,'multiline':False]
['text':' 'c', complex, corresponding real dtype','line_number':689,'multiline':False]
['text':' The complex types raise different exceptions','line_number':695,'multiline':False]
['text':' The value of tiny for double double is NaN, so we need to','line_number':701,'multiline':False]
['text':' pass the assert','line_number':702,'multiline':False]
['text':' test warning code path','line_number':726,'multiline':False]
['text':' tests that the scalars get coerced correctly.','line_number':745,'multiline':False]
['text':' coercion within the same kind','line_number':752,'multiline':False]
['text':' coercion between kinds','line_number':759,'multiline':False]
['text':' coercion between scalars and 1-D arrays','line_number':769,'multiline':False]
['text':' coercion between scalars and 1-D arrays, where','line_number':778,'multiline':False]
['text':' the scalar has greater kind than the array','line_number':779,'multiline':False]
['text':' these are failing because of the "scalars do not upcast arrays" rule','line_number':785,'multiline':False]
['text':' Two first tests (i32 + f32 -> f64, and i64+f32 -> f64) xfail','line_number':786,'multiline':False]
['text':' until ufuncs implement the proper type promotion (ufunc loops?)','line_number':787,'multiline':False]
['text':' float and complex are treated as the same "kind" for','line_number':800,'multiline':False]
['text':' the purposes of array-scalar promotion, so that you can do','line_number':801,'multiline':False]
['text':' (0j + float32array) to get a complex64 array instead of','line_number':802,'multiline':False]
['text':' a complex128 array.','line_number':803,'multiline':False]
['text':' Use-case: float/complex scalar * bool/int8 array','line_number':812,'multiline':False]
['text':'           shouldn't narrow the float/complex type','line_number':813,'multiline':False]
['text':' The following use-case is problematic, and to resolve its','line_number':831,'multiline':False]
['text':' tricky side-effects requires more changes.','line_number':832,'multiline':False]
['text':'','line_number':833,'multiline':False]
['text':' Use-case: (1-t)*a, where 't' is a boolean array and 'a' is','line_number':834,'multiline':False]
['text':'            a float32, shouldn't promote to float64','line_number':835,'multiline':False]
['text':'','line_number':836,'multiline':False]
['text':' a = np.array([1.0, 1.5], dtype=np.float32)','line_number':837,'multiline':False]
['text':' t = np.array([True, False])','line_number':838,'multiline':False]
['text':' b = t*a','line_number':839,'multiline':False]
['text':' assert_equal(b, [1.0, 0.0])','line_number':840,'multiline':False]
['text':' assert_equal(b.dtype, np.dtype('f4'))','line_number':841,'multiline':False]
['text':' b = (1-t)*a','line_number':842,'multiline':False]
['text':' assert_equal(b, [0.0, 1.5])','line_number':843,'multiline':False]
['text':' assert_equal(b.dtype, np.dtype('f4'))','line_number':844,'multiline':False]
['text':'','line_number':845,'multiline':False]
['text':' Probably ~t (bitwise negation) is more proper to use here,','line_number':846,'multiline':False]
['text':' but this is arguably less intuitive to understand at a glance, and','line_number':847,'multiline':False]
['text':' would fail if 't' is actually an integer array instead of boolean:','line_number':848,'multiline':False]
['text':'','line_number':849,'multiline':False]
['text':' b = (~t)*a','line_number':850,'multiline':False]
['text':' assert_equal(b, [0.0, 1.5])','line_number':851,'multiline':False]
['text':' assert_equal(b.dtype, np.dtype('f4'))','line_number':852,'multiline':False]
['text':' (reason="'Scalars do not upcast arrays' rule")','line_number':854,'multiline':False]
['text':' promote_types should always return native-endian types','line_number':870,'multiline':False]
['text':' Also test keyword arguments','line_number':902,'multiline':False]
['text':' (reason="value-based casting?")','line_number':905,'multiline':False]
['text':' gh-5917','line_number':907,'multiline':False]
['text':' Custom exception class to test exception propagation in fromiter','line_number':921,'multiline':False]
['text':' (reason="TODO")','line_number':927,'multiline':False]
['text':' Utility method for the issue 2592 tests.','line_number':957,'multiline':False]
['text':' Raise an exception at the desired index in the iterator.','line_number':958,'multiline':False]
['text':' Test iteration exceptions are correctly raised. The data/generator','line_number':967,'multiline':False]
['text':' has `count` elements but errors at `error_index`','line_number':968,'multiline':False]
['text':' actual iterator is empty.','line_number':980,'multiline':False]
['text':' The following manages to hit somewhat trickier code paths:','line_number':995,'multiline':False]
['text':' numpy returns a python int, we return a 0D array','line_number':1023,'multiline':False]
['text':' numpy returns a python int, we return a 0D array','line_number':1034,'multiline':False]
['text':' numpy returns a python int, we return a 0D array','line_number':1044,'multiline':False]
['text':' test special sparse condition boolean code path','line_number':1064,'multiline':False]
['text':' Basic check of functionality','line_number':1079,'multiline':False]
['text':' More thorough test that the axis argument is respected','line_number':1097,'multiline':False]
['text':' for all dtypes and responds correctly when presented with','line_number':1098,'multiline':False]
['text':' either integer or tuple arguments for axis','line_number':1099,'multiline':False]
['text':' (reason="TODO")','line_number':1153,'multiline':False]
['text':' see gh-8670','line_number':1175,'multiline':False]
['text':' Ensure that the example in the issue does not','line_number':1177,'multiline':False]
['text':' break before proceeding to a more thorough test.','line_number':1178,'multiline':False]
['text':' See gh-14289.','line_number':1187,'multiline':False]
['text':' (reason="TODO")','line_number':1191,'multiline':False]
['text':' Test array_equal with equal_nan kwarg','line_number':1230,'multiline':False]
['text':' equal_nan=False by default','line_number':1235,'multiline':False]
['text':' nan's not conflated with inf's','line_number':1239,'multiline':False]
['text':' 0-D arrays','line_number':1241,'multiline':False]
['text':' Non-float dtype - equal_nan should have no effect','line_number':1245,'multiline':False]
['text':' Multi-dimensional array','line_number':1249,'multiline':False]
['text':' Complex values','line_number':1253,'multiline':False]
['text':' use slow-clip','line_number':1316,'multiline':False]
['text':' Handy functions','line_number':1320,'multiline':False]
['text':' Now the real test cases','line_number':1350,'multiline':False]
['text':' for preservation of behavior described in','line_number':1354,'multiline':False]
['text':' gh-12519; amin > amax behavior may still change','line_number':1355,'multiline':False]
['text':' in the future','line_number':1356,'multiline':False]
['text':' FIXME: make xfail','line_number':1365,'multiline':False]
['text':' for preservation of behavior described in','line_number':1367,'multiline':False]
['text':' gh-12519; amin > amax behavior may still change','line_number':1368,'multiline':False]
['text':' in the future','line_number':1369,'multiline':False]
['text':' Test native double input with scalar min/max.','line_number':1376,'multiline':False]
['text':' Test native int input with scalar min/max.','line_number':1385,'multiline':False]
['text':' Test native double input with array min/max.','line_number':1395,'multiline':False]
['text':' (reason="byteorder not supported in torch")','line_number':1403,'multiline':False]
['text':' Test non native double input with scalar min/max.','line_number':1405,'multiline':False]
['text':' Test native double input with non native double scalar min/max.','line_number':1406,'multiline':False]
['text':' Test native double input with non native double scalar min/max.','line_number':1414,'multiline':False]
['text':' (reason="clamp not supported for complex")','line_number':1423,'multiline':False]
['text':' Test native complex input with native double scalar min/max.','line_number':1425,'multiline':False]
['text':' Test native input with complex double scalar min/max.','line_number':1426,'multiline':False]
['text':' Test native input with complex double scalar min/max.','line_number':1434,'multiline':False]
['text':' (reason="clamp not supported for complex")','line_number':1442,'multiline':False]
['text':' Address Issue gh-5354 for clipping complex arrays','line_number':1444,'multiline':False]
['text':' Test native complex input without explicit min/max','line_number':1445,'multiline':False]
['text':' ie, either min=None or max=None','line_number':1446,'multiline':False]
['text':' Test clip for non contiguous native input and native scalar min/max.','line_number':1456,'multiline':False]
['text':' Test native double input with scalar min/max.','line_number':1466,'multiline':False]
['text':'   @xpassIfTorchDynamo  # (reason="casting not supported")','line_number':1476,'multiline':False]
['text':' Test native int32 input with double min/max and int32 out.','line_number':1485,'multiline':False]
['text':' explicitly passing "unsafe" will silence warning','line_number':1492,'multiline':False]
['text':' Test native int32 input with int32 scalar min/max and int64 out.','line_number':1498,'multiline':False]
['text':' (reason="FIXME arrays not equal")','line_number':1508,'multiline':False]
['text':' Test native int32 input with double array min/max and int32 out.','line_number':1510,'multiline':False]
['text':' (reason="FIXME arrays not equal")','line_number':1519,'multiline':False]
['text':' Test native double input with scalar min/max and int out.','line_number':1521,'multiline':False]
['text':' Test native double input with array min/max in-place.','line_number':1531,'multiline':False]
['text':' Test native double input with scalar min/max in-place.','line_number':1541,'multiline':False]
['text':' Test non contiguous double input with double scalar min/max in-place.','line_number':1551,'multiline':False]
['text':' Test native double input with scalar min/max.','line_number':1564,'multiline':False]
['text':' Test native int32 input with int32 scalar min/max.','line_number':1573,'multiline':False]
['text':' Test native int32 input with float64 scalar min/max.','line_number':1583,'multiline':False]
['text':' Test native int32 input with float32 scalar min/max.','line_number':1592,'multiline':False]
['text':' Test native int32 with double arrays min/max.','line_number':1601,'multiline':False]
['text':' (reason="newbyteorder not supported")','line_number':1609,'multiline':False]
['text':' Test native with NON native scalar min/max.','line_number':1611,'multiline':False]
['text':' (reason="newbyteorder not supported")','line_number':1620,'multiline':False]
['text':' Test NON native with native array min/max.','line_number':1622,'multiline':False]
['text':' (reason="newbyteorder not supported")','line_number':1632,'multiline':False]
['text':' Test NON native with native scalar min/max.','line_number':1634,'multiline':False]
['text':' (reason="newbyteorder not supported")','line_number':1644,'multiline':False]
['text':' Test native with NON native array min/max.','line_number':1646,'multiline':False]
['text':' Test native int32 with float min/max and float out for output argument.','line_number':1657,'multiline':False]
['text':' (reason="newbyteorder not supported")','line_number':1666,'multiline':False]
['text':' Test non native with native scalar, min/max, out non native','line_number':1668,'multiline':False]
['text':' Test native int32 input and min/max and float out','line_number':1680,'multiline':False]
['text':' Test native double input with scalar min/max','line_number':1690,'multiline':False]
['text':' (reason="FIXME arrays not equal")','line_number':1700,'multiline':False]
['text':' Test native int32 input with double min/max and int32 out','line_number':1702,'multiline':False]
['text':' Test native int32 input with int32 scalar min/max and int64 out','line_number':1712,'multiline':False]
['text':' (reason="FIXME arrays not equal")','line_number':1722,'multiline':False]
['text':' Test native int32 input with double array min/max and int32 out','line_number':1724,'multiline':False]
['text':' (reason="FIXME arrays not equal")','line_number':1733,'multiline':False]
['text':' Test native double input with scalar min/max and int out','line_number':1735,'multiline':False]
['text':' Test that the out argument works when transposed','line_number':1745,'multiline':False]
['text':' Test that the out argument works when it has memory overlap','line_number':1753,'multiline':False]
['text':' Test native double input with array min/max','line_number':1761,'multiline':False]
['text':' Test native double input with scalar min/max','line_number':1771,'multiline':False]
['text':' Ensure that the clip() function takes an out=argument.','line_number':1781,'multiline':False]
['text':' two scalars','line_number':1808,'multiline':False]
['text':' mix scalar and array','line_number':1810,'multiline':False]
['text':' two arrays','line_number':1812,'multiline':False]
['text':' requirement from ufunc_docstrings.py','line_number':1818,'multiline':False]
['text':' problematic scalar nan case from hypothesis','line_number':1826,'multiline':False]
['text':' enforcement of scalar nan propagation for comparisons','line_number':1835,'multiline':False]
['text':' called through clip()','line_number':1836,'multiline':False]
['text':' hypothesis hynp.from_dtype fails on CI (versions?)','line_number':1841,'multiline':False]
['text':' Generate shapes for the bounds which can be broadcast with each other','line_number':1866,'multiline':False]
['text':' and with the base shape.  Below, we might decide to use scalar bounds,','line_number':1867,'multiline':False]
['text':' but it's clearer to generate these shapes unconditionally in advance.','line_number':1868,'multiline':False]
['text':' Scalar `nan` is deprecated due to the differing behaviour it shows.','line_number':1872,'multiline':False]
['text':' Then calculate our result and expected result and check that they're','line_number':1887,'multiline':False]
['text':' equal!  See gh-12519 and gh-19457 for discussion deciding on this','line_number':1888,'multiline':False]
['text':' property and the result_type argument.','line_number':1889,'multiline':False]
['text':' Parametric test factory.','line_number':1908,'multiline':False]
['text':' Parametric test factory.','line_number':1930,'multiline':False]
['text':' Could make problems because of abs(min_int) == min_int','line_number':1960,'multiline':False]
['text':' scalars vs 0D','line_number':2062,'multiline':False]
['text':' GH7014, when two scalars are compared the output should also be a','line_number':2074,'multiline':False]
['text':' scalar','line_number':2075,'multiline':False]
['text':' XXX: test modified since there are array scalars','line_number':2076,'multiline':False]
['text':' Test ones, zeros, empty and full.','line_number':2137,'multiline':False]
['text':' dtypes = {np.dtype(tp) for tp in itertools.chain(*np.sctypes.values())}','line_number':2140,'multiline':False]
['text':' XXX: reeenable when implemented, 'F': 'f_contiguous'}','line_number':2145,'multiline':False]
['text':' Make sure we have an object for reference','line_number':2182,'multiline':False]
['text':' FIXME: make xfail','line_number':2195,'multiline':False]
['text':' Array scalars','line_number':2202,'multiline':False]
['text':' 1D arrays','line_number':2205,'multiline':False]
['text':' 2D C-layout arrays','line_number':2208,'multiline':False]
['text':' 2D F-layout arrays','line_number':2211,'multiline':False]
['text':' 3D C-layout arrays','line_number':2214,'multiline':False]
['text':' 3D F-layout arrays','line_number':2217,'multiline':False]
['text':' 3D non-C/F-layout arrays','line_number':2220,'multiline':False]
['text':' Conversion is close to what np.full_like uses','line_number':2241,'multiline':False]
['text':' but we  may want to convert directly in the future','line_number':2242,'multiline':False]
['text':' which may result in errors (where this does not).','line_number':2243,'multiline':False]
['text':' default (K) order, dtype','line_number':2255,'multiline':False]
['text':' C order, default dtype','line_number':2270,'multiline':False]
['text':' F order, default dtype','line_number':2280,'multiline':False]
['text':' A order','line_number':2290,'multiline':False]
['text':' Test the 'shape' parameter','line_number':2303,'multiline':False]
['text':' Inf to integer casts cause invalid-value errors: ignore them.','line_number':2351,'multiline':False]
['text':' Regression test for gh-19860','line_number':2357,'multiline':False]
['text':' Ensure b is not contiguous.','line_number':2359,'multiline':False]
['text':' dtype is bytes','line_number':2365,'multiline':False]
['text':' integer mode','line_number':2427,'multiline':False]
['text':' illegal arguments','line_number':2431,'multiline':False]
['text':' integer mode','line_number':2457,'multiline':False]
['text':' illegal arguments','line_number':2461,'multiline':False]
['text':' get an nd array with multiple elements in every dimension','line_number':2485,'multiline':False]
['text':' none','line_number':2488,'multiline':False]
['text':' only one','line_number':2492,'multiline':False]
['text':' all but one','line_number':2497,'multiline':False]
['text':' all','line_number':2502,'multiline':False]
['text':' (reason="TODO")','line_number':2514,'multiline':False]
['text':' Roll multiple axes at once.','line_number':2546,'multiline':False]
['text':' Roll the same axis multiple times.','line_number':2568,'multiline':False]
['text':' Roll more than one turn in either direction.','line_number':2575,'multiline':False]
['text':' expected shape indexed by (axis, start) for array of','line_number':2588,'multiline':False]
['text':' shape (1, 2, 3, 4)','line_number':2589,'multiline':False]
['text':' XXX: ndarray.attributes','line_number':2620,'multiline':False]
['text':' positive axis, positive start','line_number':2626,'multiline':False]
['text':' negative axis, positive start','line_number':2633,'multiline':False]
['text':' positive axis, negative start','line_number':2641,'multiline':False]
['text':' negative axis, negative start','line_number':2649,'multiline':False]
['text':' 'source.*out of bounds',','line_number':2708,'multiline':False]
['text':' 'source.*out of bounds',','line_number':2709,'multiline':False]
['text':' 'destination.*out of bounds',','line_number':2711,'multiline':False]
['text':' 'repeated axis in `source`',','line_number':2714,'multiline':False]
['text':' 'repeated axis in `destination`',','line_number':2717,'multiline':False]
['text':' 'must have the same number',','line_number':2724,'multiline':False]
['text':' 'must have the same number',','line_number':2731,'multiline':False]
['text':' Ticket #2624 (Trac #2032)','line_number':2773,'multiline':False]
['text':' gh-5885','line_number':2816,'multiline':False]
['text':' regression test for gh-19138','line_number':2823,'multiline':False]
['text':' (reason="TODO")','line_number':2878,'multiline':False]
['text':' a further call to np.require ought to return the same array','line_number':2913,'multiline':False]
['text':' unless OWNDATA is specified.','line_number':2914,'multiline':False]
['text':' (reason="TODO")','line_number':2945,'multiline':False]
['text':' gh-5881','line_number':2948,'multiline':False]
['text':' gh-6899','line_number':2971,'multiline':False]
['text':' gh-13455','line_number':2991,'multiline':False]
['text':' noqa: PIE804','line_number':2994,'multiline':False]
['text':' noqa: PIE804','line_number':3001,'multiline':False]
['text':' Test resolution to issue #5663','line_number':3014,'multiline':False]
['text':' Test resolution to issue #5663','line_number':3021,'multiline':False]
['text':' gh-12130','line_number':3028,'multiline':False]
['text':' contracting no axes is well defined','line_number':3032,'multiline':False]
