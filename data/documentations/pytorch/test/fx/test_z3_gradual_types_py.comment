['text':' Owner(s): ["module: fx"]','line_number':1,'multiline':False]
['text':' type: ignore[import]','line_number':19,'multiline':False]
['text':' print(s.model()[dim])','line_number':69,'multiline':False]
['text':' The node we are considering is the gt node','line_number':86,'multiline':False]
['text':' The node we are considering is the gt node','line_number':116,'multiline':False]
['text':' since x and y are equal, the requirement that x != y cannot be true, so we should get unsat','line_number':121,'multiline':False]
['text':' for the positive condition and sat for the negative condition','line_number':122,'multiline':False]
['text':' change the annotation to Dyn','line_number':200,'multiline':False]
['text':' print(symbolic_traced)','line_number':218,'multiline':False]
['text':' the second dimension of the result should not be affected since','line_number':226,'multiline':False]
['text':' the index is 0','line_number':227,'multiline':False]
['text':' we set the vector to Dyn','line_number':232,'multiline':False]
['text':' this implies that the index at 0 should be dyn','line_number':240,'multiline':False]
['text':' change the annotation on the input to Dyn.','line_number':282,'multiline':False]
['text':' the last dimension should still be 4','line_number':283,'multiline':False]
['text':' change the annotation on the input to make sure it propagates','line_number':317,'multiline':False]
['text':' to the output','line_number':318,'multiline':False]
['text':' dyn check','line_number':327,'multiline':False]
['text':' make the output a size 1 tensor which should result','line_number':392,'multiline':False]
['text':' in the migration of the input','line_number':393,'multiline':False]
['text':' input shape = output shape','line_number':401,'multiline':False]
['text':' change annotation to the wrong shape','line_number':404,'multiline':False]
['text':' fix the annotation','line_number':415,'multiline':False]
['text':' make the output a size 1 tensor which should result','line_number':445,'multiline':False]
['text':' in the migration of the input','line_number':446,'multiline':False]
['text':' input shape = output shape','line_number':454,'multiline':False]
['text':' migrate one of the parameters to a fully static shape so we can compare','line_number':472,'multiline':False]
['text':' change the annotations','line_number':506,'multiline':False]
['text':' resulting type should be TensorType([2, 2])','line_number':513,'multiline':False]
['text':' force the second dimension to be Dyn','line_number':519,'multiline':False]
['text':' output should still be TensorType([2, 2])','line_number':520,'multiline':False]
['text':' should be unsat since the index is not valid for this annotation','line_number':541,'multiline':False]
['text':' modify the annotation to Dyn which should give sat','line_number':544,'multiline':False]
['text':' # modify the annotation to the right tensor size','line_number':554,'multiline':False]
['text':' verify that the input is equal to the output','line_number':559,'multiline':False]
['text':' confirm the output matches the expected tensor','line_number':567,'multiline':False]
['text':' confirm the output is not dyn','line_number':574,'multiline':False]
['text':' should be unsat since the index is not valid for this annotation','line_number':592,'multiline':False]
['text':' modify the annotation to Dyn which should give sat','line_number':595,'multiline':False]
['text':' change the annotation to Dyn. This will migrate to an arbitrary type','line_number':625,'multiline':False]
['text':' change the type. This should still be satisfiable','line_number':727,'multiline':False]
['text':' change the type to Dyn. Here, we will get an arbitrary migration','line_number':740,'multiline':False]
['text':' migrate the third dimension','line_number':788,'multiline':False]
['text':' check if the item we got is the right one','line_number':795,'multiline':False]
['text':' force the input to be of size 4','line_number':818,'multiline':False]
['text':' check if the model is still SAT','line_number':827,'multiline':False]
['text':' check that the item is correct','line_number':832,'multiline':False]
['text':' invalid index but should still be SAT because input will be Dyn','line_number':835,'multiline':False]
['text':' print(B)','line_number':869,'multiline':False]
['text':' print(traced)','line_number':875,'multiline':False]
['text':' print(s.model())','line_number':881,'multiline':False]
['text':' note that the view output will be: tensor3(dim(0, 0), dim(1, 4), dim(1, 1024))','line_number':885,'multiline':False]
['text':' this is due to the reshape constraints. This can be lifted','line_number':886,'multiline':False]
['text':' but would require revising the type rules accordingly so we leave it for now','line_number':887,'multiline':False]
['text':' The node we are considering is the gt node','line_number':956,'multiline':False]
['text':' The node we are considering is the gt node','line_number':993,'multiline':False]
['text':' change the annotation to Dyn','line_number':1002,'multiline':False]
['text':' here, both should be SAT since the input is Dyn','line_number':1007,'multiline':False]
['text':' change the annotation to TensorType[Dyn, Dyn]','line_number':1014,'multiline':False]
['text':' here, both should be SAT as well','line_number':1019,'multiline':False]
['text':' The node we are considering is the gt node','line_number':1053,'multiline':False]
['text':' print(B.shape)','line_number':1077,'multiline':False]
['text':' print(symbolic_traced)','line_number':1080,'multiline':False]
['text':' change the annotation to Dyn. This will migrate to an arbitrary type','line_number':1089,'multiline':False]
['text':'        4,1','line_number':1171,'multiline':False]
['text':' 1, 2, 4, 8','line_number':1172,'multiline':False]
['text':' first dimension could be anything because we have broadcasting','line_number':1204,'multiline':False]
['text':' print(solver.model())','line_number':1303,'multiline':False]
['text':' print(type(solver.model()[s1]))','line_number':1304,'multiline':False]
['text':' assert solver.check() == sat','line_number':1317,'multiline':False]
['text':' solver.add(s11 == 1)','line_number':1318,'multiline':False]
['text':' solver.add(s22 == 1)','line_number':1319,'multiline':False]
['text':' solver.add(s33 == 1)','line_number':1320,'multiline':False]
['text':' solver.add(s44 == 1)','line_number':1321,'multiline':False]
['text':'','line_number':1322,'multiline':False]
['text':' print(solver.check())','line_number':1323,'multiline':False]
['text':' print(solver.model())','line_number':1324,'multiline':False]
['text':' print(solver.model())','line_number':1356,'multiline':False]
['text':' make the tensor be of size 1','line_number':1479,'multiline':False]
['text':' tensor[1]','line_number':1488,'multiline':False]
['text':' tensor[2]','line_number':1489,'multiline':False]
['text':' make the tensor be of size 1','line_number':1504,'multiline':False]
['text':' tensor[4]','line_number':1511,'multiline':False]
['text':' tensor[5]','line_number':1512,'multiline':False]
['text':' print(s.model())','line_number':1552,'multiline':False]
['text':' print(s.model())','line_number':1570,'multiline':False]
['text':' print(s.model())','line_number':1583,'multiline':False]
['text':' print(s.model())','line_number':1590,'multiline':False]
['text':' prevent broadcasting for that dimension','line_number':1592,'multiline':False]
['text':' the second dimension of the result is a number, not Dyn.','line_number':1597,'multiline':False]
['text':' however if the first input dimension had been 1, we would','line_number':1598,'multiline':False]
['text':' have had dyn in the result, as seen in the next test case','line_number':1599,'multiline':False]
['text':' print(transformed)','line_number':1617,'multiline':False]
['text':' print(s.model())','line_number':1629,'multiline':False]
['text':' print(solver.model())','line_number':1846,'multiline':False]
['text':' print(transformed)','line_number':1921,'multiline':False]
['text':' print(module.forward(torch.rand(2,3,5)).shape)','line_number':2096,'multiline':False]
['text':' def test_apply_broadcasting(self):','line_number':2166,'multiline':False]
['text':'     c1 = ApplyBroadcasting(TVar(1), TVar(2), TVar(3), TVar(4))','line_number':2167,'multiline':False]
['text':'     transformed, count = transform_apply_broadcasting(c1, 5)','line_number':2168,'multiline':False]
['text':'     assert len(transformed.conjucts) == 41','line_number':2169,'multiline':False]
['text':' input with 3 dimensions','line_number':2183,'multiline':False]
['text':' print(symbolic_traced)','line_number':2250,'multiline':False]
