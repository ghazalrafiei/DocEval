['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':49,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':55,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':61,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':67,'multiline':False]
['text':' this is broken','line_number':76,'multiline':False]
['text':'{
    constexpr int16_t ref16 = 1337;
    at::Half k_;
    at::Half* k = &k_;
    *reinterpret_cast<int16_t*>(k) = ref16;
    auto a = HalfImm::make(*k);
    auto b = BitCast::make(kShort, a);
    SimpleIRExprEval cg(b);
    ASSERT_EQ(cg.value<int16_t>(), ref16);
  }','line_number':77,'multiline':True]
['text':' This segfaults :(','line_number':120,'multiline':False]
['text':'{
    VarHandle x("x", kDouble);
    ASSERT_ANY_THROW(ExprHandle y = bitcast<int32_t>(x));
  }
  {
    VarHandle x("x", kFloat);
    ASSERT_ANY_THROW(ExprHandle y = bitcast<int64_t>(x));
  }
  {
    VarHandle x("x", kLong);
    ASSERT_ANY_THROW(ExprHandle y = bitcast<float>(x));
  }
  {
    VarHandle x("x", kShort);
    ASSERT_ANY_THROW(ExprHandle y = bitcast<float>(x));
  }
  {
    VarHandle x("x", kInt);
    ASSERT_ANY_THROW(ExprHandle y = bitcast<at::Half>(x));
  }','line_number':121,'multiline':True]
['text':' Same types:','line_number':144,'multiline':False]
['text':' Int to bigger int:','line_number':152,'multiline':False]
['text':' Float to bigger float:','line_number':160,'multiline':False]
['text':' Int to Float:','line_number':168,'multiline':False]
['text':' Smaller float, bigger Int:','line_number':176,'multiline':False]
['text':' Bigger float, smaller Int:','line_number':184,'multiline':False]
['text':' Sign change char/byte upgrades to short:','line_number':192,'multiline':False]
['text':' namespace jit','line_number':201,'multiline':False]
['text':' namespace torch','line_number':202,'multiline':False]
