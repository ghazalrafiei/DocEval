['text':' Construct Stmt:','line_number':25,'multiline':False]
['text':' {','line_number':26,'multiline':False]
['text':'   for (int i = 0; i < 32; i++) {','line_number':27,'multiline':False]
['text':'     a[i] = 0;','line_number':28,'multiline':False]
['text':'     for (int j = 0; j < 32; j++) {','line_number':29,'multiline':False]
['text':'       a[i] = (a[i]) + (b[i, j]);','line_number':30,'multiline':False]
['text':'     }','line_number':31,'multiline':False]
['text':'   }','line_number':32,'multiline':False]
['text':' }','line_number':33,'multiline':False]
['text':' Construct Stmt:','line_number':53,'multiline':False]
['text':' {','line_number':54,'multiline':False]
['text':'   for (int i = 0; i < 32; i++) {','line_number':55,'multiline':False]
['text':'     if (i<10 ? 1 : 0) {','line_number':56,'multiline':False]
['text':'       a[i] = i + i;','line_number':57,'multiline':False]
['text':'       b[i] = i * i;','line_number':58,'multiline':False]
['text':'     }','line_number':59,'multiline':False]
['text':'   }','line_number':60,'multiline':False]
['text':'   for (int i = 0; i < 32; i++) {','line_number':61,'multiline':False]
['text':'     if (i>10 ? 1 : 0) {','line_number':62,'multiline':False]
['text':'       a[i] = i * i;','line_number':63,'multiline':False]
['text':'       b[i] = i + i;','line_number':64,'multiline':False]
['text':'     }','line_number':65,'multiline':False]
['text':'   }','line_number':66,'multiline':False]
['text':' }','line_number':67,'multiline':False]
['text':' Constructed stmt:','line_number':122,'multiline':False]
['text':' Intermediate buffers and their liveness ranges: gemm [0, 1], relu [1, 2],','line_number':123,'multiline':False]
['text':' E [2, 3]. The dimensions of 'gemm' and 'E' are the same but their types are','line_number':124,'multiline':False]
['text':' different: 'E' type quint8 < 'gemm' type float. We'll reuse 'gemm' for 'E'','line_number':125,'multiline':False]
['text':' with typecasting.','line_number':126,'multiline':False]
['text':'{','line_number':127,'multiline':False]
['text':'  for (int i = 0; i < 4; i++) {','line_number':128,'multiline':False]
['text':'    for (int i_1 = 0; i_1 < 4; i_1++) {','line_number':129,'multiline':False]
['text':'      gemm[i, i_1] = float(0);','line_number':130,'multiline':False]
['text':'      for (int i_2 = 0; i_2 < 4; i_2++) {','line_number':131,'multiline':False]
['text':'        gemm[i, i_1] = ReduceOp((gemm[i, i_1]) + (A[i, i_2]) * (B[i_2,','line_number':132,'multiline':False]
['text':'        i_1]), reduce_args={i_2});','line_number':133,'multiline':False]
['text':'      }','line_number':134,'multiline':False]
['text':'    }','line_number':135,'multiline':False]
['text':'  }','line_number':136,'multiline':False]
['text':'  for (int i_3 = 0; i_3 < 4; i_3++) {','line_number':137,'multiline':False]
['text':'    for (int i_4 = 0; i_4 < 4; i_4++) {','line_number':138,'multiline':False]
['text':'      relu[i_3, i_4] = (gemm[i_3, i_4])<0.f ? 0.f : (gemm[i_3, i_4]);','line_number':139,'multiline':False]
['text':'    }','line_number':140,'multiline':False]
['text':'  }','line_number':141,'multiline':False]
['text':'  for (int i_5 = 0; i_5 < 4; i_5++) {','line_number':142,'multiline':False]
['text':'    for (int i_6 = 0; i_6 < 4; i_6++) {','line_number':143,'multiline':False]
['text':'      E[i_5, i_6] = quint8((relu[i_5, i_6]) + (relu[i_5, i_6]));','line_number':144,'multiline':False]
['text':'    }','line_number':145,'multiline':False]
['text':'  }','line_number':146,'multiline':False]
['text':'  for (int i_7 = 0; i_7 < 4; i_7++) {','line_number':147,'multiline':False]
['text':'    for (int i_8 = 0; i_8 < 4; i_8++) {','line_number':148,'multiline':False]
['text':'      F[i_7, i_8] = E[i_7, i_8];','line_number':149,'multiline':False]
['text':'    }','line_number':150,'multiline':False]
['text':'  }','line_number':151,'multiline':False]
['text':'}','line_number':152,'multiline':False]
['text':' dtype=float, dims=[4, 4]','line_number':159,'multiline':False]
['text':' dtype=float, dims=[4, 4]','line_number':160,'multiline':False]
['text':' dtype=float, dims=[4, 4]','line_number':188,'multiline':False]
['text':' dtype=float, dims=[4, 4]','line_number':189,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':196,'multiline':False]
['text':' Constructed stmt:','line_number':234,'multiline':False]
['text':' Intermediate buffers and their liveness ranges: gemm [0, 1], relu [1, 2],','line_number':235,'multiline':False]
['text':' E [2, 3]. The dimensions of 'gemm' and 'E' are the same but their types are','line_number':236,'multiline':False]
['text':' different: 'E' type float > 'gemm' type int16. We won't reuse 'gemm' for','line_number':237,'multiline':False]
['text':' 'E'.','line_number':238,'multiline':False]
['text':'{','line_number':239,'multiline':False]
['text':'  for (int i = 0; i < 4; i++) {','line_number':240,'multiline':False]
['text':'    for (int i_1 = 0; i_1 < 4; i_1++) {','line_number':241,'multiline':False]
['text':'      gemm[i, i_1] = int16_t(0);','line_number':242,'multiline':False]
['text':'      for (int i_2 = 0; i_2 < 4; i_2++) {','line_number':243,'multiline':False]
['text':'        gemm[i, i_1] = ReduceOp((gemm[i, i_1]) + (A[i, i_2]) * (B[i_2,','line_number':244,'multiline':False]
['text':'        i_1]), reduce_args={i_2});','line_number':245,'multiline':False]
['text':'      }','line_number':246,'multiline':False]
['text':'    }','line_number':247,'multiline':False]
['text':'  }','line_number':248,'multiline':False]
['text':'  for (int i_3 = 0; i_3 < 4; i_3++) {','line_number':249,'multiline':False]
['text':'    for (int i_4 = 0; i_4 < 4; i_4++) {','line_number':250,'multiline':False]
['text':'      relu[i_3, i_4] = (gemm[i_3, i_4])<int16_t(0) ? int16_t(0) : (gemm[i_3,','line_number':251,'multiline':False]
['text':'      i_4]);','line_number':252,'multiline':False]
['text':'    }','line_number':253,'multiline':False]
['text':'  }','line_number':254,'multiline':False]
['text':'  for (int i_5 = 0; i_5 < 4; i_5++) {','line_number':255,'multiline':False]
['text':'    for (int i_6 = 0; i_6 < 4; i_6++) {','line_number':256,'multiline':False]
['text':'      E[i_5, i_6] = float((relu[i_5, i_6]) + (relu[i_5, i_6]));','line_number':257,'multiline':False]
['text':'    }','line_number':258,'multiline':False]
['text':'  }','line_number':259,'multiline':False]
['text':'  for (int i_7 = 0; i_7 < 4; i_7++) {','line_number':260,'multiline':False]
['text':'    for (int i_8 = 0; i_8 < 4; i_8++) {','line_number':261,'multiline':False]
['text':'      F[i_7, i_8] = E[i_7, i_8];','line_number':262,'multiline':False]
['text':'    }','line_number':263,'multiline':False]
['text':'  }','line_number':264,'multiline':False]
['text':'}','line_number':265,'multiline':False]
['text':' dtype=int16_t, dims=[4, 4]','line_number':272,'multiline':False]
['text':' dtype=int16_t, dims=[4, 4]','line_number':273,'multiline':False]
['text':' dtype=float, dims=[4, 4]','line_number':274,'multiline':False]
['text':' dtype=int16_t, dims=[4, 4]','line_number':302,'multiline':False]
['text':' dtype=int16_t, dims=[4, 4]','line_number':303,'multiline':False]
['text':' dtype=float, dims=[4, 4]','line_number':304,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':311,'multiline':False]
['text':' Constructed stmt:','line_number':348,'multiline':False]
['text':' Intermediate buffers and their liveness ranges: gemm [0, 1], relu [1, 2],','line_number':349,'multiline':False]
['text':' add [2, 3] Buffer 'gemm' and 'add' are the same size; we'll reuse 'gemm'','line_number':350,'multiline':False]
['text':' for 'add'.','line_number':351,'multiline':False]
['text':'{','line_number':352,'multiline':False]
['text':'  for (int M = 0; M < 1024; M++) {','line_number':353,'multiline':False]
['text':'    for (int N = 0; N < 1024; N++) {','line_number':354,'multiline':False]
['text':'      gemm[M, N] = float(0);','line_number':355,'multiline':False]
['text':'      for (int K = 0; K < 2048; K++) {','line_number':356,'multiline':False]
['text':'        gemm[M, N] = ReduceOp((gemm[M, N]) + (A[M, K]) * (B[K, N]),','line_number':357,'multiline':False]
['text':'        reduce_args={K});','line_number':358,'multiline':False]
['text':'      }','line_number':359,'multiline':False]
['text':'    }','line_number':360,'multiline':False]
['text':'  }','line_number':361,'multiline':False]
['text':'  for (int M_1 = 0; M_1 < 1024; M_1++) {','line_number':362,'multiline':False]
['text':'    for (int N_1 = 0; N_1 < 1024; N_1++) {','line_number':363,'multiline':False]
['text':'      relu[M_1, N_1] = (gemm[M_1, N_1])<float(0) ? float(0) : (gemm[M_1,','line_number':364,'multiline':False]
['text':'      N_1]);','line_number':365,'multiline':False]
['text':'    }','line_number':366,'multiline':False]
['text':'  }','line_number':367,'multiline':False]
['text':'  for (int M_2 = 0; M_2 < 1024; M_2++) {','line_number':368,'multiline':False]
['text':'    for (int N_2 = 0; N_2 < 1024; N_2++) {','line_number':369,'multiline':False]
['text':'      add[M_2, N_2] = (relu[M_2, N_2]) + (relu[M_2, N_2]);','line_number':370,'multiline':False]
['text':'    }','line_number':371,'multiline':False]
['text':'  }','line_number':372,'multiline':False]
['text':'  for (int M_3 = 0; M_3 < 1024; M_3++) {','line_number':373,'multiline':False]
['text':'    for (int N_3 = 0; N_3 < 1024; N_3++) {','line_number':374,'multiline':False]
['text':'      mul[M_3, N_3] = (add[M_3, N_3]) * (add[M_3, N_3]);','line_number':375,'multiline':False]
['text':'    }','line_number':376,'multiline':False]
['text':'  }','line_number':377,'multiline':False]
['text':'}','line_number':378,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':383,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':384,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':395,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':396,'multiline':False]
['text':' Constructed stmt:','line_number':441,'multiline':False]
['text':' Intermediate buffers and their liveness ranges: gemm [0, 1], relu [1, 2],','line_number':442,'multiline':False]
['text':' add [2, 3], mul [3, 4] Buffer 'gemm', 'relu, ''add' and 'mul' are the same','line_number':443,'multiline':False]
['text':' size; we'll reuse 'gemm' for 'add', and reuse 'relu' for 'mul'','line_number':444,'multiline':False]
['text':'{','line_number':445,'multiline':False]
['text':'  for (int M = 0; M < 1024; M++) {','line_number':446,'multiline':False]
['text':'    for (int N = 0; N < 1024; N++) {','line_number':447,'multiline':False]
['text':'      gemm[M, N] = float(0);','line_number':448,'multiline':False]
['text':'      for (int K = 0; K < 2048; K++) {','line_number':449,'multiline':False]
['text':'        gemm[M, N] = ReduceOp((gemm[M, N]) + (A[M, K]) * (B[K, N]),','line_number':450,'multiline':False]
['text':'        reduce_args={K});','line_number':451,'multiline':False]
['text':'      }','line_number':452,'multiline':False]
['text':'    }','line_number':453,'multiline':False]
['text':'  }','line_number':454,'multiline':False]
['text':'  for (int M_1 = 0; M_1 < 1024; M_1++) {','line_number':455,'multiline':False]
['text':'    for (int N_1 = 0; N_1 < 1024; N_1++) {','line_number':456,'multiline':False]
['text':'      relu[M_1, N_1] = (gemm[M_1, N_1])<float(0) ? float(0) : (gemm[M_1,','line_number':457,'multiline':False]
['text':'      N_1]);','line_number':458,'multiline':False]
['text':'    }','line_number':459,'multiline':False]
['text':'  }','line_number':460,'multiline':False]
['text':'  for (int M_2 = 0; M_2 < 1024; M_2++) {','line_number':461,'multiline':False]
['text':'    for (int N_2 = 0; N_2 < 1024; N_2++) {','line_number':462,'multiline':False]
['text':'      add[M_2, N_2] = (relu[M_2, N_2]) + (relu[M_2, N_2]);','line_number':463,'multiline':False]
['text':'    }','line_number':464,'multiline':False]
['text':'  }','line_number':465,'multiline':False]
['text':'  for (int M_3 = 0; M_3 < 1024; M_3++) {','line_number':466,'multiline':False]
['text':'    for (int N_3 = 0; N_3 < 1024; N_3++) {','line_number':467,'multiline':False]
['text':'      mul[M_3, N_3] = (add[M_3, N_3]) * (add[M_3, N_3]);','line_number':468,'multiline':False]
['text':'    }','line_number':469,'multiline':False]
['text':'  }','line_number':470,'multiline':False]
['text':'  for (int M_4 = 0; M_4 < 1024; M_4++) {','line_number':471,'multiline':False]
['text':'    for (int N_4 = 0; N_4 < 1024; N_4++) {','line_number':472,'multiline':False]
['text':'      sub[M_4, N_4] = (mul[M_4, N_4]) - (add[M_4, N_4]);','line_number':473,'multiline':False]
['text':'    }','line_number':474,'multiline':False]
['text':'  }','line_number':475,'multiline':False]
['text':'}','line_number':476,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':481,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':482,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':494,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':495,'multiline':False]
['text':' Constructed stmt:','line_number':545,'multiline':False]
['text':' Intermediate buffers and their liveness ranges: gemm [0, 1], relu [1, 2],','line_number':546,'multiline':False]
['text':' add [2, 3], mul [3, 4], sub [4, 5] Buffer 'gemm', 'relu, ''add', 'mul' and','line_number':547,'multiline':False]
['text':' 'sub' are the same size; we'll reuse 'gemm' for 'add', reuse 'relu' for','line_number':548,'multiline':False]
['text':' 'mul', and reuse 'gemm' for 'sub'.','line_number':549,'multiline':False]
['text':'{','line_number':550,'multiline':False]
['text':'  for (int M = 0; M < 1024; M++) {','line_number':551,'multiline':False]
['text':'    for (int N = 0; N < 1024; N++) {','line_number':552,'multiline':False]
['text':'      gemm[M, N] = float(0);','line_number':553,'multiline':False]
['text':'      for (int K = 0; K < 2048; K++) {','line_number':554,'multiline':False]
['text':'        gemm[M, N] = ReduceOp((gemm[M, N]) + (A[M, K]) * (B[K, N]),','line_number':555,'multiline':False]
['text':'        reduce_args={K});','line_number':556,'multiline':False]
['text':'      }','line_number':557,'multiline':False]
['text':'    }','line_number':558,'multiline':False]
['text':'  }','line_number':559,'multiline':False]
['text':'  for (int M_1 = 0; M_1 < 1024; M_1++) {','line_number':560,'multiline':False]
['text':'    for (int N_1 = 0; N_1 < 1024; N_1++) {','line_number':561,'multiline':False]
['text':'      relu[M_1, N_1] = (gemm[M_1, N_1])<float(0) ? float(0) : (gemm[M_1,','line_number':562,'multiline':False]
['text':'      N_1]);','line_number':563,'multiline':False]
['text':'    }','line_number':564,'multiline':False]
['text':'  }','line_number':565,'multiline':False]
['text':'  for (int M_2 = 0; M_2 < 1024; M_2++) {','line_number':566,'multiline':False]
['text':'    for (int N_2 = 0; N_2 < 1024; N_2++) {','line_number':567,'multiline':False]
['text':'      add[M_2, N_2] = (relu[M_2, N_2]) + (relu[M_2, N_2]);','line_number':568,'multiline':False]
['text':'    }','line_number':569,'multiline':False]
['text':'  }','line_number':570,'multiline':False]
['text':'  for (int M_3 = 0; M_3 < 1024; M_3++) {','line_number':571,'multiline':False]
['text':'    for (int N_3 = 0; N_3 < 1024; N_3++) {','line_number':572,'multiline':False]
['text':'      mul[M_3, N_3] = (add[M_3, N_3]) * (add[M_3, N_3]);','line_number':573,'multiline':False]
['text':'    }','line_number':574,'multiline':False]
['text':'  }','line_number':575,'multiline':False]
['text':'  for (int M_4 = 0; M_4 < 1024; M_4++) {','line_number':576,'multiline':False]
['text':'    for (int N_4 = 0; N_4 < 1024; N_4++) {','line_number':577,'multiline':False]
['text':'      sub[M_4, N_4] = (mul[M_4, N_4]) - float(1);','line_number':578,'multiline':False]
['text':'    }','line_number':579,'multiline':False]
['text':'  }','line_number':580,'multiline':False]
['text':'  for (int M_5 = 0; M_5 < 1024; M_5++) {','line_number':581,'multiline':False]
['text':'    for (int N_5 = 0; N_5 < 1024; N_5++) {','line_number':582,'multiline':False]
['text':'      div[M_5, N_5] = (sub[M_5, N_5]) / float(2);','line_number':583,'multiline':False]
['text':'    }','line_number':584,'multiline':False]
['text':'  }','line_number':585,'multiline':False]
['text':'}','line_number':586,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':591,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':592,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':605,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':606,'multiline':False]
['text':' Constructed stmt:','line_number':647,'multiline':False]
['text':' Intermediate buffers and their liveness ranges: gemm [0, 1], relu [1, 2],','line_number':648,'multiline':False]
['text':' add [2, 3] We do not reuse buffer 'gemm' for 'add' because the size of','line_number':649,'multiline':False]
['text':' buffer 'gemm' is smaller.','line_number':650,'multiline':False]
['text':'{','line_number':651,'multiline':False]
['text':'  for (int M = 0; M < 1024; M++) {','line_number':652,'multiline':False]
['text':'    for (int N = 0; N < 1024; N++) {','line_number':653,'multiline':False]
['text':'      gemm[M, N] = float(0);','line_number':654,'multiline':False]
['text':'      for (int K = 0; K < 2048; K++) {','line_number':655,'multiline':False]
['text':'        gemm[M, N] = ReduceOp((gemm[M, N]) + (A[M, K]) * (B[K, N]),','line_number':656,'multiline':False]
['text':'        reduce_args={K});','line_number':657,'multiline':False]
['text':'      }','line_number':658,'multiline':False]
['text':'    }','line_number':659,'multiline':False]
['text':'  }','line_number':660,'multiline':False]
['text':'  for (int M_1 = 0; M_1 < 1024; M_1++) {','line_number':661,'multiline':False]
['text':'    for (int N_1 = 0; N_1 < 1024; N_1++) {','line_number':662,'multiline':False]
['text':'      relu[M_1, N_1] = (gemm[M_1, N_1])<float(0) ? float(0) : (gemm[M_1,','line_number':663,'multiline':False]
['text':'      N_1]);','line_number':664,'multiline':False]
['text':'    }','line_number':665,'multiline':False]
['text':'  }','line_number':666,'multiline':False]
['text':'  for (int EM = 0; EM < 2048; EM++) {','line_number':667,'multiline':False]
['text':'    for (int EN = 0; EN < 2048; EN++) {','line_number':668,'multiline':False]
['text':'      add[EM, EN] = (relu[EM / 2, EN / 2]) + (relu[EM / 2, EN / 2]);','line_number':669,'multiline':False]
['text':'    }','line_number':670,'multiline':False]
['text':'  }','line_number':671,'multiline':False]
['text':'  for (int FM = 0; FM < 2048; FM++) {','line_number':672,'multiline':False]
['text':'    for (int FN = 0; FN < 2048; FN++) {','line_number':673,'multiline':False]
['text':'      mul[FM, FN] = (add[FM, FN]) * (add[FM, FN]);','line_number':674,'multiline':False]
['text':'    }','line_number':675,'multiline':False]
['text':'  }','line_number':676,'multiline':False]
['text':'}','line_number':677,'multiline':False]
['text':'','line_number':678,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':683,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':684,'multiline':False]
['text':' dtype=float, dims=[2048, 2048]','line_number':686,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':697,'multiline':False]
['text':' dtype=float, dims=[1024, 1024]','line_number':698,'multiline':False]
['text':' dtype=float, dims=[2048, 2048]','line_number':700,'multiline':False]
['text':' namespace jit','line_number':707,'multiline':False]
['text':' namespace torch','line_number':708,'multiline':False]
