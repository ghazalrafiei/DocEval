['text':' Compare to a reference loop structure structure.','line_number':85,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':167,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':169,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':190,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':192,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':197,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':199,'multiline':False]
['text':' When factor equals the For loop's original size, keep using the original','line_number':215,'multiline':False]
['text':' For loop.','line_number':216,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':222,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':224,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':242,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':244,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':262,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':264,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':286,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':288,'multiline':False]
['text':' head: [0, 6)','line_number':291,'multiline':False]
['text':' tail: [6, 10)','line_number':292,'multiline':False]
['text':' tail_head: [6, 8)','line_number':295,'multiline':False]
['text':' tail_tail: [8, 10)','line_number':296,'multiline':False]
['text':' When factor equals the For loop's original size, keep using the original','line_number':303,'multiline':False]
['text':' For loop.','line_number':304,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':310,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':312,'multiline':False]
['text':' When factor equals the For loop's original size, keep using the original','line_number':325,'multiline':False]
['text':' For loop.','line_number':326,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':332,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':334,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':352,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':354,'multiline':False]
['text':' 0: splitWithTail','line_number':369,'multiline':False]
['text':' 1: sliceTail on inner loop','line_number':370,'multiline':False]
['text':' 2: sliceHead on outer loop','line_number':371,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':378,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':380,'multiline':False]
['text':' outer: [0, 4)','line_number':383,'multiline':False]
['text':' inner: [0, 21)','line_number':384,'multiline':False]
['text':' tail:  [84, 100)','line_number':385,'multiline':False]
['text':' for (int x_outer = 0; x_outer < 2; x_outer++) {','line_number':390,'multiline':False]
['text':'   for (int x_inner = 0; x_inner < 19; x_inner++) {','line_number':391,'multiline':False]
['text':'     f[21 * x_outer + x_inner] = 1.f + float(21 * x_outer + x_inner);','line_number':392,'multiline':False]
['text':'   }','line_number':393,'multiline':False]
['text':'   for (int x_inner = 19; x_inner < 21; x_inner++) {','line_number':394,'multiline':False]
['text':'     f[21 * x_outer + x_inner] = 1.f + float(21 * x_outer + x_inner);','line_number':395,'multiline':False]
['text':'   }','line_number':396,'multiline':False]
['text':' }','line_number':397,'multiline':False]
['text':' for (int x_outer = 2; x_outer < 4; x_outer++) {','line_number':398,'multiline':False]
['text':'   for (int x_inner = 0; x_inner < 19; x_inner++) {','line_number':399,'multiline':False]
['text':'     f[21 * x_outer + x_inner] = 1.f + float(21 * x_outer + x_inner);','line_number':400,'multiline':False]
['text':'   }','line_number':401,'multiline':False]
['text':'   for (int x_inner = 19; x_inner < 21; x_inner++) {','line_number':402,'multiline':False]
['text':'     f[21 * x_outer + x_inner] = 1.f + float(21 * x_outer + x_inner);','line_number':403,'multiline':False]
['text':'   }','line_number':404,'multiline':False]
['text':' }','line_number':405,'multiline':False]
['text':' for (int x_tail = 0; x_tail < 16; x_tail++) {','line_number':406,'multiline':False]
['text':'   f[x_tail + 84] = 1.f + float(x_tail + 84);','line_number':407,'multiline':False]
['text':' }','line_number':408,'multiline':False]
['text':' 0: sliceHead','line_number':422,'multiline':False]
['text':' 1: normalize tail','line_number':423,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':431,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':433,'multiline':False]
['text':' head: [0, 2)','line_number':436,'multiline':False]
['text':' tail: [2, 10)','line_number':437,'multiline':False]
['text':' normalized_tail: [0, 8)','line_number':440,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':463,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':465,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':498,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':500,'multiline':False]
['text':' Verify that the split loops are ordered correctly.','line_number':509,'multiline':False]
['text':' Compare to a reference loop structure structure.','line_number':536,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks,cppcoreguidelines-avoid-magic-numbers)','line_number':541,'multiline':False]
['text':' Tests the case where we split a loop cleanly multiple times, we should not','line_number':610,'multiline':False]
['text':' insert any masks.','line_number':611,'multiline':False]
['text':' Two splits mean 3 loops, but should need no masks in this case.','line_number':627,'multiline':False]
['text':' Input IR:','line_number':639,'multiline':False]
['text':'  for (int i = 0; i < 100; i++) {','line_number':640,'multiline':False]
['text':'    for (int j = 0; j < 100; j++) {','line_number':641,'multiline':False]
['text':'      A[i, j] = sin(i * j);','line_number':642,'multiline':False]
['text':'      for (int k1 = 0; k1 < 200; k1++) {','line_number':643,'multiline':False]
['text':'        B[i, j, k1] = (A[i, j]) / (k1 + 1);','line_number':644,'multiline':False]
['text':'      }','line_number':645,'multiline':False]
['text':'      for (int k2 = 0; k2 < 300; k2++) {','line_number':646,'multiline':False]
['text':'        C[i, j, k2] = (A[i, j]) * (k2 + 1);','line_number':647,'multiline':False]
['text':'      }','line_number':648,'multiline':False]
['text':'    }','line_number':649,'multiline':False]
['text':'  }','line_number':650,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':696,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':707,'multiline':False]
['text':' IR check','line_number':710,'multiline':False]
['text':' Correctness check','line_number':721,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':736,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':741,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':752,'multiline':False]
['text':' IR check','line_number':755,'multiline':False]
['text':' Correctness check','line_number':767,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':782,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':787,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':804,'multiline':False]
['text':' IR check','line_number':807,'multiline':False]
['text':' Correctness check','line_number':823,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':842,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':853,'multiline':False]
['text':' Outer loop carries loop axis bindings.','line_number':865,'multiline':False]
['text':' Inner loop has none.','line_number':869,'multiline':False]
['text':' Tail loop has none.','line_number':872,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':883,'multiline':False]
['text':' Outer loop carries loop axis bindings.','line_number':892,'multiline':False]
['text':' Inner loop has none.','line_number':896,'multiline':False]
['text':' Make sure we cache random vars if we should.','line_number':1201,'multiline':False]
['text':' would normally compare results but Rand isn't implemented in the','line_number':1223,'multiline':False]
['text':' SimpleIREvaluator, even if we could seed it.','line_number':1224,'multiline':False]
['text':' Check the IR we produced','line_number':1227,'multiline':False]
['text':' Make sure we don't cache random vars that are not being inlined.','line_number':1236,'multiline':False]
['text':' would normally compare results but Rand isn't implemented in the','line_number':1259,'multiline':False]
['text':' SimpleIREvaluator, even if we could seed it.','line_number':1260,'multiline':False]
['text':' Check the IR we produced','line_number':1263,'multiline':False]
['text':' Make sure we generate the right number of random values == the dimensionality','line_number':1271,'multiline':False]
['text':' of the production tensor.','line_number':1272,'multiline':False]
['text':' would normally compare results but Rand isn't implemented in the','line_number':1291,'multiline':False]
['text':' SimpleIREvaluator, even if we could seed it.','line_number':1292,'multiline':False]
['text':' Check the IR we produced','line_number':1295,'multiline':False]
['text':' Make sure we don't screw up intrinsics thinking they're rand.','line_number':1304,'multiline':False]
['text':' Make sure we can handle rand and non-rand intrinsics.','line_number':1364,'multiline':False]
['text':' Check the IR we produced','line_number':1388,'multiline':False]
['text':' Split a Compute then inline it into another compute.','line_number':1397,'multiline':False]
['text':' Split a Compute then inline another Compute into it.','line_number':1409,'multiline':False]
['text':' Split a Compute twice then inline it.','line_number':1431,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':1436,'multiline':False]
['text':' Inline a Compute, then split.','line_number':1446,'multiline':False]
['text':' Split a Compute, inline it, then split the result.','line_number':1468,'multiline':False]
['text':' Oversplit a loop that is simplified out after inlining.','line_number':1492,'multiline':False]
['text':' Inline a Compute with two consumers.','line_number':1506,'multiline':False]
['text':' Inline Compute A into B, then inline B into C.','line_number':1532,'multiline':False]
['text':' Inline a Compute that is both a producer and consumer.','line_number':1559,'multiline':False]
['text':' Split 3 Computes, then inline the first two into the last.','line_number':1585,'multiline':False]
['text':' Check that inlining works for output tensors too','line_number':1605,'multiline':False]
['text':' would normally compare results but Rand isn't implemented in the','line_number':1627,'multiline':False]
['text':' SimpleIREvaluator, even if we could seed it.','line_number':1628,'multiline':False]
['text':' Check the IR we produced','line_number':1631,'multiline':False]
['text':' Input IR:','line_number':1644,'multiline':False]
['text':'     for (int64_t i = 0; i < 100; i++) {','line_number':1645,'multiline':False]
['text':'       A[i*2,i] = i * 500ll;','line_number':1646,'multiline':False]
['text':'     }','line_number':1647,'multiline':False]
['text':'     for (int64_t j = 0; j < 100; j++) {','line_number':1648,'multiline':False]
['text':'       B[0ll,j] = A[0, j] + j * 100ll;','line_number':1649,'multiline':False]
['text':'     }','line_number':1650,'multiline':False]
['text':' Inlining should fail since the producer has compound expr as index.','line_number':1673,'multiline':False]
['text':' The input statement must remain as is.','line_number':1676,'multiline':False]
['text':' Input IR:','line_number':1685,'multiline':False]
['text':'     for (int64_t i = 0; i < 100; i++) {','line_number':1686,'multiline':False]
['text':'       A[0ll,i] = i * 500ll;','line_number':1687,'multiline':False]
['text':'     }','line_number':1688,'multiline':False]
['text':'     for (int64_t j = 0; j < 100; j++) {','line_number':1689,'multiline':False]
['text':'       B[0ll,j] = A[(int64_t)0, j] + j * 100ll;','line_number':1690,'multiline':False]
['text':'     }','line_number':1691,'multiline':False]
['text':' Input IR:','line_number':1726,'multiline':False]
['text':'     for (int64_t i = 0; i < 100; i++) {','line_number':1727,'multiline':False]
['text':'       A[(int64_t)0,i] = i * 500ll;','line_number':1728,'multiline':False]
['text':'     }','line_number':1729,'multiline':False]
['text':'     for (int64_t j = 0; j < 100; j++) {','line_number':1730,'multiline':False]
['text':'       B[0ll,j] = A[0ll, j] + j * 100ll;','line_number':1731,'multiline':False]
['text':'     }','line_number':1732,'multiline':False]
['text':' Verify that compute_at works on the following example:','line_number':1858,'multiline':False]
['text':'','line_number':1859,'multiline':False]
['text':' for (int i_a = 0; i_a < N; i_a++) {','line_number':1860,'multiline':False]
['text':'   A[i_a] = i_a * i_a','line_number':1861,'multiline':False]
['text':' }','line_number':1862,'multiline':False]
['text':' for (int i_b = 0; i_b < N; i_b++) {','line_number':1863,'multiline':False]
['text':'   B[i_b] = A[i_b]','line_number':1864,'multiline':False]
['text':' }','line_number':1865,'multiline':False]
['text':'','line_number':1866,'multiline':False]
['text':' After the transformation the i_b loop should have an allocation for a temp','line_number':1867,'multiline':False]
['text':' buffer and that buffer should be used in computation of B. No use of A','line_number':1868,'multiline':False]
['text':' should be in that loop after the transformation. Also, computation of A','line_number':1869,'multiline':False]
['text':' should not be inlined into B. Instead, it should be computed into the temp,','line_number':1870,'multiline':False]
['text':' and the temp should be used in B.','line_number':1871,'multiline':False]
['text':' dtype=int, dims=[1]','line_number':1884,'multiline':False]
['text':' Now check that the loop still produces the correct result.','line_number':1891,'multiline':False]
['text':' Verify that compute_at works on the following example:','line_number':1903,'multiline':False]
['text':'','line_number':1904,'multiline':False]
['text':' for (int py = 0; py < H+1; py++) {','line_number':1905,'multiline':False]
['text':'   for (int px = 0; px < W+1; px++) {','line_number':1906,'multiline':False]
['text':'     p[py, px] = py*px','line_number':1907,'multiline':False]
['text':'   }','line_number':1908,'multiline':False]
['text':' }','line_number':1909,'multiline':False]
['text':' for (int cy = 0; cy < H; cy++) {','line_number':1910,'multiline':False]
['text':'   for (int cx = 0; cx < W; cx++) {','line_number':1911,'multiline':False]
['text':'     c[py, px] = p[cy,cx]   + p[cy+1,cx] +','line_number':1912,'multiline':False]
['text':'                 p[cy,cx+1] + p[cy+1,cx+1]','line_number':1913,'multiline':False]
['text':'   }','line_number':1914,'multiline':False]
['text':' }','line_number':1915,'multiline':False]
['text':' First let's try to compute P at axis cy (the outer loop)','line_number':1939,'multiline':False]
['text':' Check the IR we produced','line_number':1947,'multiline':False]
['text':' dtype=int, dims=[2, W + 1]','line_number':1949,'multiline':False]
['text':' Now check that the loop still produces the correct result.','line_number':1958,'multiline':False]
['text':' Now let's try to compute P at axis cx (the inner loop)','line_number':1965,'multiline':False]
['text':' Check the IR we produced','line_number':1973,'multiline':False]
['text':' dtype=int, dims=[2, 2]','line_number':1975,'multiline':False]
['text':' Now check that the loop still produces the correct result.','line_number':1984,'multiline':False]
['text':' Verify that compute_at works on the following example:','line_number':1993,'multiline':False]
['text':'','line_number':1994,'multiline':False]
['text':' A(x,y) = x*y','line_number':1995,'multiline':False]
['text':' B(x,y) = A(x, y)','line_number':1996,'multiline':False]
['text':' C(x,y) = B(x+1, y)','line_number':1997,'multiline':False]
['text':' D(x,y) = A(x, y+1) + C(x, y)','line_number':1998,'multiline':False]
['text':'','line_number':1999,'multiline':False]
['text':' i.e. when 'A' comes to 'D' directly and indirectly through 'C'.','line_number':2000,'multiline':False]
['text':' First let's try to compute A at axis dy (the outer loop)','line_number':2031,'multiline':False]
['text':' Check the IR we produced','line_number':2039,'multiline':False]
['text':' dtype=int, dims=[1, W]','line_number':2041,'multiline':False]
['text':' Now check that the loop still produces the correct result.','line_number':2055,'multiline':False]
['text':' Now let's try to compute A at axis dx (the inner loop)','line_number':2062,'multiline':False]
['text':' Check the IR we produced','line_number':2070,'multiline':False]
['text':' dtype=int, dims=[1, 1]','line_number':2072,'multiline':False]
['text':' Now check that the loop still produces the correct result.','line_number':2086,'multiline':False]
['text':' First let's try to compute P at axis cy (the outer loop)','line_number':2136,'multiline':False]
['text':' FIXME: Calling simplify here breaks the IR:','line_number':2140,'multiline':False]
['text':' MALFORMED INPUT: could not find base node in Load - temp[...]','line_number':2141,'multiline':False]
['text':' l.simplify();','line_number':2142,'multiline':False]
['text':' dtype=int, dims=[2, W + 1]','line_number':2147,'multiline':False]
['text':' Now check that the loop still produces the correct result.','line_number':2166,'multiline':False]
['text':' Now let's try to compute P at axis cx (the inner loop)','line_number':2172,'multiline':False]
['text':' dtype=int, dims=[2, 2]','line_number':2181,'multiline':False]
['text':' Now check that the loop still produces the correct result.','line_number':2200,'multiline':False]
['text':' Lots of stuff is broken here.  The computeAt swaps the axes for some odd','line_number':2208,'multiline':False]
['text':' reason.  Even without that, the index flattener fails due to "dimensions','line_number':2209,'multiline':False]
['text':' mismatch in flatten index".','line_number':2210,'multiline':False]
['text':' FIXME: The current IR is totally broken.  The body of the inlined loop is:','line_number':2247,'multiline':False]
['text':' temp[idx0, idx1] = IfThenElse(idx0 + n>=257 ? 1 : (idx0 + n<1 ? 1 : 0),','line_number':2249,'multiline':False]
['text':' 0.f, input[idx1 + 0, (idx0 + n) - 1]);','line_number':2250,'multiline':False]
['text':' Which seems to mix up the axes.  The CHECK below is my best guess at what','line_number':2252,'multiline':False]
['text':' the input "should" look like','line_number':2253,'multiline':False]
['text':' auto At = at::ones({N, H}, at::kFloat);','line_number':2276,'multiline':False]
['text':'stride=','line_number':2279,'multiline':True]
['text':'padding=','line_number':2279,'multiline':True]
['text':' Reorder them back.','line_number':2333,'multiline':False]
['text':' Should be identical to the unreordered statement.','line_number':2345,'multiline':False]
['text':' We're going for a structure like this:
   * for i in ...
   *   Stmt 1
   *   for j in ...
   *     Stmt 2
   *     for k in ...
   *       Stmt 3
   *     Stmt 4
   ','line_number':2486,'multiline':True]
['text':' stmt 3 is the Function body.','line_number':2513,'multiline':False]
['text':' Then we reorder loop y and z, we want it to look like:
   *
   * for i in ...
   *   Stmt 1
   *   for j in ...
   *     Stmt 2
   *   for j_1 in ...
   *    for k in ...
   *       Stmt 3
   *   for j_2 in ...
   *     Stmt 4
   *
   * We need extra loops because we don't have dependency info about stmt 3
   * and 4.
   *
   ','line_number':2526,'multiline':True]
['text':' Check the IR we produced','line_number':2546,'multiline':False]
['text':' Now reorder x and the y above stmt 3:
   *
   *
   * for x in ...
   *   Stmt 1
   *   for y in ...
   *     Stmt 2
   *
   * for y in ...
   *   for z in ...
   *    for x in ...
   *       Stmt 3
   *
   * for x in ...
   *   for y in ...
   *     Stmt 4
   *
   *
   ','line_number':2571,'multiline':True]
['text':' Check the IR we produced','line_number':2594,'multiline':False]
['text':' Add an increment at each layer of the loop which counts the number of','line_number':2636,'multiline':False]
['text':' times the loop executes.','line_number':2637,'multiline':False]
['text':' skip noops, since we check the loop isn't the same after reordering.','line_number':2709,'multiline':False]
['text':' skip noops, since we check the loop isn't the same after reordering.','line_number':2720,'multiline':False]
['text':' skip noops, since we check the loop isn't the same after reordering.','line_number':2731,'multiline':False]
['text':' Check the IR we produced has the 3 nests in the right order, but k and m','line_number':2775,'multiline':False]
['text':' swapped in the middle.','line_number':2776,'multiline':False]
['text':' Verify that we have only a single loop level remaining after','line_number':2848,'multiline':False]
['text':' vectorization.','line_number':2849,'multiline':False]
['text':' Input IR:','line_number':2859,'multiline':False]
['text':'   for (int i = 0; i < 10; i++) {','line_number':2860,'multiline':False]
['text':'     for (int j = 1; j < 5; j++) {','line_number':2861,'multiline':False]
['text':'       A[i,j] = i * j;','line_number':2862,'multiline':False]
['text':'     }','line_number':2863,'multiline':False]
['text':'   }','line_number':2864,'multiline':False]
['text':' namespace','line_number':2894,'multiline':False]
['text':' Input IR:','line_number':2977,'multiline':False]
['text':'   for (int i = 2 - 1; i < 12 / 3; i++) {','line_number':2978,'multiline':False]
['text':'     for (int j = 0; j < 4; j++) {','line_number':2979,'multiline':False]
['text':'       A[i,j] = i * j;','line_number':2980,'multiline':False]
['text':'     }','line_number':2981,'multiline':False]
['text':'   }','line_number':2982,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':2993,'multiline':False]
['text':' Input IR:','line_number':3012,'multiline':False]
['text':'   for (int i = 0; i < M; i++) {','line_number':3013,'multiline':False]
['text':'     for (int j = 0; j < N; j++) {','line_number':3014,'multiline':False]
['text':'       A[i, j] = i * j;','line_number':3015,'multiline':False]
['text':'     }','line_number':3016,'multiline':False]
['text':'   }','line_number':3017,'multiline':False]
['text':' Input IR:','line_number':3051,'multiline':False]
['text':'   for (int i = 0; i < M; i++) {','line_number':3052,'multiline':False]
['text':'     for (int j = 0; j < N; j++) {','line_number':3053,'multiline':False]
['text':'       A[i, j] = i * j;','line_number':3054,'multiline':False]
['text':'     }','line_number':3055,'multiline':False]
['text':'   }','line_number':3056,'multiline':False]
['text':' Unrolling by factor = 1 should do nothing.','line_number':3068,'multiline':False]
['text':' Unrolling by factor = 0 should do nothing.','line_number':3078,'multiline':False]
['text':' Unrolling by negative factor should do nothing.','line_number':3088,'multiline':False]
['text':' Input IR:','line_number':3100,'multiline':False]
['text':'   for (int i = 0; i < 5; i++) {','line_number':3101,'multiline':False]
['text':'     A[i] = i * i;','line_number':3102,'multiline':False]
['text':'   }','line_number':3103,'multiline':False]
['text':' Input IR:','line_number':3185,'multiline':False]
['text':'   for (int i = 50; i < 100; i++) {','line_number':3186,'multiline':False]
['text':'     A[i] = B[i];','line_number':3187,'multiline':False]
['text':'   }','line_number':3188,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':3192,'multiline':False]
['text':' Input IR:','line_number':3207,'multiline':False]
['text':'   for (int x = 50; x < 100; x++) {','line_number':3208,'multiline':False]
['text':'     A[x] = B[x];','line_number':3209,'multiline':False]
['text':'     B[x] = x * 2;','line_number':3210,'multiline':False]
['text':'   }','line_number':3211,'multiline':False]
['text':' Input IR:','line_number':3237,'multiline':False]
['text':'   for (int x = -50; x < 100; x++) {','line_number':3238,'multiline':False]
['text':'     A[x + 50] = B[x + 50];','line_number':3239,'multiline':False]
['text':'     B[x + 50] = x * 2;','line_number':3240,'multiline':False]
['text':'   }','line_number':3241,'multiline':False]
['text':' Input IR:','line_number':3267,'multiline':False]
['text':'   for (int x = 0; x < 100; x++) {','line_number':3268,'multiline':False]
['text':'     A[x] = B[x];','line_number':3269,'multiline':False]
['text':'     B[x] = x * 2;','line_number':3270,'multiline':False]
['text':'   }','line_number':3271,'multiline':False]
['text':' Should not be modified.','line_number':3272,'multiline':False]
['text':' Input IR:','line_number':3299,'multiline':False]
['text':'   for (int x = y; x < 100; x++) {','line_number':3300,'multiline':False]
['text':'     A[x] = B[x];','line_number':3301,'multiline':False]
['text':'     B[x] = x * 2;','line_number':3302,'multiline':False]
['text':'   }','line_number':3303,'multiline':False]
['text':' Input IR:','line_number':3331,'multiline':False]
['text':'   for (int x = 50; x < 100; x++) {','line_number':3332,'multiline':False]
['text':'     for (int y = 10; y < 100; y++) {','line_number':3333,'multiline':False]
['text':'       A[x] = A[x] + B[y] + y * 2;','line_number':3334,'multiline':False]
['text':'     }','line_number':3335,'multiline':False]
['text':'   }','line_number':3336,'multiline':False]
['text':' Input IR:','line_number':3363,'multiline':False]
['text':'   for (int x = 50; x < 100; x++) {','line_number':3364,'multiline':False]
['text':'     for (int y = 10; y < 100; y++) {','line_number':3365,'multiline':False]
['text':'       A[x] = A[x] + B[y] + y * 2;','line_number':3366,'multiline':False]
['text':'     }','line_number':3367,'multiline':False]
['text':'   }','line_number':3368,'multiline':False]
['text':' Create a dummy tensor to construct LoopNest.','line_number':3395,'multiline':False]
['text':' Input IR:','line_number':3401,'multiline':False]
['text':'   for (int x = 5; x < 10; x++) {','line_number':3402,'multiline':False]
['text':'     A[x] = x * 2;','line_number':3403,'multiline':False]
['text':'   }','line_number':3404,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':3413,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':3415,'multiline':False]
['text':' Create a dummy tensor to construct LoopNest.','line_number':3441,'multiline':False]
['text':' Input IR:','line_number':3447,'multiline':False]
['text':'   for (int x = 5; x < 15; x++) {','line_number':3448,'multiline':False]
['text':'     A[x] = x * 2;','line_number':3449,'multiline':False]
['text':'   }','line_number':3450,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':3457,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':3459,'multiline':False]
['text':' Input IR:','line_number':3485,'multiline':False]
['text':'   for (int i = 0; i < 10; i++) {','line_number':3486,'multiline':False]
['text':'     for (int j = 0; j < 5; j++) {','line_number':3487,'multiline':False]
['text':'       A[i,j] = i * j;','line_number':3488,'multiline':False]
['text':'     }','line_number':3489,'multiline':False]
['text':'   }','line_number':3490,'multiline':False]
['text':' Input IR:','line_number':3526,'multiline':False]
['text':'   for (int i = 0; i < 10; i++) {','line_number':3527,'multiline':False]
['text':'     for (int j = 0; j < 5; j++) {','line_number':3528,'multiline':False]
['text':'       for (int k = 0; k < 7; k++) {','line_number':3529,'multiline':False]
['text':'         A[i,j,k] = i + j * k;','line_number':3530,'multiline':False]
['text':'       }','line_number':3531,'multiline':False]
['text':'     }','line_number':3532,'multiline':False]
['text':'   }','line_number':3533,'multiline':False]
['text':' Input IR:','line_number':3571,'multiline':False]
['text':'   for (int i = 2; i < 10; i++) {','line_number':3572,'multiline':False]
['text':'     for (int j = 3; j < 15; j++) {','line_number':3573,'multiline':False]
['text':'       A[i - 2,j - 3] = i * j;','line_number':3574,'multiline':False]
['text':'     }','line_number':3575,'multiline':False]
['text':'   }','line_number':3576,'multiline':False]
['text':' Input IR:','line_number':3612,'multiline':False]
['text':'   for (int i = 0; i < 15-5; i++) {','line_number':3613,'multiline':False]
['text':'     for (int j = 0; j < 20/4; j++) {','line_number':3614,'multiline':False]
['text':'       A[i,j] = i * j;','line_number':3615,'multiline':False]
['text':'     }','line_number':3616,'multiline':False]
['text':'   }','line_number':3617,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':3626,'multiline':False]
['text':' Input IR:','line_number':3652,'multiline':False]
['text':'   for (int i = 0; i < 10; i++) {','line_number':3653,'multiline':False]
['text':'     A[i, i] = 0;','line_number':3654,'multiline':False]
['text':'     for (int j = 0; j < 15; j++) {','line_number':3655,'multiline':False]
['text':'       A[i,j] = i * j;','line_number':3656,'multiline':False]
['text':'     }','line_number':3657,'multiline':False]
['text':'   }','line_number':3658,'multiline':False]
['text':' Do not flatten.','line_number':3659,'multiline':False]
['text':' Input IR:','line_number':3681,'multiline':False]
['text':'   for (int i = 0; i < 10; i++) {','line_number':3682,'multiline':False]
['text':'     S[i] = 0;','line_number':3683,'multiline':False]
['text':'     for (int j = 0; j < 15; j++) {','line_number':3684,'multiline':False]
['text':'       S[i] = S[i] + A[i,j];','line_number':3685,'multiline':False]
['text':'     }','line_number':3686,'multiline':False]
['text':'   }','line_number':3687,'multiline':False]
['text':' Do not flatten.','line_number':3688,'multiline':False]
['text':' Input IR:','line_number':3731,'multiline':False]
['text':'   for (int i = 0; i < 10; i++) {','line_number':3732,'multiline':False]
['text':'     for (int j = 0; j < 5; j++) {','line_number':3733,'multiline':False]
['text':'       A[i,j] = i * j;','line_number':3734,'multiline':False]
['text':'     }','line_number':3735,'multiline':False]
['text':'   }','line_number':3736,'multiline':False]
['text':'   for (int x = 0; x < 10; x++) {','line_number':3737,'multiline':False]
['text':'     for (int y = 0; y < 5; y++) {','line_number':3738,'multiline':False]
['text':'       A[x,y] = A[x,y] + x + y;','line_number':3739,'multiline':False]
['text':'     }','line_number':3740,'multiline':False]
['text':'   }','line_number':3741,'multiline':False]
['text':' Flatten({For_i, For_y}) => should not succeed','line_number':3742,'multiline':False]
['text':' just this once: verify the whole thing.','line_number':3805,'multiline':False]
['text':' dtype=int, dims=[64, 64]','line_number':3807,'multiline':False]
['text':' dtype=int, dims=[1, 10]','line_number':3808,'multiline':False]
['text':' dtype=int, dims=[21, 11]','line_number':3873,'multiline':False]
['text':' dtype=int, dims=[2, 11]','line_number':3919,'multiline':False]
['text':' note im changing the offset of the first arg of the first call to A.','line_number':3946,'multiline':False]
['text':' dtype=int, dims=[5, 2]','line_number':3966,'multiline':False]
['text':' dtype=int, dims=[1, 64]','line_number':4013,'multiline':False]
['text':' Will eliminate if not used by an output.','line_number':4061,'multiline':False]
['text':' But won't eliminate if used by different outputs.','line_number':4070,'multiline':False]
['text':' Will eliminate the write to g, but not f since it used by the producer of','line_number':4104,'multiline':False]
['text':' h.','line_number':4105,'multiline':False]
['text':' Sanity check won't eliminate if g is an output.','line_number':4115,'multiline':False]
['text':' Check that A[j] is replaced with j after inlining','line_number':4239,'multiline':False]
['text':' Input IR:','line_number':4252,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4253,'multiline':False]
['text':'     A[i] = IfThenElse(i<5 ? 1 : 0, B[i], C[i-5])','line_number':4254,'multiline':False]
['text':'   }','line_number':4255,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4257,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4259,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4261,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4264,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4272,'multiline':False]
['text':' Input IR:','line_number':4292,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4293,'multiline':False]
['text':'     A[i] = IfThenElse(i<10, IfThenElse(i<5, B[i], C[i-5]), D[i-10])','line_number':4294,'multiline':False]
['text':'   }','line_number':4295,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4297,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4299,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4301,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4303,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4306,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4317,'multiline':False]
['text':' Input IR:','line_number':4339,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4340,'multiline':False]
['text':'     A[i] = IfThenElse(i<5 ? 1 : 0, B[i], C[i-5])','line_number':4341,'multiline':False]
['text':'   }','line_number':4342,'multiline':False]
['text':'   for (int j = 0; j < 100; j++) {','line_number':4343,'multiline':False]
['text':'     B[j] = IfThenElse(j<30 ? 1 : 0, C[j], D[j])','line_number':4344,'multiline':False]
['text':'   }','line_number':4345,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4347,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4349,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4351,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4353,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4357,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4365,'multiline':False]
['text':' Input IR:','line_number':4397,'multiline':False]
['text':'   for (int i = 0; i < 50; i++) {','line_number':4398,'multiline':False]
['text':'     A[i] = IfThenElse(i<5 ? 1 : 0, B[i], C[i-5])','line_number':4399,'multiline':False]
['text':'     B[j] = IfThenElse(j<30 ? 1 : 0, C[j], D[j])','line_number':4400,'multiline':False]
['text':'   }','line_number':4401,'multiline':False]
['text':' Only the first conditional, in the write to A, will be optimized.','line_number':4402,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4404,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4406,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4408,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4410,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4413,'multiline':False]
['text':' Input IR:','line_number':4449,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4450,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':4451,'multiline':False]
['text':'       A[i] = IfThenElse(i<10, IfThenElse(i<5, B[i], C[i-5]), D[i-10])','line_number':4452,'multiline':False]
['text':'     }','line_number':4453,'multiline':False]
['text':'   }','line_number':4454,'multiline':False]
['text':' Currently, this case where the condition variable `i` is not the','line_number':4455,'multiline':False]
['text':' inner-most loop variable, is not optimized.','line_number':4456,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4458,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4460,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4462,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4464,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4468,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4479,'multiline':False]
['text':' Input IR:','line_number':4492,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4493,'multiline':False]
['text':'     A[i] = IfThenElse(i<5, IfThenElse(i<10, B[i], C[i-5]), D[i-10])','line_number':4494,'multiline':False]
['text':'   }','line_number':4495,'multiline':False]
['text':' No optimization should be done here because one of the conditions use '>'.','line_number':4496,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4498,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4500,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4502,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4504,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4507,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4518,'multiline':False]
['text':' Input IR:','line_number':4531,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4532,'multiline':False]
['text':'     A[i] = IfThenElse(i<N, IfThenElse(i<5, B[i], C[i-5]), D[i-10])','line_number':4533,'multiline':False]
['text':'   }','line_number':4534,'multiline':False]
['text':' No optimization should be done here because one of the conditions use '>'.','line_number':4535,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4537,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4539,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4541,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4543,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4547,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4558,'multiline':False]
['text':' Input IR:','line_number':4571,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4572,'multiline':False]
['text':'     A[i] = IfThenElse(i<10, IfThenElse(i>5, B[i], C[i-5]), D[i-10])','line_number':4573,'multiline':False]
['text':'   }','line_number':4574,'multiline':False]
['text':' No optimization should be done here because one of the conditions use '>'.','line_number':4575,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4577,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4579,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4581,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4583,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4586,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4597,'multiline':False]
['text':' Input IR:','line_number':4610,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4611,'multiline':False]
['text':'     A[i] = IfThenElse(10<i, IfThenElse(i<5, B[i], C[i-5]), D[i-10])','line_number':4612,'multiline':False]
['text':'   }','line_number':4613,'multiline':False]
['text':' No optimization should be done here because of the invalid condition:','line_number':4614,'multiline':False]
['text':'    "10 < i".','line_number':4615,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4617,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4619,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4621,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4623,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4626,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4637,'multiline':False]
['text':' Input IR:','line_number':4650,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4651,'multiline':False]
['text':'     A[i] = IfThenElse(i<10, IfThenElse(k<5, B[i], C[i-5]), D[i-10])','line_number':4652,'multiline':False]
['text':'   }','line_number':4653,'multiline':False]
['text':' No optimization should be done here because the conditions use different','line_number':4654,'multiline':False]
['text':' variables: "i < 10" and "k < 5"','line_number':4655,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4657,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4659,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4661,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4663,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4667,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4678,'multiline':False]
['text':' Input IR:','line_number':4691,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4692,'multiline':False]
['text':'     A[i] = IfThenElse(k<10, IfThenElse(k<5, B[i], C[i-5]), D[i-10])','line_number':4693,'multiline':False]
['text':'   }','line_number':4694,'multiline':False]
['text':' No optimization should be done here because the conditions use the','line_number':4695,'multiline':False]
['text':' variable 'k' which is not a loop variable.','line_number':4696,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4698,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4700,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4702,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4704,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4708,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4719,'multiline':False]
['text':' Input IR:','line_number':4732,'multiline':False]
['text':'   for (int i = 2; i < 20; i++) {','line_number':4733,'multiline':False]
['text':'     A[i] = IfThenElse(i<5 ? 1 : 0, B[i], C[i-5])','line_number':4734,'multiline':False]
['text':'   }','line_number':4735,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4737,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4739,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4741,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4744,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':4752,'multiline':False]
['text':' Now the loopnests will look like:','line_number':4780,'multiline':False]
['text':'','line_number':4781,'multiline':False]
['text':' for (int i_outer = 0; ...','line_number':4782,'multiline':False]
['text':'   for (int i_inner = 0; ...','line_number':4783,'multiline':False]
['text':'     b[i_outer * 8 + i_inner] = float(0);','line_number':4784,'multiline':False]
['text':'     for (int j = 0; ...','line_number':4785,'multiline':False]
['text':'       b[i_outer * 8 + i_inner] = ReduceOp(...);','line_number':4786,'multiline':False]
['text':'','line_number':4787,'multiline':False]
['text':' for (int i_tail = 0; ...','line_number':4788,'multiline':False]
['text':'   b[i_tail + ((100 - 0) / 8) * 8] = float(0);','line_number':4789,'multiline':False]
['text':'   for (int j = 0; ...','line_number':4790,'multiline':False]
['text':'     b[i_tail + ((100 - 0) / 8) * 8] = ReduceOp(...);','line_number':4791,'multiline':False]
['text':'','line_number':4792,'multiline':False]
['text':' Since there are 4 writes to b, we will get 4 loopnests from the','line_number':4793,'multiline':False]
['text':' call to `getAllLoopNestsWritingToBuf` below.','line_number':4794,'multiline':False]
['text':'','line_number':4795,'multiline':False]
['text':' Write #2: "b[i_outer * 8 + i_inner] = ReduceOp(...)"','line_number':4796,'multiline':False]
['text':' Loopnest #2: {i_outer, i_inner, j};','line_number':4797,'multiline':False]
['text':' We will have to reorder i_inner and j.','line_number':4798,'multiline':False]
['text':' Input IR:','line_number':4899,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4900,'multiline':False]
['text':'     if i > 5 {','line_number':4901,'multiline':False]
['text':'       if i < 10 {','line_number':4902,'multiline':False]
['text':'         for (int j = 0; j < 100; j++) {','line_number':4903,'multiline':False]
['text':'           A[i] = i * j;','line_number':4904,'multiline':False]
['text':'         }','line_number':4905,'multiline':False]
['text':'       }','line_number':4906,'multiline':False]
['text':'     }','line_number':4907,'multiline':False]
['text':'   }','line_number':4908,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':4950,'multiline':False]
['text':' Input IR:','line_number':4995,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':4996,'multiline':False]
['text':'     A[i] = 0;','line_number':4997,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':4998,'multiline':False]
['text':'       A[i] = A[i] + i * j;','line_number':4999,'multiline':False]
['text':'     }','line_number':5000,'multiline':False]
['text':'     B[i] = A[i];','line_number':5001,'multiline':False]
['text':'     for (int k = 0; k < 50; k++) {','line_number':5002,'multiline':False]
['text':'       B[i] = B[i] + i * k;','line_number':5003,'multiline':False]
['text':'     }','line_number':5004,'multiline':False]
['text':'   }','line_number':5005,'multiline':False]
['text':' The first loop after distribution must be same as the original For.','line_number':5050,'multiline':False]
['text':' Input IR:','line_number':5055,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':5056,'multiline':False]
['text':'     A[i] = 0;','line_number':5057,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':5058,'multiline':False]
['text':'       A[i] = A[i] + i * j;','line_number':5059,'multiline':False]
['text':'     }','line_number':5060,'multiline':False]
['text':'     B[i] = A[i];','line_number':5061,'multiline':False]
['text':'     for (int k = 0; k < 50; k++) {','line_number':5062,'multiline':False]
['text':'       B[i] = B[i] + i * k;','line_number':5063,'multiline':False]
['text':'     }','line_number':5064,'multiline':False]
['text':'   }','line_number':5065,'multiline':False]
['text':' The first loop after distribution must be same as the original For.','line_number':5107,'multiline':False]
['text':' Input IR:','line_number':5112,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':5113,'multiline':False]
['text':'     A[i] = 0;','line_number':5114,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':5115,'multiline':False]
['text':'       A[i] = A[i] + i * j;','line_number':5116,'multiline':False]
['text':'     }','line_number':5117,'multiline':False]
['text':'     B[i] = A[i];','line_number':5118,'multiline':False]
['text':'     for (int k = 0; k < 50; k++) {','line_number':5119,'multiline':False]
['text':'       B[i] = B[i] + i * k;','line_number':5120,'multiline':False]
['text':'     }','line_number':5121,'multiline':False]
['text':'   }','line_number':5122,'multiline':False]
['text':' The first loop after distribution must be same as the original For.','line_number':5167,'multiline':False]
['text':' Input IR:','line_number':5172,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':5173,'multiline':False]
['text':'     A[i] = 0;','line_number':5174,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':5175,'multiline':False]
['text':'       A[i] = A[i] + i * j;','line_number':5176,'multiline':False]
['text':'     }','line_number':5177,'multiline':False]
['text':'     B[i] = A[i];','line_number':5178,'multiline':False]
['text':'     for (int k = 0; k < 50; k++) {','line_number':5179,'multiline':False]
['text':'       B[i] = B[i] + i * k;','line_number':5180,'multiline':False]
['text':'     }','line_number':5181,'multiline':False]
['text':'   }','line_number':5182,'multiline':False]
['text':' The first loop after distribution must be same as the original For.','line_number':5224,'multiline':False]
['text':' Input IR:','line_number':5229,'multiline':False]
['text':' for (int m = 0; m < 50; m++) {','line_number':5230,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':5231,'multiline':False]
['text':'     A[m,i] = 0;','line_number':5232,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':5233,'multiline':False]
['text':'       A[m,i] = A[m,i] + i * j;','line_number':5234,'multiline':False]
['text':'     }','line_number':5235,'multiline':False]
['text':'     B[m,i] = A[m,i];','line_number':5236,'multiline':False]
['text':'     for (int k = 0; k < 50; k++) {','line_number':5237,'multiline':False]
['text':'       B[m,i] = B[m,i] + i * k;','line_number':5238,'multiline':False]
['text':'     }','line_number':5239,'multiline':False]
['text':'   }','line_number':5240,'multiline':False]
['text':' }','line_number':5241,'multiline':False]
['text':' Check the case of distributing loop and its parents over all the','line_number':5269,'multiline':False]
['text':' statements in the loop.','line_number':5270,'multiline':False]
['text':' The first loop after distribution must be same as the original For.','line_number':5300,'multiline':False]
['text':' Check the case of distributing loop and its parents over all the inner','line_number':5305,'multiline':False]
['text':' loops.','line_number':5306,'multiline':False]
['text':' The first loop after distribution must be same as the original For.','line_number':5332,'multiline':False]
['text':' Input IR:','line_number':5338,'multiline':False]
['text':'   for (int j = 0; j < 100; j++) {','line_number':5339,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':5340,'multiline':False]
['text':'   }','line_number':5341,'multiline':False]
['text':'   for (int k = 0; k < 100; k++) {','line_number':5342,'multiline':False]
['text':'     B[k] = 20 * k;','line_number':5343,'multiline':False]
['text':'   }','line_number':5344,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5352,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5367,'multiline':False]
['text':' Input IR:','line_number':5372,'multiline':False]
['text':'   for (int i = 0; i < 100; i++) {','line_number':5373,'multiline':False]
['text':'     A[i+100] = 20 + i;','line_number':5374,'multiline':False]
['text':'   }','line_number':5375,'multiline':False]
['text':'   for (int j = 0; j < 100; j++) {','line_number':5376,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':5377,'multiline':False]
['text':'   }','line_number':5378,'multiline':False]
['text':'   for (int k = 0; k < 100; k++) {','line_number':5379,'multiline':False]
['text':'     B[k] = 20 * k;','line_number':5380,'multiline':False]
['text':'   }','line_number':5381,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5392,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5408,'multiline':False]
['text':' Input IR:','line_number':5413,'multiline':False]
['text':'   for (int m = 0; m < 20; m++) {','line_number':5414,'multiline':False]
['text':'     A[m] = 0;','line_number':5415,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':5416,'multiline':False]
['text':'       A[m] = A[m] + m * j;','line_number':5417,'multiline':False]
['text':'     }','line_number':5418,'multiline':False]
['text':'   }','line_number':5419,'multiline':False]
['text':'   for (int n = 0; n < 20; n++) {','line_number':5420,'multiline':False]
['text':'     B[n] = A[n];','line_number':5421,'multiline':False]
['text':'     for (int k = 0; k < 50; k++) {','line_number':5422,'multiline':False]
['text':'       B[n] = B[n] + n * k;','line_number':5423,'multiline':False]
['text':'     }','line_number':5424,'multiline':False]
['text':'   }','line_number':5425,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5449,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5468,'multiline':False]
['text':' Input IR:','line_number':5473,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':5474,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':5475,'multiline':False]
['text':'       A[i,j] = i * j * 500;','line_number':5476,'multiline':False]
['text':'     }','line_number':5477,'multiline':False]
['text':'   }','line_number':5478,'multiline':False]
['text':'   for (int m = 0; m < 20; m++) {','line_number':5479,'multiline':False]
['text':'     for (int n = 0; n < 50; n++) {','line_number':5480,'multiline':False]
['text':'       B[m,n] = m + n * 100;','line_number':5481,'multiline':False]
['text':'     }','line_number':5482,'multiline':False]
['text':'   }','line_number':5483,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5509,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5526,'multiline':False]
['text':' Input IR:','line_number':5531,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':5532,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':5533,'multiline':False]
['text':'       A[i,j] = i * j * 500;','line_number':5534,'multiline':False]
['text':'     }','line_number':5535,'multiline':False]
['text':'     for (int n = 0; n < 100; n++) {','line_number':5536,'multiline':False]
['text':'       B[i,n] = m + n * 100;','line_number':5537,'multiline':False]
['text':'     }','line_number':5538,'multiline':False]
['text':'   }','line_number':5539,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5550,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5566,'multiline':False]
['text':' Input IR:','line_number':5571,'multiline':False]
['text':'   for (int j = 0; j < 100; j++) {','line_number':5572,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':5573,'multiline':False]
['text':'   }','line_number':5574,'multiline':False]
['text':'   for (int k = 0; k < 50; k++) {','line_number':5575,'multiline':False]
['text':'     B[k] = 20 * k;','line_number':5576,'multiline':False]
['text':'   }','line_number':5577,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':5584,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5586,'multiline':False]
['text':' Input IR:','line_number':5592,'multiline':False]
['text':'   for (int j = 0; j < 100; j++) {','line_number':5593,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':5594,'multiline':False]
['text':'   }','line_number':5595,'multiline':False]
['text':'   for (int k = 50; k < 100; k++) {','line_number':5596,'multiline':False]
['text':'     B[k] = 20 * k;','line_number':5597,'multiline':False]
['text':'   }','line_number':5598,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':5605,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5607,'multiline':False]
['text':' Input IR:','line_number':5613,'multiline':False]
['text':'   for (int j = 0; j < 100; j++) {','line_number':5614,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':5615,'multiline':False]
['text':'   }','line_number':5616,'multiline':False]
['text':'   B[0] = 0;','line_number':5617,'multiline':False]
['text':'   for (int k = 0; k < 100; k++) {','line_number':5618,'multiline':False]
['text':'     B[k] = 20 * k;','line_number':5619,'multiline':False]
['text':'   }','line_number':5620,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':5628,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5630,'multiline':False]
['text':' Input IR:','line_number':5636,'multiline':False]
['text':'   for (int i = 0; i < 50; i++) {','line_number':5637,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':5638,'multiline':False]
['text':'       A[i,j] = i * j;','line_number':5639,'multiline':False]
['text':'     }','line_number':5640,'multiline':False]
['text':'   }','line_number':5641,'multiline':False]
['text':'   B[0] = 0;','line_number':5642,'multiline':False]
['text':'   for (int k = 50; k < 100; k++) {','line_number':5643,'multiline':False]
['text':'     B[k] = 20 * k;','line_number':5644,'multiline':False]
['text':'   }','line_number':5645,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':5655,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5657,'multiline':False]
['text':' Input IR:','line_number':5663,'multiline':False]
['text':'   for (int j = 0; j < N; j++) {','line_number':5664,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':5665,'multiline':False]
['text':'   }','line_number':5666,'multiline':False]
['text':'   for (int k = 0; k < N; k++) {','line_number':5667,'multiline':False]
['text':'     B[k] = 20 * k;','line_number':5668,'multiline':False]
['text':'   }','line_number':5669,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks,cppcoreguidelines-avoid-magic-numbers)','line_number':5676,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5679,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5694,'multiline':False]
['text':' Input IR:','line_number':5699,'multiline':False]
['text':'   for (int j = 0; j < M + N; j++) {','line_number':5700,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':5701,'multiline':False]
['text':'   }','line_number':5702,'multiline':False]
['text':'   for (int k = 0; k < M + N; k++) {','line_number':5703,'multiline':False]
['text':'     B[k] = 20 * k;','line_number':5704,'multiline':False]
['text':'   }','line_number':5705,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5715,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5730,'multiline':False]
['text':' Input IR:','line_number':5735,'multiline':False]
['text':'   for (int j = M; j < N * 2; j++) {','line_number':5736,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':5737,'multiline':False]
['text':'   }','line_number':5738,'multiline':False]
['text':'   for (int k = M; k < N + N; k++) {','line_number':5739,'multiline':False]
['text':'     B[k] = 20 * k;','line_number':5740,'multiline':False]
['text':'   }','line_number':5741,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks,cppcoreguidelines-avoid-magic-numbers)','line_number':5749,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5752,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5767,'multiline':False]
['text':' Input IR:','line_number':5772,'multiline':False]
['text':'   for (int j = 10; j < 100; j++) {','line_number':5773,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':5774,'multiline':False]
['text':'   }','line_number':5775,'multiline':False]
['text':'   for (int k = 10; k < 100; k++) {','line_number':5776,'multiline':False]
['text':'     A[k+100] = 30 * k','line_number':5777,'multiline':False]
['text':'   }','line_number':5778,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5787,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5802,'multiline':False]
['text':' Input IR:','line_number':5807,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':5808,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':5809,'multiline':False]
['text':'       A[i,j] = i * j * 500;','line_number':5810,'multiline':False]
['text':'     }','line_number':5811,'multiline':False]
['text':'   }','line_number':5812,'multiline':False]
['text':'   for (int m = 0; m < 20; m++) {','line_number':5813,'multiline':False]
['text':'     for (int n = 0; n < 50; n++) {','line_number':5814,'multiline':False]
['text':'       A[m+20,n+100] = m + n * 100;','line_number':5815,'multiline':False]
['text':'     }','line_number':5816,'multiline':False]
['text':'   }','line_number':5817,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5833,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5850,'multiline':False]
['text':' Input IR:','line_number':5855,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':5856,'multiline':False]
['text':'     A[i] = 0','line_number':5857,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':5858,'multiline':False]
['text':'       A[i] = A[i] + B[i,j];','line_number':5859,'multiline':False]
['text':'     }','line_number':5860,'multiline':False]
['text':'   }','line_number':5861,'multiline':False]
['text':'   for (int m = 0; m < 20; m++) {','line_number':5862,'multiline':False]
['text':'     C[m] = A[m];','line_number':5863,'multiline':False]
['text':'   }','line_number':5864,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5879,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5896,'multiline':False]
['text':' Input IR:','line_number':5901,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':5902,'multiline':False]
['text':'     for (int j = 0; j < 50; j++) {','line_number':5903,'multiline':False]
['text':'       A[i,j] = 0','line_number':5904,'multiline':False]
['text':'       for (int k = 0; k < 100; k++) {','line_number':5905,'multiline':False]
['text':'         A[i,j] = A[i,j] + B[i,j,k];','line_number':5906,'multiline':False]
['text':'       }','line_number':5907,'multiline':False]
['text':'     }','line_number':5908,'multiline':False]
['text':'   }','line_number':5909,'multiline':False]
['text':'   for (int m = 0; m < 20; m++) {','line_number':5910,'multiline':False]
['text':'     for (int n = 0; n < 40; n++) {','line_number':5911,'multiline':False]
['text':'       C[m,n] = A[m,n];','line_number':5912,'multiline':False]
['text':'     }','line_number':5913,'multiline':False]
['text':'   }','line_number':5914,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5935,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':5954,'multiline':False]
['text':' Input IR:','line_number':5959,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':5960,'multiline':False]
['text':'     for (int j = 0; j < 20; j++) {','line_number':5961,'multiline':False]
['text':'       A[i,j*20+j+2] = i + j;','line_number':5962,'multiline':False]
['text':'     }','line_number':5963,'multiline':False]
['text':'   }','line_number':5964,'multiline':False]
['text':'   for (int m = 0; m < 20; m++) {','line_number':5965,'multiline':False]
['text':'     for (int n = 0; n < 20; n++) {','line_number':5966,'multiline':False]
['text':'       B[m,n] = A[m,n*20+n+2];','line_number':5967,'multiline':False]
['text':'     }','line_number':5968,'multiline':False]
['text':'   }','line_number':5969,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':5983,'multiline':False]
['text':' The fused loop must be the same as the first loop.','line_number':6000,'multiline':False]
['text':' Input IR:','line_number':6005,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6006,'multiline':False]
['text':'     for (int j = 0; j < 20; j++) {','line_number':6007,'multiline':False]
['text':'       A[i,i*20+j] = i + j;','line_number':6008,'multiline':False]
['text':'     }','line_number':6009,'multiline':False]
['text':'   }','line_number':6010,'multiline':False]
['text':'   for (int m = 0; m < 20; m++) {','line_number':6011,'multiline':False]
['text':'     for (int n = 0; n < 20; n++) {','line_number':6012,'multiline':False]
['text':'       B[m,n] = A[m,m*20+n];  // Both indices of A use m','line_number':6013,'multiline':False]
['text':'     }','line_number':6014,'multiline':False]
['text':'   }','line_number':6015,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':6028,'multiline':False]
['text':' Input IR:','line_number':6034,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6035,'multiline':False]
['text':'     for (int j = 0; j < 20; j++) {','line_number':6036,'multiline':False]
['text':'       A[i,j] = i + j;','line_number':6037,'multiline':False]
['text':'     }','line_number':6038,'multiline':False]
['text':'   }','line_number':6039,'multiline':False]
['text':'   for (int m = 0; m < 20; m++) {','line_number':6040,'multiline':False]
['text':'     for (int n = 0; n < 20; n++) {','line_number':6041,'multiline':False]
['text':'       B[m,n] = A[n,m];  // Transpose','line_number':6042,'multiline':False]
['text':'     }','line_number':6043,'multiline':False]
['text':'   }','line_number':6044,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':6057,'multiline':False]
['text':' Input IR:','line_number':6063,'multiline':False]
['text':'   for (int j = 10; j < 100; j++) {','line_number':6064,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':6065,'multiline':False]
['text':'   }','line_number':6066,'multiline':False]
['text':'   for (int k = 10; k < 100; k++) {','line_number':6067,'multiline':False]
['text':'     A[k-1] = 20 * k;','line_number':6068,'multiline':False]
['text':'   }','line_number':6069,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':6076,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':6078,'multiline':False]
['text':' Input IR:','line_number':6084,'multiline':False]
['text':'   for (int j = 10; j < 100; j++) {','line_number':6085,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':6086,'multiline':False]
['text':'   }','line_number':6087,'multiline':False]
['text':'   for (int k = 10; k < 100; k++) {','line_number':6088,'multiline':False]
['text':'     A[k+50] = 20 * k;','line_number':6089,'multiline':False]
['text':'   }','line_number':6090,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':6097,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':6099,'multiline':False]
['text':' Input IR:','line_number':6105,'multiline':False]
['text':'   for (int m = 0; m < 20; m++) {','line_number':6106,'multiline':False]
['text':'     A[m] = 0;','line_number':6107,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':6108,'multiline':False]
['text':'       A[m] = A[m] + m * j;','line_number':6109,'multiline':False]
['text':'     }','line_number':6110,'multiline':False]
['text':'   }','line_number':6111,'multiline':False]
['text':'   for (int n = 0; n < 20; n++) {','line_number':6112,'multiline':False]
['text':'     B[n] = A[n+1];','line_number':6113,'multiline':False]
['text':'     for (int k = 0; k < 50; k++) {','line_number':6114,'multiline':False]
['text':'       B[n] = B[n] + n * k;','line_number':6115,'multiline':False]
['text':'     }','line_number':6116,'multiline':False]
['text':'   }','line_number':6117,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':6140,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':6142,'multiline':False]
['text':' Input IR:','line_number':6148,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6149,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':6150,'multiline':False]
['text':'       A[i,j] = i * j * 500;','line_number':6151,'multiline':False]
['text':'     }','line_number':6152,'multiline':False]
['text':'   }','line_number':6153,'multiline':False]
['text':'   for (int m = 0; m < 20; m++) {','line_number':6154,'multiline':False]
['text':'     for (int n = 0; n < 50; n++) {','line_number':6155,'multiline':False]
['text':'       A[m+1,n] = m + n * 100;','line_number':6156,'multiline':False]
['text':'     }','line_number':6157,'multiline':False]
['text':'   }','line_number':6158,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':6182,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':6184,'multiline':False]
['text':' Input IR:','line_number':6190,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6191,'multiline':False]
['text':'     for (int j = 0; j < 100; j++) {','line_number':6192,'multiline':False]
['text':'       A[i,j] = i * j * 500;','line_number':6193,'multiline':False]
['text':'     }','line_number':6194,'multiline':False]
['text':'     for (int n = 0; n < 100; n++) {','line_number':6195,'multiline':False]
['text':'       A[i,n+1] = m + n * 100;','line_number':6196,'multiline':False]
['text':'     }','line_number':6197,'multiline':False]
['text':'   }','line_number':6198,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores,cppcoreguidelines-avoid-magic-numbers)','line_number':6210,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':6212,'multiline':False]
['text':' Input IR:','line_number':6218,'multiline':False]
['text':'   for (int j = 0; j < 100; j++) {','line_number':6219,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':6220,'multiline':False]
['text':'   }','line_number':6221,'multiline':False]
['text':'   for (int k = 0; k < 100; k++) {','line_number':6222,'multiline':False]
['text':'     B[k] = 20 * A[99-k];','line_number':6223,'multiline':False]
['text':'   }','line_number':6224,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':6236,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':6238,'multiline':False]
['text':' Input IR:','line_number':6244,'multiline':False]
['text':'   for (int k = 0; k < 100; k++) {','line_number':6245,'multiline':False]
['text':'     B[k] = 20 * A[99-k];','line_number':6246,'multiline':False]
['text':'   }','line_number':6247,'multiline':False]
['text':'   for (int j = 0; j < 100; j++) {','line_number':6248,'multiline':False]
['text':'     A[j] = 10 * j;','line_number':6249,'multiline':False]
['text':'   }','line_number':6250,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':6262,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-init-variables)','line_number':6264,'multiline':False]
['text':' Input IR:','line_number':6270,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6271,'multiline':False]
['text':'     for (int j = 0; j < 30; j++) {','line_number':6272,'multiline':False]
['text':'       for (int k = 0; k < 40; k++) {','line_number':6273,'multiline':False]
['text':'         A[i,j,k] = i * j * k;','line_number':6274,'multiline':False]
['text':'       }','line_number':6275,'multiline':False]
['text':'     }','line_number':6276,'multiline':False]
['text':'   }','line_number':6277,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':6286,'multiline':False]
['text':' Specifying the loops in any other order fails.','line_number':6290,'multiline':False]
['text':' Adding a statement to forK body should be OK.','line_number':6295,'multiline':False]
['text':' Adding a statement in forJ body should fail this test.','line_number':6300,'multiline':False]
['text':' Similarly, adding a statement in forI body should fail this test.','line_number':6305,'multiline':False]
['text':' Input IR:','line_number':6312,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6313,'multiline':False]
['text':'     for (int j = 0; j < 30; j++) {','line_number':6314,'multiline':False]
['text':'       A[i,j] = i * j;','line_number':6315,'multiline':False]
['text':'     }','line_number':6316,'multiline':False]
['text':'   }','line_number':6317,'multiline':False]
['text':' Input IR:','line_number':6336,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6337,'multiline':False]
['text':'     for (int j = 0; j < 30; j++) {','line_number':6338,'multiline':False]
['text':'       for (int k = 0; k < 40; k++) {','line_number':6339,'multiline':False]
['text':'         A[i,j,k] = i * j * k;','line_number':6340,'multiline':False]
['text':'       }','line_number':6341,'multiline':False]
['text':'     }','line_number':6342,'multiline':False]
['text':'   }','line_number':6343,'multiline':False]
['text':' Input IR:','line_number':6365,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6366,'multiline':False]
['text':'     for (int j = 0; j < 30; j++) {','line_number':6367,'multiline':False]
['text':'       for (int k = 0; k < 40; k++) {','line_number':6368,'multiline':False]
['text':'         for (int l = 0; l < 50; l++) {','line_number':6369,'multiline':False]
['text':'           A[i,j,k,l] = i * j * k * l * 500;','line_number':6370,'multiline':False]
['text':'         }','line_number':6371,'multiline':False]
['text':'       }','line_number':6372,'multiline':False]
['text':'     }','line_number':6373,'multiline':False]
['text':'   }','line_number':6374,'multiline':False]
['text':' Input IR:','line_number':6402,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6403,'multiline':False]
['text':'     for (int j = 0; j < 30; j++) {','line_number':6404,'multiline':False]
['text':'       for (int k = 0; k < 40; k++) {','line_number':6405,'multiline':False]
['text':'         A[i,j,k] = i * j * k;','line_number':6406,'multiline':False]
['text':'       }','line_number':6407,'multiline':False]
['text':'     }','line_number':6408,'multiline':False]
['text':'   }','line_number':6409,'multiline':False]
['text':' Input IR:','line_number':6431,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6432,'multiline':False]
['text':'     for (int j = 0; j < 30; j++) {','line_number':6433,'multiline':False]
['text':'       for (int k = 0; k < 40; k++) {','line_number':6434,'multiline':False]
['text':'         A[i,j,k] = i * j * k;','line_number':6435,'multiline':False]
['text':'       }','line_number':6436,'multiline':False]
['text':'     }','line_number':6437,'multiline':False]
['text':'   }','line_number':6438,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':6447,'multiline':False]
['text':' Input IR:','line_number':6468,'multiline':False]
['text':'   for (int i = 0; i < 20; i++) {','line_number':6469,'multiline':False]
['text':'     for (int j = 0; j < 30; j++) {','line_number':6470,'multiline':False]
['text':'       A[i,j] = 0','line_number':6471,'multiline':False]
['text':'       for (int k = 0; k < 40; k++) {','line_number':6472,'multiline':False]
['text':'         A[i,j,k] = i * j * k;','line_number':6473,'multiline':False]
['text':'       }','line_number':6474,'multiline':False]
['text':'     }','line_number':6475,'multiline':False]
['text':'   }','line_number':6476,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-deadcode.DeadStores)','line_number':6485,'multiline':False]
['text':' Specifying the loops in incorrect order fails.','line_number':6488,'multiline':False]
['text':' Adding a statement to forJ loop fails.','line_number':6493,'multiline':False]
['text':' Moving that statement to forI loop also fails.','line_number':6500,'multiline':False]
['text':' Input IR:','line_number':6509,'multiline':False]
['text':' for (int i = 0; i < 100; ++i) {','line_number':6510,'multiline':False]
['text':'   for (int j = 0; j < 200; ++j) {','line_number':6511,'multiline':False]
['text':'     A[i,j] = sin(i*j)','line_number':6512,'multiline':False]
['text':'   }','line_number':6513,'multiline':False]
['text':'   for (int j = 0; j < 199; ++j) {','line_number':6514,'multiline':False]
['text':'     B[i,j] = A[i,j] + A[i, j+1]','line_number':6515,'multiline':False]
['text':'   }','line_number':6516,'multiline':False]
['text':' }','line_number':6517,'multiline':False]
['text':' Input IR:','line_number':6553,'multiline':False]
['text':' for (int i = 0; i < 100; ++i) {','line_number':6554,'multiline':False]
['text':'   for (int j = 0; j < 200; ++j) {','line_number':6555,'multiline':False]
['text':'     A[i,j] = sin(i*j)','line_number':6556,'multiline':False]
['text':'     B[i,j] = A[i,j] + A[i,j]','line_number':6557,'multiline':False]
['text':'   }','line_number':6558,'multiline':False]
['text':' }','line_number':6559,'multiline':False]
['text':' Input IR:','line_number':6591,'multiline':False]
['text':' for (int i = 0; i < 100; ++i) {','line_number':6592,'multiline':False]
['text':'   for (int j = 0; j < 200; ++j) {','line_number':6593,'multiline':False]
['text':'     for (int k = 0; k < 300; ++k) {','line_number':6594,'multiline':False]
['text':'       A[i,j,k] = sin(i*j*k)','line_number':6595,'multiline':False]
['text':'     }','line_number':6596,'multiline':False]
['text':'     for (int k = 0; k < 299; ++j) {','line_number':6597,'multiline':False]
['text':'       B[i,j,k] = A[i,j,k] + A[i,j,k+1]','line_number':6598,'multiline':False]
['text':'     }','line_number':6599,'multiline':False]
['text':'   }','line_number':6600,'multiline':False]
['text':' }','line_number':6601,'multiline':False]
['text':' Input IR:','line_number':6639,'multiline':False]
['text':' for (int i = 0; i < 100; ++i) {','line_number':6640,'multiline':False]
['text':'   for (int j = 0; j < 200; ++j) {','line_number':6641,'multiline':False]
['text':'     A[j, i] = sin(i*j)','line_number':6642,'multiline':False]
['text':'   }','line_number':6643,'multiline':False]
['text':'   for (int j = 0; j < 99; ++j) {','line_number':6644,'multiline':False]
['text':'     B[i, j] = A[j, i] + A[j+1, 0]','line_number':6645,'multiline':False]
['text':'   }','line_number':6646,'multiline':False]
['text':' }','line_number':6647,'multiline':False]
['text':' Input IR:','line_number':6683,'multiline':False]
['text':' for (int i = 0; i < M; ++i) {','line_number':6684,'multiline':False]
['text':'   for (int j = 0; j < N; ++j) {','line_number':6685,'multiline':False]
['text':'     A[i,j] = sin(i*j)','line_number':6686,'multiline':False]
['text':'   }','line_number':6687,'multiline':False]
['text':'   for (int j = 0; j < N-1; ++j) {','line_number':6688,'multiline':False]
['text':'     B[i,j] = A[i,j] + A[i, j+1]','line_number':6689,'multiline':False]
['text':'   }','line_number':6690,'multiline':False]
['text':' }','line_number':6691,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':6707,'multiline':False]
['text':' Input IR:','line_number':6730,'multiline':False]
['text':' for (int i = 0; i < 100; ++i) {','line_number':6731,'multiline':False]
['text':'   for (int j = 0; j < 200; ++j) {','line_number':6732,'multiline':False]
['text':'     A[i,j] = sin(i*j)','line_number':6733,'multiline':False]
['text':'   }','line_number':6734,'multiline':False]
['text':' }','line_number':6735,'multiline':False]
['text':' for (int i = 0; i < 100; ++i) {','line_number':6736,'multiline':False]
['text':'   for (int j = 0; j < 199; ++j) {','line_number':6737,'multiline':False]
['text':'     B[i,j] = A[i,j] + A[i, j+1]','line_number':6738,'multiline':False]
['text':'   }','line_number':6739,'multiline':False]
['text':' }','line_number':6740,'multiline':False]
['text':' There should be no change in the buffer or code.','line_number':6759,'multiline':False]
['text':' Input IR:','line_number':6779,'multiline':False]
['text':' for (int i = 0; i < 100; ++i) {','line_number':6780,'multiline':False]
['text':'   for (int j = 0; j < 200; ++j) {','line_number':6781,'multiline':False]
['text':'     A[i + j, j] = sin(i*j)','line_number':6782,'multiline':False]
['text':'   }','line_number':6783,'multiline':False]
['text':'   for (int j = 0; j < 199; ++j) {','line_number':6784,'multiline':False]
['text':'     B[i,j] = A[i + j, j] + A[i + j, j+1]','line_number':6785,'multiline':False]
['text':'   }','line_number':6786,'multiline':False]
['text':' }','line_number':6787,'multiline':False]
['text':' There should be no change in the buffer or code.','line_number':6806,'multiline':False]
['text':' Input IR:','line_number':6825,'multiline':False]
['text':' for (int i = 0; i < 100; ++i) {','line_number':6826,'multiline':False]
['text':'   for (int j = 0; j < 200; ++j) {','line_number':6827,'multiline':False]
['text':'     A[i,j] = sin(i*j)','line_number':6828,'multiline':False]
['text':'   }','line_number':6829,'multiline':False]
['text':'   for (int k = 0; k < 199; ++k) {','line_number':6830,'multiline':False]
['text':'     B[i,k] = A[i,k] + A[i, k+1]','line_number':6831,'multiline':False]
['text':'   }','line_number':6832,'multiline':False]
['text':'   for (int m = 0; m < 50; ++m) {','line_number':6833,'multiline':False]
['text':'     C[i,m] = B[i,m]','line_number':6834,'multiline':False]
['text':'   }','line_number':6835,'multiline':False]
['text':' }','line_number':6836,'multiline':False]
['text':' This should compress all buffers A, B, and C as follows:','line_number':6858,'multiline':False]
['text':'   A[100, 200] -> A[1, 200]','line_number':6859,'multiline':False]
['text':'   B[100, 200] -> B[1, 200]','line_number':6860,'multiline':False]
['text':'   C[100, 200] -> C[1, 1]','line_number':6861,'multiline':False]
['text':' Let's pick names that would overlap with default index names if not','line_number':6891,'multiline':False]
['text':' sanitized properly:','line_number':6892,'multiline':False]
['text':' Now let's create a many dimensions so that we had to use the same letter','line_number':6895,'multiline':False]
['text':' for different loops','line_number':6896,'multiline':False]
['text':' Now create two Computes with conflicting after sanitization names:','line_number':6901,'multiline':False]
['text':' Finally, let's verify what we got after sanitization:','line_number':6912,'multiline':False]
['text':' namespace jit','line_number':6952,'multiline':False]
['text':' namespace torch','line_number':6953,'multiline':False]
