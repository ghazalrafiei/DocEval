['text':' {','line_number':53,'multiline':False]
['text':'   key: ndims,','line_number':54,'multiline':False]
['text':'   value: [','line_number':55,'multiline':False]
['text':'     ...','line_number':56,'multiline':False]
['text':'     [dim_2, dim_1, ..., dim_n]','line_number':57,'multiline':False]
['text':'   ]','line_number':58,'multiline':False]
['text':' }','line_number':59,'multiline':False]
['text':' {','line_number':62,'multiline':False]
['text':'   size: [ExprHandle_1, ExprHandle_2, ..., ExprHandle_n],','line_number':63,'multiline':False]
['text':'   strides: [','line_number':64,'multiline':False]
['text':'     ...','line_number':65,'multiline':False]
['text':'     [ExprHandle_x, ExprHandle_y, ..., ExprHandle_z]','line_number':66,'multiline':False]
['text':'   ]','line_number':67,'multiline':False]
['text':' }','line_number':68,'multiline':False]
['text':' channels-last contiguous','line_number':135,'multiline':False]
['text':' channels-last non-contiguous','line_number':144,'multiline':False]
['text':' contiguous','line_number':153,'multiline':False]
['text':' non-contiguous','line_number':162,'multiline':False]
['text':'
  Build the following:
    for (const auto index : c10::irange(kVectorCount)) {
      store(c_buf, ramp(index * 8, 1, 8),
            load(a_buf, ramp(index * 8, 1, 8) +
            load(b_buf, ramp(index * 8, 1, 8))))
    }
  ','line_number':293,'multiline':True]
['text':' LHS and RHS expressions should have the same dtype, but this dtype could','line_number':362,'multiline':False]
['text':' differ from the dtype of the return values (but dtypes of true and false','line_number':363,'multiline':False]
['text':' return values should be the same).','line_number':364,'multiline':False]
['text':' This test constructs a CompareSelect expression where the input dtype is','line_number':365,'multiline':False]
['text':' different from the output dtype and verifies that it works correctly:','line_number':366,'multiline':False]
['text':'   result = ((int)lhs == (int)rhs) ? (float)retval1 : (float)retval2','line_number':367,'multiline':False]
['text':' C[i] = (A[i] == B[i]) ? 3.14f : 2.78f','line_number':378,'multiline':False]
['text':' A and B are int, C is float.','line_number':379,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions)','line_number':519,'multiline':False]
['text':' Bool types','line_number':606,'multiline':False]
['text':' Int types','line_number':610,'multiline':False]
['text':' Short types','line_number':614,'multiline':False]
['text':' Long types','line_number':618,'multiline':False]
['text':' Char types','line_number':622,'multiline':False]
['text':' Byte types','line_number':626,'multiline':False]
['text':' Let's add another assign to the body in the cloned loop and verify that the','line_number':820,'multiline':False]
['text':' original statement hasn't changed while the cloned one has.','line_number':821,'multiline':False]
['text':' namespace jit','line_number':835,'multiline':False]
['text':' namespace torch','line_number':836,'multiline':False]
