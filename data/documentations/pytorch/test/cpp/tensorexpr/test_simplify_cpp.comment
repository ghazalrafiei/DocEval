['text':' x = max(12, min(15, 17)).','line_number':96,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':100,'multiline':False]
['text':' Root not equal to either branch.','line_number':331,'multiline':False]
['text':' but branches are equal.','line_number':334,'multiline':False]
['text':' Still equivalent if separate.','line_number':337,'multiline':False]
['text':' Not equivalent if different vars (even with same name).','line_number':344,'multiline':False]
['text':' Intrinsics sanity check.','line_number':349,'multiline':False]
['text':' Root not equal to either branch.','line_number':366,'multiline':False]
['text':' and branches are NOT equal.','line_number':369,'multiline':False]
['text':' Root not equal to either branch, and branches not equal.','line_number':386,'multiline':False]
['text':' but branches are now equal.','line_number':394,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-use-bool-literals)','line_number':405,'multiline':False]
['text':' Immediates of different types are not equal.','line_number':413,'multiline':False]
['text':' But coerced immediates are if they are the same type:','line_number':420,'multiline':False]
['text':' We should not have to do any more work.','line_number':461,'multiline':False]
['text':' Root not equal to either branch, and branches not equal.','line_number':467,'multiline':False]
['text':'/ (2 + x) + 4 => x + 6','line_number':513,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':518,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':520,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':522,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':524,'multiline':False]
['text':'/ (2 - x) - 4 => -2 - x','line_number':538,'multiline':False]
['text':'/ 2 * (1 - x) - 4 => 2 * (-3 - x)','line_number':554,'multiline':False]
['text':'/ 2 * (3 * x) - (x * 4) => 2 * x','line_number':566,'multiline':False]
['text':'/ 2 * (3 * (long)x) - (x * 4) => 2 * x','line_number':583,'multiline':False]
['text':'/ (x + 0) * 1 => x','line_number':600,'multiline':False]
['text':'/ Cannot simplify this.','line_number':611,'multiline':False]
['text':' x + 2 + y => x + y + 2','line_number':633,'multiline':False]
['text':'/ y + x * 0 => y','line_number':649,'multiline':False]
['text':' (x + y) + (x + y) => 2 * (x + y)','line_number':664,'multiline':False]
['text':' (x * y) + (x * y) => 2 * (x * y)','line_number':676,'multiline':False]
['text':' (x - y) + (x - y) => 2 * (x - y)','line_number':688,'multiline':False]
['text':' (x + x + x + x) => 4 * x','line_number':701,'multiline':False]
['text':' (x + 0) => x.','line_number':711,'multiline':False]
['text':' (x + 0.f) => float(x).','line_number':719,'multiline':False]
['text':' (x + y) * (x + y) => (x + y) * (x + y)','line_number':734,'multiline':False]
['text':' We don't attempt to simplify multiplication of polynomials since the','line_number':735,'multiline':False]
['text':' result is only very rarely more efficient.','line_number':736,'multiline':False]
['text':' x * y * x * y => x * x * y * y','line_number':750,'multiline':False]
['text':' These get reordered only.','line_number':751,'multiline':False]
['text':' 1 * (x * 1) => x','line_number':765,'multiline':False]
['text':' Ones cancel cleanly.','line_number':766,'multiline':False]
['text':' 1.f * (x * 1.f) => x','line_number':774,'multiline':False]
['text':' Even float ones cancel cleanly, but carry their type.','line_number':775,'multiline':False]
['text':' 1 * (x * 1.f) => x','line_number':785,'multiline':False]
['text':' One float is enough to cast the expr.','line_number':786,'multiline':False]
['text':' 1 * (x * 0) => 0','line_number':796,'multiline':False]
['text':' Zeroes are eliminated.','line_number':797,'multiline':False]
['text':' 1 * (x * 0) => 0','line_number':805,'multiline':False]
['text':' But not for Float since nan * 0 = nan.','line_number':806,'multiline':False]
['text':' (x - y) * (x - y) => (x - y) * (x - y)','line_number':818,'multiline':False]
['text':' As with Add we don't attempt simplification of this.','line_number':819,'multiline':False]
['text':' (x + y) * (x - y) => (x + y) * (x - y)','line_number':833,'multiline':False]
['text':' Don't simplify with different ops on each side.','line_number':834,'multiline':False]
['text':' Multiply a polynomial by a term.','line_number':847,'multiline':False]
['text':'   - term with no scalar, poly with non-identity scalar.','line_number':848,'multiline':False]
['text':' x * (y + 1) => x + x * y','line_number':849,'multiline':False]
['text':' Multiply a polynomial by a term.','line_number':861,'multiline':False]
['text':'   - term with identity scalar, poly with non-identity scalar.','line_number':862,'multiline':False]
['text':' (x * 1) * (y + 1) => x + x * y','line_number':863,'multiline':False]
['text':' Multiply a polynomial by a term.','line_number':875,'multiline':False]
['text':'   - term with non-identity scalar, poly with non-identity scalar.','line_number':876,'multiline':False]
['text':' (x * 2) * (y + 1) => 2 * (x + x * y)','line_number':877,'multiline':False]
['text':' Multiply a polynomial by a term.','line_number':891,'multiline':False]
['text':'   - term with non-identity scalar, poly with identity scalar.','line_number':892,'multiline':False]
['text':' (x * 2) * (y + 0) => 2 * (x * y)','line_number':893,'multiline':False]
['text':' Multiply a polynomial by a term.','line_number':905,'multiline':False]
['text':'   - term with identity scalar, poly with identity scalar.','line_number':906,'multiline':False]
['text':' (x * 1) * (y + 0) => x * y','line_number':907,'multiline':False]
['text':' Multiply a polynomial by a term.','line_number':917,'multiline':False]
['text':'   - term with no scalar, poly with identity scalar.','line_number':918,'multiline':False]
['text':' x * (y + 0) => x * y','line_number':919,'multiline':False]
['text':' Sub an expr from itself will result in zero.','line_number':929,'multiline':False]
['text':' (x + y) - (x + y) => 0','line_number':935,'multiline':False]
['text':' (x * y) - (x * y) => 0','line_number':942,'multiline':False]
['text':' (x - y) - (x - y) => 0','line_number':949,'multiline':False]
['text':' (x + y) - 2 * (x + y) => -1 * x - y','line_number':956,'multiline':False]
['text':' (x + y) - y => x','line_number':968,'multiline':False]
['text':' (x - 0) => x.','line_number':975,'multiline':False]
['text':' (x - 0.f) => x.','line_number':982,'multiline':False]
['text':' Simple enough to cancel in float.','line_number':983,'multiline':False]
['text':' (x - (float)(y - y)) => x.','line_number':992,'multiline':False]
['text':' (x - y) - y => x - 2 * y','line_number':1001,'multiline':False]
['text':' 2 * x - x => x','line_number':1013,'multiline':False]
['text':' x - 2 * x = -1 * x','line_number':1020,'multiline':False]
['text':' We don't have a unary negate, but this could be 0 -x I guess?','line_number':1021,'multiline':False]
['text':' (x + y + 5) * (x - x) => 0','line_number':1031,'multiline':False]
['text':' Cancelling out one side of Mul cancels both.','line_number':1032,'multiline':False]
['text':' Cancel out opaque modulus.','line_number':1040,'multiline':False]
['text':' Cancel out opaque modulus with a bit more going on.','line_number':1047,'multiline':False]
['text':' Sub where result is negative.','line_number':1054,'multiline':False]
['text':' Sub where result is positive due to negative scalar on RHS.','line_number':1061,'multiline':False]
['text':' Term - Polynomial sub where RHS must be negated.','line_number':1068,'multiline':False]
['text':' Term - Polynomial sub where the result is a Term.','line_number':1075,'multiline':False]
['text':' Term - Polynomial sub where the result is a Polynomial.','line_number':1085,'multiline':False]
['text':' Stmt to simplify:','line_number':1114,'multiline':False]
['text':' for (int i = 0; i < 100; i++) {','line_number':1115,'multiline':False]
['text':'  A[i] = i / 100;','line_number':1116,'multiline':False]
['text':'}','line_number':1117,'multiline':False]
['text':' Stmt to simplify:','line_number':1135,'multiline':False]
['text':' for (const auto i : c10::irange(6)) {','line_number':1136,'multiline':False]
['text':'  A[i] = (i + 24) / 6;','line_number':1137,'multiline':False]
['text':'}','line_number':1138,'multiline':False]
['text':' Stmt to simplify:','line_number':1156,'multiline':False]
['text':' for (const auto i : c10::irange(5)) {','line_number':1157,'multiline':False]
['text':'  A[i] = (i + 25) / 6;','line_number':1158,'multiline':False]
['text':'}','line_number':1159,'multiline':False]
['text':' Stmt to simplify:','line_number':1177,'multiline':False]
['text':' for (const auto i : c10::irange(6)) {','line_number':1178,'multiline':False]
['text':'  A[i] = (i + 24) / (-6);','line_number':1179,'multiline':False]
['text':'}','line_number':1180,'multiline':False]
['text':' Stmt to simplify:','line_number':1198,'multiline':False]
['text':' for (const auto i : c10::irange(5)) {','line_number':1199,'multiline':False]
['text':'  A[i] = (i - 5) / 6;','line_number':1200,'multiline':False]
['text':'}','line_number':1201,'multiline':False]
['text':' Stmt to simplify:','line_number':1219,'multiline':False]
['text':' for (const auto i : c10::irange(6)) {','line_number':1220,'multiline':False]
['text':'  for (const auto j : c10::irange(10)) {','line_number':1221,'multiline':False]
['text':'    A[i, j] = (i + 6*j) / 6;','line_number':1222,'multiline':False]
['text':'  }','line_number':1223,'multiline':False]
['text':'}','line_number':1224,'multiline':False]
['text':' Stmt to simplify:','line_number':1245,'multiline':False]
['text':' for (const auto i : c10::irange(6)) {','line_number':1246,'multiline':False]
['text':'  for (int j = -1; j < 9; j++) {','line_number':1247,'multiline':False]
['text':'    A[i, j+1] = (i + 6*j) / 6;','line_number':1248,'multiline':False]
['text':'  }','line_number':1249,'multiline':False]
['text':'}','line_number':1250,'multiline':False]
['text':' Stmt to simplify:','line_number':1272,'multiline':False]
['text':' for (const auto i : c10::irange(6)) {','line_number':1273,'multiline':False]
['text':'  for (const auto j : c10::irange(10)) {','line_number':1274,'multiline':False]
['text':'    A[i, j] = (i + 6*j) / (-6);','line_number':1275,'multiline':False]
['text':'  }','line_number':1276,'multiline':False]
['text':'}','line_number':1277,'multiline':False]
['text':' Stmt to simplify:','line_number':1299,'multiline':False]
['text':' for (const auto i : c10::irange(100)) {','line_number':1300,'multiline':False]
['text':'  A[i] = i % 100;','line_number':1301,'multiline':False]
['text':'}','line_number':1302,'multiline':False]
['text':' Stmt to simplify:','line_number':1320,'multiline':False]
['text':' for (const auto i : c10::irange(6)) {','line_number':1321,'multiline':False]
['text':'  A[i] = (i + 24) % 6;','line_number':1322,'multiline':False]
['text':'}','line_number':1323,'multiline':False]
['text':' Stmt to simplify:','line_number':1341,'multiline':False]
['text':' for (const auto i : c10::irange(5)) {','line_number':1342,'multiline':False]
['text':'  A[i] = (i + 25) % 6;','line_number':1343,'multiline':False]
['text':'}','line_number':1344,'multiline':False]
['text':' Stmt to simplify:','line_number':1362,'multiline':False]
['text':' for (const auto i : c10::irange(6)) {','line_number':1363,'multiline':False]
['text':'  A[i] = (i + 24) % (-6);','line_number':1364,'multiline':False]
['text':'}','line_number':1365,'multiline':False]
['text':' Stmt to simplify:','line_number':1383,'multiline':False]
['text':' for (const auto i : c10::irange(5)) {','line_number':1384,'multiline':False]
['text':'  A[i] = (i - 5) % 6;','line_number':1385,'multiline':False]
['text':'}','line_number':1386,'multiline':False]
['text':' Stmt to simplify:','line_number':1404,'multiline':False]
['text':' for (const auto i : c10::irange(6)) {','line_number':1405,'multiline':False]
['text':'  for (const auto j : c10::irange(10)) {','line_number':1406,'multiline':False]
['text':'    A[i, j] = (i + 6*j) % 6;','line_number':1407,'multiline':False]
['text':'  }','line_number':1408,'multiline':False]
['text':'}','line_number':1409,'multiline':False]
['text':' Stmt to simplify:','line_number':1430,'multiline':False]
['text':' for (const auto i : c10::irange(6)) {','line_number':1431,'multiline':False]
['text':'  for (int j = -1; j < 9; j++) {','line_number':1432,'multiline':False]
['text':'    A[i, j+1] = (i + 6*j) % 6;','line_number':1433,'multiline':False]
['text':'  }','line_number':1434,'multiline':False]
['text':'}','line_number':1435,'multiline':False]
['text':' Stmt to simplify:','line_number':1457,'multiline':False]
['text':' for (const auto i : c10::irange(6)) {','line_number':1458,'multiline':False]
['text':'  for (const auto j : c10::irange(10)) {','line_number':1459,'multiline':False]
['text':'    A[i, j] = (i + 6*j) % (-6);','line_number':1460,'multiline':False]
['text':'  }','line_number':1461,'multiline':False]
['text':'}','line_number':1462,'multiline':False]
['text':' Constant folding works.','line_number':1489,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':1492,'multiline':False]
['text':' x % x => 0','line_number':1497,'multiline':False]
['text':' 0 % x => 0','line_number':1504,'multiline':False]
['text':' x % 1 => 0','line_number':1511,'multiline':False]
['text':' Doesn't change unknown mods.','line_number':1518,'multiline':False]
['text':' x % y => x % y','line_number':1519,'multiline':False]
['text':' don't touch if RHS is unknown.','line_number':1528,'multiline':False]
['text':' 4 % x => 4 % x','line_number':1529,'multiline':False]
['text':' don't touch if LHS is unknown.','line_number':1538,'multiline':False]
['text':' x % 4 => x % 4','line_number':1539,'multiline':False]
['text':' if LHS is a multiple of RHS, mod is zero.','line_number':1548,'multiline':False]
['text':' 2 * x % x => 0','line_number':1549,'multiline':False]
['text':' true even if the multiple is not constant.','line_number':1556,'multiline':False]
['text':' x * y % x => 0','line_number':1557,'multiline':False]
['text':' true with multiple unknown values in LHS.','line_number':1564,'multiline':False]
['text':' x * y * z % x => 0','line_number':1565,'multiline':False]
['text':' true if the denom is compound.','line_number':1572,'multiline':False]
['text':' x * y * z % y * z => 0','line_number':1573,'multiline':False]
['text':' Sanity check true with scalars that are multiples.','line_number':1580,'multiline':False]
['text':' 12 * x % 4 => 0','line_number':1581,'multiline':False]
['text':' Sanity check not true if the smaller scalar is on LHS.','line_number':1588,'multiline':False]
['text':' 4 * x % 12 => 4 * x % 12','line_number':1589,'multiline':False]
['text':' Both scalar and symbolic in multiple.','line_number':1600,'multiline':False]
['text':' (6 * x * y) % (3 * x * y) => 0','line_number':1601,'multiline':False]
['text':' Test that mixing ops together simplifies as expected.','line_number':1608,'multiline':False]
['text':' (x * y) + (x - y) => (x + x * y) - y','line_number':1614,'multiline':False]
['text':' (x + y) - x * y => (x + y) - x * y','line_number':1628,'multiline':False]
['text':' (x - y) - (x + y) => -2 * y','line_number':1641,'multiline':False]
['text':' (x - 0) + (x * 1) - (x + 0) => x','line_number':1651,'multiline':False]
['text':' (x - 0.f) + (x * 1.f) - (x + 0.f) => float(x) + float(x) - float(x)','line_number':1659,'multiline':False]
['text':' Even in Float simple terms cancel out, but the variable ones cannot.','line_number':1660,'multiline':False]
['text':' Test that chaining many ops together works as expected.','line_number':1676,'multiline':False]
['text':' x + y + x + x + y + y + x + y + x = 4 * y + 5 * x','line_number':1682,'multiline':False]
['text':' x - y + x + x - y - y + x - y + x = 5 * x - 4 * y','line_number':1698,'multiline':False]
['text':' x + y + x - x - y - y + x + y + x = 3 * x','line_number':1714,'multiline':False]
['text':' (2 * x) + (2 * y) => 2 * (x + y)','line_number':1729,'multiline':False]
['text':' Factorization when scalars have common divider.','line_number':1742,'multiline':False]
['text':' (2 * x) + (4 * y) => 2 * (2 * y + x)','line_number':1743,'multiline':False]
['text':' Factorization attempt without a common divider.','line_number':1758,'multiline':False]
['text':' (2 * x) + (5 * y) =>  (5 * y) + (2 * x)','line_number':1759,'multiline':False]
['text':' Factorization after merging.','line_number':1775,'multiline':False]
['text':' (2 * x) + (4 * y) + (8 * x + 6 * y) => 10 * (x + y)','line_number':1776,'multiline':False]
['text':' Factorization with common divider but different signs.','line_number':1790,'multiline':False]
['text':' (2 * x) + (-4 * y) => 2 * (x - 2 * y)','line_number':1791,'multiline':False]
['text':' Factorization with all negative numbers.','line_number':1806,'multiline':False]
['text':' (-2 * x) + (-4 * y) => 2 * (-1 * x - 2 * y)','line_number':1807,'multiline':False]
['text':' The following test ensures that there in no infinite recursion during','line_number':1824,'multiline':False]
['text':' factorization when negative numbers are involved.','line_number':1825,'multiline':False]
['text':' (4 * x + y + z * 2) + (4 * x + y + z * 4) => 2 * (y + 3 * z + 4 * x)','line_number':1844,'multiline':False]
['text':' (x * y) + (2 * x) * (x + y) => 2 * (x * x) + 3 * (x * y)','line_number':1869,'multiline':False]
['text':' This is kind of a placeholder test for variable factorization.','line_number':1870,'multiline':False]
['text':' Tests the difference between two less trivial expressions.','line_number':1892,'multiline':False]
['text':' (m * (1 * n_1) + (n  + 1)) - (m *  (1 * n_1) + n) => 1','line_number':1893,'multiline':False]
['text':' Test constant folding into the difference between expressions.','line_number':1905,'multiline':False]
['text':' 2 + char((m * (1 * n_1) + (n  + 1)) - (m *  (1 * n_1) + n)) => 3','line_number':1906,'multiline':False]
['text':' 2 * x/y * y - x/y * y => x/y * y','line_number':1947,'multiline':False]
['text':' x%y - (x%y - 1) => 1','line_number':1959,'multiline':False]
['text':' Minimum with constant difference between terms.','line_number':1969,'multiline':False]
['text':' Maximum with constant difference between terms.','line_number':1980,'multiline':False]
['text':' Can't simplify multiples because of signedness of variable component.','line_number':1991,'multiline':False]
['text':' TODO: maybe we could for unsigned types?','line_number':1992,'multiline':False]
['text':' Max(x + y, x + y) => x + y','line_number':2007,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':2011,'multiline':False]
['text':' Max(x + y, Max(x + y, z)) => Max(x + y, z)','line_number':2016,'multiline':False]
['text':' Max(x + y, Max(z, x + y)) => Max(x + y, z)','line_number':2026,'multiline':False]
['text':' Max(Max(x + y, z), x + y) => Max(x + y, z)','line_number':2036,'multiline':False]
['text':' Max(Max(z, x + y), x + y) => Max(x + y, z)','line_number':2046,'multiline':False]
['text':' Max(Max(x, y), x) => Max(Max(x, y), x)','line_number':2056,'multiline':False]
['text':' Nested Max ops with different propagate_nans should not be simplified.','line_number':2057,'multiline':False]
['text':' Max(Min(x, y), Min(x, z)) => Min(Max(y, z), x)','line_number':2069,'multiline':False]
['text':' Max(Min(x, y), Min(z, x)) => Min(Max(y, z), x)','line_number':2077,'multiline':False]
['text':' Max(Min(y, x), Min(x, z)) => Min(Max(y, z), x)','line_number':2085,'multiline':False]
['text':' Max(Min(y, x), Min(z, x)) => Min(Max(y, z), x)','line_number':2093,'multiline':False]
['text':' Max(Min(y, x), Min(z, x)) => Max(Min(x, y), Min(x, z))','line_number':2101,'multiline':False]
['text':' When all the ops in the pattern do not have the same propagate_nans,','line_number':2102,'multiline':False]
['text':' it should not be simplified.','line_number':2103,'multiline':False]
['text':' Max(5, Max(x, 8)) => Max(x, 8)','line_number':2117,'multiline':False]
['text':' Max(8, Max(x, 5)) => Max(x, 8)','line_number':2126,'multiline':False]
['text':' Max(Max(x, 8), 5) => Max(x, 8)','line_number':2135,'multiline':False]
['text':' Max(Max(x, 5), 8) => Max(x, 8)','line_number':2144,'multiline':False]
['text':' Max(5, Max(x, Max(y, Max(z, 8)))) => Max(Max(Max(x, 8), y), z)','line_number':2153,'multiline':False]
['text':' Max(8, Max(Max(y, Max(z, 5)), x)) => Max(Max(Max(x, 8), y), z)','line_number':2167,'multiline':False]
['text':' Max(5, Max(Max(Max(z, 8), y), x)) => Max(Max(Max(x, 8), y), z)','line_number':2181,'multiline':False]
['text':' Max(Max(x, Max(y, Max(5, z))), 8) => Max(Max(Max(x, 8), y), z)','line_number':2195,'multiline':False]
['text':' Max(Max(Max(y, Max(8, z)), x), 5) => Max(Max(Max(x, 8), y), z)','line_number':2209,'multiline':False]
['text':' Max(Max(Max(Max(5, z), y), x), 8) => Max(Max(Max(x, 8), y), z)','line_number':2223,'multiline':False]
['text':' Max(Max(Max(Max(z, 5), y), x), 8) => Max(Max(x, Max(Max(z, 5), y)), 8)','line_number':2237,'multiline':False]
['text':' Do not simplify when all the Max ops do not have the same','line_number':2238,'multiline':False]
['text':' propagate_nans.','line_number':2239,'multiline':False]
['text':' Max(8, Max(Max(x, 5), Max(y, z))) => Max(Max(Max(x, 8), y), z)','line_number':2249,'multiline':False]
['text':' Max(Max(Max(x, 5), Max(y, z)), 8) => Max(Max(Max(x, 8), y), z)','line_number':2263,'multiline':False]
['text':' Min(x + y, x + y) => x + y','line_number':2283,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':2287,'multiline':False]
['text':' Min(x + y, Min(x + y, z)) => Min(x + y, z)','line_number':2292,'multiline':False]
['text':' Min(x + y, Min(z, x + y)) => Min(x + y, z)','line_number':2302,'multiline':False]
['text':' Min(Min(x + y, z), x + y) => Min(x + y, z)','line_number':2312,'multiline':False]
['text':' Min(Min(z, x + y), x + y) => Min(x + y, z)','line_number':2322,'multiline':False]
['text':' Min(Min(x, y), x) => Min(Min(x, y), x)','line_number':2332,'multiline':False]
['text':' Nested Min ops with different propagate_nans should not be simplified.','line_number':2333,'multiline':False]
['text':' Min(Max(x, y), Max(x, z)) => Max(Min(y, z), x)','line_number':2345,'multiline':False]
['text':' Min(Max(x, y), Max(z, x)) => Max(Min(y, z), x)','line_number':2353,'multiline':False]
['text':' Min(Max(y, x), Max(x, z)) => Max(Min(y, z), x)','line_number':2361,'multiline':False]
['text':' Min(Max(y, x), Max(z, x)) => Max(Min(y, z), x)','line_number':2369,'multiline':False]
['text':' Min(Max(y, x), Max(z, x)) => Min(Max(x, y), Max(x, z))','line_number':2377,'multiline':False]
['text':' When all the ops in the pattern do not have the same propagate_nans,','line_number':2378,'multiline':False]
['text':' it should not be simplified.','line_number':2379,'multiline':False]
['text':' Min(5, Min(x, 8)) => Min(x, 8)','line_number':2393,'multiline':False]
['text':' Min(8, Min(x, 5)) => Min(x, 8)','line_number':2402,'multiline':False]
['text':' Min(Min(x, 8), 5) => Min(x, 8)','line_number':2411,'multiline':False]
['text':' Min(Min(x, 5), 8) => Min(x, 8)','line_number':2420,'multiline':False]
['text':' Min(5, Min(x, Min(y, Min(z, 8)))) => Min(Min(Min(x, 5), y), z)','line_number':2429,'multiline':False]
['text':' Min(5, Min(Min(y, Min(z, 8)), x)) => Min(Min(Min(x, 5), y), z)','line_number':2443,'multiline':False]
['text':' Min(5, Min(Min(Min(z, 8), y), x)) => Min(Min(Min(x, 5), y), z)','line_number':2457,'multiline':False]
['text':' Min(Min(x, Min(y, Min(8, z))), 5) => Min(Min(Min(x, 5), y), z)','line_number':2471,'multiline':False]
['text':' Min(Min(Min(y, Min(8, z)), x), 5) => Min(Min(Min(x, 5), y), z)','line_number':2485,'multiline':False]
['text':' Min(Min(Min(Min(8, z), y), x), 5) => Min(Min(Min(x, 5), y), z)','line_number':2499,'multiline':False]
['text':' Min(Min(Min(Min(z, 5), y), x), 8) => Min(Min(Min(Min(z, 5), y), x), 8)','line_number':2513,'multiline':False]
['text':' Do not simplify when all the Min ops do not have the same','line_number':2514,'multiline':False]
['text':' propagate_nans.','line_number':2515,'multiline':False]
['text':' Min(8, Min(Min(x, 5), Min(y, z))) => Min(Min(Min(x, 5), y), z)','line_number':2525,'multiline':False]
['text':' Min(Min(Min(x, 5), Min(y, z)), 8) => Min(Min(Min(x, 5), y), z)','line_number':2539,'multiline':False]
['text':' 3 * (3 * x) - 3 * (3 * y) => 9 * (x - y)','line_number':2555,'multiline':False]
['text':' This is an expression we can simplify.','line_number':2556,'multiline':False]
['text':' 3 * (3 * x) - 3 * (3 * y) => 3 * (3 * x) - 3 * (3 * y).','line_number':2572,'multiline':False]
['text':' If the vars are floating point, ops are not associative and we can't','line_number':2573,'multiline':False]
['text':' reorder.','line_number':2574,'multiline':False]
['text':' 3 * (3 * x) - 3 * (3 * y) => 3 * (3 * x) - (9 * y).','line_number':2597,'multiline':False]
['text':' We will simplify subexprs if they dont reorder floating point ops.','line_number':2598,'multiline':False]
['text':' Prevent reordering if FP propagated from dtypes.','line_number':2619,'multiline':False]
['text':' x%y - (x%y - 1) => x%y - (x%y - 1).','line_number':2645,'multiline':False]
['text':' We wont reorder opaque ops if they are FP.','line_number':2646,'multiline':False]
['text':' (x/y)*y + x%y => x.','line_number':2665,'multiline':False]
['text':' Reverse order.','line_number':2674,'multiline':False]
['text':' x%y + (x/y)*y => x.','line_number':2675,'multiline':False]
['text':' Non opaque denominator.','line_number':2684,'multiline':False]
['text':' (x / (4+y)) * (4+y)) + (x % (y + 4)) => x.','line_number':2685,'multiline':False]
['text':' Reverse order.','line_number':2695,'multiline':False]
['text':' (x % (y + 4)) + (x / (4+y)) * (4+y)) => x.','line_number':2696,'multiline':False]
['text':' Opaque denominator.','line_number':2706,'multiline':False]
['text':' (x / (2/y)) * (2/y)) + (x % (2/y)) => x.','line_number':2707,'multiline':False]
['text':' Non opaque numerator','line_number':2717,'multiline':False]
['text':' ((2*x)/y * y) + ((2*x) % y) => 2 * x.','line_number':2718,'multiline':False]
['text':' Opaque numerator.','line_number':2730,'multiline':False]
['text':' ((x/2) / y * y) + (x/2 % y) => x / 2.','line_number':2731,'multiline':False]
['text':' Numerator and denominator.','line_number':2744,'multiline':False]
['text':' ((2*x)/(2*y) * (2*y)) + ((2*x) % (2*y)) => 2 * x.','line_number':2745,'multiline':False]
['text':' Reverse order.','line_number':2759,'multiline':False]
['text':' ((2*x) % (2*y)) + ((2*x)/(2*y) * (2*y)) => 2 * x.','line_number':2760,'multiline':False]
['text':' Negated Subtraction of Round Mod.','line_number':2773,'multiline':False]
['text':' (x/y) * y - (0 - x%y) => x.','line_number':2774,'multiline':False]
['text':' Other terms are preserved.','line_number':2783,'multiline':False]
['text':' (x/y)*y + x%y + (y * x) => x + (y * x).','line_number':2784,'multiline':False]
['text':' Sanity checking we wont do the optimization on floats.','line_number':2797,'multiline':False]
['text':' Sanity check we wont do it if the mod term doesn't match.','line_number':2814,'multiline':False]
['text':' Sanity check we wont do it if the div term doesn't match.','line_number':2824,'multiline':False]
['text':' Sanity check we wont do it if the mul term doesn't match.','line_number':2834,'multiline':False]
['text':' Full factorization.','line_number':2846,'multiline':False]
['text':' 2 * (x/y * y) + 2 * (x%y) => 2 * x.','line_number':2847,'multiline':False]
['text':' Partial Factorization.','line_number':2858,'multiline':False]
['text':' 32 * (x/8) + 4 * (x % 8) => 4 * x.','line_number':2859,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks,cppcoreguidelines-avoid-magic-numbers)','line_number':2862,'multiline':False]
['text':' Factorization requiring constant folding.','line_number':2872,'multiline':False]
['text':' 20 * (x  / (16 / 2)) * 2 + (11 % 6) * (x % (7+1)) => 5 * x.','line_number':2873,'multiline':False]
['text':' Multivar.','line_number':2904,'multiline':False]
['text':' (x/8) * 8 + (y/5)*5 + x%8 + y%5 => x + y.','line_number':2905,'multiline':False]
['text':' Find the right var.','line_number':2917,'multiline':False]
['text':' (y/8) * 8  x%8 + y%8 + z%8 => x%8 + y + z%8','line_number':2918,'multiline':False]
['text':' Compound.','line_number':2937,'multiline':False]
['text':' (x + (z + 512 * y) % 16) + 16 * ((z + 512 * y) / 16)','line_number':2938,'multiline':False]
['text':' => (z + 512 * y) + x','line_number':2939,'multiline':False]
['text':' t/7 % 9 * 7 + t % 7 => t%63','line_number':2952,'multiline':False]
['text':' 2*t/7 % 9 * 7 + 2*t % 7 => 2*t % 63','line_number':2962,'multiline':False]
['text':' t/x % y * x + t % x => t%(x*y)','line_number':2974,'multiline':False]
['text':' k*t/x % y * x + k*t % x => k*t%(x*y)','line_number':2988,'multiline':False]
['text':' t/k/x % y * x + t/k % x => t/k%(x*y)','line_number':2999,'multiline':False]
['text':' Sanity checking we wont do the optimization on floats.','line_number':3016,'multiline':False]
['text':' 2 * (t /7 % 9 * 7) + 2 * (t % 7) => 2 * (t % 63)','line_number':3038,'multiline':False]
['text':' t /7 % 9 * 14 + 2* (t % 7) => 2* (t % 63)','line_number':3051,'multiline':False]
['text':' t/14 % 9 * 7 + t/2 % 7 => t/2 % 63','line_number':3063,'multiline':False]
['text':' t/(7*3) % 9 * 7*3 + t % (7*3) => t % 189','line_number':3075,'multiline':False]
['text':' 2*(t/x % y * x) + 2*(t % x) => 2*(t%(x*y))','line_number':3086,'multiline':False]
['text':' t/7 % 9 * 7 + t % 7 + t => t % 63 + t','line_number':3105,'multiline':False]
['text':' t/7 % 9 * 7 + t/8 % 9 * 8 + t % 7 + t % 8  => t % 63 + t % 72','line_number':3113,'multiline':False]
['text':' k + t/x % y * x + t % x => k + t%(x*y)','line_number':3127,'multiline':False]
['text':' t/x % y * x + t % x + (t/k / x % y) * x + t/k % x','line_number':3144,'multiline':False]
['text':' => t%(x*y) + t/k % (x*y)','line_number':3145,'multiline':False]
['text':' 3D: (7 * ((i0_flat / 7) % 9) + i0_flat % 7) + 63 * (i0_flat / 63)','line_number':3156,'multiline':False]
['text':' => io_flat','line_number':3157,'multiline':False]
['text':' 5D: i0_flat / (11 * 10 * 9 * 7)  * (7 * 9 * 10 * 11) +','line_number':3165,'multiline':False]
['text':' (i0_flat / (10 * 9 * 7) % 11)  * 7 * 9 * 10 +','line_number':3166,'multiline':False]
['text':' (i0_flat / (9 * 7) % 10) * 7 * 9 +','line_number':3167,'multiline':False]
['text':' (i0_flat / 7 % 9)  * 7 +','line_number':3168,'multiline':False]
['text':' i0_flat % 7 => io_flat','line_number':3169,'multiline':False]
['text':' 3D: (m * ((i0_flat / m) % n) + i0_flat % m) + (m * n) *','line_number':3179,'multiline':False]
['text':' (i0_flat / (m * n)) => io_flat','line_number':3180,'multiline':False]
['text':' 5D: i0_flat / (k * l * n * m)  * (m * n * l * k) +','line_number':3189,'multiline':False]
['text':' (i0_flat / (l * n * m) % k)  * m * n * l +','line_number':3190,'multiline':False]
['text':' (i0_flat / (n * m) % l) * m * n +','line_number':3191,'multiline':False]
['text':' (i0_flat / m % n)  * m +','line_number':3192,'multiline':False]
['text':' i0_flat % m => io_flat','line_number':3193,'multiline':False]
['text':' Simple factorization of numerator and denominator.','line_number':3209,'multiline':False]
['text':' 8x / 4y => 2x / y.','line_number':3210,'multiline':False]
['text':' Don't change anything if we can't factorize.','line_number':3223,'multiline':False]
['text':' Don't reorder floats.','line_number':3238,'multiline':False]
['text':' Sanity check we do nothing if there are only scalar parts.','line_number':3253,'multiline':False]
['text':' Can factorize amounts of variables.','line_number':3264,'multiline':False]
['text':' If the condition is constant true then take the true_value.','line_number':3279,'multiline':False]
['text':' 1 ? x : y => x','line_number':3280,'multiline':False]
['text':' If the condition is constant false then take the false_value.','line_number':3290,'multiline':False]
['text':' 0 ? x : y => y','line_number':3291,'multiline':False]
['text':' condition is simplified before checking.','line_number':3301,'multiline':False]
['text':' (x-x) ? x : y => y','line_number':3302,'multiline':False]
['text':' If both branches are the same then don't do the condition.','line_number':3311,'multiline':False]
['text':' y ? x : x => x','line_number':3312,'multiline':False]
['text':' If both branches simplify to the same thing it still works.','line_number':3321,'multiline':False]
['text':' y ? (x + x) : (2 * x) => x','line_number':3322,'multiline':False]
['text':' If the condition is constant true then take the true_value.','line_number':3335,'multiline':False]
['text':' 1 ? A[0] = 1 : B[0] = 1 => A[0] = 1','line_number':3336,'multiline':False]
['text':' If the condition is constant false then take the false_value.','line_number':3351,'multiline':False]
['text':' 0 ? A[0] = 1 : B[0] = 1 => B[0] = 1','line_number':3352,'multiline':False]
['text':' condition is simplified before checking.','line_number':3367,'multiline':False]
['text':' (x-x) ? A[0] = 1 : B[0] = 1 => B[0] = 1','line_number':3368,'multiline':False]
['text':' If both branches are the same then don't do the condition.','line_number':3384,'multiline':False]
['text':' x ? A[0] = x : A[0] = x => A[0] = x','line_number':3385,'multiline':False]
['text':' If both branches simplify to the same thing it still works.','line_number':3400,'multiline':False]
['text':' x ? (x + x) : (2 * x) => x','line_number':3401,'multiline':False]
['text':' But not if they dont','line_number':3416,'multiline':False]
['text':' x ? x : (2 * x) => x ? x : (2 * x)','line_number':3417,'multiline':False]
['text':' If the branches are empty in different ways, eliminate.','line_number':3450,'multiline':False]
['text':' Equals.','line_number':3484,'multiline':False]
['text':' Greater than.','line_number':3489,'multiline':False]
['text':' Greater or Equal.','line_number':3494,'multiline':False]
['text':' Less Than.','line_number':3499,'multiline':False]
['text':' Less or Equal.','line_number':3504,'multiline':False]
['text':' Not equal.','line_number':3509,'multiline':False]
['text':' With specified results:','line_number':3514,'multiline':False]
['text':' EQ','line_number':3529,'multiline':False]
['text':' x == x => 1','line_number':3531,'multiline':False]
['text':' x == x+1 => 0','line_number':3535,'multiline':False]
['text':' x == x * 2 cannot simplify since we don't know x is nonzero.','line_number':3539,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':3541,'multiline':False]
['text':' x == x * 1 => 1','line_number':3544,'multiline':False]
['text':' x == y => x == y','line_number':3549,'multiline':False]
['text':' x == 5 => x == 5','line_number':3559,'multiline':False]
['text':' GT','line_number':3568,'multiline':False]
['text':' x+1 > x => 1','line_number':3570,'multiline':False]
['text':' x > x + 1 => 0','line_number':3574,'multiline':False]
['text':' x > x - 1 => 1','line_number':3578,'multiline':False]
['text':' x - 1 > x => 0','line_number':3582,'multiline':False]
['text':' x > x => 0','line_number':3586,'multiline':False]
['text':' x * 2 > x => x * 2 > x','line_number':3590,'multiline':False]
['text':' since we don't know the sign of x.','line_number':3591,'multiline':False]
['text':' GE','line_number':3595,'multiline':False]
['text':' x+1 >= x => 1','line_number':3597,'multiline':False]
['text':' x >= x + 1 => 0','line_number':3601,'multiline':False]
['text':' x >= x => 1','line_number':3605,'multiline':False]
['text':' x * 2 >= x => x * 2 >= x','line_number':3609,'multiline':False]
['text':' since we don't know the sign of x.','line_number':3610,'multiline':False]
['text':' LT','line_number':3614,'multiline':False]
['text':' x+1 < x => 0','line_number':3616,'multiline':False]
['text':' x < x + 1 => 1','line_number':3620,'multiline':False]
['text':' x < x => 0','line_number':3624,'multiline':False]
['text':' LE','line_number':3628,'multiline':False]
['text':' x+1 <= x => 0','line_number':3630,'multiline':False]
['text':' x <= x + 1 => 1','line_number':3634,'multiline':False]
['text':' x <= x => 1','line_number':3638,'multiline':False]
['text':' NE','line_number':3642,'multiline':False]
['text':' x+1 != x => 1','line_number':3644,'multiline':False]
['text':' x != x + 1 => 1','line_number':3648,'multiline':False]
['text':' x != x => 0','line_number':3652,'multiline':False]
['text':' Will eliminate zero loop For.','line_number':3659,'multiline':False]
['text':' still works if start is not zero.','line_number':3670,'multiline':False]
['text':' works if both terms are variable.','line_number':3681,'multiline':False]
['text':' works if one term simplifies down.','line_number':3693,'multiline':False]
['text':' Sanity check does nothing if the condition is not met.','line_number':3705,'multiline':False]
['text':' Will remove the loop if the body is run once.','line_number':3717,'multiline':False]
['text':' still works if start is not zero.','line_number':3730,'multiline':False]
['text':' works if both terms are variable.','line_number':3743,'multiline':False]
['text':' works if one term simplifies down.','line_number':3757,'multiline':False]
['text':' Sanity check does nothing if the condition is not met.','line_number':3772,'multiline':False]
['text':' Sanity check does nothing if the condition is not met.','line_number':3784,'multiline':False]
['text':' Multiple layers of For will be simplified out.','line_number':3801,'multiline':False]
['text':' Will maintain an outer loop if the inner loop is eliminated.','line_number':3816,'multiline':False]
['text':' Will maintain inner loop if outer loops is eliminated.','line_number':3837,'multiline':False]
['text':' for is over "m".','line_number':3874,'multiline':False]
['text':' x[m] = m;','line_number':3876,'multiline':False]
['text':' Flatten many layers around an empty block to an empty block.','line_number':3885,'multiline':False]
['text':' Suppress unused variable warning','line_number':3888,'multiline':False]
['text':' Flatten multiple blocks down to one.','line_number':3901,'multiline':False]
['text':' { { { stmt1, stmt2 } } } =>  { stmt1, stmt2 }','line_number':3902,'multiline':False]
['text':' Flatten multiple sub blocks containing statements.','line_number':3924,'multiline':False]
['text':' { { stmt1 }, { stmt2 } } =>  { stmt1, stmt2 }','line_number':3925,'multiline':False]
['text':' Flatten sub blocks with different depths.','line_number':3947,'multiline':False]
['text':' { stmt1 , { { stmt2 } } } =>  { stmt1, stmt2 }','line_number':3948,'multiline':False]
['text':' Flatten many layers around an empty block to an empty block.','line_number':3970,'multiline':False]
['text':' Suppress unused variable warning','line_number':3973,'multiline':False]
['text':' Simple positive case.','line_number':3985,'multiline':False]
['text':' Simple negative case.','line_number':4000,'multiline':False]
['text':' Finds right Alloc/Free.','line_number':4015,'multiline':False]
['text':' Dynamic shape.','line_number':4038,'multiline':False]
['text':' rand() + rand() = rand() + rand() NOT 2 * rand().','line_number':4059,'multiline':False]
['text':' rand() - rand() = rand() - rand() NOT 0.','line_number':4069,'multiline':False]
['text':' rand() * rand() = rand() * rand().','line_number':4079,'multiline':False]
['text':' for ( if ( ... ) ) => if ( for ( ... ) ).','line_number':4097,'multiline':False]
['text':' Can't reorder if condition is dependent on the loop var.','line_number':4114,'multiline':False]
['text':' Can't reorder if condition is dependent on a var that is modified inside','line_number':4130,'multiline':False]
['text':' the loop.','line_number':4131,'multiline':False]
['text':' Condition based on buffer not referenced in body. Can reorder here.','line_number':4148,'multiline':False]
['text':' Condition based on buffer read only in body. Can reorder here.','line_number':4166,'multiline':False]
['text':' Condition depends on Let in the loop. Cannot reorder.','line_number':4184,'multiline':False]
['text':' Multi level Ifs where all conditions are distinct. Move BOTH Cond','line_number':4203,'multiline':False]
['text':' statements outside the loop.','line_number':4204,'multiline':False]
['text':' Multi level Ifs where the inner condition does depend on a loop var,','line_number':4227,'multiline':False]
['text':' reorder only the first Cond.','line_number':4228,'multiline':False]
['text':' Don't reorder if there's an else block of the Cond.','line_number':4251,'multiline':False]
['text':' We could, but is it much better?','line_number':4252,'multiline':False]
['text':' Condition uses distinct region of Tensor.','line_number':4268,'multiline':False]
['text':' We could reorder here wih better analysis, but we don't. Included for','line_number':4269,'multiline':False]
['text':' completeness.','line_number':4270,'multiline':False]
['text':' Can fuse since the conditions are identical.','line_number':4294,'multiline':False]
['text':' if (A) { X }; if (A) { Y }; => if (A) { X; Y }','line_number':4295,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':4307,'multiline':False]
['text':' Can't fuse, conditions are not identical in lhs (i != j).','line_number':4317,'multiline':False]
['text':' Can't fuse, conditions are not identical in rhs (10 != 11).','line_number':4343,'multiline':False]
['text':' Can't fuse, conditions are not identical in operation (LT vs GT).','line_number':4370,'multiline':False]
['text':' Can't fuse, CompareSelect results are different.','line_number':4397,'multiline':False]
['text':' Actually we totally could if we normalized CompareSelect results, but','line_number':4398,'multiline':False]
['text':' TODO for later.','line_number':4399,'multiline':False]
['text':' Can fuse with false stmt only.','line_number':4426,'multiline':False]
['text':' Can fuse with both true and false stmt.','line_number':4447,'multiline':False]
['text':' Can fuse with mismatched true / false stmt existing','line_number':4469,'multiline':False]
['text':' Can fuse partial block contents, ie when there are non fused stmts before','line_number':4491,'multiline':False]
['text':' and after.','line_number':4492,'multiline':False]
['text':' before:','line_number':4493,'multiline':False]
['text':' if (j < 10) { A[0] = j; }','line_number':4494,'multiline':False]
['text':' if (i < 10) { A[0] = i; }','line_number':4495,'multiline':False]
['text':' if (i < 10) { A[1] = i; }','line_number':4496,'multiline':False]
['text':' if (i < 11) { A[1] = j; }','line_number':4497,'multiline':False]
['text':'','line_number':4498,'multiline':False]
['text':' after:','line_number':4499,'multiline':False]
['text':'','line_number':4500,'multiline':False]
['text':' if (j < 10) { A[0] = j; }','line_number':4501,'multiline':False]
['text':' if (i < 10) {','line_number':4502,'multiline':False]
['text':'   A[0] = i;','line_number':4503,'multiline':False]
['text':'   A[1] = i;','line_number':4504,'multiline':False]
['text':' }','line_number':4505,'multiline':False]
['text':' if (i < 11) { A[1] = j; }','line_number':4506,'multiline':False]
['text':' Can fuse longer sequences of identical conditions.','line_number':4538,'multiline':False]
['text':' Can't fuse through a non condition.','line_number':4567,'multiline':False]
['text':' Can fuse if the conditions simplify to the same thing.','line_number':4606,'multiline':False]
['text':' Can fuse non-CompareSelects.','line_number':4632,'multiline':False]
['text':' if (i) { X } if (i) { Y } => if (i) { X; Y }','line_number':4633,'multiline':False]
['text':' Sanity check wont fuse different non-CompareSelects.','line_number':4648,'multiline':False]
['text':' Sanity check constant condition elimination still occurs when merging is','line_number':4661,'multiline':False]
['text':' possible.','line_number':4662,'multiline':False]
['text':' Sanity check for-cond reordering occurs after fusing.','line_number':4674,'multiline':False]
['text':' Merge two inner SyncThreads.','line_number':4701,'multiline':False]
['text':' NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)','line_number':4703,'multiline':False]
['text':' Eliminate outer SyncThreads.','line_number':4718,'multiline':False]
['text':' Merge many inner SyncThreads.','line_number':4730,'multiline':False]
['text':' Merge multiple outer SyncThreads.','line_number':4750,'multiline':False]
['text':' Merge multiple sections;','line_number':4768,'multiline':False]
['text':' NB: We need a term in the middle which isn't simplified to trigger the','line_number':4811,'multiline':False]
['text':' relevant path in TermExpander::mutate. The two bc1 terms are brought','line_number':4812,'multiline':False]
['text':' together and simplified to 2 * bc1, which then needs to make 2 multi-lane.','line_number':4813,'multiline':False]
['text':' The result isn't fully simplified currently and thus would be brittle to','line_number':4816,'multiline':False]
['text':' match. Observe its value instead.','line_number':4817,'multiline':False]
['text':' Before:','line_number':4878,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4879,'multiline':False]
['text':'     b[n] = n < 1 ? 0.f : 1.f;','line_number':4880,'multiline':False]
['text':'   }','line_number':4881,'multiline':False]
['text':' After:','line_number':4882,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4883,'multiline':False]
['text':'     b[n] = 1.f;','line_number':4884,'multiline':False]
['text':'   }','line_number':4885,'multiline':False]
['text':' Before:','line_number':4888,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4889,'multiline':False]
['text':'     b[n] = n <= 1 ? 0.f : 1.f;','line_number':4890,'multiline':False]
['text':'   }','line_number':4891,'multiline':False]
['text':' After:','line_number':4892,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4893,'multiline':False]
['text':'     b[n] = n <= 1 ? 0.f : 1.f;','line_number':4894,'multiline':False]
['text':'   }','line_number':4895,'multiline':False]
['text':' Before:','line_number':4898,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4899,'multiline':False]
['text':'     b[n] = n <= 0 ? 0.f : 1.f;','line_number':4900,'multiline':False]
['text':'   }','line_number':4901,'multiline':False]
['text':' After:','line_number':4902,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4903,'multiline':False]
['text':'     b[n] = 1.f;','line_number':4904,'multiline':False]
['text':'   }','line_number':4905,'multiline':False]
['text':' Before:','line_number':4908,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4909,'multiline':False]
['text':'     b[n] = n < 0 ? 0.f : 1.f;','line_number':4910,'multiline':False]
['text':'   }','line_number':4911,'multiline':False]
['text':' After:','line_number':4912,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4913,'multiline':False]
['text':'     b[n] = 1.f;','line_number':4914,'multiline':False]
['text':'   }','line_number':4915,'multiline':False]
['text':' Before:','line_number':4918,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4919,'multiline':False]
['text':'     b[n] = n < 8 ? 0.f : 1.f;','line_number':4920,'multiline':False]
['text':'   }','line_number':4921,'multiline':False]
['text':' After:','line_number':4922,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4923,'multiline':False]
['text':'     b[n] = 0.f;','line_number':4924,'multiline':False]
['text':'   }','line_number':4925,'multiline':False]
['text':' Before:','line_number':4928,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4929,'multiline':False]
['text':'     b[n] = n <= 7 ? 0.f : 1.f;','line_number':4930,'multiline':False]
['text':'   }','line_number':4931,'multiline':False]
['text':' After:','line_number':4932,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4933,'multiline':False]
['text':'     b[n] = 0.f;','line_number':4934,'multiline':False]
['text':'   }','line_number':4935,'multiline':False]
['text':' Before:','line_number':4938,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4939,'multiline':False]
['text':'     b[n] = n <= 8 ? 0.f : 1.f;','line_number':4940,'multiline':False]
['text':'   }','line_number':4941,'multiline':False]
['text':' After:','line_number':4942,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4943,'multiline':False]
['text':'     b[n] = 0.f;','line_number':4944,'multiline':False]
['text':'   }','line_number':4945,'multiline':False]
['text':' Before:','line_number':4948,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4949,'multiline':False]
['text':'     b[n] = n < 7 ? 0.f : 1.f;','line_number':4950,'multiline':False]
['text':'   }','line_number':4951,'multiline':False]
['text':' After:','line_number':4952,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4953,'multiline':False]
['text':'     b[n] = n < 7 ? 0.f : 1.f;','line_number':4954,'multiline':False]
['text':'   }','line_number':4955,'multiline':False]
['text':' Before:','line_number':4958,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4959,'multiline':False]
['text':'     b[n] = n > 0 ? 0.f : 1.f;','line_number':4960,'multiline':False]
['text':'   }','line_number':4961,'multiline':False]
['text':' After:','line_number':4962,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4963,'multiline':False]
['text':'     b[n] = 0.f;','line_number':4964,'multiline':False]
['text':'   }','line_number':4965,'multiline':False]
['text':' Before:','line_number':4968,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4969,'multiline':False]
['text':'     b[n] = n > 1 ? 0.f : 1.f;','line_number':4970,'multiline':False]
['text':'   }','line_number':4971,'multiline':False]
['text':' After:','line_number':4972,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4973,'multiline':False]
['text':'     b[n] = n > 1 ? 0.f : 1.f;','line_number':4974,'multiline':False]
['text':'   }','line_number':4975,'multiline':False]
['text':' Before:','line_number':4978,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4979,'multiline':False]
['text':'     b[n] = n >= 1 ? 0.f : 1.f;','line_number':4980,'multiline':False]
['text':'   }','line_number':4981,'multiline':False]
['text':' After:','line_number':4982,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4983,'multiline':False]
['text':'     b[n] = 0.f;','line_number':4984,'multiline':False]
['text':'   }','line_number':4985,'multiline':False]
['text':' Before:','line_number':4988,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4989,'multiline':False]
['text':'     b[n] = n > 7 ? 0.f : 1.f;','line_number':4990,'multiline':False]
['text':'   }','line_number':4991,'multiline':False]
['text':' After:','line_number':4992,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4993,'multiline':False]
['text':'     b[n] = 1.f;','line_number':4994,'multiline':False]
['text':'   }','line_number':4995,'multiline':False]
['text':' Before:','line_number':4998,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':4999,'multiline':False]
['text':'     b[n] = n >= 7 ? 0.f : 1.f;','line_number':5000,'multiline':False]
['text':'   }','line_number':5001,'multiline':False]
['text':' After:','line_number':5002,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5003,'multiline':False]
['text':'     b[n] = n >= 7 ? 0.f : 1.f;','line_number':5004,'multiline':False]
['text':'   }','line_number':5005,'multiline':False]
['text':' Before:','line_number':5008,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5009,'multiline':False]
['text':'     b[n] = n > 5 ? 0.f : 1.f;','line_number':5010,'multiline':False]
['text':'   }','line_number':5011,'multiline':False]
['text':' After:','line_number':5012,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5013,'multiline':False]
['text':'     b[n] = n > 5 ? 0.f : 1.f;','line_number':5014,'multiline':False]
['text':'   }','line_number':5015,'multiline':False]
['text':' Before:','line_number':5018,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5019,'multiline':False]
['text':'     b[n] = n >= 5 ? 0.f : 1.f;','line_number':5020,'multiline':False]
['text':'   }','line_number':5021,'multiline':False]
['text':' After:','line_number':5022,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5023,'multiline':False]
['text':'     b[n] = n >= 5 ? 0.f : 1.f;','line_number':5024,'multiline':False]
['text':'   }','line_number':5025,'multiline':False]
['text':' Before:','line_number':5028,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5029,'multiline':False]
['text':'     b[n] = n > 8 ? 0.f : 1.f;','line_number':5030,'multiline':False]
['text':'   }','line_number':5031,'multiline':False]
['text':' After:','line_number':5032,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5033,'multiline':False]
['text':'     b[n] = 1.f;','line_number':5034,'multiline':False]
['text':'   }','line_number':5035,'multiline':False]
['text':' Before:','line_number':5038,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5039,'multiline':False]
['text':'     b[n] = n >= 8 ? 0.f : 1.f;','line_number':5040,'multiline':False]
['text':'   }','line_number':5041,'multiline':False]
['text':' After:','line_number':5042,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5043,'multiline':False]
['text':'     b[n] = 1.f;','line_number':5044,'multiline':False]
['text':'   }','line_number':5045,'multiline':False]
['text':' Before:','line_number':5048,'multiline':False]
['text':'   for (const auto n : c10::irange(1, 2)) {','line_number':5049,'multiline':False]
['text':'     b[n] = n == 1 ? 0.f : 1.f;','line_number':5050,'multiline':False]
['text':'   }','line_number':5051,'multiline':False]
['text':' After:','line_number':5052,'multiline':False]
['text':'   for (const auto n : c10::irange(1, 2)) {','line_number':5053,'multiline':False]
['text':'     b[1] = 0.f;','line_number':5054,'multiline':False]
['text':'   }','line_number':5055,'multiline':False]
['text':' Before:','line_number':5058,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5059,'multiline':False]
['text':'     b[n] = n == 1 ? 0.f : 1.f;','line_number':5060,'multiline':False]
['text':'   }','line_number':5061,'multiline':False]
['text':' After:','line_number':5062,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5063,'multiline':False]
['text':'     b[n] = n == 1 ? 0.f : 1.f;','line_number':5064,'multiline':False]
['text':'   }','line_number':5065,'multiline':False]
['text':' Before:','line_number':5068,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5069,'multiline':False]
['text':'     b[n] = n == 0 ? 0.f : 1.f;','line_number':5070,'multiline':False]
['text':'   }','line_number':5071,'multiline':False]
['text':' After:','line_number':5072,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5073,'multiline':False]
['text':'     b[n] = 1.f;','line_number':5074,'multiline':False]
['text':'   }','line_number':5075,'multiline':False]
['text':' Before:','line_number':5078,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5079,'multiline':False]
['text':'     b[n] = n == 7 ? 0.f : 1.f;','line_number':5080,'multiline':False]
['text':'   }','line_number':5081,'multiline':False]
['text':' After:','line_number':5082,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5083,'multiline':False]
['text':'     b[n] = n == 7 ? 0.f : 1.f;','line_number':5084,'multiline':False]
['text':'   }','line_number':5085,'multiline':False]
['text':' Before:','line_number':5088,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5089,'multiline':False]
['text':'     b[n] = n == 8 ? 0.f : 1.f;','line_number':5090,'multiline':False]
['text':'   }','line_number':5091,'multiline':False]
['text':' After:','line_number':5092,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5093,'multiline':False]
['text':'     b[n] = 1.f;','line_number':5094,'multiline':False]
['text':'   }','line_number':5095,'multiline':False]
['text':' Before:','line_number':5098,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5099,'multiline':False]
['text':'     b[n] = n != 1 ? 0.f : 1.f;','line_number':5100,'multiline':False]
['text':'   }','line_number':5101,'multiline':False]
['text':' After:','line_number':5102,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5103,'multiline':False]
['text':'     b[n] = n != 1 ? 0.f : 1.f;','line_number':5104,'multiline':False]
['text':'   }','line_number':5105,'multiline':False]
['text':' Before:','line_number':5108,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5109,'multiline':False]
['text':'     b[n] = n != 7 ? 0.f : 1.f;','line_number':5110,'multiline':False]
['text':'   }','line_number':5111,'multiline':False]
['text':' After:','line_number':5112,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5113,'multiline':False]
['text':'     b[n] = n != 7 ? 0.f : 1.f;','line_number':5114,'multiline':False]
['text':'   }','line_number':5115,'multiline':False]
['text':' Before:','line_number':5118,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5119,'multiline':False]
['text':'     b[n] = n != 5 ? 0.f : 1.f;','line_number':5120,'multiline':False]
['text':'   }','line_number':5121,'multiline':False]
['text':' After:','line_number':5122,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5123,'multiline':False]
['text':'     b[n] = n != 5 ? 0.f : 1.f;','line_number':5124,'multiline':False]
['text':'   }','line_number':5125,'multiline':False]
['text':' Before:','line_number':5128,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5129,'multiline':False]
['text':'     b[n] = n != 0 ? 0.f : 1.f;','line_number':5130,'multiline':False]
['text':'   }','line_number':5131,'multiline':False]
['text':' After:','line_number':5132,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5133,'multiline':False]
['text':'     b[n] = 0.f;','line_number':5134,'multiline':False]
['text':'   }','line_number':5135,'multiline':False]
['text':' Before:','line_number':5138,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5139,'multiline':False]
['text':'     b[n] = n != 8 ? 0.f : 1.f;','line_number':5140,'multiline':False]
['text':'   }','line_number':5141,'multiline':False]
['text':' After:','line_number':5142,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5143,'multiline':False]
['text':'     b[n] = 0.f;','line_number':5144,'multiline':False]
['text':'   }','line_number':5145,'multiline':False]
['text':' Before:','line_number':5148,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 20)) {','line_number':5149,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5150,'multiline':False]
['text':'       b[n, m] = (n != m) ? 0.f : 1.f;','line_number':5151,'multiline':False]
['text':'     }','line_number':5152,'multiline':False]
['text':'   }','line_number':5153,'multiline':False]
['text':' After:','line_number':5154,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 20)) {','line_number':5155,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5156,'multiline':False]
['text':'       b[n, m] = 0.f;','line_number':5157,'multiline':False]
['text':'     }','line_number':5158,'multiline':False]
['text':'   }','line_number':5159,'multiline':False]
['text':' Before:','line_number':5182,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5183,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 20)) {','line_number':5184,'multiline':False]
['text':'       b[n, m] = (n != m) ? 0.f : 1.f;','line_number':5185,'multiline':False]
['text':'     }','line_number':5186,'multiline':False]
['text':'   }','line_number':5187,'multiline':False]
['text':' After:','line_number':5188,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5189,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 20)) {','line_number':5190,'multiline':False]
['text':'       b[n, m] = 0.f;','line_number':5191,'multiline':False]
['text':'     }','line_number':5192,'multiline':False]
['text':'   }','line_number':5193,'multiline':False]
['text':' Before:','line_number':5216,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5217,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 31)) {','line_number':5218,'multiline':False]
['text':'       b[n, m] = (n != m) ? 0.f : 1.f;','line_number':5219,'multiline':False]
['text':'     }','line_number':5220,'multiline':False]
['text':'   }','line_number':5221,'multiline':False]
['text':' After:','line_number':5222,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5223,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 31)) {','line_number':5224,'multiline':False]
['text':'       b[n, m] = (n != m) ? 0.f : 1.f;','line_number':5225,'multiline':False]
['text':'     }','line_number':5226,'multiline':False]
['text':'   }','line_number':5227,'multiline':False]
['text':' Before:','line_number':5251,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 31)) {','line_number':5252,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5253,'multiline':False]
['text':'       b[n, m] = (n != m) ? 0.f : 1.f;','line_number':5254,'multiline':False]
['text':'     }','line_number':5255,'multiline':False]
['text':'   }','line_number':5256,'multiline':False]
['text':' After:','line_number':5257,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 31)) {','line_number':5258,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5259,'multiline':False]
['text':'       b[n, m] = (n != m) ? 0.f : 1.f;','line_number':5260,'multiline':False]
['text':'     }','line_number':5261,'multiline':False]
['text':'   }','line_number':5262,'multiline':False]
['text':' Before:','line_number':5286,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 20)) {','line_number':5287,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5288,'multiline':False]
['text':'       b[n, m] = (n < m) ? 0.f : 1.f;','line_number':5289,'multiline':False]
['text':'     }','line_number':5290,'multiline':False]
['text':'   }','line_number':5291,'multiline':False]
['text':' After:','line_number':5292,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 20)) {','line_number':5293,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5294,'multiline':False]
['text':'       b[n, m] = 0.f;','line_number':5295,'multiline':False]
['text':'     }','line_number':5296,'multiline':False]
['text':'   }','line_number':5297,'multiline':False]
['text':' Before:','line_number':5320,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5321,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 31)) {','line_number':5322,'multiline':False]
['text':'       b[n, m] = (n < m) ? 0.f : 1.f;','line_number':5323,'multiline':False]
['text':'     }','line_number':5324,'multiline':False]
['text':'   }','line_number':5325,'multiline':False]
['text':' After:','line_number':5326,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5327,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 31)) {','line_number':5328,'multiline':False]
['text':'       b[n, m] = 1.f;','line_number':5329,'multiline':False]
['text':'     }','line_number':5330,'multiline':False]
['text':'   }','line_number':5331,'multiline':False]
['text':' Before:','line_number':5354,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5355,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 20)) {','line_number':5356,'multiline':False]
['text':'       b[n, m] = (n > m) ? 0.f : 1.f;','line_number':5357,'multiline':False]
['text':'     }','line_number':5358,'multiline':False]
['text':'   }','line_number':5359,'multiline':False]
['text':' After:','line_number':5360,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5361,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 20)) {','line_number':5362,'multiline':False]
['text':'       b[n, m] = 0.f;','line_number':5363,'multiline':False]
['text':'     }','line_number':5364,'multiline':False]
['text':'   }','line_number':5365,'multiline':False]
['text':' Before:','line_number':5388,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 31)) {','line_number':5389,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5390,'multiline':False]
['text':'       b[n, m] = (n > m) ? 0.f : 1.f;','line_number':5391,'multiline':False]
['text':'     }','line_number':5392,'multiline':False]
['text':'   }','line_number':5393,'multiline':False]
['text':' After:','line_number':5394,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 31)) {','line_number':5395,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5396,'multiline':False]
['text':'       b[n, m] = 1.f;','line_number':5397,'multiline':False]
['text':'     }','line_number':5398,'multiline':False]
['text':'   }','line_number':5399,'multiline':False]
['text':' Before:','line_number':5422,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5423,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 31)) {','line_number':5424,'multiline':False]
['text':'       b[n, m] = (n >= m) ? 0.f : 1.f;','line_number':5425,'multiline':False]
['text':'     }','line_number':5426,'multiline':False]
['text':'   }','line_number':5427,'multiline':False]
['text':' After:','line_number':5428,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5429,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 31)) {','line_number':5430,'multiline':False]
['text':'       b[n, m] = 0.f;','line_number':5431,'multiline':False]
['text':'     }','line_number':5432,'multiline':False]
['text':'   }','line_number':5433,'multiline':False]
['text':' Before:','line_number':5456,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 20)) {','line_number':5457,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5458,'multiline':False]
['text':'       b[n, m] = (n >= m) ? 0.f : 1.f;','line_number':5459,'multiline':False]
['text':'     }','line_number':5460,'multiline':False]
['text':'   }','line_number':5461,'multiline':False]
['text':' After:','line_number':5462,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 20)) {','line_number':5463,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5464,'multiline':False]
['text':'       b[n, m] = 1.f;','line_number':5465,'multiline':False]
['text':'     }','line_number':5466,'multiline':False]
['text':'   }','line_number':5467,'multiline':False]
['text':' Before:','line_number':5490,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 31)) {','line_number':5491,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5492,'multiline':False]
['text':'       b[n, m] = (n <= m) ? 0.f : 1.f;','line_number':5493,'multiline':False]
['text':'     }','line_number':5494,'multiline':False]
['text':'   }','line_number':5495,'multiline':False]
['text':' After:','line_number':5496,'multiline':False]
['text':'   for (const auto n : c10::irange(10, 31)) {','line_number':5497,'multiline':False]
['text':'     for(const auto m : c10::irange(30, 40)) {','line_number':5498,'multiline':False]
['text':'       b[n, m] = 0.f;','line_number':5499,'multiline':False]
['text':'     }','line_number':5500,'multiline':False]
['text':'   }','line_number':5501,'multiline':False]
['text':' Before:','line_number':5524,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5525,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 20)) {','line_number':5526,'multiline':False]
['text':'       b[n, m] = (n <= m) ? 0.f : 1.f;','line_number':5527,'multiline':False]
['text':'     }','line_number':5528,'multiline':False]
['text':'   }','line_number':5529,'multiline':False]
['text':' After:','line_number':5530,'multiline':False]
['text':'   for (const auto n : c10::irange(30, 40)) {','line_number':5531,'multiline':False]
['text':'     for(const auto m : c10::irange(10, 20)) {','line_number':5532,'multiline':False]
['text':'       b[n, m] = 0.f;','line_number':5533,'multiline':False]
['text':'     }','line_number':5534,'multiline':False]
['text':'   }','line_number':5535,'multiline':False]
['text':' Before:','line_number':5560,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5561,'multiline':False]
['text':'     b[n] = n < 1 ? 0.f : 1.f;','line_number':5562,'multiline':False]
['text':'   }','line_number':5563,'multiline':False]
['text':' After:','line_number':5564,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5565,'multiline':False]
['text':'     b[n] = 1.f;','line_number':5566,'multiline':False]
['text':'   }','line_number':5567,'multiline':False]
['text':' Before:','line_number':5584,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5585,'multiline':False]
['text':'     b[n] = IfThenElse(n < 1 ? 1 : 0, 0.f, 1.f);','line_number':5586,'multiline':False]
['text':'   }','line_number':5587,'multiline':False]
['text':' After:','line_number':5588,'multiline':False]
['text':'   for (const auto n : c10::irange(1, N)) {','line_number':5589,'multiline':False]
['text':'     b[n] = 1.f;','line_number':5590,'multiline':False]
['text':'   }','line_number':5591,'multiline':False]
['text':' This test mimics the unpadded region of a conv2d.  We want to remove any','line_number':5608,'multiline':False]
['text':' conditional that is provably satisfied (or unsatisfied) by the entire loop','line_number':5609,'multiline':False]
['text':' range.','line_number':5610,'multiline':False]
['text':' Before:','line_number':5611,'multiline':False]
['text':'   for (const auto i : c10::irange(1, 7)) {','line_number':5612,'multiline':False]
['text':'     for (const auto j : c10::irange(1, 7)) {','line_number':5613,'multiline':False]
['text':'       b[i, j] = IfThenElse(','line_number':5614,'multiline':False]
['text':'         j>=7 ? 1 : (i>=7 ? 1 : (j<1 ? 1 : (i<1 ? 1 : 0))), 0.f, 1.f);','line_number':5615,'multiline':False]
['text':' After:','line_number':5616,'multiline':False]
['text':'   for (const auto i : c10::irange(1, 7)) {','line_number':5617,'multiline':False]
['text':'     for (const auto j : c10::irange(1, 7)) {','line_number':5618,'multiline':False]
['text':'       b[i, j] = 1.f;','line_number':5619,'multiline':False]
['text':' This test mimics the padded region of a conv2d.  We want to adjust the','line_number':5642,'multiline':False]
['text':' loop bounds such that the condition will be always met.  Note that this','line_number':5643,'multiline':False]
['text':' could be solved by peeling, and applying the range-based conditional','line_number':5644,'multiline':False]
['text':' simplification in the previous tests.','line_number':5645,'multiline':False]
['text':' Before:','line_number':5646,'multiline':False]
['text':'   for (const auto i : c10::irange(3)) {','line_number':5647,'multiline':False]
['text':'     for (const auto j : c10::irange(3)) {','line_number':5648,'multiline':False]
['text':'       b[i, j] = (b[i, j]) + (IfThenElse(','line_number':5649,'multiline':False]
['text':'         j>=7 ? 1 : (i>=7 ? 1 : (j<1 ? 1 : (i<1 ? 1 : 0))), 0.f, a[i, j]));','line_number':5650,'multiline':False]
['text':' After:','line_number':5651,'multiline':False]
['text':'   for (const auto i : c10::irange(1, 3)) {','line_number':5652,'multiline':False]
['text':'     for (const auto j : c10::irange(1, 3)) {','line_number':5653,'multiline':False]
['text':'       b[i, j] = (b[i, j]) + 1.f;','line_number':5654,'multiline':False]
['text':' namespace jit','line_number':5681,'multiline':False]
['text':' namespace torch','line_number':5682,'multiline':False]
