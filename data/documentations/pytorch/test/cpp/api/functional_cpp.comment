['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers,bugprone-argument-comment)','line_number':314,'multiline':False]
['text':'reduction=','line_number':316,'multiline':True]
['text':'beta=','line_number':316,'multiline':True]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)','line_number':329,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-argument-comment)','line_number':346,'multiline':False]
['text':'reduction=','line_number':347,'multiline':True]
['text':' bilinear, zeros, true','line_number':596,'multiline':False]
['text':' bilinear, zeros, false','line_number':607,'multiline':False]
['text':' default options (bilinear, zeros, false) same result as above','line_number':618,'multiline':False]
['text':' nearest, zeros, true','line_number':623,'multiline':False]
['text':' bilinear, border, true','line_number':634,'multiline':False]
['text':' bilinear, reflection, true','line_number':645,'multiline':False]
['text':' 2D affine.','line_number':659,'multiline':False]
['text':' 3D affine.','line_number':676,'multiline':False]
['text':' Check that if we use torch::pairwise_distance with the default','line_number':821,'multiline':False]
['text':' TripletMarginLoss options as our distance function, the outputs','line_number':822,'multiline':False]
['text':' are equal (i.e., equal under defaults).','line_number':823,'multiline':False]
['text':' handle for torch::kNone reduction','line_number':858,'multiline':False]
['text':' label smoothing with class indices','line_number':897,'multiline':False]
['text':' label smoothing with target probabilities','line_number':907,'multiline':False]
['text':' Test #1','line_number':1162,'multiline':False]
['text':' Test #2','line_number':1173,'multiline':False]
['text':' Test #3','line_number':1189,'multiline':False]
['text':' Test 1: No-options','line_number':1271,'multiline':False]
['text':' All values positive','line_number':1277,'multiline':False]
['text':' Shape unchanged','line_number':1279,'multiline':False]
['text':' One choice per draw','line_number':1281,'multiline':False]
['text':' Test 2: 1D shape, 0 and -1 dim','line_number':1286,'multiline':False]
['text':' All values positive','line_number':1293,'multiline':False]
['text':' Shape unchanged','line_number':1295,'multiline':False]
['text':' One choice per draw','line_number':1297,'multiline':False]
['text':' Test 3: 2D shape, 1 dim','line_number':1302,'multiline':False]
['text':' All values positive','line_number':1308,'multiline':False]
['text':' Shape unchanged','line_number':1310,'multiline':False]
['text':' One choice per draw','line_number':1312,'multiline':False]
['text':' Test 4: 3D shape, 1 and -1 dim','line_number':1317,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':1318,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,cppcoreguidelines-avoid-magic-numbers)','line_number':1320,'multiline':False]
['text':' All values positive','line_number':1328,'multiline':False]
['text':' Shape unchanged','line_number':1330,'multiline':False]
['text':' One choice per draw','line_number':1332,'multiline':False]
['text':' Test 5: Straight through','line_number':1337,'multiline':False]
['text':' Suppress unused variable warning','line_number':1347,'multiline':False]
['text':' All values positive','line_number':1353,'multiline':False]
['text':' Each experiment should result in 1 draw','line_number':1355,'multiline':False]
['text':' Check results are asymptotically as expected','line_number':1358,'multiline':False]
['text':' ~z is approximately N(0,1) for unbiased count','line_number':1360,'multiline':False]
['text':' A (lazy) approximate 99% two-sided test:','line_number':1362,'multiline':False]
['text':' occurs with prob alpha~>=0.01 if unbiased','line_number':1363,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-argument-comment)','line_number':1370,'multiline':False]
['text':'dim=','line_number':1371,'multiline':True]
['text':' NOLINTNEXTLINE(bugprone-argument-comment)','line_number':1382,'multiline':False]
['text':'dim=','line_number':1383,'multiline':True]
['text':' NOLINTNEXTLINE(bugprone-argument-comment)','line_number':1394,'multiline':False]
['text':'dim=','line_number':1395,'multiline':True]
['text':' no options test','line_number':1497,'multiline':False]
['text':' Test #1','line_number':1534,'multiline':False]
['text':' reduce to scalar to call .backward()','line_number':1540,'multiline':False]
['text':' Test #2 Check variations of optional arguments','line_number':1549,'multiline':False]
['text':' non-null output argument','line_number':1553,'multiline':False]
['text':' default options','line_number':1555,'multiline':False]
['text':' Test #3 Base case of scalar tensor','line_number':1561,'multiline':False]
['text':' NOLINTNEXTLINE(bugprone-argument-comment)','line_number':1586,'multiline':False]
['text':'inplace=','line_number':1587,'multiline':True]
['text':' NOLINTNEXTLINE(bugprone-argument-comment)','line_number':1626,'multiline':False]
['text':'inplace=','line_number':1627,'multiline':True]
['text':' NOLINTNEXTLINE(bugprone-argument-comment)','line_number':1849,'multiline':False]
['text':'lambda=','line_number':1850,'multiline':True]
['text':' 1D interpolation','line_number':2224,'multiline':False]
['text':' 2D interpolation','line_number':2235,'multiline':False]
['text':' test float scale factor up & down sampling','line_number':2237,'multiline':False]
['text':' 3D interpolation','line_number':2255,'multiline':False]
['text':' test CTCLoss typechecks','line_number':2562,'multiline':False]
['text':' test CTCLoss length checks','line_number':2580,'multiline':False]
['text':' test CTCLoss empty target','line_number':2590,'multiline':False]
['text':' torch::allclose does not support comparing torch::kBool','line_number':2917,'multiline':False]
['text':' torch::allclose does not support comparing torch::kBool','line_number':2988,'multiline':False]
['text':'equal_nan=','line_number':3069,'multiline':True]
['text':'equal_nan=','line_number':3070,'multiline':True]
['text':'equal_nan=','line_number':3071,'multiline':True]
['text':'equal_nan=','line_number':3080,'multiline':True]
['text':'equal_nan=','line_number':3081,'multiline':True]
['text':'equal_nan=','line_number':3082,'multiline':True]
['text':' test BCE with logits raises if target and input are different size','line_number':3110,'multiline':False]
['text':' test BCE with logits gives same result as sigmoid and bce loss','line_number':3125,'multiline':False]
['text':' test BCE with logits has correct grad at zero','line_number':3174,'multiline':False]
['text':' test BCE with logits broadcasts weights','line_number':3185,'multiline':False]
['text':' test BCE with logits ones in pos weights are the same as none','line_number':3217,'multiline':False]
['text':' test BCE with logits broadcasts pos weights','line_number':3230,'multiline':False]
['text':' test BCE with logits with pos weight has correct grad at zero','line_number':3254,'multiline':False]
['text':' NOLINTNEXTLINE(performance-unnecessary-copy-initialization)','line_number':3266,'multiline':False]
['text':' test BCE with logits stability','line_number':3270,'multiline':False]
