['text':' Arms test to send signal to PID when the semaphore unlocks. This','line_number':41,'multiline':False]
['text':' happens as soon as the first collective completes successfully.','line_number':42,'multiline':False]
['text':' Set a timeout that is small enough to make this test run fast, but also','line_number':54,'multiline':False]
['text':' make sure that we don't get timeouts in the ProcessGroupGloo constructor.','line_number':55,'multiline':False]
['text':' Initialize tensor list','line_number':62,'multiline':False]
['text':' Loop until an exception happens','line_number':67,'multiline':False]
['text':' Set a timeout that is small enough to make this test run fast, but also','line_number':159,'multiline':False]
['text':' make sure that we don't get timeouts in the ProcessGroupGloo constructor.','line_number':160,'multiline':False]
['text':' Assumptions: no two expected shapes are the same','line_number':246,'multiline':False]
['text':' Generate inputs','line_number':268,'multiline':False]
['text':' Kick off work','line_number':279,'multiline':False]
['text':' report_input_shapes ','line_number':283,'multiline':True]
['text':' Wait for work to complete','line_number':287,'multiline':False]
['text':' Verify outputs','line_number':294,'multiline':False]
['text':' UsingWorkAPI tests are to make sure we still properly support work API.','line_number':305,'multiline':False]
['text':' This should go away as we deprecate it.','line_number':306,'multiline':False]
['text':' Generate inputs','line_number':314,'multiline':False]
['text':' Kick off work','line_number':325,'multiline':False]
['text':' report_input_shapes ','line_number':329,'multiline':True]
['text':' Wait for work to complete','line_number':333,'multiline':False]
['text':' Verify outputs','line_number':340,'multiline':False]
['text':' Try every permutation of root rank and root tensor','line_number':361,'multiline':False]
['text':' Initialize inputs','line_number':365,'multiline':False]
['text':' This won't work if we ever support sparse CUDA','line_number':370,'multiline':False]
['text':' Kick off work','line_number':385,'multiline':False]
['text':' report_input_shapes ','line_number':388,'multiline':True]
['text':' Wait for work to complete','line_number':395,'multiline':False]
['text':' Verify outputs','line_number':402,'multiline':False]
['text':' Generate inputs','line_number':421,'multiline':False]
['text':' Allocate outputs','line_number':434,'multiline':False]
['text':' Generate splits','line_number':442,'multiline':False]
['text':' Kick off work','line_number':456,'multiline':False]
['text':' Due to concatenation of tensors, shape will actually be the sum','line_number':461,'multiline':False]
['text':' report_input_shapes ','line_number':469,'multiline':True]
['text':' Wait for work to complete','line_number':475,'multiline':False]
['text':' Verify outputs','line_number':482,'multiline':False]
['text':' Kick off work','line_number':503,'multiline':False]
['text':' report_input_shapes ','line_number':505,'multiline':True]
['text':' Wait for work to complete','line_number':511,'multiline':False]
['text':' Barrier does not use tensors, so skip shape checking.','line_number':517,'multiline':False]
['text':' verify_shapes ','line_number':523,'multiline':True]
['text':' Non-failure case: all ranks pass the blocking monitored barrier.','line_number':529,'multiline':False]
['text':' Failure case: Only rank 0 calls into monitored barrier, should result in','line_number':541,'multiline':False]
['text':' error','line_number':542,'multiline':False]
['text':' delay ','line_number':583,'multiline':True]
['text':' test that waiting for work to be sent can be aborted successfully.','line_number':586,'multiline':False]
['text':' test that waiting for work to be sent can be aborted successfully.','line_number':602,'multiline':False]
['text':' report_input_shapes ','line_number':614,'multiline':True]
['text':' Block until the sendWork gets successfully aborted','line_number':619,'multiline':False]
['text':' Now create a separate sender thread to ensure that future waitsends can','line_number':625,'multiline':False]
['text':' complete successfully.','line_number':626,'multiline':False]
['text':' Helper receiver to simulate a real recv/send pair','line_number':628,'multiline':False]
['text':' Sender thread','line_number':641,'multiline':False]
['text':' test that waiting for work to be received can be aborted successfully.','line_number':652,'multiline':False]
['text':' report_input_shapes ','line_number':664,'multiline':True]
['text':' Block until the first recv gets successfully aborted','line_number':669,'multiline':False]
['text':' Now create a separate receiver thread to ensure that future waits can','line_number':675,'multiline':False]
['text':' complete successfully.','line_number':676,'multiline':False]
['text':' Helper sender thread to simulate a real recv/send pair.','line_number':678,'multiline':False]
['text':' Receiver thread.','line_number':691,'multiline':False]
['text':' test that get() gets the same value as the one that was set()','line_number':701,'multiline':False]
['text':' Cast to ProcessGroupGloo::GlooStore to test specific GlooStore APIs.','line_number':703,'multiline':False]
['text':' test SIGSTOP','line_number':716,'multiline':False]
['text':' Fork() and TSAN don't play well together, so skip the test if we're testing','line_number':717,'multiline':False]
['text':' with TSAN.','line_number':718,'multiline':False]
['text':' test SIGKILL','line_number':731,'multiline':False]
['text':' Fork() and TSAN don't play well together, so skip the test if we're testing','line_number':732,'multiline':False]
['text':' with TSAN.','line_number':733,'multiline':False]
['text':' CUDA-only tests','line_number':827,'multiline':False]
