['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':26,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-narrowing-conversions,bugprone-narrowing-conversions)','line_number':32,'multiline':False]
['text':' NOLINTNEXTLINE(modernize-use-equals-default)','line_number':62,'multiline':False]
['text':' to make sure this is not just attribute lookup','line_number':74,'multiline':False]
['text':' to make sure this is not just attribute lookup','line_number':78,'multiline':False]
['text':' to make sure this is not just attribute lookup','line_number':83,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)','line_number':112,'multiline':False]
['text':'op','line_number':128,'multiline':True]
['text':'inputs','line_number':129,'multiline':True]
['text':'output','line_number':130,'multiline':True]
['text':' NOLINTNEXTLINE(modernize-use-equals-default)','line_number':132,'multiline':False]
['text':' Load a list of instructions into the interpreter. As specified above,','line_number':135,'multiline':False]
['text':' instructions specify the operation (currently support "add" and "mul"),','line_number':136,'multiline':False]
['text':' the names of the input values, and the name of the single output value','line_number':137,'multiline':False]
['text':' from this instruction','line_number':138,'multiline':False]
['text':' Add a constant. The interpreter maintains a set of constants across','line_number':143,'multiline':False]
['text':' calls. They are keyed by name, and constants can be referenced in','line_number':144,'multiline':False]
['text':' Instructions by the name specified','line_number':145,'multiline':False]
['text':' Set the string names for the positional inputs to the function this','line_number':150,'multiline':False]
['text':' interpreter represents. When invoked, the interpreter will assign','line_number':151,'multiline':False]
['text':' the positional inputs to the names in the corresponding position in','line_number':152,'multiline':False]
['text':' input_names.','line_number':153,'multiline':False]
['text':' Specify the output name for the function this interpreter represents. This','line_number':158,'multiline':False]
['text':' should match the "output" field of one of the instructions in the','line_number':159,'multiline':False]
['text':' instruction list, typically the last instruction.','line_number':160,'multiline':False]
['text':' Invoke this interpreter. This takes a list of positional inputs and returns','line_number':165,'multiline':False]
['text':' a single output. Currently, inputs and outputs must all be Tensors.','line_number':166,'multiline':False]
['text':' Environment to hold local variables','line_number':168,'multiline':False]
['text':' Load inputs according to the specified names','line_number':171,'multiline':False]
['text':' Retrieve all input values for this op','line_number':183,'multiline':False]
['text':' Operator output values shadow constants.','line_number':186,'multiline':False]
['text':' Imagine all constants are defined in statements at the beginning','line_number':187,'multiline':False]
['text':' of a function (a la K&R C). Any definition of an output value must','line_number':188,'multiline':False]
['text':' necessarily come after constant definition in textual order. Thus,','line_number':189,'multiline':False]
['text':' We look up values in the environment first then the constant table','line_number':190,'multiline':False]
['text':' second to implement this shadowing behavior','line_number':191,'multiline':False]
['text':' Run the specified operation','line_number':203,'multiline':False]
['text':' Write back result into environment','line_number':222,'multiline':False]
['text':' Ser/De infrastructure. See','line_number':234,'multiline':False]
['text':' https://pytorch.org/tutorials/advanced/torch_script_custom_classes.html#defining-serialization-deserialization-methods-for-custom-c-classes','line_number':235,'multiline':False]
['text':' for more info.','line_number':236,'multiline':False]
['text':' This is the type we will use to marshall information on disk during','line_number':238,'multiline':False]
['text':' ser/de. It is a simple tuple composed of primitive types and simple','line_number':239,'multiline':False]
['text':' collection types like vector, optional, and dict.','line_number':240,'multiline':False]
['text':'input_names_','line_number':242,'multiline':True]
['text':'output_name_','line_number':243,'multiline':True]
['text':'constants_','line_number':244,'multiline':True]
['text':'instructions_','line_number':245,'multiline':True]
['text':' This function yields the SerializationType instance for `this`.','line_number':248,'multiline':False]
['text':' This function will create an instance of `ElementwiseInterpreter` given','line_number':254,'multiline':False]
['text':' an instance of `SerializationType`.','line_number':255,'multiline':False]
['text':' Class members','line_number':267,'multiline':False]
['text':' .def(torch::init<>())','line_number':316,'multiline':False]
['text':' __setstate__','line_number':366,'multiline':False]
['text':' clang-format off','line_number':389,'multiline':False]
['text':' The following will fail with a static assert telling you you have to','line_number':390,'multiline':False]
['text':' take an intrusive_ptr<MyStackClass> as the first argument.','line_number':391,'multiline':False]
['text':' .def("foo", [](int64_t a) -> int64_t{ return 3;});','line_number':392,'multiline':False]
['text':' clang-format on','line_number':393,'multiline':False]
['text':' __getstate__','line_number':398,'multiline':False]
['text':' __setstate__','line_number':401,'multiline':False]
['text':' test that schema inference is ok too','line_number':418,'multiline':False]
['text':' __getstate__ ','line_number':429,'multiline':True]
['text':' __setstate__ ','line_number':433,'multiline':True]
['text':' namespace','line_number':439,'multiline':False]
