['text':' Fixture to set up a graph and make assertions clearer','line_number':20,'multiline':False]
['text':' Nodes are named after their output.','line_number':28,'multiline':False]
['text':' e.g. "a" is an alias for "the node that outputs the value `a`"','line_number':29,'multiline':False]
['text':' block depends on l','line_number':44,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-vector-operation)','line_number':61,'multiline':False]
['text':' NOLINTNEXTLINE(performance-inefficient-vector-operation)','line_number':72,'multiline':False]
['text':' Check the graph is okay','line_number':123,'multiline':False]
['text':' If this is the picture of nodes','line_number':126,'multiline':False]
['text':' <some nodes> ... toInsert ... <some more nodes> ... insertPoint','line_number':127,'multiline':False]
['text':' ^----------^ check that these nodes haven't moved','line_number':128,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':155,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':157,'multiline':False]
['text':' NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':159,'multiline':False]
['text':' Check that we are removing `this`'s deps properly when we need to split','line_number':164,'multiline':False]
['text':' `this` and deps (see code for what the hell that means)','line_number':165,'multiline':False]
['text':' Move after','line_number':170,'multiline':False]
['text':' Simple move backward','line_number':172,'multiline':False]
['text':' simple invalid move backward','line_number':177,'multiline':False]
['text':' doesn't actually move anything','line_number':182,'multiline':False]
['text':' move backward with multiple dependencies','line_number':188,'multiline':False]
['text':' Move backward with non-zero working set','line_number':194,'multiline':False]
['text':' Simple move forward','line_number':200,'multiline':False]
['text':' Move forward with non-zero working set','line_number':206,'multiline':False]
['text':' Move before','line_number':211,'multiline':False]
['text':' Simple move forward','line_number':213,'multiline':False]
['text':' Simple move backward','line_number':219,'multiline':False]
['text':' doesn't actually move anything','line_number':225,'multiline':False]
['text':' move forward with deps','line_number':231,'multiline':False]
['text':' move backward with deps','line_number':237,'multiline':False]
['text':' check that dependencies in blocks are recognized','line_number':242,'multiline':False]
['text':' Test that moveAfter(n) and moveBefore(n->next()) are not necessarily','line_number':250,'multiline':False]
['text':' equivalent. Here, the dependency ordering is n -> o -> p.  So we can't','line_number':251,'multiline':False]
['text':' move `n` after `o`, but we can move `n` before `p` (which pushes `o` after','line_number':252,'multiline':False]
['text':' `p`)','line_number':253,'multiline':False]
['text':' condition value','line_number':267,'multiline':False]
['text':' Mutate in true block','line_number':271,'multiline':False]
['text':' namespace','line_number':314,'multiline':False]
['text':' addsB = b + b','line_number':321,'multiline':False]
['text':' c = a + b','line_number':322,'multiline':False]
['text':' a += b','line_number':323,'multiline':False]
['text':' d = c + c','line_number':324,'multiline':False]
['text':' Can't move past a mutation of a used value','line_number':333,'multiline':False]
['text':' b should alias to a (since they are both inputs)','line_number':337,'multiline':False]
['text':' Test moves across side effectful nodes','line_number':366,'multiline':False]
['text':' def foo(a):','line_number':374,'multiline':False]
['text':'  print2(a, a)','line_number':375,'multiline':False]
['text':'  print1(a)','line_number':376,'multiline':False]
['text':' test moving across each other','line_number':378,'multiline':False]
['text':' test moving where they already are','line_number':382,'multiline':False]
['text':' def foo(a):','line_number':389,'multiline':False]
['text':'  print2(a, a)','line_number':390,'multiline':False]
['text':'  non_side_effectful = makeTestTensor()','line_number':391,'multiline':False]
['text':'  print1(a)','line_number':392,'multiline':False]
['text':' test moving with a side effectful node between','line_number':394,'multiline':False]
['text':' Test moves across inner blocks','line_number':402,'multiline':False]
['text':' a = rand(1)','line_number':404,'multiline':False]
['text':' b = rand(1)','line_number':405,'multiline':False]
['text':' if True:','line_number':406,'multiline':False]
['text':'   a.add_(b)','line_number':407,'multiline':False]
['text':' c = a + b','line_number':408,'multiline':False]
['text':' we should not be able to move `c` before the if statement, since it','line_number':427,'multiline':False]
['text':' may write to `a`.','line_number':428,'multiline':False]
['text':' x, b, c escape scope, so we can't introduce an aliasing relationship','line_number':471,'multiline':False]
['text':' e aliases the wildcard set because it's contained in a list','line_number':477,'multiline':False]
['text':' d is a temporary with no writers, safe to change aliasing relationship','line_number':481,'multiline':False]
['text':' here','line_number':482,'multiline':False]
['text':' aten::add(%b, %b)','line_number':626,'multiline':False]
['text':' aten::add_(%a, %b)','line_number':627,'multiline':False]
['text':' foo::creates_alias(%a)','line_number':628,'multiline':False]
['text':' string','line_number':788,'multiline':False]
['text':' primitive values don't need to alias container','line_number':793,'multiline':False]
['text':' Test input aliasing','line_number':825,'multiline':False]
['text':' Test tuple that doesn't come from construct','line_number':845,'multiline':False]
['text':' test nested types','line_number':877,'multiline':False]
['text':' TODO FIX assume conservatively for now','line_number':896,'multiline':False]
['text':' simple example','line_number':904,'multiline':False]
['text':' Test list container aliasing','line_number':963,'multiline':False]
['text':' Tensors x, y, and z went into a list, so they all may alias each other.','line_number':989,'multiline':False]
['text':' But we know `fresh` didn't go into a list, so x, y, and z should not','line_number':994,'multiline':False]
['text':' alias it.','line_number':995,'multiline':False]
['text':' test "conservative" analysis writes to the inside of a container.','line_number':1003,'multiline':False]
['text':' Write to the inside of a list. Check that we can't reorder a','line_number':1037,'multiline':False]
['text':' print across it.','line_number':1038,'multiline':False]
['text':' The same as above, but with a nested list','line_number':1069,'multiline':False]
['text':' Write to the inside of a list. Check that we can't reorder a','line_number':1077,'multiline':False]
['text':' print across it.','line_number':1078,'multiline':False]
['text':' Test writes to wildcards','line_number':1153,'multiline':False]
['text':' test that wildcards are correctly divided by type','line_number':1164,'multiline':False]
['text':' test invariant container aliasing','line_number':1198,'multiline':False]
['text':' the containers of different type cannot alias each other,','line_number':1199,'multiline':False]
['text':' however they may contain elements which alias each other','line_number':1200,'multiline':False]
['text':' Conservatively we assume there is a reference','line_number':1266,'multiline':False]
['text':' Conservatively we assume there is a reference','line_number':1283,'multiline':False]
['text':' Registration time is okay, but throw exception when fetch from','line_number':1301,'multiline':False]
['text':' registration.','line_number':1302,'multiline':False]
['text':' Registration time is okay, but throw exception when fetch from','line_number':1321,'multiline':False]
['text':' registration.','line_number':1322,'multiline':False]
['text':' The schema doesn't contain alias information, which means it's pure','line_number':1355,'multiline':False]
['text':' (meh!)','line_number':1356,'multiline':False]
['text':' The schema has an alias reference','line_number':1372,'multiline':False]
['text':' The schema does not have an alias reference','line_number':1387,'multiline':False]
['text':' The schema is pure, there cannot be any alias','line_number':1404,'multiline':False]
['text':' The schema is pure, there cannot be any alias','line_number':1421,'multiline':False]
['text':' Registration time is okay, but throw exception when fetch from','line_number':1436,'multiline':False]
['text':' registration.','line_number':1437,'multiline':False]
['text':' bc y.1 has a single used in a single non-aliasing aten op,','line_number':1460,'multiline':False]
['text':' x is added to y.1 contained elements instead of wildcard set','line_number':1461,'multiline':False]
['text':' write to contained element should prevent move','line_number':1464,'multiline':False]
['text':'isFrozen=','line_number':1482,'multiline':True]
['text':'isFrozen=','line_number':1526,'multiline':True]
['text':'isFrozen=','line_number':1558,'multiline':True]
['text':'isFrozen=','line_number':1584,'multiline':True]
['text':' Registration time is okay, but throw exception when fetch from','line_number':1603,'multiline':False]
['text':' registration.','line_number':1604,'multiline':False]
['text':' namespace jit','line_number':1694,'multiline':False]
['text':' namespace torch','line_number':1695,'multiline':False]
