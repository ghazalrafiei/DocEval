['text':' Owner(s): ["module: dataloader"]','line_number':1,'multiline':False]
['text':' pyre isn't treating this the same as a typing.NamedTuple','line_number':30,'multiline':False]
['text':' XXX: By default, dill writes the Pickler dispatch table to inject its','line_number':70,'multiline':False]
['text':' own logic there. This globally affects the behavior of the standard library','line_number':71,'multiline':False]
['text':' pickler for any user who transitively depends on this module!','line_number':72,'multiline':False]
['text':' Undo this extension to avoid altering the behavior of the pickler globally.','line_number':73,'multiline':False]
['text':' type: ignore[import] # noqa: F401 F403','line_number':81,'multiline':False]
['text':' The temp dir and files within it will be released and deleted in tearDown().','line_number':93,'multiline':False]
['text':' Adding `noqa: P201` to avoid mypy's warning on not releasing the dir handle within this function.','line_number':94,'multiline':False]
['text':' noqa: P201','line_number':95,'multiline':False]
['text':' noqa: P201','line_number':109,'multiline':False]
['text':' Same exception when pickle','line_number':258,'multiline':False]
['text':' test functional API','line_number':315,'multiline':False]
['text':' The output order should be always the same.','line_number':327,'multiline':False]
['text':' The output order should be always the same.','line_number':331,'multiline':False]
['text':' test import datapipe class directly','line_number':335,'multiline':False]
['text':' functional API','line_number':354,'multiline':False]
['text':' __len__ Test','line_number':366,'multiline':False]
['text':' Byte stream is not closed','line_number':384,'multiline':False]
['text':' Corresponding byte stream is closed by Decoder','line_number':397,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':431,'multiline':False]
['text':' testing the keep_key option','line_number':447,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':454,'multiline':False]
['text':' Functional Test: demux and mux works sequentially as expected','line_number':478,'multiline':False]
['text':' Functional Test: Uneven DataPipes','line_number':484,'multiline':False]
['text':' Suppress warning for lambda fn','line_number':493,'multiline':False]
['text':' tuple','line_number':504,'multiline':False]
['text':' list','line_number':506,'multiline':False]
['text':' somehow swallows pandas UserWarning when `df.c = df.b + df['a'] * 7`','line_number':530,'multiline':False]
['text':' TODO(VitalyFedyunin): Decouple tests from dill by avoiding lambdas in map','line_number':554,'multiline':False]
['text':'  With non-zero (but extremely low) probability (when shuffle do nothing),','line_number':566,'multiline':False]
['text':'  this test fails, so feel free to restart','line_number':567,'multiline':False]
['text':' Prevent in-place modification','line_number':636,'multiline':False]
['text':' noqa: E731','line_number':673,'multiline':False]
['text':' noqa: E731','line_number':674,'multiline':False]
['text':' noqa: E731','line_number':675,'multiline':False]
['text':' 1. Testing for serialization before any iteration starts','line_number':704,'multiline':False]
['text':' 2. Testing for serialization after DataPipe is partially read','line_number':706,'multiline':False]
['text':' 3. Testing for serialization after DataPipe is fully read','line_number':710,'multiline':False]
['text':' 1. Testing for serialization before any iteration starts','line_number':716,'multiline':False]
['text':' 2. Testing for serialization after DataPipe is partially read','line_number':720,'multiline':False]
['text':' Catch `fork`, `demux` "some child DataPipes are not exhausted" warning','line_number':723,'multiline':False]
['text':' 2.5. Testing for serialization after one child DataPipe is fully read','line_number':728,'multiline':False]
['text':'      (Only for DataPipes with children DataPipes)','line_number':729,'multiline':False]
['text':' fully read one child','line_number':731,'multiline':False]
['text':' Catch `fork`, `demux` "some child DataPipes are not exhausted" warning','line_number':732,'multiline':False]
['text':' 3. Testing for serialization after DataPipe is fully read','line_number':737,'multiline':False]
['text':' fully read the other child','line_number':739,'multiline':False]
['text':' Skipping comparison for these DataPipes','line_number':766,'multiline':False]
['text':' These DataPipes produce multiple DataPipes as outputs and those should be compared','line_number':768,'multiline':False]
['text':' Merely make sure they are picklable and loadable (no value comparison)','line_number':774,'multiline':False]
['text':' type: ignore[call-arg]','line_number':775,'multiline':False]
['text':' DataPipes that have children','line_number':778,'multiline':False]
['text':' type: ignore[call-arg]','line_number':779,'multiline':False]
['text':' Single DataPipe that requires comparison','line_number':781,'multiline':False]
['text':' type: ignore[call-arg]','line_number':782,'multiline':False]
['text':' type: ignore[call-arg]','line_number':824,'multiline':False]
['text':' type: ignore[call-arg]','line_number':827,'multiline':False]
['text':' type: ignore[call-arg]','line_number':837,'multiline':False]
['text':' "sampler",','line_number':860,'multiline':False]
['text':' pydoc works differently on Python 3.8, see','line_number':870,'multiline':False]
['text':' https://docs.python.org/3/whatsnew/3.9.html#pydoc','line_number':871,'multiline':False]
['text':' Functional Test: values are unchanged and in the same order','line_number':883,'multiline':False]
['text':' Functional Test: deep copy by default when an iterator is initialized (first element is read)','line_number':886,'multiline':False]
['text':' The deep copy only happens when the first element is read','line_number':888,'multiline':False]
['text':' Functional Test: shallow copy','line_number':892,'multiline':False]
['text':' Reset Test: reset the DataPipe','line_number':898,'multiline':False]
['text':' __len__ Test: inherits length from sequence','line_number':906,'multiline':False]
['text':' Functional Test: Raises exception for empty input','line_number':913,'multiline':False]
['text':' Functional Test: Raises exception for non-IterDataPipe input','line_number':917,'multiline':False]
['text':' type: ignore[arg-type]','line_number':919,'multiline':False]
['text':' Functional Test: Concatenate DataPipes as expected','line_number':921,'multiline':False]
['text':' Reset Test: reset the DataPipe','line_number':926,'multiline':False]
['text':' __len__ Test: inherits length from source DataPipe','line_number':932,'multiline':False]
['text':' Functional Test: making sure all child DataPipe shares the same reference','line_number':949,'multiline':False]
['text':' Functional Test: one child DataPipe yields all value at a time','line_number':953,'multiline':False]
['text':' Functional Test: two child DataPipes yield value together','line_number':959,'multiline':False]
['text':' Functional Test: one child DataPipe yields all value first, but buffer_size = 5 being too small','line_number':966,'multiline':False]
['text':' Functional Test: one child DataPipe yields all value first with unlimited buffer','line_number':980,'multiline':False]
['text':' Functional Test: two child DataPipes yield value together with buffer size 1','line_number':989,'multiline':False]
['text':' Functional Test: two child DataPipes yield shallow copies with copy equals shallow','line_number':996,'multiline':False]
['text':' Functional Test: two child DataPipes yield deep copies with copy equals deep','line_number':1002,'multiline':False]
['text':' Functional Test: fork DataPipe raises error for unknown copy method','line_number':1008,'multiline':False]
['text':' Functional Test: make sure logic related to slowest_ptr is working properly','line_number':1012,'multiline':False]
['text':' yield all of dp3 when halfway through dp1, dp2','line_number':1018,'multiline':False]
['text':' Reset Test: DataPipe resets when a new iterator is created, even if this datapipe hasn't been read','line_number':1025,'multiline':False]
['text':' This will reset all child DataPipes','line_number':1034,'multiline':False]
['text':' Reset Test: DataPipe resets when some of it has been read','line_number':1039,'multiline':False]
['text':' Reset both all child DataPipe','line_number':1047,'multiline':False]
['text':' Reset Test: DataPipe reset, even when some other child DataPipes are not read','line_number':1060,'multiline':False]
['text':' Resets even though dp3 has not been read','line_number':1066,'multiline':False]
['text':' Resets even though dp3 is only partially read','line_number':1074,'multiline':False]
['text':' dp3 has to read from the start again','line_number':1080,'multiline':False]
['text':' __len__ Test: Each DataPipe inherits the source datapipe's length','line_number':1082,'multiline':False]
['text':' Pickle Test:','line_number':1088,'multiline':False]
['text':' This should not raise any error','line_number':1090,'multiline':False]
['text':' This should not raise any error either','line_number':1093,'multiline':False]
['text':' Functional Test: Elements are yielded one at a time from each DataPipe, until they are all exhausted','line_number':1097,'multiline':False]
['text':' Functional Test: Uneven input Data Pipes','line_number':1106,'multiline':False]
['text':' Functional Test: Empty Data Pipe','line_number':1115,'multiline':False]
['text':' __len__ Test: raises TypeError when __len__ is called and an input doesn't have __len__','line_number':1122,'multiline':False]
['text':' Functional Test: split into 2 DataPipes and output them one at a time','line_number':1135,'multiline':False]
['text':' Functional Test: split into 2 DataPipes and output them together','line_number':1141,'multiline':False]
['text':' Functional Test: values of the same classification are lumped together, and buffer_size = 3 being too small','line_number':1148,'multiline':False]
['text':' Buffer raises because first 5 elements all belong to the a different child','line_number':1152,'multiline':False]
['text':' Functional Test: values of the same classification are lumped together, and buffer_size = 5 is just enough','line_number':1156,'multiline':False]
['text':' Functional Test: values of the same classification are lumped together, and unlimited buffer','line_number':1162,'multiline':False]
['text':' Functional Test: classifier returns a value outside of [0, num_instance - 1]','line_number':1176,'multiline':False]
['text':' Reset Test: DataPipe resets when a new iterator is created, even if this datapipe hasn't been read','line_number':1183,'multiline':False]
['text':' This will reset all child DataPipes','line_number':1192,'multiline':False]
['text':' Reset Test: DataPipe resets when some of it has been read','line_number':1197,'multiline':False]
['text':' Reset all child DataPipes','line_number':1206,'multiline':False]
['text':' Reset Test: DataPipe reset, even when not all child DataPipes are exhausted','line_number':1217,'multiline':False]
['text':' Reset even when dp2 is not read','line_number':1222,'multiline':False]
['text':' Can reset even when dp2 is partially read','line_number':1231,'multiline':False]
['text':' output2 has to read from beginning again','line_number':1235,'multiline':False]
['text':' Functional Test: drop_none = True','line_number':1238,'multiline':False]
['text':' Functional Test: drop_none = False','line_number':1244,'multiline':False]
['text':' __len__ Test: __len__ not implemented','line_number':1251,'multiline':False]
['text':' It is not implemented as we do not know length for each child in advance','line_number':1254,'multiline':False]
['text':' Pickle Test:','line_number':1258,'multiline':False]
['text':' This should not raise any error','line_number':1260,'multiline':False]
['text':' This should not raise any error either','line_number':1263,'multiline':False]
['text':' Functional Test: apply to each element correctly','line_number':1273,'multiline':False]
['text':' Functional Test: works with partial function','line_number':1279,'multiline':False]
['text':' __len__ Test: inherits length from source DataPipe','line_number':1284,'multiline':False]
['text':' __len__ Test: inherits length from source DataPipe - raises error when invalid','line_number':1292,'multiline':False]
['text':' Reset Test: DataPipe resets properly','line_number':1296,'multiline':False]
['text':' Suppress warning for lambda fn','line_number':1302,'multiline':False]
['text':' Reset','line_number':1346,'multiline':False]
['text':' Replacing with one input column and default output column','line_number':1356,'multiline':False]
['text':' The index of input column is out of range','line_number':1359,'multiline':False]
['text':' Unmatched input columns with fn arguments','line_number':1361,'multiline':False]
['text':' _helper(None, p_fn_cmplx, [0, 1, 2], error=ValueError)','line_number':1371,'multiline':False]
['text':' Fn has keyword-only arguments','line_number':1373,'multiline':False]
['text':' Replacing with multiple input columns and default output column (the left-most input column)','line_number':1377,'multiline':False]
['text':' output_col can only be specified when input_col is not None','line_number':1381,'multiline':False]
['text':' output_col can only be single-element list or tuple','line_number':1383,'multiline':False]
['text':' Single-element list as output_col','line_number':1385,'multiline':False]
['text':' Replacing with one input column and single specified output column','line_number':1387,'multiline':False]
['text':' The index of output column is out of range','line_number':1390,'multiline':False]
['text':' Appending the output at the end','line_number':1395,'multiline':False]
['text':' Handling built-in functions (e.g. `dict`, `iter`, `int`, `str`) whose signatures cannot be inspected','line_number':1401,'multiline':False]
['text':' Handle nn.Module and Callable (without __name__ implemented)','line_number':1405,'multiline':False]
['text':' Suppress warning for lambda fn','line_number':1409,'multiline':False]
['text':' Prevent modification in-place to support resetting','line_number':1447,'multiline':False]
['text':' Reset','line_number':1470,'multiline':False]
['text':' non-default kw-only args','line_number':1484,'multiline':False]
['text':' Replacing with one input column and default output column','line_number':1490,'multiline':False]
['text':' The key of input column is not in dict','line_number':1493,'multiline':False]
['text':' Unmatched input columns with fn arguments','line_number':1495,'multiline':False]
['text':' Replacing with multiple input columns and default output column (the left-most input column)','line_number':1501,'multiline':False]
['text':' output_col can only be specified when input_col is not None','line_number':1506,'multiline':False]
['text':' output_col can only be single-element list or tuple','line_number':1508,'multiline':False]
['text':' Single-element list as output_col','line_number':1510,'multiline':False]
['text':' Replacing with one input column and single specified output column','line_number':1512,'multiline':False]
['text':' Adding new key to dict for the output','line_number':1519,'multiline':False]
['text':' Functional Test: defaults to the default collate function when a custom one is not specified','line_number':1533,'multiline':False]
['text':' Functional Test: custom collate function','line_number':1538,'multiline':False]
['text':' Functional Test: custom, partial collate function','line_number':1543,'multiline':False]
['text':' Reset Test: reset the DataPipe and results are still correct','line_number':1548,'multiline':False]
['text':' __len__ Test: __len__ is inherited','line_number':1555,'multiline':False]
['text':' __len__ Test: verify that it has no valid __len__ when the source doesn't have it','line_number':1558,'multiline':False]
['text':' Functional Test: raise error when input argument `batch_size = 0`','line_number':1570,'multiline':False]
['text':' Functional Test: by default, do not drop the last batch','line_number':1574,'multiline':False]
['text':' Functional Test: Drop the last batch when specified','line_number':1582,'multiline':False]
['text':' __len__ test: verifying that the overall length and of each batch is correct','line_number':1588,'multiline':False]
['text':' __len__ Test: the length is missing if the source DataPipe doesn't have length','line_number':1592,'multiline':False]
['text':' Reset Test: Ensures that the DataPipe can properly reset','line_number':1599,'multiline':False]
['text':' Functional Test: Unbatch DataPipe should be the same as pre-batch DataPipe','line_number':1609,'multiline':False]
['text':' __len__ is as expected','line_number':1612,'multiline':False]
['text':' Functional Test: unbatch works for an input with nested levels','line_number':1616,'multiline':False]
['text':' Functional Test: unbatch works for an input with nested levels','line_number':1625,'multiline':False]
['text':' Functional Test: unbatching multiple levels at the same time','line_number':1632,'multiline':False]
['text':' Functional Test: unbatching all levels at the same time','line_number':1639,'multiline':False]
['text':' Functional Test: raises error when input unbatch_level is less than -1','line_number':1645,'multiline':False]
['text':' Functional Test: raises error when input unbatch_level is too high','line_number':1652,'multiline':False]
['text':' Reset Test: unbatch_dp resets properly','line_number':1658,'multiline':False]
['text':' Functional Test: filter works with partial function','line_number':1672,'multiline':False]
['text':' Functional Test: filter function must return bool','line_number':1679,'multiline':False]
['text':' Funtional Test: Specify input_col','line_number':1684,'multiline':False]
['text':' Single input_col','line_number':1687,'multiline':False]
['text':' Multiple input_col','line_number':1691,'multiline':False]
['text':' invalid input col','line_number':1698,'multiline':False]
['text':' __len__ Test: DataPipe has no valid len','line_number':1724,'multiline':False]
['text':' Reset Test: DataPipe resets correctly','line_number':1728,'multiline':False]
['text':' Default SequentialSampler','line_number':1737,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':1738,'multiline':False]
['text':' RandomSampler','line_number':1743,'multiline':False]
['text':' type: ignore[var-annotated] # noqa: B950','line_number':1745,'multiline':False]
['text':' Requires `__len__` to build SamplerDataPipe','line_number':1747,'multiline':False]
['text':' Functional Test: Read full chunk','line_number':1758,'multiline':False]
['text':' Functional Test: Read full chunk','line_number':1762,'multiline':False]
['text':' `__len__` Test','line_number':1766,'multiline':False]
['text':' Functional Test: No seed','line_number':1776,'multiline':False]
['text':' Functional Test: With global seed','line_number':1780,'multiline':False]
['text':' Functional Test: Set seed','line_number':1787,'multiline':False]
['text':' Functional Test: deactivate shuffling via set_shuffle','line_number':1793,'multiline':False]
['text':' Reset Test:','line_number':1797,'multiline':False]
['text':' __len__ Test: returns the length of the input DataPipe','line_number':1806,'multiline':False]
['text':' Serialization Test','line_number':1811,'multiline':False]
['text':' Functional Test: raises TypeError when an input is not of type `IterDataPipe`','line_number':1832,'multiline':False]
['text':' type: ignore[arg-type]','line_number':1834,'multiline':False]
['text':' Functional Test: raises TypeError when an input does not have valid length','line_number':1836,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':1838,'multiline':False]
['text':' Functional Test: zips the results properly','line_number':1842,'multiline':False]
['text':' Functional Test: zips the inputs properly even when lengths are different (zips to the shortest)','line_number':1846,'multiline':False]
['text':' __len__ Test: length matches the length of the shortest input','line_number':1849,'multiline':False]
['text':' Reset Test:','line_number':1852,'multiline':False]
['text':' 1. Testing for serialization before any iteration starts','line_number':1876,'multiline':False]
['text':' 2. Testing for serialization after DataPipe is partially read','line_number':1878,'multiline':False]
['text':' 3. Testing for serialization after DataPipe is fully read','line_number':1882,'multiline':False]
['text':' type: ignore[call-arg]','line_number':1900,'multiline':False]
['text':' type: ignore[call-arg]','line_number':1929,'multiline':False]
['text':' type: ignore[call-arg]','line_number':1938,'multiline':False]
['text':' pydoc works differently on Python 3.8, see','line_number':1963,'multiline':False]
['text':' https://docs.python.org/3/whatsnew/3.9.html#pydoc','line_number':1964,'multiline':False]
['text':' Functional Test: all elements are equal in the same order','line_number':1974,'multiline':False]
['text':' Functional Test: confirm deepcopy works by default','line_number':1977,'multiline':False]
['text':' input_dp shouldn't have 11','line_number':1979,'multiline':False]
['text':' Functional Test: non-deepcopy version is working','line_number':1981,'multiline':False]
['text':' should have 4','line_number':1985,'multiline':False]
['text':' Reset Test: reset the DataPipe','line_number':1987,'multiline':False]
['text':' __len__ Test: inherits length from sequence','line_number':1994,'multiline':False]
['text':' type: ignore[arg-type]','line_number':2005,'multiline':False]
['text':' Functional Test: requires at least one input DataPipe','line_number':2018,'multiline':False]
['text':' Functional Test: all inputs must be MapDataPipes','line_number':2022,'multiline':False]
['text':' type: ignore[arg-type]','line_number':2024,'multiline':False]
['text':' Functional Test: Zip the elements up as a tuples','line_number':2026,'multiline':False]
['text':' Functional Test: Raise IndexError when index equal or exceed the length of the shortest DataPipe','line_number':2030,'multiline':False]
['text':' Functional Test: Ensure `zip` can combine `Batcher` with others','line_number':2034,'multiline':False]
['text':' __len__ Test: returns the length of the shortest DataPipe','line_number':2044,'multiline':False]
['text':' Functional Test: Assumes 0-index when indices is not given','line_number':2052,'multiline':False]
['text':' Functional Test: Custom indices are working','line_number':2056,'multiline':False]
['text':' Functional Test: With global seed','line_number':2060,'multiline':False]
['text':' Functional Test: Set seed','line_number':2067,'multiline':False]
['text':' Functional Test: deactivate shuffling via set_shuffle','line_number':2073,'multiline':False]
['text':' Reset Test:','line_number':2077,'multiline':False]
['text':' __len__ Test: returns the length of the input DataPipe','line_number':2086,'multiline':False]
['text':' Serialization Test','line_number':2090,'multiline':False]
['text':' Functional Test: batches top level by default','line_number':2129,'multiline':False]
['text':' Functional Test: drop_last on command','line_number':2133,'multiline':False]
['text':' Functional Test: nested batching','line_number':2137,'multiline':False]
['text':' Reset Test:','line_number':2141,'multiline':False]
['text':' __len__ Test:','line_number':2147,'multiline':False]
['text':' Metaclass conflict for Python 3.6','line_number':2152,'multiline':False]
['text':' Multiple inheritance with NamedTuple is not supported for Python 3.9','line_number':2153,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':2175,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':2177,'multiline':False]
['text':' type: ignore[valid-type]','line_number':2206,'multiline':False]
['text':' use 2 parameters','line_number':2220,'multiline':False]
['text':' type: ignore[index]','line_number':2227,'multiline':False]
['text':' type: ignore[index]','line_number':2228,'multiline':False]
['text':' Non-recursive check','line_number':2231,'multiline':False]
['text':' list/set','line_number':2253,'multiline':False]
['text':' type: ignore[index]','line_number':2257,'multiline':False]
['text':' type: ignore[index]','line_number':2258,'multiline':False]
['text':' dict','line_number':2260,'multiline':False]
['text':' tuple','line_number':2266,'multiline':False]
['text':' Static checking annotation','line_number':2273,'multiline':False]
['text':' type: ignore[misc, override]','line_number':2278,'multiline':False]
['text':' type: ignore[override]','line_number':2283,'multiline':False]
['text':' type: ignore[override]','line_number':2288,'multiline':False]
['text':' type: ignore[type-arg, misc]','line_number':2293,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':2306,'multiline':False]
['text':' type: ignore[type-arg]','line_number':2311,'multiline':False]
['text':' type: ignore[override]','line_number':2312,'multiline':False]
['text':' type: ignore[misc]','line_number':2317,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':2320,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':2321,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':2322,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':2336,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':2337,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':2338,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':2376,'multiline':False]
['text':' type: ignore[attr-defined]','line_number':2382,'multiline':False]
['text':' Non-DataPipe input with DataPipe hint','line_number':2404,'multiline':False]
['text':' type: ignore[var-annotated]','line_number':2426,'multiline':False]
['text':' Reset __iter__','line_number':2428,'multiline':False]
['text':' type: ignore[assignment, list-item]','line_number':2431,'multiline':False]
['text':' type: ignore[list-item]','line_number':2432,'multiline':False]
['text':' Valid type reinforcement','line_number':2460,'multiline':False]
['text':' Invalid type','line_number':2465,'multiline':False]
['text':' Type is not subtype','line_number':2469,'multiline':False]
['text':' Invalid data at runtime','line_number':2473,'multiline':False]
['text':' Context Manager to disable the runtime validation','line_number':2478,'multiline':False]
['text':' See issue: https://github.com/pytorch/data/issues/535','line_number':2587,'multiline':False]
['text':' Test for circular reference issue with pickle','line_number':2664,'multiline':False]
['text':' Test for circular reference issue with dill','line_number':2722,'multiline':False]
['text':' Test tud.datapipes.iter.grouping.SHARDING_PRIORITIES for backward compatbility','line_number':2855,'multiline':False]
['text':' TODO: Remove this test once tud.datapipes.iter.grouping.SHARDING_PRIORITIES is deprecated','line_number':2856,'multiline':False]
['text':' Raises Error when multiple sharding on the single branch','line_number':2949,'multiline':False]
['text':' Raises Error when sharding on both data source and branch','line_number':2956,'multiline':False]
['text':' Raises Error when multiple sharding on the branch and end','line_number':2964,'multiline':False]
['text':' Single sharding_filter on data source','line_number':2972,'multiline':False]
['text':' Single sharding_filter per branch','line_number':2979,'multiline':False]
['text':' A fresh iterator can be read in full again','line_number':3004,'multiline':False]
['text':' This should invalidate `it1`','line_number':3007,'multiline':False]
['text':' Should read from the beginning again','line_number':3008,'multiline':False]
['text':' Functional Test: Check if invalidation logic is correct','line_number':3018,'multiline':False]
['text':' Functional Test: extend the test to a pipeline','line_number':3022,'multiline':False]
['text':' Functional Test: multiple simultaneous references to the same DataPipe fails','line_number':3026,'multiline':False]
['text':' Function Test: sequential references work','line_number':3031,'multiline':False]
['text':' Functional Test: Check that every `__iter__` call returns the same object','line_number':3055,'multiline':False]
['text':' Functional Test: Check if invalidation logic is correct','line_number':3061,'multiline':False]
['text':' `source_dp` is still valid and can be read','line_number':3064,'multiline':False]
['text':' Functional Test: extend the test to a pipeline','line_number':3066,'multiline':False]
['text':' `source_dp` is still valid and can be read','line_number':3069,'multiline':False]
['text':' Functional Test: multiple simultaneous references to the same DataPipe fails','line_number':3071,'multiline':False]
['text':' Note that this doesn't reset','line_number':3085,'multiline':False]
['text':' Intentionally not returning `self`','line_number':3086,'multiline':False]
['text':' Functional Test: Check if invalidation logic is correct','line_number':3088,'multiline':False]
['text':' Functional Test: extend the test to a pipeline','line_number':3097,'multiline':False]
['text':' Functional Test: multiple simultaneous references to the same DataPipe fails','line_number':3106,'multiline':False]
['text':' Intentionally not returning `self`','line_number':3122,'multiline':False]
['text':' Functional Test: Check if invalidation logic is correct','line_number':3127,'multiline':False]
['text':' `__next__` is unrelated with `__iter__`','line_number':3130,'multiline':False]
['text':' Functional Test: Special case to show `__next__` is unrelated with `__iter__`','line_number':3132,'multiline':False]
['text':' invalidates both `it1`','line_number':3138,'multiline':False]
['text':' not impacted by the creation of `it2`','line_number':3141,'multiline':False]
['text':' `it2` still works because it is a new object','line_number':3142,'multiline':False]
['text':' Functional Test: all previous related iterators should be invalidated when a new iterator','line_number':3148,'multiline':False]
['text':'                  is created from a ChildDataPipe','line_number':3149,'multiline':False]
['text':' This should invalidate `it1` and `it2`','line_number':3157,'multiline':False]
['text':' The next line should not invalidate anything, as there was no new iterator created','line_number':3165,'multiline':False]
['text':' for `cdp2` after `it2` was invalidated','line_number':3166,'multiline':False]
['text':' An error shouldn't be raised here','line_number':3168,'multiline':False]
['text':' Functional Test: invalidation when a new iterator is created from `source_dp`','line_number':3171,'multiline':False]
['text':' note that a new iterator is created from `source_dp`','line_number':3180,'multiline':False]
['text':' `it3` should invalidate `it1` and `it2` since they both use `source_dp`','line_number':3181,'multiline':False]
['text':' Function Test: Extending test to pipeline','line_number':3186,'multiline':False]
['text':' This should invalidate `it1` and `it2`','line_number':3194,'multiline':False]
['text':' note that a new iterator is created from `source_dp`','line_number':3207,'multiline':False]
['text':' `it3` should invalidate `it1` and `it2` since they both use `source_dp`','line_number':3208,'multiline':False]
['text':' Functional Test: Check if number of samples yielded is as expected','line_number':3217,'multiline':False]
['text':' Functional Test: Check if the count is correct when DataPipe is partially read','line_number':3221,'multiline':False]
['text':' Functional Test: Check for reset behavior and if iterator also works','line_number':3230,'multiline':False]
['text':' reset the DataPipe','line_number':3231,'multiline':False]
['text':' Functional Test: `__iter__` is a generator function','line_number':3236,'multiline':False]
['text':' Functional Test: `__iter__` is a custom generator function with exception','line_number':3241,'multiline':False]
['text':' This class's `__iter__` has a Runtime Error','line_number':3243,'multiline':False]
['text':' Functional Test: Ensure the count is correct even when exception is raised','line_number':3251,'multiline':False]
['text':' Functional Test: Check for reset behavior and if iterator also works','line_number':3257,'multiline':False]
['text':' reset the DataPipe','line_number':3258,'multiline':False]
['text':' This class's `__iter__` is not a generator function','line_number':3265,'multiline':False]
['text':' This class's `__iter__` returns `self` and has a `__next__`','line_number':3280,'multiline':False]
['text':' This class's `__iter__` returns `self` and has a `__next__`','line_number':3298,'multiline':False]
['text':' Functional Test: Ensure the count is correct even when exception is raised','line_number':3316,'multiline':False]
['text':' Functional Test: Check for reset behavior and if iterator also works','line_number':3322,'multiline':False]
['text':' reset the DataPipe','line_number':3323,'multiline':False]
['text':' This class's `__iter__` is not a generator function','line_number':3334,'multiline':False]
['text':' Test Case: fast forward works with list','line_number':3368,'multiline':False]
['text':' Test Case: fast forward works with iterator','line_number':3375,'multiline':False]
['text':' .batch(2)','line_number':3411,'multiline':False]
['text':' With `fork` and `zip`','line_number':3415,'multiline':False]
['text':' With `fork` and `concat`','line_number':3424,'multiline':False]
['text':' Raises an exception if the graph has already been restored','line_number':3430,'multiline':False]
['text':' .batch(2)','line_number':3487,'multiline':False]
['text':' With `fork` and `zip`','line_number':3490,'multiline':False]
['text':' With `fork` and `concat`','line_number':3496,'multiline':False]
['text':' Get expected result','line_number':3509,'multiline':False]
['text':' First serialization/deserialization','line_number':3519,'multiline':False]
['text':' Get the next element and ensure it is as expected','line_number':3529,'multiline':False]
['text':' Serializalize/Deserialize and fast-forward again after to ensure it works','line_number':3532,'multiline':False]
['text':' Get the next element and ensure it is as expected','line_number':3541,'multiline':False]
