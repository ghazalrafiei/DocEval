['text':' Owner(s): ["module: fft"]','line_number':1,'multiline':False]
['text':' Transform real and imaginary components separably','line_number':49,'multiline':False]
['text':' Decompose into Hermitian (FFT of real) and anti-Hermitian (FFT of imaginary)','line_number':81,'multiline':False]
['text':' Tests of functions related to Fourier analysis in the torch.fft namespace','line_number':129,'multiline':False]
['text':' input','line_number':143,'multiline':False]
['text':' n','line_number':148,'multiline':False]
['text':' dim','line_number':150,'multiline':False]
['text':' norm','line_number':152,'multiline':False]
['text':' Test transforming middle dimensions of multi-dim tensor','line_number':155,'multiline':False]
['text':' Test that round trip through ifft(fft(x)) is the identity','line_number':183,'multiline':False]
['text':' input','line_number':186,'multiline':False]
['text':' dim','line_number':191,'multiline':False]
['text':' norm','line_number':193,'multiline':False]
['text':' cuFFT supports powers of 2 for half and complex half precision','line_number':197,'multiline':False]
['text':' input','line_number':199,'multiline':False]
['text':' dim','line_number':204,'multiline':False]
['text':' norm','line_number':206,'multiline':False]
['text':' Real-only functions','line_number':211,'multiline':False]
['text':' NOTE: Using ihfft as "forward" transform to avoid needing to','line_number':213,'multiline':False]
['text':' generate true half-complex input','line_number':214,'multiline':False]
['text':' Since type promotion currently doesn't work with complex32','line_number':228,'multiline':False]
['text':' manually promote `x` to complex32','line_number':229,'multiline':False]
['text':' For real input, ifft(fft(x)) will convert to complex','line_number':231,'multiline':False]
['text':' Note: NumPy will throw a ValueError for an empty input','line_number':235,'multiline':False]
['text':' cuFFT supports powers of 2 for half and complex half precision','line_number':302,'multiline':False]
['text':' NOTE: With hfft and default args where output_size n=2*(input_size - 1),','line_number':303,'multiline':False]
['text':' we make sure that logical fft size is a power of two.','line_number':304,'multiline':False]
['text':' TODO: Remove torch.half error when complex32 is fully implemented','line_number':325,'multiline':False]
['text':' nd-fft tests','line_number':354,'multiline':False]
['text':' input_ndim, s, dim','line_number':365,'multiline':False]
['text':' input_ndim, dim','line_number':400,'multiline':False]
['text':' Real-only functions','line_number':411,'multiline':False]
['text':' NOTE: Using ihfftn as "forward" transform to avoid needing to','line_number':413,'multiline':False]
['text':' generate true half-complex input','line_number':414,'multiline':False]
['text':' cuFFT supports powers of 2 for half and complex half precision','line_number':420,'multiline':False]
['text':' For real input, ifftn(fftn(x)) will convert to complex','line_number':434,'multiline':False]
['text':' Since type promotion currently doesn't work with complex32','line_number':436,'multiline':False]
['text':' manually promote `x` to complex32','line_number':437,'multiline':False]
['text':' FIXME: https://github.com/pytorch/pytorch/issues/108205','line_number':448,'multiline':False]
['text':' input_ndim, dim','line_number':474,'multiline':False]
['text':' input_ndim, dim','line_number':513,'multiline':False]
['text':' Slice off the half-symmetric component','line_number':532,'multiline':False]
['text':' 2d-fft tests','line_number':543,'multiline':False]
['text':' NOTE: 2d transforms are only thin wrappers over n-dim transforms,','line_number':545,'multiline':False]
['text':' so don't require exhaustive testing.','line_number':546,'multiline':False]
['text':' input_ndim, s','line_number':555,'multiline':False]
['text':' Requires scipy to compare against','line_number':571,'multiline':False]
['text':' Once with dim defaulted','line_number':581,'multiline':False]
['text':' Once with explicit dims','line_number':588,'multiline':False]
['text':' input_ndim, s, dim','line_number':601,'multiline':False]
['text':' Real-only functions','line_number':608,'multiline':False]
['text':' Helper functions','line_number':656,'multiline':False]
['text':' n','line_number':665,'multiline':False]
['text':' d','line_number':667,'multiline':False]
['text':' shape, dim','line_number':702,'multiline':False]
['text':' Test fftshift sorts the fftfreq output','line_number':732,'multiline':False]
['text':' And ifftshift is the inverse','line_number':737,'multiline':False]
['text':' Legacy fft tests','line_number':740,'multiline':False]
['text':' contiguous case','line_number':769,'multiline':False]
['text':' non-contiguous case','line_number':784,'multiline':False]
['text':' input is not aligned to complex type','line_number':785,'multiline':False]
['text':' check that stll works after clearing cache','line_number':828,'multiline':False]
['text':' Multigpu tests','line_number':841,'multiline':False]
['text':' Test that different GPU has different cache','line_number':843,'multiline':False]
['text':' If a plan is used across different devices, the following line (or','line_number':847,'multiline':False]
['text':' the assert above) would trigger illegal memory access. Other ways','line_number':848,'multiline':False]
['text':' to trigger the error include','line_number':849,'multiline':False]
['text':'   (1) setting CUDA_LAUNCH_BLOCKING=1 (pytorch/pytorch#19224) and','line_number':850,'multiline':False]
['text':'   (2) printing a device 1 tensor.','line_number':851,'multiline':False]
['text':' Test that un-indexed `torch.backends.cuda.cufft_plan_cache` uses current device','line_number':854,'multiline':False]
['text':' default is cuda:0','line_number':860,'multiline':False]
['text':' default is cuda:1','line_number':862,'multiline':False]
['text':' default is cuda:0','line_number':864,'multiline':False]
['text':' default is cuda:1','line_number':868,'multiline':False]
['text':' default is cuda:1','line_number':872,'multiline':False]
['text':' default is cuda:0','line_number':874,'multiline':False]
['text':' default is cuda:1','line_number':875,'multiline':False]
['text':' Regression test for https://github.com/pytorch/pytorch/issues/109448','line_number':880,'multiline':False]
['text':' compute iFFT(FFT(x))','line_number':884,'multiline':False]
['text':' passes on ROCm w/ python 2.7, fails w/ python 3.6','line_number':893,'multiline':False]
['text':' NOTE: librosa 0.9 changed default pad_mode to 'constant' (zero padding)','line_number':910,'multiline':False]
['text':' however, we use the pre-0.9 default ('reflect')','line_number':911,'multiline':False]
['text':' NB: librosa defaults to np.complex64 output, no matter what','line_number':935,'multiline':False]
['text':' the input dtype','line_number':936,'multiline':False]
['text':' With return_complex=True, the result is the same but viewed as complex instead of real','line_number':939,'multiline':False]
['text':' spectral oversample','line_number':956,'multiline':False]
['text':' input','line_number':1018,'multiline':False]
['text':' n_fft','line_number':1022,'multiline':False]
['text':' hop_length','line_number':1024,'multiline':False]
['text':' center','line_number':1026,'multiline':False]
['text':' pad_mode','line_number':1028,'multiline':False]
['text':' normalized','line_number':1030,'multiline':False]
['text':' onesided','line_number':1032,'multiline':False]
['text':' Functional interface','line_number':1043,'multiline':False]
['text':' Tensor method interface','line_number':1049,'multiline':False]
['text':' input','line_number':1060,'multiline':False]
['text':' n_fft','line_number':1064,'multiline':False]
['text':' hop_length','line_number':1066,'multiline':False]
['text':' pad_mode','line_number':1068,'multiline':False]
['text':' normalized','line_number':1070,'multiline':False]
['text':' Not onesided','line_number':1080,'multiline':False]
['text':' input','line_number':1100,'multiline':False]
['text':' n_fft','line_number':1103,'multiline':False]
['text':' hop_length','line_number':1105,'multiline':False]
['text':' input','line_number':1120,'multiline':False]
['text':' n_fft','line_number':1125,'multiline':False]
['text':' hop_length','line_number':1127,'multiline':False]
['text':' win_length','line_number':1129,'multiline':False]
['text':' center','line_number':1131,'multiline':False]
['text':' pad_mode','line_number':1133,'multiline':False]
['text':' normalized','line_number':1135,'multiline':False]
['text':' input','line_number':1153,'multiline':False]
['text':' hop_length','line_number':1157,'multiline':False]
['text':' center','line_number':1159,'multiline':False]
['text':' normalized','line_number':1161,'multiline':False]
['text':' stft of complex input cannot be onesided','line_number':1177,'multiline':False]
['text':' stft is currently warning that it requires return-complex while an upgrader is written','line_number':1195,'multiline':False]
['text':' stft and istft are currently warning if a window is not provided','line_number':1203,'multiline':False]
['text':' 51 = 2 * n_fft + 1, 5 = number of frames','line_number':1215,'multiline':False]
['text':' FFT functions should not modify their input (gh-34551)','line_number':1221,'multiline':False]
['text':' Regression test for gh-58724 and gh-63152','line_number':1242,'multiline':False]
['text':' generates a random sound signal for each tril and then does the stft/istft','line_number':1273,'multiline':False]
['text':' operation to check whether we can reconstruct signal','line_number':1274,'multiline':False]
['text':' hann_window, centered, normalized, onesided','line_number':1289,'multiline':False]
['text':' hann_window, centered, not normalized, not onesided','line_number':1300,'multiline':False]
['text':' hamming_window, centered, normalized, not onesided','line_number':1311,'multiline':False]
['text':' hamming_window, centered, not normalized, onesided','line_number':1322,'multiline':False]
['text':' window same size as n_fft','line_number':1323,'multiline':False]
['text':' generates a random sound signal for each tril and then does the stft/istft','line_number':1344,'multiline':False]
['text':' operation to check whether we can reconstruct signal','line_number':1345,'multiline':False]
['text':' trim the original for case when constructed signal is shorter than original','line_number':1361,'multiline':False]
['text':' test the padding points of the inversed signal are all zeros','line_number':1365,'multiline':False]
['text':' hamming_window, not centered, not normalized, not onesided','line_number':1375,'multiline':False]
['text':' window same size as n_fft','line_number':1376,'multiline':False]
['text':' hamming_window, centered, not normalized, onesided, long hop_length','line_number':1388,'multiline':False]
['text':' window same size as n_fft','line_number':1389,'multiline':False]
['text':' the window is size 1 but it hops 20 so there is a gap which throw an error','line_number':1409,'multiline':False]
['text':' A window of zeros does not meet NOLA','line_number':1413,'multiline':False]
['text':' Input cannot be empty','line_number':1417,'multiline':False]
['text':' stft of amplitude*sin(2*pi/L*n*x) with the hop length and window size equaling L','line_number':1428,'multiline':False]
['text':' stft = torch.stft(original, L, hop_length=L, win_length=L,','line_number':1431,'multiline':False]
['text':'                   window=torch.ones(L), center=False, normalized=False)','line_number':1432,'multiline':False]
['text':' symmetric about L // 2','line_number':1439,'multiline':False]
['text':' There is a larger error due to the scaling of amplitude','line_number':1445,'multiline':False]
['text':' Also compare method vs. functional call signature','line_number':1469,'multiline':False]
['text':' hann_window, centered, normalized, onesided','line_number':1476,'multiline':False]
['text':' hann_window, centered, not normalized, not onesided','line_number':1487,'multiline':False]
['text':' hamming_window, centered, normalized, not onesided','line_number':1498,'multiline':False]
['text':' hamming_window, not centered, not normalized, onesided','line_number':1509,'multiline':False]
['text':' Test the (i)stft window must be on the same device as the input','line_number':1546,'multiline':False]
