['text':' Owner(s): ["oncall: quantization"]','line_number':1,'multiline':False]
['text':' Default output for string if no optimizations are possible','line_number':51,'multiline':False]
['text':' Example Sequential Model with multiple Conv and Linear with nesting involved','line_number':56,'multiline':False]
['text':' Example Sequential Model with Conv sub-class example','line_number':65,'multiline':False]
['text':' Example Sequential Model with Fusion directly built into model','line_number':75,'multiline':False]
['text':' Test class','line_number':83,'multiline':False]
['text':' example model to use for tests','line_number':84,'multiline':False]
['text':' prep model','line_number':122,'multiline':False]
['text':' calibrate the model','line_number':123,'multiline':False]
['text':' run the detector','line_number':147,'multiline':False]
['text':' no optims possible and there should be nothing in per_channel_status','line_number':151,'multiline':False]
['text':' there should only be one conv there in this model','line_number':157,'multiline':False]
['text':' run the detector','line_number':191,'multiline':False]
['text':' there should be optims possible','line_number':195,'multiline':False]
['text':' pick a random key to look at','line_number':200,'multiline':False]
['text':' for each linear layer, should be supported but not used','line_number':205,'multiline':False]
['text':' qconfig with support for per_channel quantization','line_number':227,'multiline':False]
['text':' we need to design the model','line_number':233,'multiline':False]
['text':' run the detector','line_number':262,'multiline':False]
['text':' the only suggestions should be to linear layers','line_number':266,'multiline':False]
['text':' there should be optims possible','line_number':268,'multiline':False]
['text':' to ensure it got into the nested layer','line_number':274,'multiline':False]
['text':' for each layer, should be supported but not used','line_number':277,'multiline':False]
['text':' if linear False, if conv2d true cuz it uses different config','line_number':282,'multiline':False]
['text':' run the detector','line_number':314,'multiline':False]
['text':' there should be optims possible','line_number':318,'multiline':False]
['text':' to ensure it got into the nested layer','line_number':324,'multiline':False]
['text':' for each layer, should be supported but not used','line_number':327,'multiline':False]
['text':' run the detector','line_number':358,'multiline':False]
['text':' there should be optims possible','line_number':362,'multiline':False]
['text':' to ensure it got into the nested layer and it considered the lazyConv2d','line_number':368,'multiline':False]
['text':' for each layer, should be supported but not used','line_number':371,'multiline':False]
['text':' run the detector','line_number':402,'multiline':False]
['text':' no optims possible and there should be nothing in per_channel_status','line_number':406,'multiline':False]
['text':' to ensure it got into the nested layer and it considered all the nested fusion components','line_number':412,'multiline':False]
['text':' for each layer, should be supported but not used','line_number':415,'multiline':False]
['text':' first we want a QAT model','line_number':433,'multiline':False]
['text':' QuantStub converts tensors from floating point to quantized','line_number':437,'multiline':False]
['text':' DeQuantStub converts tensors from quantized to floating point','line_number':442,'multiline':False]
['text':' create a model instance','line_number':454,'multiline':False]
['text':' model must be in eval mode for fusion','line_number':459,'multiline':False]
['text':' model must be set to train mode for QAT logic to work','line_number':463,'multiline':False]
['text':' prepare the model for QAT, different than for post training quantization','line_number':466,'multiline':False]
['text':' run the detector','line_number':469,'multiline':False]
['text':' there should be optims possible','line_number':473,'multiline':False]
['text':' make sure it was able to find the single conv in the fused model','line_number':479,'multiline':False]
['text':' for the one conv, it should still give advice to use different qconfig','line_number':482,'multiline':False]
['text':' split up data into batches','line_number':524,'multiline':False]
['text':' reset all model report obs','line_number':527,'multiline':False]
['text':' quick check that a reset occurred','line_number':534,'multiline':False]
['text':' loop through the batches and run through','line_number':542,'multiline':False]
['text':' get general info about the batch and the model to use later','line_number':548,'multiline':False]
['text':' run input through','line_number':554,'multiline':False]
['text':' check that average batch activation range updated correctly','line_number':557,'multiline':False]
['text':' initialize the model','line_number':581,'multiline':False]
['text':' generate the desired input','line_number':584,'multiline':False]
['text':' run it through the model and do general tests','line_number':587,'multiline':False]
['text':' make sure final values are all 0','line_number':590,'multiline':False]
['text':' we should get an error if we try to calculate the ratio','line_number':595,'multiline':False]
['text':' initialize the model','line_number':608,'multiline':False]
['text':' generate the desired input','line_number':611,'multiline':False]
['text':' run it through the model and do general tests','line_number':614,'multiline':False]
['text':' make sure final values are all 0 except for range','line_number':617,'multiline':False]
['text':' we should get an error if we try to calculate the ratio','line_number':622,'multiline':False]
['text':' model specific to this test','line_number':636,'multiline':False]
['text':' initialize the model','line_number':654,'multiline':False]
['text':' generate the desired input','line_number':657,'multiline':False]
['text':' run it through the model and do general tests','line_number':660,'multiline':False]
['text':' set up a basic model','line_number':673,'multiline':False]
['text':' the purpose of this test is to give the observers a variety of data examples','line_number':749,'multiline':False]
['text':' initialize the model','line_number':750,'multiline':False]
['text':' get some number of epochs and batches','line_number':758,'multiline':False]
['text':' generate the desired inputs','line_number':764,'multiline':False]
['text':' run it through the model and do general tests','line_number':770,'multiline':False]
['text':' create model, example input, and qconfig mapping','line_number':811,'multiline':False]
['text':' prep model and select observer','line_number':819,'multiline':False]
['text':' find layer to attach to and store','line_number':823,'multiline':False]
['text':' fqn of target linear','line_number':824,'multiline':False]
['text':' insert into both module and graph pre and post','line_number':832,'multiline':False]
['text':' set up to insert before target_linear (pre_observer)','line_number':834,'multiline':False]
['text':' set up and insert after the target_linear (post_observer)','line_number':841,'multiline':False]
['text':' need to recompile module after submodule added and pass input through','line_number':848,'multiline':False]
['text':' run it through the dynamic vs static detector','line_number':859,'multiline':False]
['text':' one of the stats should be stationary, and the other non-stationary','line_number':863,'multiline':False]
['text':' as a result, dynamic should be recommended','line_number':864,'multiline':False]
['text':' set the backend for this test','line_number':886,'multiline':False]
['text':' create a model','line_number':890,'multiline':False]
['text':' make an example set of detectors','line_number':896,'multiline':False]
['text':' initialize with an empty detector','line_number':898,'multiline':False]
['text':' make sure internal valid reports matches','line_number':901,'multiline':False]
['text':' now attempt with no valid reports, should raise error','line_number':905,'multiline':False]
['text':' number of expected obs of interest entries','line_number':909,'multiline':False]
['text':' create model report object','line_number':927,'multiline':False]
['text':' create model','line_number':929,'multiline':False]
['text':' make an example set of detectors','line_number':931,'multiline':False]
['text':' initialize with an empty detector','line_number':935,'multiline':False]
['text':' prepare the model','line_number':937,'multiline':False]
['text':' prepare the model for callibration','line_number':947,'multiline':False]
['text':' see whether observers properly in regular nn.Module','line_number':950,'multiline':False]
['text':' there should be 4 observers present in this case','line_number':951,'multiline':False]
['text':' also make sure arguments for observers in the graph are proper','line_number':960,'multiline':False]
['text':' not all node targets are strings, so check','line_number':962,'multiline':False]
['text':' if pre-observer has same args as the linear (next node)','line_number':964,'multiline':False]
['text':' if post-observer, args are the target linear (previous node)','line_number':967,'multiline':False]
['text':' ensure model_report observers of interest updated','line_number':971,'multiline':False]
['text':' there should be two entries','line_number':972,'multiline':False]
['text':' get number of entries for this detector','line_number':977,'multiline':False]
['text':' assert that the per channel detector has 0 and the dynamic static has 4','line_number':980,'multiline':False]
['text':' ensure that we can prepare for callibration only once','line_number':986,'multiline':False]
['text':' get the number of observers stored as modules','line_number':998,'multiline':False]
['text':' get number of observers in the graph','line_number':1004,'multiline':False]
['text':' also make sure arguments for observers in the graph are proper','line_number':1007,'multiline':False]
['text':' not all node targets are strings, so check','line_number':1009,'multiline':False]
['text':' increment if we found a graph observer','line_number':1011,'multiline':False]
['text':' set the backend for this test','line_number':1027,'multiline':False]
['text':' check whether the correct number of reports are being generated','line_number':1030,'multiline':False]
['text':' create our models','line_number':1034,'multiline':False]
['text':' prepare and callibrate two different instances of same model','line_number':1038,'multiline':False]
['text':' prepare the model','line_number':1039,'multiline':False]
['text':' initialize one with filled detector','line_number':1048,'multiline':False]
['text':' initialize another with a single detector set','line_number':1050,'multiline':False]
['text':' prepare the models for callibration','line_number':1053,'multiline':False]
['text':' now callibrate the two models','line_number':1057,'multiline':False]
['text':' now generate the reports','line_number':1064,'multiline':False]
['text':' check that sizes are appropriate','line_number':1068,'multiline':False]
['text':' make sure observers are being properly removed for full report since we put flag in','line_number':1072,'multiline':False]
['text':' assert no more observer modules','line_number':1074,'multiline':False]
['text':' assert no more observer nodes in graph','line_number':1075,'multiline':False]
['text':' make sure observers aren't being removed for single report since not specified','line_number':1077,'multiline':False]
['text':' make sure error when try to rerun report generation for full report but not single report','line_number':1082,'multiline':False]
['text':' make sure we don't run into error for single report','line_number':1088,'multiline':False]
['text':' set the backend for this test','line_number':1101,'multiline':False]
['text':' test with multiple detectors','line_number':1103,'multiline':False]
['text':' get tst model and callibrate','line_number':1110,'multiline':False]
['text':' now we actually callibrate the model','line_number':1115,'multiline':False]
['text':' try to visualize without generating report, should throw error','line_number':1121,'multiline':False]
['text':' now get the report by running it through ModelReport instance','line_number':1125,'multiline':False]
['text':' now we get the visualizer should not error','line_number':1128,'multiline':False]
['text':' since we tested with outlier detector, which looks at every base level module','line_number':1131,'multiline':False]
['text':' should be six entries in the ordered dict','line_number':1132,'multiline':False]
['text':' outlier detector has 9 feature per module','line_number':1137,'multiline':False]
['text':' input-weight has 12 features per module','line_number':1138,'multiline':False]
['text':' there are 1 common data point, so should be 12 + 9 - 1 = 20 unique features per common modules','line_number':1139,'multiline':False]
['text':' all linears will be common','line_number':1140,'multiline':False]
['text':' set the backend for this test','line_number':1154,'multiline':False]
['text':' test with multiple detectors','line_number':1156,'multiline':False]
['text':' get tst model and callibrate','line_number':1163,'multiline':False]
['text':' now we actually callibrate the models','line_number':1168,'multiline':False]
['text':' get the mapping without error','line_number':1175,'multiline':False]
['text':' now get the report by running it through ModelReport instance','line_number':1178,'multiline':False]
['text':' get the visualizer so we can get access to reformatted reports by module fqn','line_number':1181,'multiline':False]
['text':' compare the entries of the mapping to those of the report','line_number':1184,'multiline':False]
['text':' we should have the same number of entries','line_number':1185,'multiline':False]
['text':' for the non_empty one, we should have 2 because we have only applicable linears','line_number':1188,'multiline':False]
['text':' so should have suggestions for each module named','line_number':1189,'multiline':False]
['text':' only two linears, make sure per channel min max for weight since fbgemm','line_number':1192,'multiline':False]
['text':' also static distribution since a simple single callibration','line_number':1193,'multiline':False]
['text':' make sure these can actually be used to prepare the model','line_number':1199,'multiline':False]
['text':' now convert the model to ensure no errors in conversion','line_number':1202,'multiline':False]
['text':' set the backend for this test','line_number':1213,'multiline':False]
['text':' test with multiple detectors','line_number':1215,'multiline':False]
['text':' get tst model and callibrate','line_number':1221,'multiline':False]
['text':' now we actually callibrate the models','line_number':1226,'multiline':False]
['text':' get the mapping without error','line_number':1233,'multiline':False]
['text':' tests a lot more simple for the equalization mapping','line_number':1237,'multiline':False]
['text':' shouldn't have any equalization suggestions for this case','line_number':1239,'multiline':False]
['text':' make sure these can actually be used to prepare the model','line_number':1243,'multiline':False]
['text':' now convert the model to ensure no errors in conversion','line_number':1251,'multiline':False]
['text':' pass in necessary inputs to helper','line_number':1308,'multiline':False]
['text':' use fbgemm and create our model instance','line_number':1314,'multiline':False]
['text':' then create model report instance with detector','line_number':1315,'multiline':False]
['text':' get tst model and callibrate','line_number':1320,'multiline':False]
['text':' reporter should still give same counts even for fused model','line_number':1324,'multiline':False]
['text':' supported modules to check','line_number':1327,'multiline':False]
['text':' get the set of all nodes in the graph their fqns','line_number':1330,'multiline':False]
['text':' there should be 4 node fqns that have the observer inserted','line_number':1333,'multiline':False]
['text':' if the obs name is inside the target, we found an observer','line_number':1339,'multiline':False]
['text':' assert that each of the desired modules have the observers inserted','line_number':1345,'multiline':False]
['text':' check if module is a supported module','line_number':1347,'multiline':False]
['text':' make sure it has the observer attribute','line_number':1351,'multiline':False]
['text':' if it's not a supported type, it shouldn't have observer attached','line_number':1354,'multiline':False]
['text':' use fbgemm and create our model instance','line_number':1359,'multiline':False]
['text':' then create model report instance with detector','line_number':1360,'multiline':False]
['text':' prepare the model for callibration','line_number':1366,'multiline':False]
['text':' now we actually callibrate the model','line_number':1371,'multiline':False]
['text':' now get the report by running it through ModelReport instance','line_number':1377,'multiline':False]
['text':' check that sizes are appropriate only 1 detector','line_number':1380,'multiline':False]
['text':' get the specific report for input weight equalization','line_number':1383,'multiline':False]
['text':' we should have 5 layers looked at since 4 conv / linear layers','line_number':1386,'multiline':False]
['text':' we can validate that the max and min values of the detector were recorded properly for the first one','line_number':1389,'multiline':False]
['text':' this is because no data has been processed yet, so it should be values from original input','line_number':1390,'multiline':False]
['text':' reshape input','line_number':1392,'multiline':False]
['text':' look for the first linear','line_number':1394,'multiline':False]
['text':' get input range info and the channel axis','line_number':1397,'multiline':False]
['text':' ensure that the min and max values extracted match properly','line_number':1400,'multiline':False]
['text':' make sure per channel min and max are as expected','line_number':1405,'multiline':False]
['text':' make sure per channel min and max are as expected','line_number':1417,'multiline':False]
['text':' make sure the global min and max were correctly recorded and presented','line_number':1424,'multiline':False]
['text':' ensure comparision stat passed back is sqrt of range ratios','line_number':1431,'multiline':False]
['text':' need to get the weight ratios first','line_number':1432,'multiline':False]
['text':' make sure per channel min and max are as expected','line_number':1434,'multiline':False]
['text':' get weight per channel and global info','line_number':1441,'multiline':False]
['text':' make sure per channel min and max are as expected','line_number':1445,'multiline':False]
['text':' also get comp stat for this specific layer','line_number':1457,'multiline':False]
['text':' only looking at the first example so can break','line_number':1463,'multiline':False]
['text':' tests report gen on a model that doesn't have any layers','line_number':1468,'multiline':False]
['text':' use fbgemm and create our model instance','line_number':1469,'multiline':False]
['text':' then create model report instance with detector','line_number':1470,'multiline':False]
['text':' prepare the model for callibration','line_number':1475,'multiline':False]
['text':' now we actually callibrate the model','line_number':1478,'multiline':False]
['text':' now get the report by running it through ModelReport instance','line_number':1484,'multiline':False]
['text':' check that sizes are appropriate only 1 detector','line_number':1487,'multiline':False]
['text':' get the specific report for input weight equalization','line_number':1490,'multiline':False]
['text':' we should have 0 layers since there is only a Relu','line_number':1493,'multiline':False]
['text':' make sure that the string only has two lines, as should be if no suggestions','line_number':1496,'multiline':False]
['text':' change one in some of them to be a massive value','line_number':1525,'multiline':False]
['text':' call the general helper function to callibrate','line_number':1532,'multiline':False]
['text':' if we specifically want to test data with outliers replace input','line_number':1535,'multiline':False]
['text':' use fbgemm and create our model instance','line_number':1543,'multiline':False]
['text':' then create model report instance with detector','line_number':1544,'multiline':False]
['text':' similar to test for InputWeightEqualization but key differences that made refactoring not viable','line_number':1545,'multiline':False]
['text':' not explicitly testing fusion because fx workflow automatically','line_number':1546,'multiline':False]
['text':' get tst model and callibrate','line_number':1551,'multiline':False]
['text':' supported modules to check','line_number':1556,'multiline':False]
['text':' there should be 4 node fqns that have the observer inserted','line_number':1559,'multiline':False]
['text':' assert that each of the desired modules have the observers inserted','line_number':1569,'multiline':False]
['text':' check if module is a supported module','line_number':1571,'multiline':False]
['text':' make sure it has the observer attribute','line_number':1575,'multiline':False]
['text':' if it's not a supported type, it shouldn't have observer attached','line_number':1578,'multiline':False]
['text':' use fbgemm and create our model instance','line_number':1583,'multiline':False]
['text':' then create model report instance with detector','line_number':1584,'multiline':False]
['text':' test with multiple detectors','line_number':1587,'multiline':False]
['text':' get tst model and callibrate','line_number':1595,'multiline':False]
['text':' now we actually callibrate the model','line_number':1600,'multiline':False]
['text':' now get the report by running it through ModelReport instance','line_number':1606,'multiline':False]
['text':' check that sizes are appropriate only 2 detectors','line_number':1609,'multiline':False]
['text':' get the specific report for input weight equalization','line_number':1612,'multiline':False]
['text':' we should have 5 layers looked at since 4 conv + linear + relu','line_number':1615,'multiline':False]
['text':' assert the following are true for all the modules','line_number':1618,'multiline':False]
['text':' get the info for the specific module','line_number':1620,'multiline':False]
['text':' there really should not be any outliers since we used a normal distribution to perform this calculation','line_number':1623,'multiline':False]
['text':' ensure that the number of ratios and batches counted is the same as the number of params','line_number':1627,'multiline':False]
['text':' make the percentile 0 and the ratio 1, and then see that everything is outlier according to it','line_number':1634,'multiline':False]
['text':' use fbgemm and create our model instance','line_number':1635,'multiline':False]
['text':' then create model report instance with detector','line_number':1636,'multiline':False]
['text':' create detector of interest','line_number':1638,'multiline':False]
['text':' get tst model and callibrate','line_number':1645,'multiline':False]
['text':' now we actually callibrate the model','line_number':1650,'multiline':False]
['text':' now get the report by running it through ModelReport instance','line_number':1656,'multiline':False]
['text':' check that sizes are appropriate only 1 detector','line_number':1659,'multiline':False]
['text':' get the specific report for input weight equalization','line_number':1662,'multiline':False]
['text':' we should have 5 layers looked at since 4 conv + linear + relu','line_number':1665,'multiline':False]
['text':' assert the following are true for all the modules','line_number':1668,'multiline':False]
['text':' get the info for the specific module','line_number':1670,'multiline':False]
['text':' everything should be an outlier because we said that the max should be equal to the min for all of them','line_number':1673,'multiline':False]
['text':' however we will just test and say most should be in case we have several 0 channel values','line_number':1674,'multiline':False]
['text':' ensure that the number of ratios and batches counted is the same as the number of params','line_number':1678,'multiline':False]
['text':' specifically make a row really high consistently in the number of batches that you are testing and try that','line_number':1684,'multiline':False]
['text':' generate report after just 1 run, and after many runs (30) and make sure above minimum threshold is there','line_number':1685,'multiline':False]
['text':' detector of interest','line_number':1688,'multiline':False]
['text':' get tst model and callibrate','line_number':1695,'multiline':False]
['text':' now we actually callibrate the model','line_number':1700,'multiline':False]
['text':' now callibrate minimum 30 times to make it above minimum threshold','line_number':1704,'multiline':False]
['text':' make 2 of the batches to have zero channel','line_number':1709,'multiline':False]
['text':' make one channel constant','line_number':1711,'multiline':False]
['text':' now get the report by running it through ModelReport instance','line_number':1716,'multiline':False]
['text':' check that sizes are appropriate only 1 detector','line_number':1719,'multiline':False]
['text':' get the specific report for input weight equalization','line_number':1722,'multiline':False]
['text':' we should have 5 layers looked at since 4 conv + linear + relu','line_number':1725,'multiline':False]
['text':' assert the following are true for all the modules','line_number':1728,'multiline':False]
['text':' get the info for the specific module','line_number':1730,'multiline':False]
['text':' because we ran 30 times, we should have at least a couple be significant','line_number':1733,'multiline':False]
['text':' could be less because some channels could possibly be all 0','line_number':1734,'multiline':False]
['text':' half of them should be outliers, because we set a really high value every 2 channels','line_number':1738,'multiline':False]
['text':' ensure that the number of ratios and batches counted is the same as the number of params','line_number':1742,'multiline':False]
['text':' for the first one ensure the per channel max values are what we set','line_number':1746,'multiline':False]
['text':' check that the non-zero channel count, at least 2 should be there','line_number':1749,'multiline':False]
['text':' for the first module','line_number':1750,'multiline':False]
['text':' half of the recorded max values should be what we set','line_number':1754,'multiline':False]
['text':' now we actually callibrate the model','line_number':1765,'multiline':False]
['text':' now get the report by running it through ModelReport instance','line_number':1771,'multiline':False]
['text':' now we get the visualizer should not error','line_number':1774,'multiline':False]
['text':' set the backend for this test','line_number':1788,'multiline':False]
['text':' test with multiple detectors','line_number':1790,'multiline':False]
['text':' get tst model and callibrate','line_number':1797,'multiline':False]
['text':' ensure the module fqns match the ones given by the get_all_unique_feature_names method','line_number':1806,'multiline':False]
['text':' now ensure that features are all properly returned','line_number':1811,'multiline':False]
['text':' all the linears have all the features for two detectors','line_number':1812,'multiline':False]
['text':' can use those as check that method is working reliably','line_number':1813,'multiline':False]
['text':' first test all features','line_number':1816,'multiline':False]
['text':' now test plottable features','line_number':1820,'multiline':False]
['text':' set backend for test','line_number':1834,'multiline':False]
['text':' test with multiple detectors','line_number':1837,'multiline':False]
['text':' get tst model and callibrate','line_number':1844,'multiline':False]
['text':' get the visualizer','line_number':1866,'multiline':False]
['text':' test primarily the dict since it has same info as str','line_number':1871,'multiline':False]
['text':' these two together should be the same as the generated report info in terms of keys','line_number':1875,'multiline':False]
['text':' get the visualizer','line_number':1893,'multiline':False]
['text':' try a random filter and make sure that there are no rows for either table','line_number':1896,'multiline':False]
['text':' test primarily the dict since it has same info as str','line_number':1899,'multiline':False]
['text':' should be no matching modules','line_number':1906,'multiline':False]
['text':' get the visualizer','line_number':1918,'multiline':False]
['text':' try a matching filter for feature and make sure only those features show up','line_number':1921,'multiline':False]
['text':' if we filter to a very specific feature name, should only have 1 additional column in each table row','line_number':1922,'multiline':False]
['text':' test primarily the dict since it has same info as str','line_number':1925,'multiline':False]
['text':' get the number of features in each of these','line_number':1929,'multiline':False]
['text':' make sure that there are no tensor features, and that there is one channel level feature','line_number':1933,'multiline':False]
['text':' set the backend for this test','line_number':1939,'multiline':False]
['text':' create model instance and prepare it','line_number':1942,'multiline':False]
['text':' if they passed in fusion paramter, make sure to test that','line_number':1946,'multiline':False]
['text':' prepare the model for callibration','line_number':1954,'multiline':False]
