['text':' Owner(s): ["module: inductor"]','line_number':1,'multiline':False]
['text':' a dummy graph to construct the GraphLowering','line_number':76,'multiline':False]
['text':' the graph handler is neede to create benchmark example value below','line_number':79,'multiline':False]
['text':' expected_out = (mat1 @ mat2) + (mat3 @ mat4)','line_number':94,'multiline':False]
['text':' use a tensor since the mutation to a python list in a sub process','line_number':98,'multiline':False]
['text':' is not synced back to the parent process','line_number':99,'multiline':False]
['text':' a dummy graph to construct the GraphLowering','line_number':114,'multiline':False]
['text':' the graph handler is neede to create benchmark example value below','line_number':117,'multiline':False]
['text':' use a tensor since python list is not synced back','line_number':136,'multiline':False]
['text':' TODO: Enable dynamic test cases when dynamic support is added.','line_number':223,'multiline':False]
['text':' Note: The ops that are available','line_number':273,'multiline':False]
['text':' also depend on the alignment of the shapes','line_number':274,'multiline':False]
['text':' so if these shapes don't all align to at least 8 elements','line_number':275,'multiline':False]
['text':' it can happen that no Cutlass 3.x op is available','line_number':276,'multiline':False]
['text':' that allows fusions','line_number':277,'multiline':False]
['text':' required to enable the Kernels we need','line_number':292,'multiline':False]
['text':'  The pointwise ops seem to be pre-fused into a single Pointwise','line_number':311,'multiline':False]
['text':'  The pointwise ops seem to be pre-fused into a single Pointwise','line_number':334,'multiline':False]
['text':'  The pointwise ops seem to be pre-fused into a single Pointwise','line_number':368,'multiline':False]
['text':'  The pointwise ops seem to be pre-fused into a single Pointwise','line_number':380,'multiline':False]
['text':' this should not be fused, since the output dtype is different from the matmul dtype','line_number':390,'multiline':False]
['text':' TODO: Enable dynamic test cases when dynamic support is added.','line_number':408,'multiline':False]
['text':' TODO: Enable dynamic test cases when dynamic support is added.','line_number':479,'multiline':False]
['text':' No broadcast','line_number':521,'multiline':False]
['text':' Broadcast first dim.','line_number':523,'multiline':False]
['text':' Broadcast last dim.','line_number':525,'multiline':False]
['text':' CUTLASS2 doesn't support Bias last-dim broadcast.','line_number':528,'multiline':False]
['text':' Assuming input has 3 channels and we want to produce 16 channels as output','line_number':535,'multiline':False]
['text':' Example input tensor: batch size = 4, channels = 3, height = 32, width = 32','line_number':542,'multiline':False]
['text':' The memory format is set to `channels_last`','line_number':543,'multiline':False]
['text':' Verify that the visible devices env var is set correctly. If multi-device','line_number':674,'multiline':False]
['text':' auto-tuning is disabled, the visible devices should be unmanipulated from','line_number':675,'multiline':False]
['text':' the parent process. If multi-device auto-tuning is enabled, the visible','line_number':676,'multiline':False]
['text':' devices should be a _single_ valid device number. Note that we can't perform','line_number':677,'multiline':False]
['text':' this validation directly from the test body because benchmarks execute in a','line_number':678,'multiline':False]
['text':' separate process. If the check fails, however, the test will detect the','line_number':679,'multiline':False]
['text':' failure by virtue of not receiving the expected result back.','line_number':680,'multiline':False]
['text':' Use only one device/subprocess so we test the process restarts','line_number':701,'multiline':False]
['text':' and is usable after a "crash".','line_number':702,'multiline':False]
['text':' First force the tuning process to "crash" by setting a bogus','line_number':707,'multiline':False]
['text':' string for the expected visible devices.','line_number':708,'multiline':False]
['text':' Then send another request and make sure the sub-process','line_number':716,'multiline':False]
['text':' has restarted and is operational. 'valid_devices' expected','line_number':717,'multiline':False]
['text':' to be None because autotune_multi_device is off.','line_number':718,'multiline':False]
['text':' Adapt the test to the available devices (and whether CUDA_VISIBLE_DEVICES','line_number':729,'multiline':False]
['text':' is already set in the environment); use a subset of the available devices','line_number':730,'multiline':False]
['text':' to ensure only the subset are visible to the sub-processes.','line_number':731,'multiline':False]
['text':' Set env to make it work in CI.','line_number':760,'multiline':False]
