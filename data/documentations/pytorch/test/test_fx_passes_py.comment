['text':' Owner(s): ["module: fx.passes"]','line_number':1,'multiline':False]
['text':' testing to avoid DFS uses in passes. Since Python has max recursion depth.','line_number':56,'multiline':False]
['text':' blocked by this','line_number':81,'multiline':False]
['text':' add should be fused right branch, as left branch is not supported','line_number':102,'multiline':False]
['text':' left branch','line_number':104,'multiline':False]
['text':' right branch','line_number':106,'multiline':False]
['text':' add should have its own partition, as neither branchs are supported','line_number':112,'multiline':False]
['text':' left branch','line_number':114,'multiline':False]
['text':' right branch','line_number':116,'multiline':False]
['text':' both branches are supported, all adds should be fused together','line_number':122,'multiline':False]
['text':' left branch','line_number':124,'multiline':False]
['text':' right branch is larger','line_number':126,'multiline':False]
['text':' both branches are in the same partition, add should join the same partition','line_number':133,'multiline':False]
['text':' left branch','line_number':135,'multiline':False]
['text':' right branch','line_number':137,'multiline':False]
['text':' left and right branch merges','line_number':139,'multiline':False]
['text':' branch 1','line_number':147,'multiline':False]
['text':' branch 2','line_number':149,'multiline':False]
['text':' branch_3','line_number':151,'multiline':False]
['text':' branch 1','line_number':159,'multiline':False]
['text':' branch 2','line_number':161,'multiline':False]
['text':' branch 3: depends on branch 2','line_number':163,'multiline':False]
['text':' branch 1','line_number':171,'multiline':False]
['text':' branch 2 depends on branch 1','line_number':173,'multiline':False]
['text':' branch 3','line_number':175,'multiline':False]
['text':' c2 has dependency on x0 & b0, when we merge {c0, c1, c2}','line_number':188,'multiline':False]
['text':' this dependency should be updated to the fusion group and reflected','line_number':189,'multiline':False]
['text':' on the decision to not fuse b0 & b1, which forms a cyclic dependency in','line_number':190,'multiline':False]
['text':' the new graph','line_number':191,'multiline':False]
['text':' A mock OperatorSupport class, where only operator.add is supported','line_number':237,'multiline':False]
['text':' 1 horizontal fusion with common producer','line_number':253,'multiline':False]
['text':' 2 branches cases','line_number':257,'multiline':False]
['text':' 3 branch cases','line_number':263,'multiline':False]
['text':' 4 not necessarily the only partition, just to verify that there's no cyclic dependency after partition','line_number':268,'multiline':False]
['text':' 5 getitem special case','line_number':271,'multiline':False]
['text':' 6 bookend non_compute pass','line_number':275,'multiline':False]
['text':' vertical fusion','line_number':336,'multiline':False]
['text':' horizontal fusion','line_number':337,'multiline':False]
['text':' arbitray node order','line_number':339,'multiline':False]
['text':' arbitray node order','line_number':340,'multiline':False]
['text':' arbitray partition order','line_number':341,'multiline':False]
['text':' includes call_function + call_module node','line_number':342,'multiline':False]
['text':' includes call_function + call_module node','line_number':343,'multiline':False]
['text':' includes get_attr + call_module nodes','line_number':344,'multiline':False]
['text':' includes get_attr + call_function + call_module nodes','line_number':345,'multiline':False]
['text':' full graph','line_number':346,'multiline':False]
['text':' add_1 exists in multiple partitions','line_number':368,'multiline':False]
['text':' invalid partition: circular dependency','line_number':369,'multiline':False]
['text':' invalid partition: circular dependency','line_number':370,'multiline':False]
['text':' invalid partition: circular dependency','line_number':371,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':414,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':433,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':452,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':480,'multiline':False]
['text':' fully contained matched subgraph','line_number':490,'multiline':False]
['text':' use of t0 is not leaking','line_number':494,'multiline':False]
['text':' leaking matched subgraph, m3 is leaked','line_number':496,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':511,'multiline':False]
['text':' leaked used of placeholder is not leaking','line_number':516,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':532,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':557,'multiline':False]
['text':' outputs have data dependency','line_number':575,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':578,'multiline':False]
['text':' target subgraph to match','line_number':590,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':606,'multiline':False]
['text':' target subgraph to match','line_number':618,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':635,'multiline':False]
['text':' target subgraph to match','line_number':645,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':664,'multiline':False]
['text':' target subgraph to match','line_number':673,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':688,'multiline':False]
['text':' (False, False, 2),  # FIXME: currently still matches to 2, should fix to 1','line_number':689,'multiline':False]
['text':' target subgraph to match','line_number':700,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':714,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':737,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':782,'multiline':False]
['text':' This test case is for pattern where no matching anchor is found in the target graph','line_number':787,'multiline':False]
['text':' `anchor` is the starting point of the pattern matching, it's usually the boundary returning nodes','line_number':788,'multiline':False]
['text':' match_output, match_placeholder, num_matches','line_number':800,'multiline':False]
