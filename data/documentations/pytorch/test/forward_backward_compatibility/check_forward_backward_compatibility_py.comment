['text':' How to run this test locally:','line_number':12,'multiline':False]
['text':' 1 Have two virtual environments (eg conda env), one without PyTorch installed (venv_nightly)','line_number':13,'multiline':False]
['text':'   one with your local changes (venv_yours).','line_number':14,'multiline':False]
['text':' In venv_nightly:','line_number':15,'multiline':False]
['text':' 2. First ensure that Pytorch is uninstalled, but all prereqs are installed','line_number':16,'multiline':False]
['text':' 3. Install torch nightly build with','line_number':17,'multiline':False]
['text':'    `pip install --pre torch -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html`','line_number':18,'multiline':False]
['text':' 4. Generate original schemas with','line_number':19,'multiline':False]
['text':'    `python test/forward_backward_compatibility/dump_all_function_schemas.py --filename nightly_schemas.txt`','line_number':20,'multiline':False]
['text':' Now in venv_yours:','line_number':21,'multiline':False]
['text':' 5. Run this test with','line_number':22,'multiline':False]
['text':'    `python test/forward_backward_compatibility/check_forward_backward_compatibility.py --existing-schemas nightly_schemas.txt`','line_number':23,'multiline':False]
['text':' The date specifies how long the allowlist exclusion should apply to.','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':'   - If we NEVER give BC guarantee for an operator, you can put the','line_number':27,'multiline':False]
['text':'     date arbitrarily far in the future.','line_number':28,'multiline':False]
['text':'   - Otherwise, pick a date that is far enough in the future that you','line_number':29,'multiline':False]
['text':'     believe you can land your diff before then.','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' Allowlist entries can be removed after the date listed on them passes.','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' Allowlist item format:','line_number':34,'multiline':False]
['text':' [','line_number':35,'multiline':False]
['text':'   0: function name regex','line_number':36,'multiline':False]
['text':'   1: date until which the allowlist entry is valid','line_number':37,'multiline':False]
['text':'   2: (optional) function argument regex','line_number':38,'multiline':False]
['text':' ]','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' NB: function name DOES NOT include overload name!','line_number':41,'multiline':False]
['text':' Internal','line_number':44,'multiline':False]
['text':' Internal, profiler-specific ops','line_number':51,'multiline':False]
['text':' nested tensor temporary auxiliary ops','line_number':100,'multiline':False]
['text':' TODO: FIXME: prims shouldn't be checked','line_number':109,'multiline':False]
['text':' BetterTransformer 1.0 internal operators','line_number':291,'multiline':False]
['text':' These ops were moved to python under the c10d_functional namespace','line_number':301,'multiline':False]
['text':' if arguments regex is present, use it','line_number':336,'multiline':False]
['text':' The nightly will fail to parse newly added syntax to schema declarations','line_number':342,'multiline':False]
['text':' Add new schemas that will fail the nightly here','line_number':343,'multiline':False]
['text':' we want to parse through the map to find if','line_number':352,'multiline':False]
['text':' the schema has valid upgraders. Since the','line_number':353,'multiline':False]
['text':' version map has entry for each overload','line_number':354,'multiline':False]
['text':' we need to do some ugly parsing.','line_number':355,'multiline':False]
['text':' the name of the operator','line_number':357,'multiline':False]
['text':' let's make sure this existing schema is part of possible','line_number':371,'multiline':False]
['text':' schemas','line_number':372,'multiline':False]
['text':' version map maps full schema name to','line_number':397,'multiline':False]
['text':' list of upgraders. Since we only have','line_number':398,'multiline':False]
['text':' the name of the schema (aka no overload)','line_number':399,'multiline':False]
['text':' we want to first process the map to make','line_number':400,'multiline':False]
['text':' the key lookup easier. After this it will be:','line_number':401,'multiline':False]
['text':' Dict[schema_name, Dict[overload, List[schema]]]','line_number':402,'multiline':False]
['text':' TODO Print out more details about why candidates don't match.','line_number':438,'multiline':False]
['text':' TODO in case there is FC breaking changes,','line_number':521,'multiline':False]
['text':' we just warn for now until there is a policy.','line_number':522,'multiline':False]
