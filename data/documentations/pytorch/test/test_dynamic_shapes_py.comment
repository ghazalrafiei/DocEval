['text':' Owner(s): ["oncall: jit"]','line_number':1,'multiline':False]
['text':' TODO: this is wrong in general','line_number':103,'multiline':False]
['text':' Should be simplifiable to an integer.','line_number':211,'multiline':False]
['text':' Ref: https://github.com/pytorch/pytorch/pull/107492','line_number':212,'multiline':False]
['text':' due to guard above','line_number':214,'multiline':False]
['text':' broadcasting','line_number':237,'multiline':False]
['text':' arithmetic expr with two symints','line_number':252,'multiline':False]
['text':' arithmetic expr with a symint and python int','line_number':256,'multiline':False]
['text':' varargs','line_number':265,'multiline':False]
['text':' shape list','line_number':271,'multiline':False]
['text':' mixed python symints and ints','line_number':277,'multiline':False]
['text':' mixed python symints and ints in a list','line_number':283,'multiline':False]
['text':' mixed python symints and ints','line_number':289,'multiline':False]
['text':' mixed python ints and symints in a list','line_number':295,'multiline':False]
['text':' should not TypeError: pad(): argument 'pad' (position 2) must be','line_number':358,'multiline':False]
['text':' tuple of ints, not tuple','line_number':359,'multiline':False]
['text':' This doesn't error','line_number':486,'multiline':False]
['text':' This generates a deferred runtime assert via replacement','line_number':488,'multiline':False]
['text':' After expecting true, guards now resolve given the runtime assert','line_number':490,'multiline':False]
['text':' Importantly, this is put in i1, not i0!','line_number':511,'multiline':False]
['text':' NB: We currently don't support deriving that we can substitute','line_number':517,'multiline':False]
['text':' i0 + i1 with 10; maybe we should, but this means our rewriting','line_number':518,'multiline':False]
['text':' system is no longer confluent (it's probably OK though, because','line_number':519,'multiline':False]
['text':' you're unlikely to get other equalities like this on the','line_number':520,'multiline':False]
['text':' unbacked SymInts.)','line_number':521,'multiline':False]
['text':' allocate 10','line_number':537,'multiline':False]
['text':' See https://github.com/pytorch/pytorch/issues/95981','line_number':573,'multiline':False]
['text':' WARNING: do not do identity tests on the outer','line_number':590,'multiline':False]
['text':' SymInt/SymFloat, they are NOT STABLE','line_number':591,'multiline':False]
['text':' noqa: B950','line_number':634,'multiline':False]
['text':' Helper function','line_number':639,'multiline':False]
['text':' NB: don't use one as that will get specialized','line_number':640,'multiline':False]
['text':' NB: this must come before int','line_number':645,'multiline':False]
['text':' ValueError: math domain error','line_number':655,'multiline':False]
['text':' ZeroDivisionError: division by zero','line_number':658,'multiline':False]
['text':' ZeroDivisionError: 0.0 cannot be raised to a negative power','line_number':661,'multiline':False]
['text':' Complex result, which we do not support:','line_number':667,'multiline':False]
['text':' TypeError: Cannot convert complex to float','line_number':668,'multiline':False]
['text':' TypeError: unsupported operand type(s)','line_number':674,'multiline':False]
['text':' ValueError: math domain error','line_number':677,'multiline':False]
['text':' SymInt, int','line_number':689,'multiline':False]
['text':' Get reference result','line_number':692,'multiline':False]
['text':' Symified first arg','line_number':699,'multiline':False]
['text':' Symified second arg','line_number':714,'multiline':False]
['text':' Symified both args','line_number':723,'multiline':False]
['text':' sym_ite has its own tests','line_number':734,'multiline':False]
['text':' TODO: Hmm, this looks like we skip all floats','line_number':748,'multiline':False]
['text':' Second argument is ignored for unary function. So only run for one type','line_number':755,'multiline':False]
['text':' Only floats here since these will be converted to int if necessary.','line_number':762,'multiline':False]
['text':' We also ignore complex and bool.','line_number':763,'multiline':False]
['text':' SymInt, SymBool, SymFloat are unhashable','line_number':793,'multiline':False]
['text':' We should be passing in float here, but create_symbol currently','line_number':797,'multiline':False]
['text':' only supports int','line_number':798,'multiline':False]
['text':' Singleton SymInt, constant SymBool, SymNode are hashable','line_number':806,'multiline':False]
['text':'','line_number':850,'multiline':False]
['text':' Unary','line_number':851,'multiline':False]
['text':'','line_number':852,'multiline':False]
['text':' op(constant SymBool)','line_number':853,'multiline':False]
['text':'','line_number':856,'multiline':False]
['text':' Binary','line_number':857,'multiline':False]
['text':'','line_number':858,'multiline':False]
['text':' op(constant SymBool, bool)','line_number':859,'multiline':False]
['text':' op(constant SymBool, constant SymBool)','line_number':860,'multiline':False]
['text':' op(bool, constant SymBool)','line_number':861,'multiline':False]
['text':' op(symbolic SymBool, constant Symbool)','line_number':866,'multiline':False]
['text':' op(constant SymBool, symbolic Symbool)','line_number':867,'multiline':False]
['text':' symbolic SymBool','line_number':871,'multiline':False]
['text':' Comparing sizes','line_number':880,'multiline':False]
['text':' Note: we fully evaluate here since FloorDiv might not always do','line_number':899,'multiline':False]
['text':' that.','line_number':900,'multiline':False]
['text':' Compares to int since our FloorDiv has no bool support','line_number':936,'multiline':False]
['text':' Tests that our impl throws','line_number':938,'multiline':False]
['text':' We don't test error messages to avoid depending on Python','line_number':956,'multiline':False]
['text':' interpreter version','line_number':957,'multiline':False]
['text':' We don't test error messages to avoid depending on Python','line_number':974,'multiline':False]
['text':' interpreter version','line_number':975,'multiline':False]
['text':' Tests how we simplify or evaluate FloorDiv without free variables','line_number':1008,'multiline':False]
['text':' We define two Symbols (with different names) for each type to make','line_number':1041,'multiline':False]
['text':' sure the behavior is consistent regardless of whether both arguments','line_number':1042,'multiline':False]
['text':' are the same object or not.','line_number':1043,'multiline':False]
['text':' In regular Python, x//x == 1.0 if x is a float, but FloorDiv','line_number':1072,'multiline':False]
['text':' always returns an integer 1 when both args are the same object.','line_number':1073,'multiline':False]
['text':' This even works for Symbols with no assumptions specified.','line_number':1074,'multiline':False]
