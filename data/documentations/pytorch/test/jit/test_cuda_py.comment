['text':' Owner(s): ["oncall: jit"]','line_number':1,'multiline':False]
['text':' Make the helper files in test/ importable','line_number':14,'multiline':False]
['text':' Check if multiple GPU's are available','line_number':18,'multiline':False]
['text':' If GPU is not available, then do not run the tests','line_number':21,'multiline':False]
['text':' noqa: F811','line_number':24,'multiline':False]
['text':' If GPU is available, then initialize the cuda context and check','line_number':28,'multiline':False]
['text':' if there is memory available to allocate for LARGE Tensors.','line_number':29,'multiline':False]
['text':' initialize cuda context','line_number':31,'multiline':False]
['text':' Test device synchronization.','line_number':53,'multiline':False]
['text':' Check if the current device index is same as the device index before','line_number':65,'multiline':False]
['text':' synchronizing the device.','line_number':66,'multiline':False]
['text':' Check if the current device index is same as the device index before','line_number':76,'multiline':False]
['text':' synchronizing the device.','line_number':77,'multiline':False]
['text':' Test stream creation with default arguments','line_number':88,'multiline':False]
['text':' Test Event creation with default arguments','line_number':117,'multiline':False]
['text':' Test current stream on the device and check if the stream device index','line_number':128,'multiline':False]
['text':' matches with the device ID','line_number':129,'multiline':False]
['text':' By default, the current device ID is 0.','line_number':141,'multiline':False]
['text':' Test current_stream API by passing device ID as an argument and','line_number':147,'multiline':False]
['text':' and check if the stream device index matches with the device ID','line_number':148,'multiline':False]
['text':' By default, the current device ID is 0.','line_number':159,'multiline':False]
['text':' Test default_stream API by passing device ID as an argument and','line_number':171,'multiline':False]
['text':' and check if the stream device index matches with the device ID','line_number':172,'multiline':False]
['text':' This test checks for the default stream ID is set to 0 on the device','line_number':184,'multiline':False]
['text':' Check the current stream id and default id are same','line_number':192,'multiline':False]
['text':' on the current device. The current device id by default is 0','line_number':193,'multiline':False]
['text':' Set the current device to d1 and check if the stream','line_number':198,'multiline':False]
['text':' has been set to the default stream on d1','line_number':199,'multiline':False]
['text':' Check if the current device was reset to 0','line_number':205,'multiline':False]
['text':' This test checks if the Stream Context manager is a no op','line_number':220,'multiline':False]
['text':' when the stream is none for `with torch.cuda.stream`','line_number':221,'multiline':False]
['text':' When stream is none, check if this operation is a no-op','line_number':229,'multiline':False]
['text':' Check if the device index, current stream and default streams have not changed','line_number':236,'multiline':False]
['text':' This test checks if the Device Context manager is a no op','line_number':241,'multiline':False]
['text':' when the device is none for `with torch.cuda.device`','line_number':242,'multiline':False]
['text':' When device is none, check if this operation is a no-op','line_number':246,'multiline':False]
['text':' Check if the current device is the same','line_number':248,'multiline':False]
['text':' Check if a CUDA JIT stream is created','line_number':253,'multiline':False]
['text':' on the current_device','line_number':254,'multiline':False]
['text':' Class used to store results for the test: test_get_stream.','line_number':263,'multiline':False]
['text':' The test aims at checking different stream proporties.','line_number':275,'multiline':False]
['text':' Check if the current and default streams are the same on the device','line_number':284,'multiline':False]
['text':' Check if user stream and default stream are not the same on the device','line_number':286,'multiline':False]
['text':' Check if the stream was reset to current_stream','line_number':292,'multiline':False]
['text':' Capture all the results in the class Result','line_number':300,'multiline':False]
['text':' Check if the default stream ID is always 0','line_number':315,'multiline':False]
['text':' Check if the user stream is always non zero','line_number':316,'multiline':False]
['text':' Test the stream context manager. This test checks if the stream is switched','line_number':318,'multiline':False]
['text':' to the user stream on using the stream context manager.','line_number':319,'multiline':False]
['text':' Wait for B to be computed','line_number':331,'multiline':False]
['text':' Check if the stream has been reset on the current device','line_number':333,'multiline':False]
['text':' Test multiple nested streams. Check if the operations are computed as expected on the streams','line_number':343,'multiline':False]
['text':' This test has been adapted from the eager mode tests available at test/test_cuda.py','line_number':344,'multiline':False]
['text':' Check if the stream and device have been set to s1','line_number':359,'multiline':False]
['text':' Check if the stream and device have been set to s2','line_number':363,'multiline':False]
['text':' Check if the stream and device have been set to s1','line_number':367,'multiline':False]
['text':' Wait for D to be computed','line_number':370,'multiline':False]
['text':' Wait for C to be computed on S1','line_number':372,'multiline':False]
['text':' Check if the stream and device has been restored to previous stream and device','line_number':375,'multiline':False]
['text':' Test multiple streams waiting on each other for the operations to be completed.','line_number':389,'multiline':False]
['text':' Check if the current_stream is reset','line_number':405,'multiline':False]
['text':' Wait for ops on s1 to be computed','line_number':407,'multiline':False]
['text':' Wait for C to be computed','line_number':412,'multiline':False]
['text':' Check if the current_stream is reset','line_number':414,'multiline':False]
['text':' Test a simple CUDA event. Test if the CUDA event was created successfully','line_number':425,'multiline':False]
['text':' Record the CUDA event for operation torch.mm on the current stream','line_number':432,'multiline':False]
['text':' and then test if the elapsed time is greater than 0. This test is also','line_number':433,'multiline':False]
['text':' an adaption from eager mdoe CUDA tests available at test/test_cuda.py','line_number':434,'multiline':False]
['text':' Check for stream synchronization , when a large tensor multiplication is','line_number':456,'multiline':False]
['text':' computed on the stream. The stream.query should be true once the synchroniztion is done','line_number':457,'multiline':False]
['text':' not necessary to check e_tik and e_tok, as elapsed_time would throw','line_number':476,'multiline':False]
['text':' exception if otherwise.','line_number':477,'multiline':False]
['text':' Test event synchronization for the event that records a stream doing','line_number':481,'multiline':False]
['text':' a large tensor multiplication. Check if the elapsed time is greater than 0','line_number':482,'multiline':False]
['text':' and the stream.query evaluates to true.','line_number':483,'multiline':False]
['text':' not necessary to check e_tik and e_tok, as elapsed_time would throw','line_number':501,'multiline':False]
['text':' exception if otherwise.','line_number':502,'multiline':False]
['text':' Test for event wait. Check if event waits for the all the operations on','line_number':507,'multiline':False]
['text':' the stream to be done. Check for synchronizations and query on the streams','line_number':508,'multiline':False]
['text':' and events. This test is adapted from eager mode tests for CUDA. Please refer','line_number':509,'multiline':False]
['text':' test/test_cuda.py','line_number':510,'multiline':False]
['text':' not necessary to check e_tik and e_tok, as elapsed_time would throw','line_number':538,'multiline':False]
['text':' exception if otherwise.','line_number':539,'multiline':False]
['text':' Test for stream wait_event. Checks if the stream waits on the event','line_number':543,'multiline':False]
['text':' Test if a scripted module with cuda streams can be saved, loaded and executed','line_number':562,'multiline':False]
['text':' Script the model and save','line_number':578,'multiline':False]
['text':' Verify if the output is correct','line_number':581,'multiline':False]
['text':' Save and load scripted model','line_number':585,'multiline':False]
['text':' Make sure that cuda._exchange_device doesn't get DCE'ed','line_number':591,'multiline':False]
['text':' Just check the graph, don't run it. Otherwise, we'd  need to','line_number':599,'multiline':False]
['text':' run this test on a multi-gpu CI runner, which is overkill.','line_number':600,'multiline':False]
['text':' Make sure that cuda._maybe_exchange_device doesn't get DCE'ed','line_number':606,'multiline':False]
['text':' Just check the graph, don't run it. Otherwise, we'd  need to','line_number':614,'multiline':False]
['text':' run this test on a multi-gpu CI runner, which is overkill.','line_number':615,'multiline':False]
