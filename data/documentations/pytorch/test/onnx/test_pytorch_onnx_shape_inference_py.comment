['text':' Owner(s): ["module: onnx"]','line_number':1,'multiline':False]
['text':' if shape is not None:','line_number':19,'multiline':False]
['text':'     np.testing.assert_equal(actual_type.sizes(), shape)','line_number':20,'multiline':False]
['text':' type: ignore[arg-type]','line_number':32,'multiline':False]
['text':' kick off initialization for ConstantMap.','line_number':57,'multiline':False]
['text':' Test cast with input of unknown scalar type.','line_number':65,'multiline':False]
['text':' Test ConstantOfShape with input of onnx::Shape node.','line_number':72,'multiline':False]
['text':' Test ConstantOfShape with input of prim::ListConstruct of static tensor','line_number':84,'multiline':False]
['text':' Test ConstantOfShape with input of prim::ListConstruct of dynamic tensor','line_number':100,'multiline':False]
['text':' test when first input is of rank 1','line_number':203,'multiline':False]
['text':' test when second input is of rank 1','line_number':210,'multiline':False]
['text':' test when both inputs are of rank 1','line_number':217,'multiline':False]
['text':' `scales` values should be statically known due to constant folding in shape inference.','line_number':293,'multiline':False]
['text':' `prim::PackPadded` only occurs in tracing mode. Hence its outputs inherits','line_number':329,'multiline':False]
['text':' shape and data type from traced graph.','line_number':330,'multiline':False]
['text':' `Gather` should use the data type of `batch_size` as the data type of its output.','line_number':333,'multiline':False]
['text':' Type is intentionally not bool to test that','line_number':346,'multiline':False]
['text':' the added "Cast" node doesn't stop shape inference.','line_number':347,'multiline':False]
['text':' Exporter will add "If" instead of raw "Squeeze" if it does not know','line_number':364,'multiline':False]
['text':' that if the dimension it is squeezing has size 1.','line_number':365,'multiline':False]
['text':' If node output has shape info, it should have dim_value','line_number':404,'multiline':False]
['text':' Otherwise, it has dim_params with dynamic shape','line_number':405,'multiline':False]
['text':' If node output has shape info, it should have dim_value','line_number':438,'multiline':False]
['text':' Otherwise, it has dim_params with dynamic shape','line_number':439,'multiline':False]
['text':' The first axe should be dynamic as we defined when exporting','line_number':475,'multiline':False]
['text':' If node output has shape info, it should have dim_value','line_number':478,'multiline':False]
['text':' Otherwise, it has dim_params with dynamic shape','line_number':479,'multiline':False]
['text':' To validate the shape of inverse Op, we need to find inverse output name,','line_number':511,'multiline':False]
['text':' and then use it to identify its value_info for the shape.','line_number':512,'multiline':False]
['text':' If node output has shape info, it should have dim_value','line_number':527,'multiline':False]
['text':' Otherwise, it has dim_params with dynamic shape','line_number':528,'multiline':False]
