['text':' Owner(s): ["module: onnx"]','line_number':1,'multiline':False]
['text':' Full diff for expect files','line_number':17,'multiline':False]
['text':' flag to produce onnx test cases.','line_number':45,'multiline':False]
['text':' flag to import onnx package.','line_number':46,'multiline':False]
['text':' Assume:','line_number':105,'multiline':False]
['text':'     1) the old test should be delete before the test.','line_number':106,'multiline':False]
['text':'     2) only one assertONNX in each test, otherwise will override the data.','line_number':107,'multiline':False]
['text':' The inside of this function should never be invoked, because','line_number':283,'multiline':False]
['text':' we will fail due to an argument mismatch first.','line_number':284,'multiline':False]
['text':' NB: Don't use expect test here, the type error wobbles depending','line_number':293,'multiline':False]
['text':' on Python version','line_number':294,'multiline':False]
['text':' TODO: Do an nn style test for these','line_number':298,'multiline':False]
['text':' This test point checks that for opset 8 (or lower), even if','line_number':331,'multiline':False]
['text':' keep_initializers_as_inputs is set to False, it is ignored,','line_number':332,'multiline':False]
['text':' and initializers are listed as ONNX graph input, in accordance','line_number':333,'multiline':False]
['text':' with ONNX IR v3 semantics (which apply to opset version <= 8).','line_number':334,'multiline':False]
['text':' Asserting the default dynamic axes names are generated when custom names are not provided','line_number':366,'multiline':False]
['text':' Asserting the custom names are applied when provided','line_number':380,'multiline':False]
['text':' Github Issue: https://github.com/pytorch/pytorch/issues/71095','line_number':877,'multiline':False]
['text':'    def test_c2_op(self):','line_number':878,'multiline':False]
['text':'        class MyModel(torch.nn.Module):','line_number':879,'multiline':False]
['text':'            def __init__(self):','line_number':880,'multiline':False]
['text':'                super().__init__()','line_number':881,'multiline':False]
['text':'','line_number':882,'multiline':False]
['text':'            def forward(self, scores, bbox_deltas, im_info, anchors):','line_number':883,'multiline':False]
['text':'                a, b = torch.ops._caffe2.GenerateProposals(','line_number':884,'multiline':False]
['text':'                    (scores), (bbox_deltas), (im_info), (anchors),','line_number':885,'multiline':False]
['text':'                    2.0, 6000, 300, 0.7, 16, True, -90, 90, 1.0, True,','line_number':886,'multiline':False]
['text':'                )','line_number':887,'multiline':False]
['text':'                return a, b','line_number':888,'multiline':False]
['text':'','line_number':889,'multiline':False]
['text':'        model = MyModel()','line_number':890,'multiline':False]
['text':'        A = 4','line_number':891,'multiline':False]
['text':'        H = 10','line_number':892,'multiline':False]
['text':'        W = 8','line_number':893,'multiline':False]
['text':'        img_count = 3','line_number':894,'multiline':False]
['text':'        scores = torch.ones(img_count, A, H, W, dtype=torch.float32)','line_number':895,'multiline':False]
['text':'        bbox_deltas = torch.linspace(0, 10, steps=img_count * 4 * A * H * W,','line_number':896,'multiline':False]
['text':'                                     dtype=torch.float32)','line_number':897,'multiline':False]
['text':'        bbox_deltas = bbox_deltas.view(img_count, 4 * A, H, W)','line_number':898,'multiline':False]
['text':'        im_info = torch.ones(img_count, 3, dtype=torch.float32)','line_number':899,'multiline':False]
['text':'        anchors = torch.ones(A, 4, dtype=torch.float32)','line_number':900,'multiline':False]
['text':'        inputs = (scores, bbox_deltas, im_info, anchors)','line_number':901,'multiline':False]
['text':'        self.assertONNX(model, inputs, custom_opsets={"org.pytorch._caffe2": 0})','line_number':902,'multiline':False]
['text':' noqa: RUF015','line_number':909,'multiline':False]
['text':' This is test_aten_embedding_1 with shape inference on custom symbolic aten::embedding.','line_number':1195,'multiline':False]
['text':' do shape inference and set it via setType','line_number':1216,'multiline':False]
['text':' Without shapeValueMap, the onnx graph looks like:','line_number':1254,'multiline':False]
['text':' graph(%0 : Float(*, 1, 128, 1, strides=[128, 128, 1, 1], requires_grad=0, device=cpu)):','line_number':1255,'multiline':False]
['text':'   %2 : Long(4, strides=[1], device=cpu) = onnx::Shape(%0)','line_number':1256,'multiline':False]
['text':'   %4 : Long(device=cpu) = onnx::Constant[value={0}]()','line_number':1257,'multiline':False]
['text':'   %5 : Long(device=cpu) = onnx::Gather[axis=0](%2, %4)','line_number':1258,'multiline':False]
['text':'   %6 : Long(device=cpu) = onnx::Constant[value={1}]()','line_number':1259,'multiline':False]
['text':'   %7 : Long(device=cpu) = onnx::Constant[value={2}]()','line_number':1260,'multiline':False]
['text':'   %8 : Long(device=cpu) = onnx::Constant[value={-1}]()','line_number':1261,'multiline':False]
['text':'   %9 : int[] = prim::ListConstruct(%5, %6, %7, %8)','line_number':1262,'multiline':False]
['text':'   %10 : Float(*, *, *, *, strides=[128, 128, 64, 1], requires_grad=0, device=cpu) = onnx::Reshape(%0, %9)','line_number':1263,'multiline':False]
['text':'   ...','line_number':1264,'multiline':False]
['text':' With shapeValueMap, it becomes:','line_number':1265,'multiline':False]
['text':'   ...','line_number':1266,'multiline':False]
['text':'   %10 : Float(*, 1, 2, 64, strides=[128, 128, 64, 1], requires_grad=0, device=cpu) = onnx::Reshape(%0, %9)','line_number':1267,'multiline':False]
['text':'   ...','line_number':1268,'multiline':False]
