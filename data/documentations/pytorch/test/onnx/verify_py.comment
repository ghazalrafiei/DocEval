['text':' Allocated upon instance creation so that multiple Errors','line_number':37,'multiline':False]
['text':' can be used','line_number':38,'multiline':False]
['text':' Bit-for-bit accuracy test','line_number':90,'multiline':False]
['text':' Use numpy for the comparison','line_number':98,'multiline':False]
['text':' TODO: Better algorithm for lists','line_number':107,'multiline':False]
['text':' long form','line_number':111,'multiline':False]
['text':' TODO: instead of immediately concatenating the context in the msg,','line_number':143,'multiline':False]
['text':' attach it as metadata and make a decision how to format it later.','line_number':144,'multiline':False]
['text':' For now, don't try randomizing non-float tensors; these','line_number':352,'multiline':False]
['text':' are likely to be things like indices, where just randomly','line_number':353,'multiline':False]
['text':' spattering some longs is unlikely to work.  One way we could','line_number':354,'multiline':False]
['text':' make this work is to apply a random permutation or something.','line_number':355,'multiline':False]
['text':' TODO: onnx should accept iterables','line_number':363,'multiline':False]
['text':' doc_string has stack traces - let's remove them to make comparison','line_number':369,'multiline':False]
['text':' sane','line_number':370,'multiline':False]
['text':' Special case for common case of passing a single Tensor','line_number':374,'multiline':False]
['text':' OK, let's try to figure out what happened.','line_number':417,'multiline':False]
['text':' First, check if we have the same number of parameters, and','line_number':422,'multiline':False]
['text':' that they"re the same order.  If they don"t, something has *really* gone wrong.','line_number':423,'multiline':False]
['text':' Now check if the embedded parameters are actually the same','line_number':436,'multiline':False]
['text':' Next, check if the model structure lines up.','line_number':448,'multiline':False]
['text':' Delete initializers since we already tested them','line_number':455,'multiline':False]
['text':' Compare the printable graph representations first','line_number':464,'multiline':False]
['text':' Compare the actual protobuf text formats now (not','line_number':470,'multiline':False]
['text':' very user-friendly!)','line_number':471,'multiline':False]
['text':' One last ditch effort, using built-in equality on','line_number':476,'multiline':False]
['text':' protobufs','line_number':477,'multiline':False]
['text':' At this point, we should have figured out why the binary','line_number':482,'multiline':False]
['text':' protobufs differed, and short-circuited out of this code','line_number':483,'multiline':False]
['text':' with a helpful error message.  But what if we didn't?','line_number':484,'multiline':False]
['text':' We better still try to give a good error message in this','line_number':485,'multiline':False]
['text':' case.  We EXPECT these requires to fail.  If they don't,','line_number':486,'multiline':False]
['text':' that is a bug in verify','line_number':487,'multiline':False]
['text':' TODO: test that the traced model also returns the same thing...','line_number':494,'multiline':False]
['text':' Factored out so we can avoid one run of the model','line_number':497,'multiline':False]
['text':' NB: onnx backend NEVER returns bare numpy array','line_number':509,'multiline':False]
