['text':' Owner(s): ["oncall: pt2"]','line_number':1,'multiline':False]
['text':' a mix of constants, powers of two, primes','line_number':45,'multiline':False]
['text':' less constants for N^2 situations','line_number':66,'multiline':False]
['text':' SymPy relational types.','line_number':68,'multiline':False]
['text':' sympy will expand to x*x*... for integral b; don't do it if it's big','line_number':85,'multiline':False]
['text':' no imaginary numbers  # 0**0 is undefined','line_number':88,'multiline':False]
['text':' ranges that only admit infinite values are not interesting','line_number':106,'multiline':False]
['text':' sympy.floordiv does 1.0 // 1.0 == 1 rather than 1.0. wtf','line_number':150,'multiline':False]
['text':' This takes about 4s for all the variants','line_number':216,'multiline':False]
['text':' don't attempt pow on exponents that are too large (but oo is OK)','line_number':221,'multiline':False]
['text':' Repro from https://github.com/pytorch/pytorch/issues/105097','line_number':239,'multiline':False]
['text':' SymPy does not implement truncation for Expressions','line_number':257,'multiline':False]
['text':' Yes, I know this is a longwinded way of saying xreplace; the','line_number':280,'multiline':False]
['text':' point is to test sympy_interp','line_number':281,'multiline':False]
['text':' These never show up from symbolic_shapes','line_number':287,'multiline':False]
['text':' Workaround mpf from symbol error','line_number':305,'multiline':False]
['text':' Not a relational operation.','line_number':359,'multiline':False]
['text':' 'a' appears on both sides.','line_number':361,'multiline':False]
['text':' 'a' doesn't appear on neither side.','line_number':363,'multiline':False]
['text':' Result is a 'sympy.And'.','line_number':365,'multiline':False]
['text':' Result is a 'sympy.Or'.','line_number':367,'multiline':False]
['text':' Divide/multiply both sides by positive number.','line_number':453,'multiline':False]
['text':' 'b' is not strictly positive nor negative, so we can't','line_number':457,'multiline':False]
['text':' divide/multiply both sides by 'b'.','line_number':458,'multiline':False]
['text':' Divide/multiply both sides by negative number.','line_number':465,'multiline':False]
['text':' (Eq(FloorDiv(a, pos), integer), And(Ge(a, integer * pos), Lt(a, (integer + 1) * pos))),','line_number':484,'multiline':False]
['text':' (Eq(FloorDiv(a + 5, pos), integer), And(Ge(a, integer * pos), Lt(a, (integer + 1) * pos))),','line_number':485,'multiline':False]
['text':' (Ne(FloorDiv(a, pos), integer), Or(Lt(a, integer * pos), Ge(a, (integer + 1) * pos))),','line_number':486,'multiline':False]
['text':' 'FloorDiv' turns into 'And', which can't be simplified any further.','line_number':489,'multiline':False]
['text':' 'FloorDiv' turns into 'Or', which can't be simplified any further.','line_number':491,'multiline':False]
['text':' 'b' is not strictly positive','line_number':500,'multiline':False]
['text':' 'c' is not strictly positive','line_number':502,'multiline':False]
['text':' The result might change after 'FloorDiv' transformation.','line_number':506,'multiline':False]
['text':' Specifically:','line_number':507,'multiline':False]
['text':'   - [Ge, Gt] => Ge','line_number':508,'multiline':False]
['text':'   - [Le, Lt] => Lt','line_number':509,'multiline':False]
['text':' (a + 10) // 3 == 3','line_number':531,'multiline':False]
['text':' =====================================','line_number':532,'multiline':False]
['text':' 3 * 3 <= a + 10         (always true)','line_number':533,'multiline':False]
['text':'          a + 10 < 4 * 3 (not sure)','line_number':534,'multiline':False]
['text':' (a + 10) // 2 == 4','line_number':537,'multiline':False]
['text':' =====================================','line_number':538,'multiline':False]
['text':' 4 * 2 <= 10 - a         (not sure)','line_number':539,'multiline':False]
['text':'          10 - a < 5 * 2 (always true)','line_number':540,'multiline':False]
['text':' (a + 10) // 3 == 3','line_number':551,'multiline':False]
['text':' =====================================','line_number':552,'multiline':False]
['text':' 3 * 3 <= a + 10         (always true)','line_number':553,'multiline':False]
['text':'          a + 10 < 4 * 3 (not sure)','line_number':554,'multiline':False]
['text':' Add assertions for 'a_'.','line_number':557,'multiline':False]
['text':' Check 'try_solve' really returns the 'expected' below.','line_number':563,'multiline':False]
['text':' Check whether there is an integer 'a_' such that the','line_number':567,'multiline':False]
['text':' equation below is satisfied.','line_number':568,'multiline':False]
['text':' expr','line_number':570,'multiline':False]
['text':' expected','line_number':573,'multiline':False]
['text':' Assert that there's no such an integer.','line_number':577,'multiline':False]
['text':' i.e. the transformation is sound.','line_number':578,'multiline':False]
['text':' eq, ne','line_number':593,'multiline':False]
['text':' expected is always True','line_number':606,'multiline':False]
['text':' ge, le, gt, lt','line_number':621,'multiline':False]
['text':' Special cases for ge, le, gt, lt:','line_number':629,'multiline':False]
['text':' it is only known to be that j1 >= 2, j1 > 2 is indeterminate','line_number':644,'multiline':False]
['text':' mul','line_number':654,'multiline':False]
['text':' Unfortunately, this doesn't not automatically simplify to 2*j1','line_number':656,'multiline':False]
['text':' since sympy.Mul doesn't trigger __mul__ unlike the above.','line_number':657,'multiline':False]
