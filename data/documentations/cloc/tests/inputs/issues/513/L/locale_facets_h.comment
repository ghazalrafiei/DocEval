['text':' Locale support -*- C++ -*-','line_number':1,'multiline':False]
['text':' gcc-3.4.6/libstdc++-v3/include/bits/locale_facets.h','line_number':2,'multiline':False]
['text':' Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005','line_number':4,'multiline':False]
['text':' Free Software Foundation, Inc.','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' This file is part of the GNU ISO C++ Library.  This library is free','line_number':7,'multiline':False]
['text':' software; you can redistribute it and/or modify it under the','line_number':8,'multiline':False]
['text':' terms of the GNU General Public License as published by the','line_number':9,'multiline':False]
['text':' Free Software Foundation; either version 2, or (at your option)','line_number':10,'multiline':False]
['text':' any later version.','line_number':11,'multiline':False]
['text':' This library is distributed in the hope that it will be useful,','line_number':13,'multiline':False]
['text':' but WITHOUT ANY WARRANTY; without even the implied warranty of','line_number':14,'multiline':False]
['text':' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the','line_number':15,'multiline':False]
['text':' GNU General Public License for more details.','line_number':16,'multiline':False]
['text':' You should have received a copy of the GNU General Public License along','line_number':18,'multiline':False]
['text':' with this library; see the file COPYING.  If not, write to the Free','line_number':19,'multiline':False]
['text':' Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,','line_number':20,'multiline':False]
['text':' USA.','line_number':21,'multiline':False]
['text':' As a special exception, you may use this file as part of a free software','line_number':23,'multiline':False]
['text':' library without restriction.  Specifically, if other files instantiate','line_number':24,'multiline':False]
['text':' templates or use macros or inline functions from this file, or you compile','line_number':25,'multiline':False]
['text':' this file and link it with other files to produce an executable, this','line_number':26,'multiline':False]
['text':' file does not by itself cause the resulting executable to be covered by','line_number':27,'multiline':False]
['text':' the GNU General Public License.  This exception does not however','line_number':28,'multiline':False]
['text':' invalidate any other reasons why the executable file might be covered by','line_number':29,'multiline':False]
['text':' the GNU General Public License.','line_number':30,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' ISO C++ 14882: 22.1  Locales','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':'* @file locale_facets.h
 *  This is an internal header file, included by other library headers.
 *  You should not attempt to use it directly.
 ','line_number':36,'multiline':True]
['text':' For struct tm','line_number':46,'multiline':False]
['text':' For wctype_t','line_number':47,'multiline':False]
['text':' For ios_base, ios_base::iostate','line_number':49,'multiline':False]
['text':' NB: Don't instantiate required wchar_t facets if no wchar_t support.','line_number':54,'multiline':False]
['text':' Convert string to numeric value of type _Tv and store results.','line_number':61,'multiline':False]
['text':' NB: This is specialized for all required types, there is no','line_number':62,'multiline':False]
['text':' generic definition.','line_number':63,'multiline':False]
['text':' Explicit specializations for required types.','line_number':69,'multiline':False]
['text':' NB: __pad is a struct, rather than a function, so it can be','line_number':85,'multiline':False]
['text':' partially-specialized.','line_number':86,'multiline':False]
['text':' Used by both numeric and monetary facets.','line_number':96,'multiline':False]
['text':' Inserts "group separator" characters into an array of characters.','line_number':97,'multiline':False]
['text':' It's recursive, one iteration per group.  It moves the characters','line_number':98,'multiline':False]
['text':' in the buffer this way: "xxxx12345" -> "12,345xxx".  Call this','line_number':99,'multiline':False]
['text':' only with __glen != 0.','line_number':100,'multiline':False]
['text':' This template permits specializing facet output code for','line_number':107,'multiline':False]
['text':' ostreambuf_iterator.  For ostreambuf_iterator, sputn is','line_number':108,'multiline':False]
['text':' significantly more efficient than incrementing iterators.','line_number':109,'multiline':False]
['text':' This is the unspecialized form of the template.','line_number':119,'multiline':False]
['text':' 22.2.1.1  Template class ctype','line_number':131,'multiline':False]
['text':' Include host and configuration specific ctype enums for ctype_base.','line_number':132,'multiline':False]
['text':' Common base for ctype<_CharT>.','line_number':135,'multiline':False]
['text':'*
   *  @brief  Common base for ctype facet
   *
   *  This template class provides implementations of the public functions
   *  that forward to the protected virtual functions.
   *
   *  This template also provides abtract stubs for the protected virtual
   *  functions.
  ','line_number':136,'multiline':True]
['text':' NB: Generic, mostly useless implementation.','line_number':149,'multiline':False]
['text':'*
   *  @brief  Template ctype facet
   *
   *  This template class defines classification and conversion functions for
   *  character sets.  It wraps <cctype> functionality.  Ctype gets used by
   *  streams for many I/O operations.
   *
   *  This template provides the protected virtual functions the developer
   *  will have to replace in a derived class or specialization to make a
   *  working facet.  The public functions that access them are defined in
   *  __ctype_abstract_base, to allow for implementation flexibility.  See
   *  ctype<wchar_t> for an example.  The functions are documented in
   *  __ctype_abstract_base.
   *
   *  Note: implementations are provided for all the protected virtual
   *  functions, but will likely not be useful.
  ','line_number':150,'multiline':True]
['text':' 22.2.1.3  ctype<char> specialization.','line_number':174,'multiline':False]
['text':'*
   *  @brief  The ctype<char> specialization.
   *
   *  This class defines classification and conversion functions for
   *  the char type.  It gets used by char streams for many I/O
   *  operations.  The char specialization provides a number of
   *  optimizations as well.
  ','line_number':175,'multiline':True]
['text':' 22.2.1.3  ctype<wchar_t> specialization','line_number':192,'multiline':False]
['text':'*
   *  @brief  The ctype<wchar_t> specialization.
   *
   *  This class defines classification and conversion functions for the
   *  wchar_t type.  It gets used by wchar_t streams for many I/O operations.
   *  The wchar_t specialization provides a number of optimizations as well.
   *
   *  ctype<wchar_t> inherits its public methods from
   *  __ctype_abstract_base<wchar_t>.
  ','line_number':193,'multiline':True]
['text':'_GLIBCXX_USE_WCHAR_T','line_number':210,'multiline':False]
['text':' Include host and configuration specific ctype inlines.','line_number':212,'multiline':False]
['text':' 22.2.1.2  Template class ctype_byname','line_number':215,'multiline':False]
['text':' 22.2.1.4  Class ctype_byname specializations.','line_number':220,'multiline':False]
['text':' 22.2.1.5  Template class codecvt','line_number':227,'multiline':False]
['text':' 22.2.2  The numeric category.','line_number':230,'multiline':False]
['text':'*
   *  @brief  Numpunct facet.
   *
   *  This facet stores several pieces of information related to printing and
   *  scanning numbers, such as the decimal point character.  It takes a
   *  template parameter specifying the char type.  The numpunct facet is
   *  used by streams for many I/O operations involving numbers.
   *
   *  The numpunct template uses protected virtual functions to provide the
   *  actual results.  The public accessors forward the call to the virtual
   *  functions.  These virtual functions are hooks for developers to
   *  implement the behavior they require from a numpunct facet.
  ','line_number':241,'multiline':True]
['text':'*
   *  @brief  Facet for parsing number strings.
   *
   *  This facet encapsulates the code to parse and return a number
   *  from a string.  It is used by the istream numeric extraction
   *  operators.
   *
   *  The num_get template uses protected virtual functions to provide the
   *  actual results.  The public accessors forward the call to the virtual
   *  functions.  These virtual functions are hooks for developers to
   *  implement the behavior they require from the num_get facet.
  ','line_number':281,'multiline':True]
['text':'*
   *  @brief  Facet for converting numbers to strings.
   *
   *  This facet encapsulates the code to convert a number to a string.  It is
   *  used by the ostream numeric insertion operators.
   *
   *  The num_put template uses protected virtual functions to provide the
   *  actual results.  The public accessors forward the call to the virtual
   *  functions.  These virtual functions are hooks for developers to
   *  implement the behavior they require from the num_put facet.
  ','line_number':301,'multiline':True]
['text':'*
   *  @brief  Facet for localized string comparison.
   *
   *  This facet encapsulates the code to compare strings in a localized
   *  manner.
   *
   *  The collate template uses protected virtual functions to provide
   *  the actual results.  The public accessors forward the call to
   *  the virtual functions.  These virtual functions are hooks for
   *  developers to implement the behavior they require from the
   *  collate facet.
  ','line_number':320,'multiline':True]
['text':' Specializations.','line_number':339,'multiline':False]
['text':'*
   *  @brief  Time format ordering data.
   *
   *  This class provides an enum representing different orderings of day,
   *  month, and year.
  ','line_number':363,'multiline':True]
['text':' Specializations.','line_number':379,'multiline':False]
['text':' Generic.','line_number':390,'multiline':False]
['text':' Specializations.','line_number':401,'multiline':False]
['text':' Include host and configuration specific timepunct functions.','line_number':421,'multiline':False]
['text':'*
   *  @brief  Facet for parsing dates and times.
   *
   *  This facet encapsulates the code to parse and return a date or
   *  time from a string.  It is used by the istream numeric
   *  extraction operators.
   *
   *  The time_get template uses protected virtual functions to provide the
   *  actual results.  The public accessors forward the call to the virtual
   *  functions.  These virtual functions are hooks for developers to
   *  implement the behavior they require from the time_get facet.
  ','line_number':424,'multiline':True]
['text':' Types:','line_number':447,'multiline':False]
['text':'*
   *  @brief  Facet for outputting dates and times.
   *
   *  This facet encapsulates the code to format and output dates and times
   *  according to formats used by strftime().
   *
   *  The time_put template uses protected virtual functions to provide the
   *  actual results.  The public accessors forward the call to the virtual
   *  functions.  These virtual functions are hooks for developers to
   *  implement the behavior they require from the time_put facet.
  ','line_number':460,'multiline':True]
['text':'*
   *  @brief  Money format ordering data.
   *
   *  This class contains an ordered array of 4 fields to represent the
   *  pattern for formatting a money amount.  Each field may contain one entry
   *  from the part enum.  symbol, sign, and value must be present and the
   *  remaining field must contain either none or space.  @see
   *  moneypunct::pos_format() and moneypunct::neg_format() for details of how
   *  these fields are interpreted.
  ','line_number':483,'multiline':True]
['text':' A list of valid numeric literals for input and output: in the standard','line_number':514,'multiline':False]
['text':' "C" locale, this is "-0123456789". This array contains the chars after','line_number':515,'multiline':False]
['text':' having been passed through the current locale's ctype<_CharT>.widen().','line_number':516,'multiline':False]
['text':'*
   *  @brief  Facet for formatting data for money amounts.
   *
   *  This facet encapsulates the punctuation, grouping and other formatting
   *  features of money amount string representations.
  ','line_number':557,'multiline':True]
['text':' Types:','line_number':567,'multiline':False]
['text':'@{','line_number':568,'multiline':False]
['text':'/ Public typedefs','line_number':569,'multiline':False]
['text':'@}','line_number':572,'multiline':False]
['text':'/ This value is provided by the standard, but no reason for its','line_number':579,'multiline':False]
['text':'/ existence.','line_number':580,'multiline':False]
['text':'/ Numpunct facet id.','line_number':582,'multiline':False]
['text':'*
       *  @brief  Constructor performs initialization.
       *
       *  This is the constructor provided by the standard.
       *
       *  @param refs  Passed to the base facet class.
      ','line_number':585,'multiline':True]
['text':'*
       *  @brief  Constructor performs initialization.
       *
       *  This is an internal constructor.
       *
       *  @param cache  Cache for optimization.
       *  @param refs  Passed to the base facet class.
      ','line_number':596,'multiline':True]
['text':'*
       *  @brief  Internal constructor. Not for general use.
       *
       *  This is a constructor for use by the library itself to set up new
       *  locales.
       *
       *  @param cloc  The "C" locale.
       *  @param s  The name of a locale.
       *  @param refs  Passed to the base facet class.
      ','line_number':609,'multiline':True]
['text':'*
       *  @brief  Return decimal point character.
       *
       *  This function returns a char_type to use as a decimal point.  It
       *  does so by returning returning
       *  moneypunct<char_type>::do_decimal_point().
       *
       *  @return  @a char_type representing a decimal point.
      ','line_number':624,'multiline':True]
['text':'*
       *  @brief  Return thousands separator character.
       *
       *  This function returns a char_type to use as a thousands
       *  separator.  It does so by returning returning
       *  moneypunct<char_type>::do_thousands_sep().
       *
       *  @return  char_type representing a thousands separator.
      ','line_number':637,'multiline':True]
['text':'*
       *  @brief  Return grouping specification.
       *
       *  This function returns a string representing groupings for the
       *  integer part of an amount.  Groupings indicate where thousands
       *  separators should be inserted.
       *
       *  Each char in the return string is interpret as an integer rather
       *  than a character.  These numbers represent the number of digits in a
       *  group.  The first char in the string represents the number of digits
       *  in the least significant group.  If a char is negative, it indicates
       *  an unlimited number of digits for the group.  If more chars from the
       *  string are required to group a number, the last char is used
       *  repeatedly.
       *
       *  For example, if the grouping() returns "\003\002" and is applied to
       *  the number 123456789, this corresponds to 12,34,56,789.  Note that
       *  if the string was "32", this would put more than 50 digits into the
       *  least significant group if the character set is ASCII.
       *
       *  The string is returned by calling
       *  moneypunct<char_type>::do_grouping().
       *
       *  @return  string representing grouping specification.
      ','line_number':650,'multiline':True]
['text':'*
       *  @brief  Return currency symbol string.
       *
       *  This function returns a string_type to use as a currency symbol.  It
       *  does so by returning returning
       *  moneypunct<char_type>::do_curr_symbol().
       *
       *  @return  @a string_type representing a currency symbol.
      ','line_number':679,'multiline':True]
['text':'*
       *  @brief  Return positive sign string.
       *
       *  This function returns a string_type to use as a sign for positive
       *  amounts.  It does so by returning returning
       *  moneypunct<char_type>::do_positive_sign().
       *
       *  If the return value contains more than one character, the first
       *  character appears in the position indicated by pos_format() and the
       *  remainder appear at the end of the formatted string.
       *
       *  @return  @a string_type representing a positive sign.
      ','line_number':692,'multiline':True]
['text':'*
       *  @brief  Return negative sign string.
       *
       *  This function returns a string_type to use as a sign for negative
       *  amounts.  It does so by returning returning
       *  moneypunct<char_type>::do_negative_sign().
       *
       *  If the return value contains more than one character, the first
       *  character appears in the position indicated by neg_format() and the
       *  remainder appear at the end of the formatted string.
       *
       *  @return  @a string_type representing a negative sign.
      ','line_number':709,'multiline':True]
['text':'*
       *  @brief  Return number of digits in fraction.
       *
       *  This function returns the exact number of digits that make up the
       *  fractional part of a money amount.  It does so by returning
       *  returning moneypunct<char_type>::do_frac_digits().
       *
       *  The fractional part of a money amount is optional.  But if it is
       *  present, there must be frac_digits() digits.
       *
       *  @return  Number of digits in amount fraction.
      ','line_number':726,'multiline':True]
['text':'@{','line_number':742,'multiline':False]
['text':'*
       *  @brief  Return pattern for money values.
       *
       *  This function returns a pattern describing the formatting of a
       *  positive or negative valued money amount.  It does so by returning
       *  returning moneypunct<char_type>::do_pos_format() or
       *  moneypunct<char_type>::do_neg_format().
       *
       *  The pattern has 4 fields describing the ordering of symbol, sign,
       *  value, and none or space.  There must be one of each in the pattern.
       *  The none and space enums may not appear in the first field and space
       *  may not appear in the final field.
       *
       *  The parts of a money string must appear in the order indicated by
       *  the fields of the pattern.  The symbol field indicates that the
       *  value of curr_symbol() may be present.  The sign field indicates
       *  that the value of positive_sign() or negative_sign() must be
       *  present.  The value field indicates that the absolute value of the
       *  money amount is present.  none indicates 0 or more whitespace
       *  characters, except at the end, where it permits no whitespace.
       *  space indicates that 1 or more whitespace characters must be
       *  present.
       *
       *  For example, for the US locale and pos_format() pattern
       *  {symbol,sign,value,none}, curr_symbol() == '$' positive_sign() ==
       *  '+', and value 10.01, and options set to force the symbol, the
       *  corresponding string is "$+10.01".
       *
       *  @return  Pattern for money values.
      ','line_number':743,'multiline':True]
['text':'@}','line_number':780,'multiline':False]
['text':'/ Destructor.','line_number':783,'multiline':False]
['text':'*
       *  @brief  Return decimal point character.
       *
       *  Returns a char_type to use as a decimal point.  This function is a
       *  hook for derived classes to change the value returned.
       *
       *  @return  @a char_type representing a decimal point.
      ','line_number':787,'multiline':True]
['text':'*
       *  @brief  Return thousands separator character.
       *
       *  Returns a char_type to use as a thousands separator.  This function
       *  is a hook for derived classes to change the value returned.
       *
       *  @return  @a char_type representing a thousands separator.
      ','line_number':799,'multiline':True]
['text':'*
       *  @brief  Return grouping specification.
       *
       *  Returns a string representing groupings for the integer part of a
       *  number.  This function is a hook for derived classes to change the
       *  value returned.  @see grouping() for details.
       *
       *  @return  String representing grouping specification.
      ','line_number':811,'multiline':True]
['text':'*
       *  @brief  Return currency symbol string.
       *
       *  This function returns a string_type to use as a currency symbol.
       *  This function is a hook for derived classes to change the value
       *  returned.  @see curr_symbol() for details.
       *
       *  @return  @a string_type representing a currency symbol.
      ','line_number':824,'multiline':True]
['text':'*
       *  @brief  Return positive sign string.
       *
       *  This function returns a string_type to use as a sign for positive
       *  amounts.  This function is a hook for derived classes to change the
       *  value returned.  @see positive_sign() for details.
       *
       *  @return  @a string_type representing a positive sign.
      ','line_number':837,'multiline':True]
['text':'*
       *  @brief  Return negative sign string.
       *
       *  This function returns a string_type to use as a sign for negative
       *  amounts.  This function is a hook for derived classes to change the
       *  value returned.  @see negative_sign() for details.
       *
       *  @return  @a string_type representing a negative sign.
      ','line_number':850,'multiline':True]
['text':'*
       *  @brief  Return number of digits in fraction.
       *
       *  This function returns the exact number of digits that make up the
       *  fractional part of a money amount.  This function is a hook for
       *  derived classes to change the value returned.  @see frac_digits()
       *  for details.
       *
       *  @return  Number of digits in amount fraction.
      ','line_number':863,'multiline':True]
['text':'*
       *  @brief  Return pattern for money values.
       *
       *  This function returns a pattern describing the formatting of a
       *  positive valued money amount.  This function is a hook for derived
       *  classes to change the value returned.  @see pos_format() for
       *  details.
       *
       *  @return  Pattern for money values.
      ','line_number':877,'multiline':True]
['text':'*
       *  @brief  Return pattern for money values.
       *
       *  This function returns a pattern describing the formatting of a
       *  negative valued money amount.  This function is a hook for derived
       *  classes to change the value returned.  @see neg_format() for
       *  details.
       *
       *  @return  Pattern for money values.
      ','line_number':891,'multiline':True]
['text':' For use at construction time only.','line_number':905,'multiline':False]
['text':'*
   *  @brief  Facet for parsing monetary amounts.
   *
   *  This facet encapsulates the code to parse and return a monetary
   *  amount from a string.
   *
   *  The money_get template uses protected virtual functions to
   *  provide the actual results.  The public accessors forward the
   *  call to the virtual functions.  These virtual functions are
   *  hooks for developers to implement the behavior they require from
   *  the money_get facet.
  ','line_number':979,'multiline':True]
['text':' Types:','line_number':995,'multiline':False]
['text':'@{','line_number':996,'multiline':False]
['text':'/ Public typedefs','line_number':997,'multiline':False]
['text':'@}','line_number':1001,'multiline':False]
['text':'/ Numpunct facet id.','line_number':1003,'multiline':False]
['text':'*
       *  @brief  Constructor performs initialization.
       *
       *  This is the constructor provided by the standard.
       *
       *  @param refs  Passed to the base facet class.
      ','line_number':1006,'multiline':True]
['text':'*
       *  @brief  Read and parse a monetary value.
       *
       *  This function reads characters from @a s, interprets them as a
       *  monetary value according to moneypunct and ctype facets retrieved
       *  from io.getloc(), and returns the result in @a units as an integral
       *  value moneypunct::frac_digits() * the actual amount.  For example,
       *  the string $10.01 in a US locale would store 1001 in @a units.
       *
       *  Any characters not part of a valid money amount are not consumed.
       *
       *  If a money value cannot be parsed from the input stream, sets
       *  err=(err|io.failbit).  If the stream is consumed before finishing
       *  parsing,  sets err=(err|io.failbit|io.eofbit).  @a units is
       *  unchanged if parsing fails.
       *
       *  This function works by returning the result of do_get().
       *
       *  @param  s  Start of characters to parse.
       *  @param  end  End of characters to parse.
       *  @param  intl  Parameter to use_facet<moneypunct<CharT,intl> >.
       *  @param  io  Source of facets and io state.
       *  @param  err  Error field to set if parsing fails.
       *  @param  units  Place to store result of parsing.
       *  @return  Iterator referencing first character beyond valid money
       *	   amount.
       ','line_number':1016,'multiline':True]
['text':'*
       *  @brief  Read and parse a monetary value.
       *
       *  This function reads characters from @a s, interprets them as a
       *  monetary value according to moneypunct and ctype facets retrieved
       *  from io.getloc(), and returns the result in @a digits.  For example,
       *  the string $10.01 in a US locale would store "1001" in @a digits.
       *
       *  Any characters not part of a valid money amount are not consumed.
       *
       *  If a money value cannot be parsed from the input stream, sets
       *  err=(err|io.failbit).  If the stream is consumed before finishing
       *  parsing,  sets err=(err|io.failbit|io.eofbit).
       *
       *  This function works by returning the result of do_get().
       *
       *  @param  s  Start of characters to parse.
       *  @param  end  End of characters to parse.
       *  @param  intl  Parameter to use_facet<moneypunct<CharT,intl> >.
       *  @param  io  Source of facets and io state.
       *  @param  err  Error field to set if parsing fails.
       *  @param  digits  Place to store result of parsing.
       *  @return  Iterator referencing first character beyond valid money
       *	   amount.
       ','line_number':1048,'multiline':True]
['text':'/ Destructor.','line_number':1079,'multiline':False]
['text':'*
       *  @brief  Read and parse a monetary value.
       *
       *  This function reads and parses characters representing a monetary
       *  value.  This function is a hook for derived classes to change the
       *  value returned.  @see get() for details.
       ','line_number':1083,'multiline':True]
['text':'*
       *  @brief  Read and parse a monetary value.
       *
       *  This function reads and parses characters representing a monetary
       *  value.  This function is a hook for derived classes to change the
       *  value returned.  @see get() for details.
       ','line_number':1094,'multiline':True]
['text':'*
   *  @brief  Facet for outputting monetary amounts.
   *
   *  This facet encapsulates the code to format and output a monetary
   *  amount.
   *
   *  The money_put template uses protected virtual functions to
   *  provide the actual results.  The public accessors forward the
   *  call to the virtual functions.  These virtual functions are
   *  hooks for developers to implement the behavior they require from
   *  the money_put facet.
  ','line_number':1114,'multiline':True]
['text':'@{','line_number':1130,'multiline':False]
['text':'/ Public typedefs','line_number':1131,'multiline':False]
['text':'@}','line_number':1135,'multiline':False]
['text':'/ Numpunct facet id.','line_number':1137,'multiline':False]
['text':'*
       *  @brief  Constructor performs initialization.
       *
       *  This is the constructor provided by the standard.
       *
       *  @param refs  Passed to the base facet class.
      ','line_number':1140,'multiline':True]
['text':'*
       *  @brief  Format and output a monetary value.
       *
       *  This function formats @a units as a monetary value according to
       *  moneypunct and ctype facets retrieved from io.getloc(), and writes
       *  the resulting characters to @a s.  For example, the value 1001 in a
       *  US locale would write "$10.01" to @a s.
       *
       *  This function works by returning the result of do_put().
       *
       *  @param  s  The stream to write to.
       *  @param  intl  Parameter to use_facet<moneypunct<CharT,intl> >.
       *  @param  io  Source of facets and io state.
       *  @param  fill  char_type to use for padding.
       *  @param  units  Place to store result of parsing.
       *  @return  Iterator after writing.
       ','line_number':1150,'multiline':True]
['text':'*
       *  @brief  Format and output a monetary value.
       *
       *  This function formats @a digits as a monetary value according to
       *  moneypunct and ctype facets retrieved from io.getloc(), and writes
       *  the resulting characters to @a s.  For example, the string "1001" in
       *  a US locale would write "$10.01" to @a s.
       *
       *  This function works by returning the result of do_put().
       *
       *  @param  s  The stream to write to.
       *  @param  intl  Parameter to use_facet<moneypunct<CharT,intl> >.
       *  @param  io  Source of facets and io state.
       *  @param  fill  char_type to use for padding.
       *  @param  units  Place to store result of parsing.
       *  @return  Iterator after writing.
       ','line_number':1172,'multiline':True]
['text':'/ Destructor.','line_number':1195,'multiline':False]
['text':'*
       *  @brief  Format and output a monetary value.
       *
       *  This function formats @a units as a monetary value according to
       *  moneypunct and ctype facets retrieved from io.getloc(), and writes
       *  the resulting characters to @a s.  For example, the value 1001 in a
       *  US locale would write "$10.01" to @a s.
       *
       *  This function is a hook for derived classes to change the value
       *  returned.  @see put().
       *
       *  @param  s  The stream to write to.
       *  @param  intl  Parameter to use_facet<moneypunct<CharT,intl> >.
       *  @param  io  Source of facets and io state.
       *  @param  fill  char_type to use for padding.
       *  @param  units  Place to store result of parsing.
       *  @return  Iterator after writing.
       ','line_number':1199,'multiline':True]
['text':'*
       *  @brief  Format and output a monetary value.
       *
       *  This function formats @a digits as a monetary value according to
       *  moneypunct and ctype facets retrieved from io.getloc(), and writes
       *  the resulting characters to @a s.  For example, the string "1001" in
       *  a US locale would write "$10.01" to @a s.
       *
       *  This function is a hook for derived classes to change the value
       *  returned.  @see put().
       *
       *  @param  s  The stream to write to.
       *  @param  intl  Parameter to use_facet<moneypunct<CharT,intl> >.
       *  @param  io  Source of facets and io state.
       *  @param  fill  char_type to use for padding.
       *  @param  units  Place to store result of parsing.
       *  @return  Iterator after writing.
       ','line_number':1221,'multiline':True]
['text':'*
   *  @brief  Messages facet base class providing catalog typedef.
   ','line_number':1252,'multiline':True]
['text':'*
   *  @brief  Facet for handling message catalogs
   *
   *  This facet encapsulates the code to retrieve messages from
   *  message catalogs.  The only thing defined by the standard for this facet
   *  is the interface.  All underlying functionality is
   *  implementation-defined.
   *
   *  This library currently implements 3 versions of the message facet.  The
   *  first version (gnu) is a wrapper around gettext, provided by libintl.
   *  The second version (ieee) is a wrapper around catgets.  The final
   *  version (default) does no actual translation.  These implementations are
   *  only provided for char and wchar_t instantiations.
   *
   *  The messages template uses protected virtual functions to
   *  provide the actual results.  The public accessors forward the
   *  call to the virtual functions.  These virtual functions are
   *  hooks for developers to implement the behavior they require from
   *  the messages facet.
  ','line_number':1260,'multiline':True]
['text':' Types:','line_number':1284,'multiline':False]
['text':'@{','line_number':1285,'multiline':False]
['text':'/ Public typedefs','line_number':1286,'multiline':False]
['text':'@}','line_number':1289,'multiline':False]
['text':' Underlying "C" library locale information saved from','line_number':1292,'multiline':False]
['text':' initialization, needed by messages_byname as well.','line_number':1293,'multiline':False]
['text':'/ Numpunct facet id.','line_number':1298,'multiline':False]
['text':'*
       *  @brief  Constructor performs initialization.
       *
       *  This is the constructor provided by the standard.
       *
       *  @param refs  Passed to the base facet class.
      ','line_number':1301,'multiline':True]
['text':' Non-standard.','line_number':1311,'multiline':False]
['text':'*
       *  @brief  Internal constructor.  Not for general use.
       *
       *  This is a constructor for use by the library itself to set up new
       *  locales.
       *
       *  @param  cloc  The "C" locale.
       *  @param  s  The name of a locale.
       *  @param  refs  Refcount to pass to the base class.
       ','line_number':1312,'multiline':True]
['text':'
       *  @brief  Open a message catalog.
       *
       *  This function opens and returns a handle to a message catalog by
       *  returning do_open(s, loc).
       *
       *  @param  s  The catalog to open.
       *  @param  loc  Locale to use for character set conversions.
       *  @return  Handle to the catalog or value < 0 if open fails.
      ','line_number':1325,'multiline':True]
['text':' Non-standard and unorthodox, yet effective.','line_number':1339,'multiline':False]
['text':'
       *  @brief  Open a message catalog.
       *
       *  This non-standard function opens and returns a handle to a message
       *  catalog by returning do_open(s, loc).  The third argument provides a
       *  message catalog root directory for gnu gettext and is ignored
       *  otherwise.
       *
       *  @param  s  The catalog to open.
       *  @param  loc  Locale to use for character set conversions.
       *  @param  dir  Message catalog root directory.
       *  @return  Handle to the catalog or value < 0 if open fails.
      ','line_number':1340,'multiline':True]
['text':'
       *  @brief  Look up a string in a message catalog.
       *
       *  This function retrieves and returns a message from a catalog by
       *  returning do_get(c, set, msgid, s).
       *
       *  For gnu, @a set and @a msgid are ignored.  Returns gettext(s).
       *  For default, returns s. For ieee, returns catgets(c,set,msgid,s).
       *
       *  @param  c  The catalog to access.
       *  @param  set  Implementation-defined.
       *  @param  msgid  Implementation-defined.
       *  @param  s  Default return value if retrieval fails.
       *  @return  Retrieved message or @a s if get fails.
      ','line_number':1356,'multiline':True]
['text':'
       *  @brief  Close a message catalog.
       *
       *  Closes catalog @a c by calling do_close(c).
       *
       *  @param  c  The catalog to close.
      ','line_number':1375,'multiline':True]
['text':'/ Destructor.','line_number':1387,'multiline':False]
['text':'
       *  @brief  Open a message catalog.
       *
       *  This function opens and returns a handle to a message catalog in an
       *  implementation-defined manner.  This function is a hook for derived
       *  classes to change the value returned.
       *
       *  @param  s  The catalog to open.
       *  @param  loc  Locale to use for character set conversions.
       *  @return  Handle to the opened catalog, value < 0 if open failed.
      ','line_number':1391,'multiline':True]
['text':'
       *  @brief  Look up a string in a message catalog.
       *
       *  This function retrieves and returns a message from a catalog in an
       *  implementation-defined manner.  This function is a hook for derived
       *  classes to change the value returned.
       *
       *  For gnu, @a set and @a msgid are ignored.  Returns gettext(s).
       *  For default, returns s. For ieee, returns catgets(c,set,msgid,s).
       *
       *  @param  c  The catalog to access.
       *  @param  set  Implementation-defined.
       *  @param  msgid  Implementation-defined.
       *  @param  s  Default return value if retrieval fails.
       *  @return  Retrieved message or @a s if get fails.
      ','line_number':1405,'multiline':True]
['text':'
       *  @brief  Close a message catalog.
       *
       *  @param  c  The catalog to close.
      ','line_number':1424,'multiline':True]
['text':' Returns a locale and codeset-converted string, given a char* message.','line_number':1432,'multiline':False]
['text':' XXX','line_number':1436,'multiline':False]
['text':' Returns a locale and codeset-converted string, given a char* message.','line_number':1440,'multiline':False]
['text':' Length of message string without terminating null.','line_number':1445,'multiline':False]
['text':' "everybody can easily convert the string using','line_number':1448,'multiline':False]
['text':' mbsrtowcs/wcsrtombs or with iconv()"','line_number':1449,'multiline':False]
['text':' Convert char* to _CharT in locale used to open catalog.','line_number':1451,'multiline':False]
['text':' XXX need additional template parameter on messages class for this..','line_number':1452,'multiline':False]
['text':' typedef typename codecvt<char, _CharT, _StateT> __codecvt_type;','line_number':1453,'multiline':False]
['text':' XXX may need to initialize state.','line_number':1457,'multiline':False]
['text':'initialize_state(__state._M_init());','line_number':1458,'multiline':False]
['text':' XXX what size for this string?','line_number':1461,'multiline':False]
['text':' const __ctype_type& __cvt = use_facet<__ctype_type>(_M_locale_msg);','line_number':1470,'multiline':False]
['text':' XXX Again, proper length of converted string an issue here.','line_number':1472,'multiline':False]
['text':' For now, assume the converted length is not larger.','line_number':1473,'multiline':False]
['text':' Specializations for required instantiations.','line_number':1485,'multiline':False]
['text':' Include host and configuration specific messages functions.','line_number':1512,'multiline':False]
['text':' Subclause convenience interfaces, inlines.','line_number':1516,'multiline':False]
['text':' NB: These are inline because, when used in a loop, some compilers','line_number':1517,'multiline':False]
['text':' can hoist the body out of the loop; then it's just as fast as the','line_number':1518,'multiline':False]
['text':' C is*() function.','line_number':1519,'multiline':False]
['text':'@{','line_number':1520,'multiline':False]
['text':'/ Convenience interface to ctype.is().','line_number':1521,'multiline':False]
['text':'@}','line_number':1585,'multiline':False]
['text':' namespace std','line_number':1586,'multiline':False]
