['text':' "Production-grade" hello world','line_number':1,'multiline':False]
['text':' From https://github.com/chapel-lang/chapel/blob/release/1.16/test/release/examples/hello2-module.chpl','line_number':2,'multiline':False]
['text':' This program is conceptually very similar to :ref:`hello.chpl
   <primers-hello>`, but it uses a more structured programming style,
   explicitly defining a module, a configuration constant, and a
   main() procedure.
 ','line_number':4,'multiline':True]
['text':'','line_number':10,'multiline':False]
['text':' The following statement declares a module named 'Hello'.  If a','line_number':11,'multiline':False]
['text':' source file contains no module declarations, the filename minus its','line_number':12,'multiline':False]
['text':' ``.chpl`` extension serves as the module name for the code it','line_number':13,'multiline':False]
['text':' contains.  Thus, 'hello' would be the automatic module name for the','line_number':14,'multiline':False]
['text':' previous :ref:`hello.chpl <primers-hello>` example.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':'','line_number':19,'multiline':False]
['text':' This next statement declares a `configuration constant` named','line_number':20,'multiline':False]
['text':' `message`.  The type is inferred to be a string since the','line_number':21,'multiline':False]
['text':' initializing expression is a string literal.  Users may override','line_number':22,'multiline':False]
['text':' the default values of configuration constants and variables on the','line_number':23,'multiline':False]
['text':' executable's command-line.  For example, we could change the','line_number':24,'multiline':False]
['text':' default message for a given run using the command line: ``./hello','line_number':25,'multiline':False]
['text':' --message="hiya!"``.','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' Any top-level code in a module is executed as part of the module's','line_number':31,'multiline':False]
['text':' initialization when the program begins executing.  Thus, in the','line_number':32,'multiline':False]
['text':' previous one-line :ref:`hello.chpl <primers-hello>`, the presence','line_number':33,'multiline':False]
['text':' of a `writeln()` at the file scope formed the implicit `hello`','line_number':34,'multiline':False]
['text':' module's initialization and would be executed at program startup.','line_number':35,'multiline':False]
['text':' Since there was no explicit `main()` function or any other','line_number':36,'multiline':False]
['text':' top-level code, that's all that the program would do.','line_number':37,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' In this program, we define an entry point for the program by','line_number':41,'multiline':False]
['text':' defining a procedure named `main()`.  This will be invoked after','line_number':42,'multiline':False]
['text':' this module and all the modules it uses are initialized.','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
