['text':' Please share your thoughts, suggestions, questions, etc here:','line_number':1,'multiline':False]
['text':' https://github.com/vlang-io/V/issues/3','line_number':2,'multiline':False]
['text':' I'm very interested in your feedback.','line_number':4,'multiline':False]
['text':' V will automatically insert missing imports (like the goimports tool)','line_number':8,'multiline':False]
['text':' Right now V requires all consts to be uppercase.','line_number':11,'multiline':False]
['text':' I'm still not certain about this.','line_number':12,'multiline':False]
['text':'vlang.io/users.json'','line_number':13,'multiline':False]
['text':' V will generate json.encode and json.decode functions for this type since','line_number':15,'multiline':False]
['text':' `json.decode([]User, ...)` is called later. This results in better','line_number':16,'multiline':False]
['text':' performance, since reflection is not used.','line_number':17,'multiline':False]
['text':' V will automatically format and align your code.','line_number':19,'multiline':False]
['text':' No need to use an additional tool.','line_number':20,'multiline':False]
['text':' `http.get()` returns an optional string.','line_number':25,'multiline':False]
['text':' V optionals combine the features of Rust's Option<T> and Result<T>.','line_number':26,'multiline':False]
['text':' We must unwrap all optionals with `or`, otherwise V will complain.','line_number':27,'multiline':False]
['text':' `err` is a reserved variable (not a global) that','line_number':29,'multiline':False]
['text':' contains an error message if there is one','line_number':30,'multiline':False]
['text':' `or` blocks must end with `return`, `break`, or `continue`','line_number':32,'multiline':False]
['text':' Types can be passed as arguments','line_number':35,'multiline':False]
['text':' Encoding JSON doesn't require a type, since V knows what type','line_number':40,'multiline':False]
['text':' the variable `users` has','line_number':41,'multiline':False]
['text':' Please note the difference between V and Go:','line_number':43,'multiline':False]
['text':' when there's only one variable, it's a value, not an index.','line_number':44,'multiline':False]
['text':' `for` loop has an alternative form when an index is required:','line_number':48,'multiline':False]
['text':' V allows both ' and " to denote strings.','line_number':52,'multiline':False]
['text':' However, for consistency V will replace " with '','line_number':53,'multiline':False]
['text':' unless the string contains an apostrophe.','line_number':54,'multiline':False]
['text':' The method declaration is the same as in Go.','line_number':60,'multiline':False]
['text':' There is one big difference. Here `u` can be either passed by value (User)','line_number':61,'multiline':False]
['text':' or by reference (&User). The compiler will make the right decision','line_number':62,'multiline':False]
['text':' depending on the size of the User struct. You no longer have to remember','line_number':63,'multiline':False]
['text':' which one to use. It works here because `u` can't be modified (it's not','line_number':64,'multiline':False]
['text':' marked as `mut`).','line_number':65,'multiline':False]
['text':' Here `u` can be modified and it will always be a reference.','line_number':70,'multiline':False]
