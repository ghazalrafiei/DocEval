['text':'go:build generate','line_number':1,'multiline':False]
['text':' This program generates a Go containing a slice of test cases based on the','line_number':3,'multiline':False]
['text':' Unicode Character Database auxiliary data files. The command line arguments','line_number':4,'multiline':False]
['text':' are as follows:','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'   1. The name of the Unicode data file (just the filename, without extension).','line_number':7,'multiline':False]
['text':'   2. The name of the locally generated Go file.','line_number':8,'multiline':False]
['text':'   3. The name of the slice containing the test cases.','line_number':9,'multiline':False]
['text':'   4. The name of the generator, for logging purposes.','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':'go:generate go run gen_breaktest.go GraphemeBreakTest graphemebreak_test.go graphemeBreakTestCases graphemes','line_number':12,'multiline':False]
['text':'go:generate go run gen_breaktest.go WordBreakTest wordbreak_test.go wordBreakTestCases words','line_number':13,'multiline':False]
['text':'go:generate go run gen_breaktest.go SentenceBreakTest sentencebreak_test.go sentenceBreakTestCases sentences','line_number':14,'multiline':False]
['text':'go:generate go run gen_breaktest.go LineBreakTest linebreak_test.go lineBreakTestCases lines','line_number':15,'multiline':False]
['text':' We want to test against a specific version rather than the latest. When the','line_number':32,'multiline':False]
['text':' package is upgraded to a new version, change these to generate new tests.','line_number':33,'multiline':False]
['text':'www.unicode.org/Public/14.0.0/ucd/auxiliary/%s.txt`','line_number':35,'multiline':False]
['text':' Read text of testcases and parse into Go source code.','line_number':47,'multiline':False]
['text':' Format the Go code.','line_number':53,'multiline':False]
['text':' Write it out.','line_number':59,'multiline':False]
['text':' parse reads a break text file, either from a local file or from a URL. It','line_number':66,'multiline':False]
['text':' parses the file data into Go source code representing the test cases.','line_number':67,'multiline':False]
['text':' Code generated via go generate from gen_breaktest.go. DO NOT EDIT.','line_number':81,'multiline':False]
['text':' ` + os.Args[3] + ` are Grapheme testcases taken from','line_number':83,'multiline':False]
['text':' ` + url + `','line_number':84,'multiline':False]
['text':' on ` + time.Now().Format("January 2, 2006") + `. See','line_number':85,'multiline':False]
['text':' https://www.unicode.org/license.html for the Unicode license agreement.','line_number':86,'multiline':False]
['text':' Check for final "# EOF", useful check if we're streaming via HTTP','line_number':116,'multiline':False]
['text':' Used by parseRuneSequence to match input via bytes.HasPrefix.','line_number':124,'multiline':False]
['text':' parseRuneSequence parses a rune + breaking opportunity sequence from b','line_number':132,'multiline':False]
['text':' and appends the Go code for testcase.original to orig','line_number':133,'multiline':False]
['text':' and appends the Go code for testcase.expected to exp.','line_number':134,'multiline':False]
['text':' It retuns the new orig and exp slices.','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':' E.g. for the input b="÷ 0020 × 0308 ÷ 1F1E6 ÷"','line_number':137,'multiline':False]
['text':' it will append','line_number':138,'multiline':False]
['text':'     "\u0020\u0308\U0001F1E6"','line_number':139,'multiline':False]
['text':' and "[][]rune{{0x0020,0x0308},{0x1F1E6},}"','line_number':140,'multiline':False]
['text':' to orig and exp respectively.','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' The formatting of exp is expected to be cleaned up by gofmt or format.Source.','line_number':143,'multiline':False]
['text':' Note we explicitly require the sequence to start with ÷ and we implicitly','line_number':144,'multiline':False]
['text':' require it to end with ÷.','line_number':145,'multiline':False]
['text':' Check for and remove first ÷ or ×.','line_number':147,'multiline':False]
['text':' Find end of hex digits.','line_number':164,'multiline':False]
['text':' Check for space between hex and ÷ or ×.','line_number':186,'multiline':False]
['text':' Check for next boundary.','line_number':192,'multiline':False]
