['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 The HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' Convert all tensors to numpy arrays before converting to PIL image','line_number':184,'multiline':False]
['text':' If the channel has been moved to first dim, we put it back at the end.','line_number':192,'multiline':False]
['text':' If there is a single channel, we squeeze it, as otherwise PIL can't handle it.','line_number':195,'multiline':False]
['text':' PIL.Image can only store uint8 values so we rescale the image to be between 0 and 255 if needed.','line_number':198,'multiline':False]
['text':' Logic adapted from torchvision resizing logic: https://github.com/pytorch/vision/blob/511924c1ced4ce0461197e5caa64ce5b9e558aab/torchvision/transforms/functional.py#L366','line_number':208,'multiline':False]
['text':' Perform same logic as if size was an int','line_number':250,'multiline':False]
['text':' For all transformations, we want to keep the same data format as the input image unless otherwise specified.','line_number':316,'multiline':False]
['text':' The resized image from PIL will always have channels last, so find the input format first.','line_number':317,'multiline':False]
['text':' To maintain backwards compatibility with the resizing done in previous image feature extractors, we use','line_number':322,'multiline':False]
['text':' the pillow library to resize the image and then convert back to numpy','line_number':323,'multiline':False]
['text':' PIL images are in the format (width, height)','line_number':329,'multiline':False]
['text':' If the input image channel dimension was of size 1, then it is dropped when converting to a PIL image','line_number':334,'multiline':False]
['text':' so we need to add it back if necessary.','line_number':335,'multiline':False]
['text':' The image is always in channels last format after converting from a PIL image','line_number':337,'multiline':False]
['text':' If an image was rescaled to be in the range [0, 255] before converting to a PIL image, then we need to','line_number':341,'multiline':False]
['text':' rescale it back to the original range.','line_number':342,'multiline':False]
['text':' We cast to float32 to avoid errors that can occur when subtracting uint8 values.','line_number':379,'multiline':False]
['text':' We preserve the original dtype if it is a float type to prevent upcasting float16.','line_number':380,'multiline':False]
['text':' We perform the crop in (C, H, W) format and then convert to the output format','line_number':459,'multiline':False]
['text':' In case size is odd, (image_shape[0] + size[0]) // 2 won't give the proper result.','line_number':466,'multiline':False]
['text':' In case size is odd, (image_shape[1] + size[1]) // 2 won't give the proper result.','line_number':469,'multiline':False]
['text':' Check if cropped area is within image boundaries','line_number':473,'multiline':False]
['text':' Otherwise, we may need to pad if the image is too small. Oh joy...','line_number':479,'multiline':False]
['text':' If the image is too small, pad it with zeros','line_number':485,'multiline':False]
['text':' top left x, top left y, bottom right x, bottom right y','line_number':509,'multiline':False]
['text':' top left x, top left y, bottom right x, bottom right y','line_number':519,'multiline':False]
['text':' top left x, top left y, bottom right x, bottom right y','line_number':529,'multiline':False]
['text':' 2 functions below inspired by https://github.com/facebookresearch/detr/blob/master/util/box_ops.py','line_number':536,'multiline':False]
['text':' Function is used during model forward pass, so we use the input framework if possible, without','line_number':546,'multiline':False]
['text':' converting to numpy','line_number':547,'multiline':False]
['text':' center x','line_number':561,'multiline':False]
['text':' center y','line_number':562,'multiline':False]
['text':' width','line_number':563,'multiline':False]
['text':' height','line_number':564,'multiline':False]
['text':' center x','line_number':573,'multiline':False]
['text':' center y','line_number':574,'multiline':False]
['text':' width','line_number':575,'multiline':False]
['text':' height','line_number':576,'multiline':False]
['text':' center x','line_number':587,'multiline':False]
['text':' center y','line_number':588,'multiline':False]
['text':' width','line_number':589,'multiline':False]
['text':' height','line_number':590,'multiline':False]
['text':' Inverse function accepts different input types so implemented here too','line_number':606,'multiline':False]
['text':' 2 functions below copied from https://github.com/cocodataset/panopticapi/blob/master/panopticapi/utils.py','line_number':617,'multiline':False]
['text':' Copyright (c) 2018, Alexander Kirillov','line_number':618,'multiline':False]
['text':' All rights reserved.','line_number':619,'multiline':False]
['text':' add 0 for channel dimension','line_number':722,'multiline':False]
['text':' Add additional padding if there's a batch dimension','line_number':725,'multiline':False]
['text':' TODO (Amy): Accept 1/3/4 channel numpy array as input and return np.array as default','line_number':747,'multiline':False]
