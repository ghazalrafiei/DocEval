['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2021 The Fairseq Authors and the HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' General docstring','line_number':44,'multiline':False]
['text':' Base docstring','line_number':47,'multiline':False]
['text':' CTC docstring','line_number':51,'multiline':False]
['text':' Audio class docstring','line_number':55,'multiline':False]
['text':' See all Hubert models at https://huggingface.co/models?filter=hubert','line_number':63,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2._compute_mask_indices','line_number':67,'multiline':False]
['text':' epsilon is used for probabilistic rounding','line_number':103,'multiline':False]
['text':' make sure num masked span <= sequence_length','line_number':111,'multiline':False]
['text':' make sure num_masked span is also <= input_length - (mask_length - 1)','line_number':115,'multiline':False]
['text':' compute number of masked spans in batch','line_number':121,'multiline':False]
['text':' SpecAugment mask to fill','line_number':128,'multiline':False]
['text':' compute num of masked spans for this input','line_number':138,'multiline':False]
['text':' get random indices to mask','line_number':141,'multiline':False]
['text':' pick first sampled index that will serve as a dummy index to pad vector','line_number':146,'multiline':False]
['text':' to ensure same dimension for all batches due to probabilistic rounding','line_number':147,'multiline':False]
['text':' Picking first sample just pads those vectors twice.','line_number':148,'multiline':False]
['text':' this case can only happen if `input_length` is strictly smaller then','line_number':150,'multiline':False]
['text':' `sequence_length` in which case the last token has to be a padding','line_number':151,'multiline':False]
['text':' token which we can use as a dummy mask id','line_number':152,'multiline':False]
['text':' expand masked indices to masked spans','line_number':164,'multiline':False]
['text':' add offset to the starting indexes so that indexes now create a span','line_number':170,'multiline':False]
['text':' ensure that we cannot have indices larger than sequence_length','line_number':177,'multiline':False]
['text':' scatter indices to mask','line_number':181,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2NoLayerNormConvLayer with Wav2Vec2->Hubert','line_number':187,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2LayerNormConvLayer with Wav2Vec2->Hubert','line_number':209,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2GroupNormConvLayer with Wav2Vec2->Hubert','line_number':237,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2PositionalConvEmbedding with Wav2Vec2->Hubert','line_number':262,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2SamePadLayer with Wav2Vec2->Hubert','line_number':302,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2FeatureEncoder with Wav2Vec2->Hubert','line_number':314,'multiline':False]
['text':' make sure hidden_states require grad for gradient_checkpointing','line_number':343,'multiline':False]
['text':' non-projected hidden states are needed for quantization','line_number':380,'multiline':False]
['text':' Copied from transformers.models.bart.modeling_bart.BartAttention with Bart->Hubert','line_number':388,'multiline':False]
['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':437,'multiline':False]
['text':' for the decoder','line_number':438,'multiline':False]
['text':' get query proj','line_number':443,'multiline':False]
['text':' get key, value proj','line_number':445,'multiline':False]
['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':446,'multiline':False]
['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':447,'multiline':False]
['text':' the provided `key_value_states` to support prefix tuning','line_number':448,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':454,'multiline':False]
['text':' cross_attentions','line_number':458,'multiline':False]
['text':' reuse k, v, self_attention','line_number':462,'multiline':False]
['text':' self_attention','line_number':468,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':473,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':474,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':475,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':476,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':477,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':478,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':479,'multiline':False]
['text':' this operation is a bit awkward, but it's required to','line_number':516,'multiline':False]
['text':' make sure that attn_weights keeps its gradient.','line_number':517,'multiline':False]
['text':' In order to do so, attn_weights have to be reshaped','line_number':518,'multiline':False]
['text':' twice and have to be reused in the following','line_number':519,'multiline':False]
['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':538,'multiline':False]
['text':' partitioned across GPUs when using tensor-parallelism.','line_number':539,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2FeedForward with Wav2Vec2->Hubert','line_number':547,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2EncoderLayer with Wav2Vec2->Hubert','line_number':572,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2AttnAdapterLayer with Wav2Vec2->Hubert','line_number':607,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2EncoderLayerStableLayerNorm with Wav2Vec2->Hubert','line_number':633,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2Encoder with Wav2Vec2->Hubert','line_number':679,'multiline':False]
['text':' make sure padded tokens output 0','line_number':702,'multiline':False]
['text':' extend attention_mask','line_number':706,'multiline':False]
['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':724,'multiline':False]
['text':' under deepspeed zero3 all gpus must run in sync','line_number':729,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2EncoderStableLayerNorm with Wav2Vec2->Hubert','line_number':761,'multiline':False]
['text':' make sure padded tokens are not attended to','line_number':786,'multiline':False]
['text':' extend attention_mask','line_number':790,'multiline':False]
['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':807,'multiline':False]
['text':' under deepspeed zero3 all gpus must run in sync','line_number':812,'multiline':False]
['text':' XXX: could optimize this like synced_gpus in generate_utils but not sure if it's worth the code complication','line_number':813,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':861,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':862,'multiline':False]
['text':' 1D convolutional layer output length formula taken','line_number':889,'multiline':False]
['text':' from https://pytorch.org/docs/stable/generated/torch.nn.Conv1d.html','line_number':890,'multiline':False]
['text':' these two operations makes sure that all values before the output lengths idxs are attended to','line_number':905,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':987,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2Model._mask_hidden_states','line_number':990,'multiline':False]
['text':' `config.apply_spec_augment` can set masking to False','line_number':1002,'multiline':False]
['text':' generate indices & apply SpecAugment along time axis','line_number':1006,'multiline':False]
['text':' apply SpecAugment along time axis with given mask_time_indices','line_number':1010,'multiline':False]
['text':' generate indices & apply SpecAugment along feature axis','line_number':1024,'multiline':False]
['text':' compute reduced attention_mask corresponding to feature vectors','line_number':1085,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForCTC with Wav2Vec2->Hubert, wav2vec2->hubert, WAV_2_VEC_2->HUBERT','line_number':1115,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1137,'multiline':False]
['text':' Note that `tie_weights` is usually used to tie input and output embedding weights. The method is re-purposed to','line_number':1148,'multiline':False]
['text':' correctly load adapter layers for Hubert so that we do not have to introduce a new API to','line_number':1149,'multiline':False]
['text':' [`PreTrainedModel`]. While slightly hacky, Hubert never has to tie input and output embeddings, so that it is','line_number':1150,'multiline':False]
['text':' ok to repurpose this function here.','line_number':1151,'multiline':False]
['text':' retrieve loss input_lengths from attention_mask','line_number':1233,'multiline':False]
['text':' assuming that padded tokens are filled with -100','line_number':1239,'multiline':False]
['text':' when not being attended to','line_number':1240,'multiline':False]
['text':' ctc_loss doesn't support fp16','line_number':1245,'multiline':False]
['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForSequenceClassification with Wav2Vec2->Hubert, wav2vec2->hubert, WAV_2_VEC_2->HUBERT','line_number':1275,'multiline':False]
['text':' transformer layers + input embeddings','line_number':1285,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1291,'multiline':False]
