['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2021 The Google Flax Team Authors and The HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' the dtype of the computation','line_number':150,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertEmbeddings.__call__','line_number':171,'multiline':False]
['text':' Embed','line_number':173,'multiline':False]
['text':' Sum all embeddings','line_number':178,'multiline':False]
['text':' Layer Norm','line_number':181,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertSelfAttention with Bert->Electra','line_number':187,'multiline':False]
['text':' the dtype of the computation','line_number':191,'multiline':False]
['text':' Copied from transformers.models.bart.modeling_flax_bart.FlaxBartAttention._concatenate_to_cache','line_number':229,'multiline':False]
['text':' detect if we're initializing by absence of existing cache data.','line_number':236,'multiline':False]
['text':' update key, value caches with our new 1d spatial slices','line_number':244,'multiline':False]
['text':' causal mask for cached decoder self-attention: our single query position should only attend to those key positions that have already been generated and cached, not the remaining zero elements.','line_number':253,'multiline':False]
['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':271,'multiline':False]
['text':' for the decoder','line_number':272,'multiline':False]
['text':' get query proj','line_number':276,'multiline':False]
['text':' get key, value proj','line_number':278,'multiline':False]
['text':' cross_attentions','line_number':280,'multiline':False]
['text':' self_attention','line_number':284,'multiline':False]
['text':' handle cache prepare causal attention mask','line_number':292,'multiline':False]
['text':' combine masks if needed','line_number':305,'multiline':False]
['text':' During fast autoregressive decoding, we feed one position at a time,','line_number':314,'multiline':False]
['text':' and cache the keys and values step by step.','line_number':315,'multiline':False]
['text':' Convert the boolean attention mask to an attention bias.','line_number':321,'multiline':False]
['text':' attention mask in the form of attention bias','line_number':323,'multiline':False]
['text':' Mask heads if we want to','line_number':348,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertSelfOutput with Bert->Electra','line_number':359,'multiline':False]
['text':' the dtype of the computation','line_number':362,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertAttention with Bert->Electra','line_number':380,'multiline':False]
['text':' Attention mask comes in as attention_mask.shape == (*batch_sizes, kv_length)','line_number':400,'multiline':False]
['text':' FLAX expects: attention_mask.shape == (*batch_sizes, 1, 1, kv_length) such that it is broadcastable','line_number':401,'multiline':False]
['text':' with attn_weights.shape == (*batch_sizes, num_heads, q_length, kv_length)','line_number':402,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertIntermediate with Bert->Electra','line_number':423,'multiline':False]
['text':' the dtype of the computation','line_number':426,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertOutput with Bert->Electra','line_number':442,'multiline':False]
['text':' the dtype of the computation','line_number':445,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertLayer with Bert->Electra','line_number':463,'multiline':False]
['text':' the dtype of the computation','line_number':466,'multiline':False]
['text':' Self Attention','line_number':486,'multiline':False]
['text':' Cross-Attention Block','line_number':497,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertLayerCollection with Bert->Electra','line_number':521,'multiline':False]
['text':' the dtype of the computation','line_number':524,'multiline':False]
['text':' Check if head_mask has a correct number of layers specified if desired','line_number':557,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertEncoder with Bert->Electra','line_number':604,'multiline':False]
['text':' the dtype of the computation','line_number':607,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertPreTrainedModel.enable_gradient_checkpointing','line_number':699,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertPreTrainedModel.init_weights','line_number':707,'multiline':False]
['text':' init input tensors','line_number':709,'multiline':False]
['text':' Copied from transformers.models.bart.modeling_flax_bart.FlaxBartDecoderPreTrainedModel.init_cache','line_number':750,'multiline':False]
['text':' init input variables to retrieve cache','line_number':760,'multiline':False]
['text':' init input tensors if not passed','line_number':794,'multiline':False]
['text':' Handle any PRNG if needed','line_number':807,'multiline':False]
['text':' if past_key_values are passed then cache is already initialized a private flag init_cache has to be passed','line_number':815,'multiline':False]
['text':' down to ensure cache is used. It has to be made sure that cache is marked as mutable so that it can be','line_number':816,'multiline':False]
['text':' changed by FlaxElectraAttention module','line_number':817,'multiline':False]
['text':' add updated cache to model output','line_number':841,'multiline':False]
['text':' the dtype of the computation','line_number':870,'multiline':False]
['text':' Model','line_number':1037,'multiline':False]
['text':' Model','line_number':1131,'multiline':False]
['text':' noqa F407','line_number':1217,'multiline':False]
['text':' NOTE: this doest "first" type summary always','line_number':1240,'multiline':False]
['text':' Model','line_number':1279,'multiline':False]
['text':' adapt docstring slightly for FlaxElectraForMultipleChoice','line_number':1318,'multiline':False]
['text':' Model','line_number':1353,'multiline':False]
['text':' take <s> token (equiv. to [CLS])','line_number':1418,'multiline':False]
['text':' although BERT uses tanh here, it seems Electra authors used gelu','line_number':1421,'multiline':False]
['text':' Model','line_number':1450,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_flax_bert.FlaxBertForCausalLM with Bert->Electra','line_number':1565,'multiline':False]
['text':' initializing the cache','line_number':1570,'multiline':False]
['text':' Note that usually one would have to put 0's in the attention_mask for x > input_ids.shape[-1] and x < cache_length.','line_number':1574,'multiline':False]
['text':' But since the decoder uses a causal mask, those positions are masked anyway.','line_number':1575,'multiline':False]
['text':' Thus, we can create a single static attention_mask here, which is more efficient for compilation','line_number':1576,'multiline':False]
