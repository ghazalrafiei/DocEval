['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2023-present NAVER Corp, The Microsoft Research Asia LayoutLM Team Authors and the HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all Bros models at https://huggingface.co/models?filter=bros','line_number':53,'multiline':False]
['text':' Reference: https://github.com/kimiyoung/transformer-xl/blob/master/pytorch/mem_transformer.py#L15','line_number':168,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':232,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':233,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':236,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':334,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':335,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':336,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':340,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':360,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':361,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':362,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':363,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':364,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':365,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':366,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':369,'multiline':False]
['text':' fp16 compatibility','line_number':378,'multiline':False]
['text':' bbox positional encoding','line_number':389,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in BrosModel forward() function)','line_number':399,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':402,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':405,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':406,'multiline':False]
['text':' Mask heads if we want to','line_number':409,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->Bros','line_number':426,'multiline':False]
['text':' Prune linear layers','line_number':458,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':464,'multiline':False]
['text':' add attentions if we output them','line_number':491,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->Bros','line_number':495,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':551,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':563,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':568,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':577,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':589,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':591,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':603,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPooler with Bert->Bros','line_number':708,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':716,'multiline':False]
['text':' to the first token.','line_number':717,'multiline':False]
['text':' equivalent to torch.einsum("ibnd,jbnd->nbij", (query_layer, key_layer))','line_number':753,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':770,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':771,'multiline':False]
['text':' past_key_values_length','line_number':880,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':894,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':895,'multiline':False]
['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':898,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':899,'multiline':False]
['text':' Prepare head mask if needed','line_number':909,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':910,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':911,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':912,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':913,'multiline':False]
['text':' if bbox has 2 points (4 float tensors) per token, convert it to 4 points (8 float tensors) per token','line_number':924,'multiline':False]
['text':' Initial token classification for Entity Extraction (NER)','line_number':1088,'multiline':False]
['text':' Subsequent token classification for Entity Extraction (NER)','line_number':1096,'multiline':False]
['text':' make subsequent token (sequence token classification) mask','line_number':1159,'multiline':False]
['text':' get initial token loss','line_number':1177,'multiline':False]
