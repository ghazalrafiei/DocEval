['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 UW-Madison The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all NystrÃ¶mformer models at https://huggingface.co/models?filter=nystromformer','line_number':48,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':61,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':62,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':66,'multiline':False]
['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':88,'multiline':False]
['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':89,'multiline':False]
['text':' issue #5664','line_number':90,'multiline':False]
['text':' Function to approximate Moore-Penrose inverse via the iterative method','line_number':153,'multiline':False]
['text':' The entries of key are positive and ||key||_{\infty} = 1 due to softmax','line_number':158,'multiline':False]
['text':' This original implementation is more conservative to compute coefficient of Z_0.','line_number':160,'multiline':False]
['text':' This is the exact coefficient computation, 1 / ||key||_1, of initialization of Z_0, leading to faster convergence.','line_number':163,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in NystromformerModel forward() function)','line_number':194,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in NystromformerModel forward() function)','line_number':222,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput','line_number':242,'multiline':False]
['text':' Prune linear layers','line_number':271,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':277,'multiline':False]
['text':' add attentions if we output them','line_number':285,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->Nystromformer','line_number':289,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->Nystromformer','line_number':305,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':334,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert->Nystromformer','line_number':398,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert->Nystromformer','line_number':416,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':422,'multiline':False]
['text':' an output-only bias for each token.','line_number':423,'multiline':False]
['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':428,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert->Nystromformer','line_number':437,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':461,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':462,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':548,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':613,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':614,'multiline':False]
['text':' Prepare head mask if needed','line_number':617,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':618,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':619,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':620,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':621,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':661,'multiline':False]
['text':' -100 index = padding token','line_number':714,'multiline':False]
['text':' take <s> token (equiv. to [CLS])','line_number':741,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':764,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':858,'multiline':False]
['text':' (bs * num_choices, seq_len, dim)','line_number':913,'multiline':False]
['text':' (bs * num_choices, dim)','line_number':914,'multiline':False]
['text':' (bs * num_choices, dim)','line_number':915,'multiline':False]
['text':' (bs * num_choices, dim)','line_number':916,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':954,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1033,'multiline':False]
['text':' If we are on multi-GPU, split add a dimension','line_number':1089,'multiline':False]
['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1094,'multiline':False]
