['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 WeChatAI The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' Base model docstring','line_number':54,'multiline':False]
['text':' Token Classification output','line_number':57,'multiline':False]
['text':' fmt: skip','line_number':59,'multiline':False]
['text':' SequenceClassification docstring','line_number':62,'multiline':False]
['text':' QuestionAsnwering docstring','line_number':67,'multiline':False]
['text':' Maske language modeling','line_number':74,'multiline':False]
['text':' See all RoCBert models at https://huggingface.co/models?filter=roc_bert','line_number':77,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.load_tf_weights_in_bert with bert->roc_bert','line_number':81,'multiline':False]
['text':' Load weights from TF model','line_number':97,'multiline':False]
['text':' adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v','line_number':109,'multiline':False]
['text':' which are not required for using pretrained model','line_number':110,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':185,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':186,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':190,'multiline':False]
['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':221,'multiline':False]
['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':222,'multiline':False]
['text':' issue #5664','line_number':223,'multiline':False]
['text':' embedding_word','line_number':258,'multiline':False]
['text':' batch_size * seq_len * hidden_dim','line_number':273,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->RoCBert','line_number':286,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':331,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':332,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':333,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':337,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':358,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':359,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':360,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':361,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':362,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':363,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':364,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':367,'multiline':False]
['text':' fp16 compatibility','line_number':382,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in RoCBertModel forward() function)','line_number':394,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':397,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':400,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':401,'multiline':False]
['text':' Mask heads if we want to','line_number':404,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->RoCBert','line_number':421,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertAttention with Bert->RoCBert','line_number':436,'multiline':False]
['text':' Prune linear layers','line_number':451,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':457,'multiline':False]
['text':' add attentions if we output them','line_number':482,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->RoCBert','line_number':486,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->RoCBert','line_number':502,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLayer with Bert->RoCBert','line_number':517,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':543,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':554,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':559,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':569,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':581,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':583,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':592,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder with Bert->RoCBert','line_number':604,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPooler with Bert->RoCBert','line_number':698,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':706,'multiline':False]
['text':' to the first token.','line_number':707,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert->RoCBert','line_number':714,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert->RoCBert','line_number':732,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':738,'multiline':False]
['text':' an output-only bias for each token.','line_number':739,'multiline':False]
['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':744,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert->RoCBert','line_number':753,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel with Bert->RoCBert,bert->roc_bert','line_number':764,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':779,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':780,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertModel.__init__ with Bert->RoCBert','line_number':885,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':895,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertModel.get_input_embeddings','line_number':898,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertModel.set_input_embeddings','line_number':902,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertModel._prune_heads','line_number':918,'multiline':False]
['text':' past_key_values_length','line_number':995,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':1009,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':1010,'multiline':False]
['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':1013,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':1014,'multiline':False]
['text':' Prepare head mask if needed','line_number':1024,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':1025,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':1026,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':1027,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':1028,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1083,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertForPreTraining.get_output_embeddings','line_number':1086,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertForPreTraining.set_output_embeddings','line_number':1090,'multiline':False]
['text':' -100 index = padding token','line_number':1200,'multiline':False]
['text':' batch_size * hidden_dim','line_number':1234,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertForMaskedLM.__init__ with Bert->RoCBert,bert->roc_bert','line_number':1262,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1275,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertForMaskedLM.get_output_embeddings','line_number':1278,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertForMaskedLM.set_output_embeddings','line_number':1282,'multiline':False]
['text':' -100 index = padding token','line_number':1354,'multiline':False]
['text':'  add a dummy token','line_number':1374,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLMHeadModel.__init__ with BertLMHeadModel->RoCBertForCausalLM,Bert->RoCBert,bert->roc_bert','line_number':1402,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1412,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLMHeadModel.get_output_embeddings','line_number':1415,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLMHeadModel.set_output_embeddings','line_number':1419,'multiline':False]
['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':1518,'multiline':False]
['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1548,'multiline':False]
['text':' cut decoder_input_ids if past_key_values is used','line_number':1552,'multiline':False]
['text':' Some generation methods already pass only the last input ID','line_number':1556,'multiline':False]
['text':' Default to old behavior: keep only final ID','line_number':1560,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLMHeadModel._reorder_cache','line_number':1577,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertForSequenceClassification.__init__ with Bert->RoCBert,bert->roc_bert','line_number':1593,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1606,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertForMultipleChoice.__init__ with Bert->RoCBert,bert->roc_bert','line_number':1699,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1710,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertForTokenClassification.__init__ with Bert->RoCBert,bert->roc_bert','line_number':1804,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1816,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertForQuestionAnswering.__init__ with Bert->RoCBert,bert->roc_bert','line_number':1890,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1898,'multiline':False]
['text':' If we are on multi-GPU, split add a dimension','line_number':1962,'multiline':False]
['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1967,'multiline':False]
