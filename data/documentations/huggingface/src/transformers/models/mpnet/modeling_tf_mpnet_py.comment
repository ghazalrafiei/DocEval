['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2018 The HuggingFace Inc. team, Microsoft Corporation.','line_number':2,'multiline':False]
['text':' Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':147,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPooler with Bert->MPNet','line_number':162,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':176,'multiline':False]
['text':' to the first token.','line_number':177,'multiline':False]
['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':223,'multiline':False]
['text':' Apply relative position embedding (precomputed in MPNetEncoder) if provided.','line_number':243,'multiline':False]
['text':' add attentions if we output them','line_number':300,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertIntermediate with Bert->MPNet','line_number':315,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertOutput with Bert->MPNet','line_number':345,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':389,'multiline':False]
['text':' add attentions if we output them','line_number':393,'multiline':False]
['text':' Add last layer','line_number':472,'multiline':False]
['text':' now n is in the range [0, inf)','line_number':492,'multiline':False]
['text':' shape (qlen, klen)','line_number':517,'multiline':False]
['text':' shape (qlen, klen, num_heads)','line_number':523,'multiline':False]
['text':' shape (1, num_heads, qlen, klen)','line_number':524,'multiline':False]
['text':' The embeddings must be the last declaration in order to follow the weights order','line_number':543,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer.get_input_embeddings','line_number':546,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer.set_input_embeddings','line_number':550,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer._prune_heads','line_number':555,'multiline':False]
['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':595,'multiline':False]
['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':596,'multiline':False]
['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':597,'multiline':False]
['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':598,'multiline':False]
['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':599,'multiline':False]
['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':602,'multiline':False]
['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':603,'multiline':False]
['text':' positions we want to attend and -10000.0 for masked positions.','line_number':604,'multiline':False]
['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':605,'multiline':False]
['text':' effectively the same as removing these entirely.','line_number':606,'multiline':False]
['text':' Prepare head mask if needed','line_number':612,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':613,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':614,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':615,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':616,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':817,'multiline':False]
['text':' an output-only bias for each token.','line_number':818,'multiline':False]
['text':' project back to size of vocabulary with bias','line_number':853,'multiline':False]
['text':' take <s> token (equiv. to [CLS])','line_number':963,'multiline':False]
