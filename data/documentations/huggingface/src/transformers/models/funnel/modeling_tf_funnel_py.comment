['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2020-present Google Brain and Carnegie Mellon University Authors and the HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' B4-4-4H768','line_number':65,'multiline':False]
['text':' B4-4-4H768, no decoder','line_number':66,'multiline':False]
['text':' B6-3x2-3x2H768','line_number':67,'multiline':False]
['text':' B6-3x2-3x2H768, no decoder','line_number':68,'multiline':False]
['text':' B6-6-6H768','line_number':69,'multiline':False]
['text':' B6-6-6H768, no decoder','line_number':70,'multiline':False]
['text':' B8-8-8H1024','line_number':71,'multiline':False]
['text':' B8-8-8H1024, no decoder','line_number':72,'multiline':False]
['text':' B10-10-10H1024','line_number':73,'multiline':False]
['text':' B10-10-10H1024, no decoder','line_number':74,'multiline':False]
['text':' Track where we are at in terms of pooling from the original input, e.g., by how much the sequence length was','line_number':146,'multiline':False]
['text':' divided.','line_number':147,'multiline':False]
['text':' inputs_embeds has shape batch_size x seq_len x d_model','line_number':152,'multiline':False]
['text':' attention_mask and token_type_ids have shape batch_size x seq_len','line_number':153,'multiline':False]
['text':' Treat <cls> as in the same segment as both A & B','line_number':168,'multiline':False]
['text':' Notations from the paper, appending A.2.2, final formula.','line_number':187,'multiline':False]
['text':' We need to create and return the matrices phi, psi, pi and omega.','line_number':188,'multiline':False]
['text':' This is different from the formula on the paper...','line_number':198,'multiline':False]
['text':' Notations from the paper, appending A.2.1, final formula.','line_number':205,'multiline':False]
['text':' We need to create and return all the possible vectors R for all blocks and shifts.','line_number':206,'multiline':False]
['text':' Maximum relative positions for the first input','line_number':209,'multiline':False]
['text':' For each block with block_index > 0, we need two types position embeddings:','line_number':221,'multiline':False]
['text':'   - Attention(pooled-q, unpooled-kv)','line_number':222,'multiline':False]
['text':'   - Attention(pooled-q, pooled-kv)','line_number':223,'multiline':False]
['text':' For block_index = 0 we only need the second one and leave the first one as None.','line_number':224,'multiline':False]
['text':' First type','line_number':226,'multiline':False]
['text':' construct rel_pos_id','line_number':232,'multiline':False]
['text':' rel_pos = tf.expand_dims(rel_pos,1) + zero_offset','line_number':235,'multiline':False]
['text':' rel_pos = tf.broadcast_to(rel_pos, (rel_pos.shape[0], self.d_model))','line_number':236,'multiline':False]
['text':' Second type','line_number':241,'multiline':False]
['text':' rel_pos = tf.expand_dims(rel_pos,1) + zero_offset','line_number':246,'multiline':False]
['text':' rel_pos = tf.broadcast_to(rel_pos, (rel_pos.shape[0], self.d_model))','line_number':247,'multiline':False]
['text':' Under separate <cls>, we treat the <cls> as the first token in','line_number':261,'multiline':False]
['text':' the previous block of the 1st real block. Since the 1st real','line_number':262,'multiline':False]
['text':' block always has position 1, the position of the previous block','line_number':263,'multiline':False]
['text':' will be at `1 - 2 ** block_index`.','line_number':264,'multiline':False]
['text':' Do the stride pool recursively if axis is a list or a tuple of ints.','line_number':292,'multiline':False]
['text':' Do the stride pool recursively if tensor is a list or tuple of tensors.','line_number':298,'multiline':False]
['text':' Deal with negative axis','line_number':302,'multiline':False]
['text':' Do the pool recursively if tensor is a list or tuple of tensors.','line_number':317,'multiline':False]
['text':' max_rel_len = 2 * context_len + shift -1 is the numbers of possible relative positions i-j','line_number':376,'multiline':False]
['text':' What's next is the same as doing the following gather in PyTorch, which might be clearer code but less efficient.','line_number':378,'multiline':False]
['text':' idxs = context_len + torch.arange(0, context_len).unsqueeze(0) - torch.arange(0, seq_len).unsqueeze(1)','line_number':379,'multiline':False]
['text':' # matrix of context_len + i-j','line_number':380,'multiline':False]
['text':' return positional_attn.gather(3, idxs.expand([batch_size, n_head, context_len, context_len]))','line_number':381,'multiline':False]
['text':' q_head has shape batch_size x sea_len x n_head x d_head','line_number':456,'multiline':False]
['text':' Notations from the paper, appending A.2.2, final formula (https://arxiv.org/abs/2006.03236)','line_number':458,'multiline':False]
['text':' phi and pi have shape seq_len x d_model, psi and omega have shape context_len x d_model','line_number':459,'multiline':False]
['text':' Shape n_head x d_head','line_number':461,'multiline':False]
['text':' Shape d_model x n_head x d_head','line_number':463,'multiline':False]
['text':' Shape batch_size x sea_len x n_head x d_model','line_number':466,'multiline':False]
['text':' Shape batch_size x n_head x seq_len x context_len','line_number':471,'multiline':False]
['text':' Notations from the paper, appending A.2.1, final formula (https://arxiv.org/abs/2006.03236)','line_number':476,'multiline':False]
['text':' Grab the proper positional encoding, shape max_rel_len x d_model','line_number':477,'multiline':False]
['text':' Shape n_head x d_head','line_number':484,'multiline':False]
['text':' Shape d_model x n_head x d_head','line_number':486,'multiline':False]
['text':' Shape max_rel_len x n_head x d_model','line_number':489,'multiline':False]
['text':' Shape batch_size x n_head x seq_len x max_rel_len','line_number':491,'multiline':False]
['text':' Shape batch_size x n_head x seq_len x context_len','line_number':493,'multiline':False]
['text':' q_head has shape batch_size x seq_len x n_head x d_head','line_number':505,'multiline':False]
['text':' Shape n_head x d_head','line_number':506,'multiline':False]
['text':' Shape batch_size x n_head x seq_len x 2','line_number':509,'multiline':False]
['text':' Shape batch_size x n_head x seq_len x context_len','line_number':511,'multiline':False]
['text':' token_type_mat = tf.broadcast_to(token_type_mat[:, None], new_shape)','line_number':513,'multiline':False]
['text':' Shapes batch_size x n_head x seq_len','line_number':514,'multiline':False]
['text':' Shape batch_size x n_head x seq_len x context_len','line_number':516,'multiline':False]
['text':' query has shape batch_size x seq_len x d_model','line_number':528,'multiline':False]
['text':' key and value have shapes batch_size x context_len x d_model','line_number':529,'multiline':False]
['text':' Shape batch_size x seq_len x n_head x d_head','line_number':536,'multiline':False]
['text':' Shapes batch_size x context_len x n_head x d_head','line_number':538,'multiline':False]
['text':' Shape n_head x d_head','line_number':543,'multiline':False]
['text':' Shapes batch_size x n_head x seq_len x context_len','line_number':545,'multiline':False]
['text':' merge attention scores','line_number':550,'multiline':False]
['text':' perform masking','line_number':553,'multiline':False]
['text':' attention probability','line_number':558,'multiline':False]
['text':' attention output, shape batch_size x seq_len x n_head x d_head','line_number':562,'multiline':False]
['text':' Shape shape batch_size x seq_len x d_model','line_number':565,'multiline':False]
['text':' The pooling is not implemented on long tensors, so we convert this mask.','line_number':655,'multiline':False]
['text':' attention_mask = tf.cast(attention_mask, inputs_embeds.dtype)','line_number':656,'multiline':False]
['text':' Not implemented yet in the library fr TF 2.0 models','line_number':821,'multiline':False]
['text':' Not implemented yet in the library fr TF 2.0 models','line_number':904,'multiline':False]
['text':' Funnel misbehaves with very small inputs, so we override and make them a bit bigger','line_number':1096,'multiline':False]
['text':' hidden_states and attentions not converted to Tensor with tf.convert_to_tensor as they are all of','line_number':1258,'multiline':False]
['text':' different dimensions','line_number':1259,'multiline':False]
['text':' hidden_states and attentions not converted to Tensor with tf.convert_to_tensor as they are all of','line_number':1314,'multiline':False]
['text':' different dimensions','line_number':1315,'multiline':False]
['text':' hidden_states and attentions not converted to Tensor with tf.convert_to_tensor as they are all of','line_number':1397,'multiline':False]
['text':' different dimensions','line_number':1398,'multiline':False]
['text':' hidden_states and attentions not converted to Tensor with tf.convert_to_tensor as they are all of','line_number':1482,'multiline':False]
['text':' different dimensions','line_number':1483,'multiline':False]
['text':' hidden_states and attentions not converted to Tensor with tf.convert_to_tensor as they are all of','line_number':1566,'multiline':False]
['text':' different dimensions','line_number':1567,'multiline':False]
['text':' hidden_states and attentions not converted to Tensor with tf.convert_to_tensor as they are all of','line_number':1672,'multiline':False]
['text':' different dimensions','line_number':1673,'multiline':False]
['text':' hidden_states and attentions not converted to Tensor with tf.convert_to_tensor as they are all of','line_number':1761,'multiline':False]
['text':' different dimensions','line_number':1762,'multiline':False]
['text':' hidden_states and attentions not converted to Tensor with tf.convert_to_tensor as they are all of','line_number':1863,'multiline':False]
['text':' different dimensions','line_number':1864,'multiline':False]
