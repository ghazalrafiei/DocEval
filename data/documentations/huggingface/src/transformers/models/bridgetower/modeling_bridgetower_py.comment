['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2023 The Intel Labs Team Authors, The Microsoft Research Team Authors and HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all bridgetower models at https://huggingface.co/BridgeTower','line_number':50,'multiline':False]
['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionEmbeddings with CLIP->BridgeTower','line_number':261,'multiline':False]
['text':' shape = [*, width, grid, grid]','line_number':288,'multiline':False]
['text':' NLD -> LND','line_number':314,'multiline':False]
['text':' shape = [num_hidden_layers, hidden_size, *, grid ** 2]','line_number':318,'multiline':False]
['text':' shape = [num_hidden_layers, *, hidden_size, grid ** 2]','line_number':320,'multiline':False]
['text':' shape = [num_hidden_layers, *, hidden_size, grid ** 2]','line_number':329,'multiline':False]
['text':' NLD -> LND','line_number':336,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->BridgeTower','line_number':371,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->BridgeTower','line_number':386,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->BridgeTower','line_number':402,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPooler with Bert->BridgeTower','line_number':417,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':425,'multiline':False]
['text':' to the first token.','line_number':426,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaSelfAttention with Roberta->BridgeTower','line_number':433,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':478,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':479,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':480,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':484,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':505,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':506,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':507,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':508,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':509,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':510,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':511,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':514,'multiline':False]
['text':' fp16 compatibility','line_number':529,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in BridgeTowerModel forward() function)','line_number':541,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':544,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':547,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':548,'multiline':False]
['text':' Mask heads if we want to','line_number':551,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertAttention with Bert->BridgeTower','line_number':568,'multiline':False]
['text':' Prune linear layers','line_number':583,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':589,'multiline':False]
['text':' add attentions if we output them','line_number':614,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':640,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':650,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':651,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':664,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':705,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':716,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':721,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':731,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':743,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':745,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':754,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaEncoder with Roberta->BridgeTowerText','line_number':766,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaEmbeddings with Roberta->BridgeTowerText','line_number':860,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEmbeddings.__init__','line_number':866,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':873,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':874,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':877,'multiline':False]
['text':' End copy','line_number':886,'multiline':False]
['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':897,'multiline':False]
['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':909,'multiline':False]
['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':910,'multiline':False]
['text':' issue #5664','line_number':911,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.create_position_ids_from_input_ids','line_number':950,'multiline':False]
['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':961,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1048,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaModel.forward','line_number':1065,'multiline':False]
['text':' past_key_values_length','line_number':1126,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':1140,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':1141,'multiline':False]
['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':1144,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':1145,'multiline':False]
['text':' Prepare head mask if needed','line_number':1155,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':1156,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':1157,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':1158,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':1159,'multiline':False]
['text':' Class token => Linear => Tanh','line_number':1238,'multiline':False]
['text':' Initialize BridgeTower Components','line_number':1242,'multiline':False]
['text':' The split_index determines how many layers of the uni-modal encoder are applied before the cross-modal encoder','line_number':1338,'multiline':False]
['text':' Run the first 'split_index' layers of the textual encoder','line_number':1341,'multiline':False]
['text':' Permute as BridgeTowerResidualAttention has batch_first=True','line_number':1351,'multiline':False]
['text':' Run the first 'split_index' layers of the visual encoder','line_number':1357,'multiline':False]
['text':' first layer is a special case because we don't have the output from the cross-encoder yet','line_number':1365,'multiline':False]
['text':'  Each of the top 6 layers of the visual and textual encoders ([split_index:]) is connected to each layer of','line_number':1417,'multiline':False]
['text':'  the cross-modal encoder via bridge layers, which brings bottom-up alignment and fusion to the cross-modal encoder.','line_number':1418,'multiline':False]
['text':' Bridge layers for textual and visual encoders','line_number':1432,'multiline':False]
['text':' Cross-modal encoder via bridge layers of textual and visual encoders','line_number':1440,'multiline':False]
['text':'  Concatenate the cls token of the text and image features to get the final represtation','line_number':1469,'multiline':False]
['text':' Copied from transformers.models.vilt.modeling_vilt.ViltPredictionHeadTransform with Vilt->BridgeTower','line_number':1497,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1556,'multiline':False]
['text':' -100 index = padding token','line_number':1632,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1664,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1778,'multiline':False]
['text':' normalized features','line_number':1864,'multiline':False]
