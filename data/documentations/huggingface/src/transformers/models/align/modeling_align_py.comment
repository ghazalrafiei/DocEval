['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2023 The Google Research Team Authors and The HuggingFace Team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all ALIGN models at https://huggingface.co/models?filter=align','line_number':52,'multiline':False]
['text':' contrastive loss function, adapted from','line_number':277,'multiline':False]
['text':' https://sachinruk.github.io/blog/pytorch/pytorch%20lightning/loss%20function/gpu/2021/03/07/CLIP.html','line_number':278,'multiline':False]
['text':' Copied from transformers.models.efficientnet.modeling_efficientnet.round_filters with EfficientNet->AlignVision','line_number':289,'multiline':False]
['text':' Make sure that round down does not go down by more than 10%.','line_number':298,'multiline':False]
['text':' Copied from transformers.models.efficientnet.modeling_efficientnet.correct_pad','line_number':305,'multiline':False]
['text':' Copied from transformers.models.efficientnet.modeling_efficientnet.EfficientNetEmbeddings with EfficientNet->AlignVision','line_number':326,'multiline':False]
['text':' Copied from transformers.models.efficientnet.modeling_efficientnet.EfficientNetDepthwiseConv2d with EfficientNet->AlignVision','line_number':352,'multiline':False]
['text':' Copied from transformers.models.efficientnet.modeling_efficientnet.EfficientNetExpansionLayer with EfficientNet->AlignVision','line_number':379,'multiline':False]
['text':' Expand phase','line_number':398,'multiline':False]
['text':' Copied from transformers.models.efficientnet.modeling_efficientnet.EfficientNetDepthwiseLayer with with EfficientNet->AlignVision','line_number':406,'multiline':False]
['text':' Depthwise convolution','line_number':435,'multiline':False]
['text':' Copied from transformers.models.efficientnet.modeling_efficientnet.EfficientNetSqueezeExciteLayer with with EfficientNet->AlignVision','line_number':446,'multiline':False]
['text':' Expansion and depthwise convolution phase','line_number':589,'multiline':False]
['text':' Squeeze and excite phase','line_number':594,'multiline':False]
['text':' Round number of block repeats based on depth multiplier.','line_number':614,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEmbeddings with Bert->AlignText','line_number':674,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':684,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':685,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':688,'multiline':False]
['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':715,'multiline':False]
['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':716,'multiline':False]
['text':' issue #5664','line_number':717,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->AlignText','line_number':739,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':784,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':785,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':786,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':790,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':811,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':812,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':813,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':814,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':815,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':816,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':817,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':820,'multiline':False]
['text':' fp16 compatibility','line_number':835,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in AlignTextModel forward() function)','line_number':847,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':850,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':853,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':854,'multiline':False]
['text':' Mask heads if we want to','line_number':857,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->AlignText','line_number':874,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertAttention with Bert->AlignText','line_number':889,'multiline':False]
['text':' Prune linear layers','line_number':904,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':910,'multiline':False]
['text':' add attentions if we output them','line_number':935,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->AlignText','line_number':939,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->AlignText','line_number':955,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLayer with Bert->AlignText','line_number':970,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':996,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':1007,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':1012,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':1022,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':1034,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':1036,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':1045,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder with Bert->AlignText','line_number':1057,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPooler with Bert -> AlignText','line_number':1151,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':1159,'multiline':False]
['text':' to the first token.','line_number':1160,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1212,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':1282,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':1283,'multiline':False]
['text':' Prepare head mask if needed','line_number':1286,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':1287,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':1288,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':1289,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':1290,'multiline':False]
['text':' Final pooling layer','line_number':1337,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1345,'multiline':False]
['text':' Apply pooling','line_number':1395,'multiline':False]
['text':' Reshape (batch_size, projection_dim, 1 , 1) -> (batch_size, projection_dim)','line_number':1398,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1442,'multiline':False]
['text':' Use ALIGN model's config for some fields (if specified) instead of those of vision & text components.','line_number':1474,'multiline':False]
['text':' Use ALIGN model's config for some fields (if specified) instead of those of vision & text components.','line_number':1527,'multiline':False]
['text':' pooled_output','line_number':1539,'multiline':False]
['text':' Use ALIGN model's config for some fields (if specified) instead of those of vision & text components.','line_number':1583,'multiline':False]
['text':' normalized features','line_number':1612,'multiline':False]
['text':' cosine similarity as logits','line_number':1616,'multiline':False]
