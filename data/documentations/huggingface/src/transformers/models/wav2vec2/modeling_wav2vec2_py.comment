['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2021 The Fairseq Authors and the HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' General docstring','line_number':65,'multiline':False]
['text':' Base docstring','line_number':68,'multiline':False]
['text':' CTC docstring','line_number':72,'multiline':False]
['text':' Audio class docstring','line_number':76,'multiline':False]
['text':' Frame class docstring','line_number':81,'multiline':False]
['text':' Speaker Verification docstring','line_number':85,'multiline':False]
['text':' See all Wav2Vec2 models at https://huggingface.co/models?filter=wav2vec2','line_number':95,'multiline':False]
['text':' epsilon is used for probabilistic rounding','line_number':176,'multiline':False]
['text':' make sure num masked span <= sequence_length','line_number':184,'multiline':False]
['text':' make sure num_masked span is also <= input_length - (mask_length - 1)','line_number':188,'multiline':False]
['text':' compute number of masked spans in batch','line_number':194,'multiline':False]
['text':' SpecAugment mask to fill','line_number':201,'multiline':False]
['text':' compute num of masked spans for this input','line_number':211,'multiline':False]
['text':' get random indices to mask','line_number':214,'multiline':False]
['text':' pick first sampled index that will serve as a dummy index to pad vector','line_number':219,'multiline':False]
['text':' to ensure same dimension for all batches due to probabilistic rounding','line_number':220,'multiline':False]
['text':' Picking first sample just pads those vectors twice.','line_number':221,'multiline':False]
['text':' this case can only happen if `input_length` is strictly smaller then','line_number':223,'multiline':False]
['text':' `sequence_length` in which case the last token has to be a padding','line_number':224,'multiline':False]
['text':' token which we can use as a dummy mask id','line_number':225,'multiline':False]
['text':' expand masked indices to masked spans','line_number':237,'multiline':False]
['text':' add offset to the starting indexes so that indexes now create a span','line_number':243,'multiline':False]
['text':' ensure that we cannot have indices larger than sequence_length','line_number':250,'multiline':False]
['text':' scatter indices to mask','line_number':254,'multiline':False]
['text':' generate indices of the positive vectors themselves, repeat them `num_negatives` times','line_number':268,'multiline':False]
['text':' get `num_negatives` random vector indices from the same utterance','line_number':271,'multiline':False]
['text':' avoid sampling the same positive vector, but keep the distribution uniform','line_number':284,'multiline':False]
['text':' remap to actual indices','line_number':287,'multiline':False]
['text':' correct for batch size','line_number':290,'multiline':False]
['text':' make sure hidden_states require grad for gradient_checkpointing','line_number':448,'multiline':False]
['text':' non-projected hidden states are needed for quantization','line_number':483,'multiline':False]
['text':' Copied from transformers.models.bart.modeling_bart.BartAttention with Bart->Wav2Vec2','line_number':490,'multiline':False]
['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':539,'multiline':False]
['text':' for the decoder','line_number':540,'multiline':False]
['text':' get query proj','line_number':545,'multiline':False]
['text':' get key, value proj','line_number':547,'multiline':False]
['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':548,'multiline':False]
['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':549,'multiline':False]
['text':' the provided `key_value_states` to support prefix tuning','line_number':550,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':556,'multiline':False]
['text':' cross_attentions','line_number':560,'multiline':False]
['text':' reuse k, v, self_attention','line_number':564,'multiline':False]
['text':' self_attention','line_number':570,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':575,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':576,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':577,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':578,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':579,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':580,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':581,'multiline':False]
['text':' this operation is a bit awkward, but it's required to','line_number':618,'multiline':False]
['text':' make sure that attn_weights keeps its gradient.','line_number':619,'multiline':False]
['text':' In order to do so, attn_weights have to be reshaped','line_number':620,'multiline':False]
['text':' twice and have to be reused in the following','line_number':621,'multiline':False]
['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':640,'multiline':False]
['text':' partitioned across GPUs when using tensor-parallelism.','line_number':641,'multiline':False]
['text':' make sure padded tokens output 0','line_number':774,'multiline':False]
['text':' extend attention_mask','line_number':778,'multiline':False]
['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':796,'multiline':False]
['text':' under deepspeed zero3 all gpus must run in sync','line_number':801,'multiline':False]
['text':' make sure padded tokens are not attended to','line_number':857,'multiline':False]
['text':' extend attention_mask','line_number':861,'multiline':False]
['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':878,'multiline':False]
['text':' under deepspeed zero3 all gpus must run in sync','line_number':883,'multiline':False]
['text':' XXX: could optimize this like synced_gpus in generate_utils but not sure if it's worth the code complication','line_number':884,'multiline':False]
['text':' storage for codebook variables (codewords)','line_number':935,'multiline':False]
['text':' can be decayed for training','line_number':941,'multiline':False]
['text':' project to codevector dim','line_number':959,'multiline':False]
['text':' sample code vector probs via gumbel in differentiateable way','line_number':964,'multiline':False]
['text':' compute perplexity','line_number':969,'multiline':False]
['text':' take argmax in non-differentiable way','line_number':975,'multiline':False]
['text':' comptute hard codevector distribution (one hot)','line_number':976,'multiline':False]
['text':' use probs to retrieve codevectors','line_number':986,'multiline':False]
['text':' feature dim might need to be down-projected','line_number':998,'multiline':False]
['text':' down project hidden_states if necessary','line_number':1009,'multiline':False]
['text':' Wav2Vec2ForPreTraining last 2 linear layers need standard Linear init.','line_number':1081,'multiline':False]
['text':' gumbel softmax requires special init','line_number':1087,'multiline':False]
['text':' 1D convolutional layer output length formula taken','line_number':1128,'multiline':False]
['text':' from https://pytorch.org/docs/stable/generated/torch.nn.Conv1d.html','line_number':1129,'multiline':False]
['text':' Effectively attention_mask.sum(-1), but not inplace to be able to run','line_number':1144,'multiline':False]
['text':' on inference mode.','line_number':1145,'multiline':False]
['text':' these two operations makes sure that all values before the output lengths idxs are attended to','line_number':1156,'multiline':False]
['text':' init attention adapters','line_number':1181,'multiline':False]
['text':' init lm head','line_number':1186,'multiline':False]
['text':' 1. Let's first try loading a safetensors adapter weight','line_number':1284,'multiline':False]
['text':' Raise any environment error raise by `cached_file`. It will have a helpful error message adapted','line_number':1305,'multiline':False]
['text':' to the original exception.','line_number':1306,'multiline':False]
['text':' For any other exception, we throw a generic error.','line_number':1310,'multiline':False]
['text':' 2. If this didn't work let's try loading a PyTorch adapter weight','line_number':1319,'multiline':False]
['text':' Raise any environment error raise by `cached_file`. It will have a helpful error message adapted','line_number':1339,'multiline':False]
['text':' to the original exception.','line_number':1340,'multiline':False]
['text':' For any other exception, we throw a generic error.','line_number':1344,'multiline':False]
['text':' make sure now vocab size is correct','line_number':1361,'multiline':False]
['text':' make sure that adapter weights are put in exactly the same precision and device placement and overwritten adapter weights','line_number':1369,'multiline':False]
['text':' set target language corectly','line_number':1373,'multiline':False]
['text':' model only needs masking vector if mask prob is > 0.0','line_number':1445,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1456,'multiline':False]
['text':' `config.apply_spec_augment` can set masking to False','line_number':1489,'multiline':False]
['text':' generate indices & apply SpecAugment along time axis','line_number':1493,'multiline':False]
['text':' apply SpecAugment along time axis with given mask_time_indices','line_number':1497,'multiline':False]
['text':' generate indices & apply SpecAugment along feature axis','line_number':1511,'multiline':False]
['text':' compute reduced attention_mask corresponding to feature vectors','line_number':1551,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1597,'multiline':False]
['text':' apply temperature','line_number':1642,'multiline':False]
['text':' 1. project all transformed features (including masked) to final vq dim','line_number':1729,'multiline':False]
['text':' 2. quantize all (unmasked) extracted features and project to final vq dim','line_number':1732,'multiline':False]
['text':' compute reduced attention_mask correponding to feature vectors','line_number':1736,'multiline':False]
['text':' for training, we sample negatives','line_number':1750,'multiline':False]
['text':' 3. sample K negatives (distractors) quantized states for contrastive loss','line_number':1751,'multiline':False]
['text':' if attention_mask is passed, make sure that padded feature vectors cannot be sampled','line_number':1752,'multiline':False]
['text':' sample negative quantized vectors BTC => (BxT)C','line_number':1753,'multiline':False]
['text':' 4. compute logits, corresponding to `logs = sim(c_t, [q_t, \sim{q}_t]) / \kappa`','line_number':1761,'multiline':False]
['text':' of equation (3) in https://arxiv.org/pdf/2006.11477.pdf','line_number':1762,'multiline':False]
['text':' 5. if a negative vector is identical to the positive (i.e. when codebook utilization is low),','line_number':1770,'multiline':False]
['text':' its cosine similarity will be masked','line_number':1771,'multiline':False]
['text':' 6. compute contrastive loss \mathbf{L}_m = cross_entropy(logs) =','line_number':1777,'multiline':False]
['text':' -log(exp(sim(c_t, q_t)/\kappa) / \sum_{\sim{q}} exp(sim(c_t, \sim{q})/\kappa))','line_number':1778,'multiline':False]
['text':' 7. compute diversity loss: \mathbf{L}_d','line_number':1783,'multiline':False]
['text':' 8. \mathbf{L} = \mathbf{L}_m + \alpha * \mathbf{L}_d','line_number':1787,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1820,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1884,'multiline':False]
['text':' Note that `tie_weights` is usually used to tie input and output embedding weights. The method is re-purposed to','line_number':1895,'multiline':False]
['text':' correctly load adapter layers for Wav2Vec2 so that we do not have to introduce a new API to','line_number':1896,'multiline':False]
['text':' [`PreTrainedModel`]. While slightly hacky, Wav2Vec2 never has to tie input and output embeddings, so that it is','line_number':1897,'multiline':False]
['text':' ok to repurpose this function here.','line_number':1898,'multiline':False]
['text':' retrieve loss input_lengths from attention_mask','line_number':1980,'multiline':False]
['text':' assuming that padded tokens are filled with -100','line_number':1986,'multiline':False]
['text':' when not being attended to','line_number':1987,'multiline':False]
['text':' ctc_loss doesn't support fp16','line_number':1992,'multiline':False]
['text':' transformer layers + input embeddings','line_number':2031,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':2037,'multiline':False]
['text':' transformer layers + input embeddings','line_number':2153,'multiline':False]
['text':' transformer layers + input embeddings','line_number':2310,'multiline':False]
['text':' 1D convolutional layer output length formula taken','line_number':2358,'multiline':False]
['text':' from https://pytorch.org/docs/stable/generated/torch.nn.Conv1d.html','line_number':2359,'multiline':False]
['text':' Statistic Pooling','line_number':2415,'multiline':False]
