['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2023 The Salesforce Team Authors and The HuggingFace Team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the BSD-3-clause license (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     https://opensource.org/licenses/BSD-3-Clause','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#L52','line_number':77,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with PyTorch model variable name and be able to load','line_number':96,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':97,'multiline':False]
['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#L97','line_number':148,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':203,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':204,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':205,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':225,'multiline':False]
['text':' fp16 compatibility','line_number':234,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in BlipTextModel forward() function)','line_number':246,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':249,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':252,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':253,'multiline':False]
['text':' Mask heads if we want to','line_number':256,'multiline':False]
['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#242','line_number':324,'multiline':False]
['text':' "output" is a protected attribute on TF models','line_number':329,'multiline':False]
['text':' add attentions if we output them','line_number':354,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertIntermediate with Bert->BlipText','line_number':369,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':452,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':478,'multiline':False]
['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#L386','line_number':505,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPooler with Bert->BlipText','line_number':595,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':609,'multiline':False]
['text':' to the first token.','line_number':610,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPredictionHeadTransform with Bert->BlipText','line_number':625,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':668,'multiline':False]
['text':' an output-only bias for each token.','line_number':669,'multiline':False]
['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#L548','line_number':715,'multiline':False]
['text':' Adapted from https://github.com/salesforce/BLIP/blob/3a29b7410476bf5f2ba0955827390eb6ea1f4f9d/models/med.py#L571','line_number':727,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':769,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':770,'multiline':False]
['text':' Catches NumPy inputs that haven't been cast yet','line_number':772,'multiline':False]
['text':' Provided a padding mask of dimensions [batch_size, seq_length]','line_number':776,'multiline':False]
['text':' - if the model is a decoder, apply a causal mask in addition to the padding mask','line_number':777,'multiline':False]
['text':' - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':778,'multiline':False]
['text':' in case past_key_values are used we need to add a prefix ones mask to the causal mask','line_number':784,'multiline':False]
['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':807,'multiline':False]
['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':808,'multiline':False]
['text':' positions we want to attend and -10000.0 for masked positions.','line_number':809,'multiline':False]
['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':810,'multiline':False]
['text':' effectively the same as removing these entirely.','line_number':811,'multiline':False]
['text':' fp16 compatibility','line_number':812,'multiline':False]
['text':' past_key_values_length','line_number':879,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':885,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':886,'multiline':False]
['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':889,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':890,'multiline':False]
['text':' Prepare head mask if needed','line_number':908,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':909,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':910,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':911,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':912,'multiline':False]
['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#L811','line_number':968,'multiline':False]
['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':1057,'multiline':False]
['text':' Keras won't give us label smoothing for sparse CE, so we de-sparsify things here','line_number':1062,'multiline':False]
['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1085,'multiline':False]
['text':' cut decoder_input_ids if past_key_values is used','line_number':1089,'multiline':False]
