['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2021 The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all RoFormer models at https://huggingface.co/models?filter=roformer','line_number':62,'multiline':False]
['text':' Copied from transformers.models.marian.modeling_marian.MarianSinusoidalPositionalEmbedding with Marian->RoFormer','line_number':66,'multiline':False]
['text':' set early to avoid an error in pytorch-1.8+','line_number':84,'multiline':False]
['text':' Load weights from TF model','line_number':116,'multiline':False]
['text':' adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v','line_number':128,'multiline':False]
['text':' which are not required for using pretrained model','line_number':129,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':182,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':183,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':248,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':249,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':250,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':254,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':278,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':279,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':280,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':281,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':282,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':283,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':284,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':287,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in RoFormerModel forward() function)','line_number':292,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':295,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':298,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':299,'multiline':False]
['text':' Mask heads if we want to','line_number':302,'multiline':False]
['text':' https://kexue.fm/archives/8265','line_number':320,'multiline':False]
['text':' sin [batch_size, num_heads, sequence_length, embed_size_per_head//2]','line_number':321,'multiline':False]
['text':' cos [batch_size, num_heads, sequence_length, embed_size_per_head//2]','line_number':322,'multiline':False]
['text':' sin [θ0,θ1,θ2......θd/2-1] -> sin_pos [θ0,θ0,θ1,θ1,θ2,θ2......θd/2-1,θd/2-1]','line_number':324,'multiline':False]
['text':' cos [θ0,θ1,θ2......θd/2-1] -> cos_pos [θ0,θ0,θ1,θ1,θ2,θ2......θd/2-1,θd/2-1]','line_number':326,'multiline':False]
['text':' rotate_half_query_layer [-q1,q0,-q3,q2......,-qd-1,qd-2]','line_number':328,'multiline':False]
['text':' rotate_half_key_layer [-k1,k0,-k3,k2......,-kd-1,kd-2]','line_number':333,'multiline':False]
['text':' rotate_half_value_layer [-v1,v0,-v3,v2......,-vd-1,vd-2]','line_number':337,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->RoFormer','line_number':346,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertAttention.prune_heads','line_number':368,'multiline':False]
['text':' Prune linear layers','line_number':376,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':382,'multiline':False]
['text':' End Copy','line_number':387,'multiline':False]
['text':' add attentions if we output them','line_number':410,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->RoFormer','line_number':414,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->RoFormer','line_number':430,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':471,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':483,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':488,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':498,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':511,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':513,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':522,'multiline':False]
['text':' [sequence_length, embed_size_per_head] -> [batch_size, num_heads, sequence_length, embed_size_per_head]','line_number':569,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':658,'multiline':False]
['text':' an output-only bias for each token.','line_number':659,'multiline':False]
['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':664,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert->RoFormer','line_number':673,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':698,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':699,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':797,'multiline':False]
['text':' past_key_values_length','line_number':878,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':886,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':887,'multiline':False]
['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':890,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':891,'multiline':False]
['text':' Prepare head mask if needed','line_number':901,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':902,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':903,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':904,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':905,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':956,'multiline':False]
['text':' -100 index = padding token','line_number':1011,'multiline':False]
['text':'  add a dummy token','line_number':1029,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1055,'multiline':False]
['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':1146,'multiline':False]
['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1168,'multiline':False]
['text':' cut decoder_input_ids if past_key_values is used','line_number':1172,'multiline':False]
['text':' Some generation methods already pass only the last input ID','line_number':1176,'multiline':False]
['text':' Default to old behavior: keep only final ID','line_number':1180,'multiline':False]
['text':' take <s> token (equiv. to [CLS])','line_number':1209,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1232,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1324,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1416,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1493,'multiline':False]
['text':' If we are on multi-GPU, split add a dimension','line_number':1547,'multiline':False]
['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1552,'multiline':False]
