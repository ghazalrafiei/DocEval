['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2023 Meta AI Team and the HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all X-MOD models at https://huggingface.co/models?filter=xmod','line_number':54,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaEmbeddings with Roberta->Xmod','line_number':58,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEmbeddings.__init__','line_number':64,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':71,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':72,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':75,'multiline':False]
['text':' End copy','line_number':84,'multiline':False]
['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':95,'multiline':False]
['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':107,'multiline':False]
['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':108,'multiline':False]
['text':' issue #5664','line_number':109,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaSelfAttention with Roberta->Xmod','line_number':148,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':193,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':194,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':195,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':199,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':220,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':221,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':222,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':223,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':224,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':225,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':226,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':229,'multiline':False]
['text':' fp16 compatibility','line_number':244,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in XmodModel forward() function)','line_number':256,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':259,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':262,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':263,'multiline':False]
['text':' Mask heads if we want to','line_number':266,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaSelfOutput.__init__','line_number':284,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaAttention.prune_heads','line_number':306,'multiline':False]
['text':' Prune linear layers','line_number':314,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':320,'multiline':False]
['text':' add attentions if we output them','line_number':350,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaIntermediate','line_number':354,'multiline':False]
['text':' Process subsequent samples with the same lang_id in parallel','line_number':412,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':465,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':476,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':481,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':491,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':503,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':505,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':523,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaPooler','line_number':634,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':642,'multiline':False]
['text':' to the first token.','line_number':643,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights','line_number':660,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':664,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':665,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertModel.__init__ with Bert->Xmod','line_number':796,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':806,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaModel.get_input_embeddings','line_number':809,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaModel.set_input_embeddings','line_number':813,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaModel._prune_heads','line_number':817,'multiline':False]
['text':' past_key_values_length','line_number':889,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':910,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':911,'multiline':False]
['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':914,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':915,'multiline':False]
['text':' Prepare head mask if needed','line_number':925,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':926,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':927,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':928,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':929,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForCausalLM.__init__ with Roberta->Xmod','line_number':975,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':985,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForCausalLM.get_output_embeddings','line_number':988,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForCausalLM.set_output_embeddings','line_number':992,'multiline':False]
['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':1085,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForCausalLM.prepare_inputs_for_generation','line_number':1104,'multiline':False]
['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1107,'multiline':False]
['text':' cut decoder_input_ids if past_key_values is used','line_number':1111,'multiline':False]
['text':' Some generation methods already pass only the last input ID','line_number':1115,'multiline':False]
['text':' Default to old behavior: keep only final ID','line_number':1119,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForCausalLM._reorder_cache','line_number':1126,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForMaskedLM.__init__ with Roberta->Xmod','line_number':1143,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1156,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForMaskedLM.get_output_embeddings','line_number':1159,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForMaskedLM.set_output_embeddings','line_number':1163,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaLMHead','line_number':1228,'multiline':False]
['text':' project back to size of vocabulary with bias','line_number':1246,'multiline':False]
['text':' To tie those two weights if they get disconnected (on TPU or when the bias is resized)','line_number':1252,'multiline':False]
['text':' For accelerate compatibility and to not break backward compatibility','line_number':1253,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForSequenceClassification.__init__ with Roberta->Xmod','line_number':1268,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1277,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForMultipleChoice.__init__ with Roberta->Xmod','line_number':1361,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1369,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForTokenClassification.__init__ with Roberta->Xmod','line_number':1450,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1462,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaClassificationHead','line_number':1521,'multiline':False]
['text':' take <s> token (equiv. to [CLS])','line_number':1535,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForQuestionAnswering.__init__ with Roberta->Xmod','line_number':1552,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1560,'multiline':False]
['text':' If we are on multi-GPU, split add a dimension','line_number':1613,'multiline':False]
['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1618,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.create_position_ids_from_input_ids','line_number':1641,'multiline':False]
['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':1652,'multiline':False]
