['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2023 The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' noqa E722','line_number':100,'multiline':False]
['text':' Do the tensor conversion in batch','line_number':108,'multiline':False]
['text':' List[List[Any]] -> List[List[Tensor]]','line_number':111,'multiline':False]
['text':' List[Any] -> List[Tensor]','line_number':114,'multiline':False]
['text':' Any -> Tensor','line_number':117,'multiline':False]
['text':' noqa','line_number':136,'multiline':False]
['text':' Check if the args are a device or a dtype','line_number':140,'multiline':False]
['text':' device should be always the first argument','line_number':142,'multiline':False]
['text':' The first argument is a dtype','line_number':145,'multiline':False]
['text':' it's something else','line_number':150,'multiline':False]
['text':' check if v is a floating point','line_number':154,'multiline':False]
['text':' cast and send to device','line_number':156,'multiline':False]
['text':' We cast only floating point tensors to avoid issues with tokenizers casting `LongTensor` to `FloatTensor`','line_number':163,'multiline':False]
['text':' Data structure is a list of lists','line_number':166,'multiline':False]
['text':' Data structure is a list','line_number':172,'multiline':False]
['text':' All transformations expect numpy arrays.','line_number':458,'multiline':False]
['text':' We assume that all images have the same channel dimension format.','line_number':468,'multiline':False]
['text':' scale_h is the same as scale_w','line_number':483,'multiline':False]
['text':' TODO refer to https://github.com/ArthurZucker/transformers/blob/0f0a3fe5ca5697ee58faeb5b53f049af720b5e98/src/transformers/models/vit_mae/modeling_vit_mae.py#L871','line_number':572,'multiline':False]
['text':' torch implementation is faster but does not handle non-squares','line_number':573,'multiline':False]
['text':' Only images that are present.','line_number':620,'multiline':False]
['text':' Image input ids for every subsequence, including ones with no image present.','line_number':623,'multiline':False]
['text':' The min() is required here due to floating point issues:','line_number':633,'multiline':False]
['text':' math.ceil(torch.tensor(300).cuda() / 30) == 11','line_number':634,'multiline':False]
['text':' Now terminate each line with |NEWLINE|.','line_number':654,'multiline':False]
['text':' Create image_patch_input_indices, where non-negative values correspond to image patches to be inserted in','line_number':674,'multiline':False]
['text':' the stream.','line_number':675,'multiline':False]
['text':' Indices of image patches.','line_number':684,'multiline':False]
['text':' Place those indices in the image input ids token stream, with -1 representing non-index tokens.','line_number':691,'multiline':False]
