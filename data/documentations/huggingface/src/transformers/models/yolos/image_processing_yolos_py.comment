['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' noqa: F401','line_number':40,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.get_max_height_width','line_number':84,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.get_size_with_aspect_ratio','line_number':103,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.get_resize_output_image_size','line_number':135,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.get_numpy_to_framework_fn','line_number':164,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.safe_squeeze','line_number':189,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.normalize_annotation','line_number':203,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.max_across_indices','line_number':218,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.make_pixel_mask','line_number':226,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.convert_coco_poly_to_mask','line_number':245,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.prepare_coco_detection_annotation','line_number':280,'multiline':False]
['text':' Get all COCO annotations for the given image.','line_number':295,'multiline':False]
['text':' for conversion to coco api','line_number':302,'multiline':False]
['text':' guard against no boxes via resizing','line_number':307,'multiline':False]
['text':' Converting the filtered keypoints list to a numpy array','line_number':325,'multiline':False]
['text':' Apply the keep mask here to filter the relevant annotations','line_number':327,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.masks_to_boxes','line_number':341,'multiline':False]
['text':' see https://github.com/pytorch/pytorch/issues/50276','line_number':358,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.prepare_coco_panoptic_annotation with DETR->YOLOS','line_number':376,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.get_segmentation_image','line_number':418,'multiline':False]
['text':' We didn't detect any mask :(','line_number':428,'multiline':False]
['text':' Merge the masks corresponding to the same stuff class','line_number':434,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.get_mask_area','line_number':444,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.score_labels_from_class_probabilities','line_number':454,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.resize_annotation','line_number':463,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.binary_mask_to_rle','line_number':515,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.convert_segmentation_to_rle','line_number':538,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.remove_low_and_no_objects','line_number':560,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.check_segment_validity','line_number':589,'multiline':False]
['text':' Get the mask associated with the k class','line_number':591,'multiline':False]
['text':' Compute the area of all the stuff in query k','line_number':595,'multiline':False]
['text':' Eliminate disconnected tiny segments','line_number':599,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.compute_segments','line_number':608,'multiline':False]
['text':' Weigh each mask by its prediction score','line_number':631,'multiline':False]
['text':' [height, width]','line_number':633,'multiline':False]
['text':' Keep track of instances of each class','line_number':635,'multiline':False]
['text':' Check if mask exists and large enough to be a segment','line_number':641,'multiline':False]
['text':' Add current object segment to final segmentation map','line_number':652,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.from_dict with Detr->Yolos','line_number':748,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.prepare_annotation','line_number':762,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.prepare','line_number':795,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.convert_coco_poly_to_mask','line_number':805,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.prepare_coco_detection with DETR->Yolos','line_number':810,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.prepare_coco_panoptic','line_number':815,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.resize','line_number':820,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.resize_annotation','line_number':873,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.rescale','line_number':887,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.normalize_annotation','line_number':916,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor._pad_image','line_number':924,'multiline':False]
['text':' PILImageResampling','line_number':1015,'multiline':False]
['text':' All transformations expect numpy arrays','line_number':1146,'multiline':False]
['text':' We assume that all images have the same channel dimension format.','line_number':1156,'multiline':False]
['text':' prepare (COCO annotations as a list of Dict -> DETR target as a single Dict per image)','line_number':1159,'multiline':False]
['text':' transformations','line_number':1178,'multiline':False]
['text':' POSTPROCESSING METHODS - TODO: add support for other frameworks','line_number':1231,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.post_process  with Detr->Yolos','line_number':1232,'multiline':False]
['text':' convert to [x0, y0, x1, y1] format','line_number':1264,'multiline':False]
['text':' and from relative [0, 1] to absolute [0, height] coordinates','line_number':1266,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.post_process_object_detection with Detr->Yolos','line_number':1274,'multiline':False]
['text':' Convert to [x0, y0, x1, y1] format','line_number':1305,'multiline':False]
['text':' Convert from relative [0, 1] to absolute [0, height] coordinates','line_number':1308,'multiline':False]
