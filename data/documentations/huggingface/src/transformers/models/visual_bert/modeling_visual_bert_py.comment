['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2021 The UCLA NLP Authors and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all VisualBERT models at https://huggingface.co/models?filter=visual_bert','line_number':61,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':74,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':75,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':80,'multiline':False]
['text':' For Visual Features','line_number':85,'multiline':False]
['text':' Token type and position embedding for image features','line_number':86,'multiline':False]
['text':' Absolute Position Embeddings','line_number':130,'multiline':False]
['text':' image_text_alignment = Batch x image_length x alignment_number.','line_number':144,'multiline':False]
['text':' Each element denotes the position of the word corresponding to the image feature. -1 is the padding value.','line_number':145,'multiline':False]
['text':' Get rid of the -1.','line_number':149,'multiline':False]
['text':' Batch x image_length x alignment length x dim','line_number':152,'multiline':False]
['text':' We want to averge along the alignment_number dimension.','line_number':157,'multiline':False]
['text':' Avoid divide by zero error','line_number':161,'multiline':False]
['text':' When fine-tuning the detector , the image_text_alignment is sometimes padded too long.','line_number':172,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':237,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in VisualBertSelfAttentionModel forward() function)','line_number':242,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':245,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':248,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':249,'multiline':False]
['text':' Mask heads if we want to','line_number':252,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->VisualBert','line_number':267,'multiline':False]
['text':' Prune linear layers','line_number':296,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':302,'multiline':False]
['text':' add attentions if we output them','line_number':321,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->VisualBert','line_number':325,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->VisualBert','line_number':341,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':380,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPooler with Bert->VisualBert','line_number':453,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':461,'multiline':False]
['text':' to the first token.','line_number':462,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert->VisualBert','line_number':469,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert->VisualBert','line_number':487,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':493,'multiline':False]
['text':' an output-only bias for each token.','line_number':494,'multiline':False]
['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':499,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainingHeads with Bert->VisualBert','line_number':508,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':534,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':535,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':690,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':785,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':786,'multiline':False]
['text':' Prepare head mask if needed','line_number':798,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':799,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':800,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':801,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':802,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':874,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1024,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1178,'multiline':False]
['text':' Get the index of the last text token','line_number':1239,'multiline':False]
['text':' as in original code','line_number':1240,'multiline':False]
['text':' TO-CHECK: From the original code','line_number':1260,'multiline':False]
['text':' 2','line_number':1302,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1304,'multiline':False]
['text':' sequence_output = outputs[0]','line_number':1381,'multiline':False]
['text':' config.num_attention_heads','line_number':1412,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1466,'multiline':False]
['text':' Make the -1 become 0','line_number':1558,'multiline':False]
['text':' Selected_positions = batch x selected position x dim','line_number':1561,'multiline':False]
['text':' Visual Features = batch x visual_feature_length x dim','line_number':1567,'multiline':False]
['text':' This will need separate image and visual masks.','line_number':1568,'multiline':False]
['text':' scores = batch x selected position x visual_feature','line_number':1582,'multiline':False]
['text':' scores = selected_positions.bmm(visual_features.transpose(1,2))','line_number':1583,'multiline':False]
['text':' label = batch x selected_postion x needed position','line_number':1584,'multiline':False]
