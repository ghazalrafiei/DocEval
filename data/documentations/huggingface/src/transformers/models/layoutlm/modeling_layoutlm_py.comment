['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2018 The Microsoft Research Asia LayoutLM Team Authors and the HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->LayoutLM','line_number':131,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':176,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':177,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':178,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':182,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':203,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':204,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':205,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':206,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':207,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':208,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':209,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':212,'multiline':False]
['text':' fp16 compatibility','line_number':227,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in LayoutLMModel forward() function)','line_number':239,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':242,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':245,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':246,'multiline':False]
['text':' Mask heads if we want to','line_number':249,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->LayoutLM','line_number':266,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertAttention with Bert->LayoutLM','line_number':281,'multiline':False]
['text':' Prune linear layers','line_number':296,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':302,'multiline':False]
['text':' add attentions if we output them','line_number':327,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate','line_number':331,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->LayoutLM','line_number':347,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLayer with Bert->LayoutLM','line_number':362,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':388,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':399,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':404,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':414,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':426,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':428,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':437,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder with Bert->LayoutLM','line_number':449,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPooler','line_number':543,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':551,'multiline':False]
['text':' to the first token.','line_number':552,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert->LayoutLM','line_number':559,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert->LayoutLM','line_number':577,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':583,'multiline':False]
['text':' an output-only bias for each token.','line_number':584,'multiline':False]
['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':589,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert->LayoutLM','line_number':598,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':623,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':624,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':712,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':861,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':991,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1128,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1246,'multiline':False]
['text':' If we are on multi-GPU, split add a dimension','line_number':1346,'multiline':False]
['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1351,'multiline':False]
