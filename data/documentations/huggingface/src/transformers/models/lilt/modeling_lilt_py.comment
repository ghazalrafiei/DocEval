['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all LiLT models at https://huggingface.co/models?filter=lilt','line_number':45,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':56,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':57,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':61,'multiline':False]
['text':' End copy','line_number':67,'multiline':False]
['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':82,'multiline':False]
['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':117,'multiline':False]
['text':' we divide the hidden_size by 6 here as there are 6 different layout embeddings,','line_number':141,'multiline':False]
['text':' namely left_position, upper_position, right_position, lower_position, height, width','line_number':142,'multiline':False]
['text':' fp16 compatibility','line_number':263,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in BertModel forward() function)','line_number':281,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':284,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':287,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':288,'multiline':False]
['text':' Mask heads if we want to','line_number':291,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in RobertaModel forward() function)','line_number':302,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':305,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':308,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':309,'multiline':False]
['text':' Mask heads if we want to','line_number':312,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput','line_number':331,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertAttention.prune_heads','line_number':358,'multiline':False]
['text':' Prune linear layers','line_number':366,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':372,'multiline':False]
['text':' add attentions if we output them','line_number':394,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate','line_number':398,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOutput','line_number':414,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':465,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLayer.feed_forward_chunk','line_number':477,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder.__init__ with Bert->Lilt','line_number':490,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPooler','line_number':560,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':568,'multiline':False]
['text':' to the first token.','line_number':569,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights','line_number':587,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':591,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':592,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':692,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':780,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':781,'multiline':False]
['text':' Prepare head mask if needed','line_number':784,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':785,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':786,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':787,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':788,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForSequenceClassification.__init__ with Roberta->Lilt, roberta->lilt','line_number':831,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':840,'multiline':False]
['text':' move labels to correct device to enable model parallelism','line_number':906,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForTokenClassification.__init__ with Roberta->Lilt, roberta->lilt','line_number':949,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':961,'multiline':False]
['text':' move labels to correct device to enable model parallelism','line_number':1027,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaClassificationHead with Roberta->Lilt','line_number':1044,'multiline':False]
['text':' take <s> token (equiv. to [CLS])','line_number':1058,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForQuestionAnswering.__init__ with Roberta->Lilt, roberta->lilt','line_number':1075,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1083,'multiline':False]
['text':' If we are on multi-GPU, split add a dimension','line_number':1163,'multiline':False]
['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1168,'multiline':False]
