['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' noqa: F401','line_number':38,'multiline':False]
['text':' pylint: disable=invalid-name','line_number':75,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.get_size_with_aspect_ratio','line_number':80,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.get_resize_output_image_size','line_number':112,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.get_numpy_to_framework_fn','line_number':141,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.safe_squeeze','line_number':166,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.normalize_annotation','line_number':180,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.max_across_indices','line_number':195,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.get_max_height_width','line_number':203,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.make_pixel_mask','line_number':222,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.convert_coco_poly_to_mask','line_number':241,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.prepare_coco_detection_annotation with DETR->DETA','line_number':276,'multiline':False]
['text':' Get all COCO annotations for the given image.','line_number':291,'multiline':False]
['text':' for conversion to coco api','line_number':298,'multiline':False]
['text':' guard against no boxes via resizing','line_number':303,'multiline':False]
['text':' Converting the filtered keypoints list to a numpy array','line_number':321,'multiline':False]
['text':' Apply the keep mask here to filter the relevant annotations','line_number':323,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.masks_to_boxes','line_number':337,'multiline':False]
['text':' see https://github.com/pytorch/pytorch/issues/50276','line_number':354,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.prepare_coco_panoptic_annotation with DETR->DETA','line_number':372,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.resize_annotation','line_number':414,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.prepare_annotation with DETR->DETA','line_number':535,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.prepare','line_number':568,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.convert_coco_poly_to_mask','line_number':578,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.prepare_coco_detection','line_number':583,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.prepare_coco_panoptic','line_number':588,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.resize_annotation','line_number':637,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.rescale','line_number':651,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.normalize_annotation','line_number':680,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor._pad_image','line_number':688,'multiline':False]
['text':' Copied from transformers.models.detr.image_processing_detr.DetrImageProcessor.pad','line_number':716,'multiline':False]
['text':' PILImageResampling','line_number':780,'multiline':False]
['text':' All transformations expect numpy arrays','line_number':906,'multiline':False]
['text':' We assume that all images have the same channel dimension format.','line_number':916,'multiline':False]
['text':' prepare (COCO annotations as a list of Dict -> DETR target as a single Dict per image)','line_number':919,'multiline':False]
['text':' transformations','line_number':938,'multiline':False]
['text':' Pads images and returns their mask: {'pixel_values': ..., 'pixel_mask': ...}','line_number':975,'multiline':False]
['text':' and from relative [0, 1] to absolute [0, height] coordinates','line_number':1039,'multiline':False]
['text':' apply NMS','line_number':1061,'multiline':False]
