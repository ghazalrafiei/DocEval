['text':'###################################################################################################','line_number':1,'multiline':False]
['text':' Copyright (c) 2021-, NVIDIA CORPORATION.  All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':'###################################################################################################','line_number':17,'multiline':False]
['text':'','line_number':19,'multiline':False]
['text':' Note: If when running this conversion script you're getting an exception:','line_number':20,'multiline':False]
['text':'     ModuleNotFoundError: No module named 'megatron.model.enums'','line_number':21,'multiline':False]
['text':' you need to tell python where to find the clone of Megatron-LM, e.g.:','line_number':22,'multiline':False]
['text':'','line_number':23,'multiline':False]
['text':' cd /tmp','line_number':24,'multiline':False]
['text':' git clone https://github.com/NVIDIA/Megatron-LM','line_number':25,'multiline':False]
['text':' PYTHONPATH=/tmp/Megatron-LM python src/transformers/models/megatron_gpt2/convert_megatron_gpt2_checkpoint.py ...','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' if you already have it cloned elsewhere, simply adjust the path to the existing path','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':' If the training was done using a Megatron-LM fork, e.g.,','line_number':30,'multiline':False]
['text':' https://github.com/microsoft/Megatron-DeepSpeed/ then chances are that you need to have that one','line_number':31,'multiline':False]
['text':' in your path, i.e., /path/to/Megatron-DeepSpeed/','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':'###################################################################################################','line_number':45,'multiline':False]
['text':' Format the message.','line_number':49,'multiline':False]
['text':' Print and recurse (if needed).','line_number':56,'multiline':False]
['text':' Permutes layout of param tensor to [num_splits * num_heads * hidden_size, :]','line_number':69,'multiline':False]
['text':' for compatibility with later versions of NVIDIA Megatron-LM.','line_number':70,'multiline':False]
['text':' The inverse operation is performed inside Megatron-LM to read checkpoints:','line_number':71,'multiline':False]
['text':' https://github.com/NVIDIA/Megatron-LM/blob/v2.4/megatron/checkpointing.py#L209','line_number':72,'multiline':False]
['text':' If param is the weight tensor of the self-attention block, the returned tensor','line_number':73,'multiline':False]
['text':' will have to be transposed one more time to be read by HuggingFace GPT2.','line_number':74,'multiline':False]
['text':' version 1.0 stores [num_heads * hidden_size * num_splits, :]','line_number':77,'multiline':False]
['text':' other versions store [num_heads * num_splits * hidden_size, :]','line_number':83,'multiline':False]
['text':'###################################################################################################','line_number':91,'multiline':False]
['text':' The converted output model.','line_number':95,'multiline':False]
['text':' old versions did not store training args','line_number':98,'multiline':False]
['text':' do not make the user write a config file when the exact dimensions/sizes are already in the checkpoint','line_number':101,'multiline':False]
['text':' from pprint import pprint','line_number':102,'multiline':False]
['text':' pprint(vars(ds_args))','line_number':103,'multiline':False]
['text':' pprint(config)','line_number':111,'multiline':False]
['text':' The number of heads.','line_number':113,'multiline':False]
['text':' The hidden_size per head.','line_number':115,'multiline':False]
['text':' Megatron-LM checkpoint version','line_number':117,'multiline':False]
['text':' The model.','line_number':123,'multiline':False]
['text':' The language model.','line_number':125,'multiline':False]
['text':' The embeddings.','line_number':127,'multiline':False]
['text':' The word embeddings.','line_number':130,'multiline':False]
['text':' Truncate the embedding table to vocab_size rows.','line_number':132,'multiline':False]
['text':' The position embeddings.','line_number':136,'multiline':False]
['text':' Read the causal mask dimension (seqlen). [max_sequence_length, hidden_size]','line_number':138,'multiline':False]
['text':' Store the position embeddings.','line_number':144,'multiline':False]
['text':' The transformer.','line_number':147,'multiline':False]
['text':' The regex to extract layer names.','line_number':150,'multiline':False]
['text':' The simple map of names for "automated" rules.','line_number':153,'multiline':False]
['text':' Extract the layers.','line_number':161,'multiline':False]
['text':' Match the name.','line_number':163,'multiline':False]
['text':' Stop if that's not a layer','line_number':166,'multiline':False]
['text':' The index of the layer.','line_number':170,'multiline':False]
['text':' The name of the operation.','line_number':172,'multiline':False]
['text':' Is it a weight or a bias?','line_number':174,'multiline':False]
['text':' The name of the layer.','line_number':177,'multiline':False]
['text':' For layernorm(s), simply store the layer norm.','line_number':180,'multiline':False]
['text':' Transpose the QKV matrix.','line_number':185,'multiline':False]
['text':' Insert a tensor of 1x1xDxD bias.','line_number':189,'multiline':False]
['text':' Insert a "dummy" tensor for masked_bias.','line_number':195,'multiline':False]
['text':' Megatron stores (3*D) x D but transformers-GPT2 expects D x 3*D.','line_number':200,'multiline':False]
['text':' Store.','line_number':202,'multiline':False]
['text':' Transpose the bias.','line_number':205,'multiline':False]
['text':' Store. No change of shape.','line_number':210,'multiline':False]
['text':' Transpose the weights.','line_number':213,'multiline':False]
['text':' Copy the bias.','line_number':218,'multiline':False]
['text':' DEBUG.','line_number':223,'multiline':False]
['text':' The final layernorm.','line_number':226,'multiline':False]
['text':' For LM head, transformers' wants the matrix to weight embeddings.','line_number':230,'multiline':False]
['text':' It should be done!','line_number':233,'multiline':False]
['text':'###################################################################################################','line_number':237,'multiline':False]
['text':' Create the argument parser.','line_number':241,'multiline':False]
['text':' Extract the basename.','line_number':257,'multiline':False]
['text':' Load the model.','line_number':260,'multiline':False]
['text':' the .zip is very optional, let's keep it for backward compatibility','line_number':261,'multiline':False]
['text':' Read the config, or default to the model released by NVIDIA.','line_number':272,'multiline':False]
['text':' in the very early days this used to be "gelu_new"','line_number':282,'multiline':False]
['text':' Spell out all parameters in case the defaults change.','line_number':285,'multiline':False]
['text':' Convert.','line_number':314,'multiline':False]
['text':' Print the structure of converted state dict.','line_number':318,'multiline':False]
['text':' Add tokenizer class info to config','line_number':322,'multiline':False]
['text':' see https://github.com/huggingface/transformers/issues/13906)','line_number':323,'multiline':False]
['text':' Store the config to file.','line_number':339,'multiline':False]
['text':' Save tokenizer based on args','line_number':343,'multiline':False]
['text':' Store the state_dict to file.','line_number':347,'multiline':False]
['text':'###################################################################################################','line_number':353,'multiline':False]
['text':'###################################################################################################','line_number':358,'multiline':False]
