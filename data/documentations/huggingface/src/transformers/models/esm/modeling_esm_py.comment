['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 Meta and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' This is not a complete list of all ESM models!','line_number':46,'multiline':False]
['text':' See all ESM models at https://huggingface.co/models?filter=esm','line_number':47,'multiline':False]
['text':' in-place to reduce memory','line_number':82,'multiline':False]
['text':' Generate and save the inverse frequency buffer (non trainable)','line_number':96,'multiline':False]
['text':' Reset the tables if the sequence length has changed,','line_number':108,'multiline':False]
['text':' or if we're on a new device (possibly due to tracing for instance)','line_number':109,'multiline':False]
['text':' remove eos token attentions','line_number':146,'multiline':False]
['text':' remove cls token attentions','line_number':151,'multiline':False]
['text':' features: batch x channels x tokens x tokens (symmetric)','line_number':156,'multiline':False]
['text':' attentions always float32, may need to convert to float16','line_number':159,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':179,'multiline':False]
['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':197,'multiline':False]
['text':' Note that if we want to support ESM-1 (not 1b!) in future then we need to support an','line_number':205,'multiline':False]
['text':' embedding_scale factor here.','line_number':206,'multiline':False]
['text':' Matt: ESM has the option to handle masking in MLM in a slightly unusual way. If the token_dropout','line_number':209,'multiline':False]
['text':' flag is False then it is handled in the same was as BERT/RoBERTa. If it is set to True, however,','line_number':210,'multiline':False]
['text':' masked tokens are treated as if they were selected for input dropout and zeroed out.','line_number':211,'multiline':False]
['text':' This "mask-dropout" is compensated for when masked tokens are not present, by scaling embeddings by','line_number':212,'multiline':False]
['text':' a factor of (fraction of unmasked tokens during training) / (fraction of unmasked tokens in sample).','line_number':213,'multiline':False]
['text':' This is analogous to the way that dropout layers scale down outputs during evaluation when not','line_number':214,'multiline':False]
['text':' actually dropping out values (or, equivalently, scale up their un-dropped outputs in training).','line_number':215,'multiline':False]
['text':' Hardcoded as the ratio used in all ESM model training runs','line_number':218,'multiline':False]
['text':' Matt: I think this line was copied incorrectly from BERT, disabling it for now.','line_number':233,'multiline':False]
['text':' embeddings = self.dropout(embeddings)','line_number':234,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':302,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':303,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':304,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':308,'multiline':False]
['text':' Matt: Our BERT model (which this code was derived from) scales attention logits down by sqrt(head_dim).','line_number':327,'multiline':False]
['text':' ESM scales the query down by the same factor instead. Modulo numerical stability these are equivalent,','line_number':328,'multiline':False]
['text':' but not when rotary embeddings get involved. Therefore, we scale the query here to match the original','line_number':329,'multiline':False]
['text':' ESM code and fix rotary embeddings.','line_number':330,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':334,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':335,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':336,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':337,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':338,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':339,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':340,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':346,'multiline':False]
['text':' fp16 compatibility','line_number':355,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in EsmModel forward() function)','line_number':366,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':369,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':372,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':373,'multiline':False]
['text':' Mask heads if we want to','line_number':376,'multiline':False]
['text':' Prune linear layers','line_number':421,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':427,'multiline':False]
['text':' add attentions if we output them','line_number':453,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':507,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':518,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':523,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':533,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':545,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':547,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':555,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPooler','line_number':664,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':672,'multiline':False]
['text':' to the first token.','line_number':673,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights','line_number':691,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':695,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':696,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':797,'multiline':False]
['text':' past_key_values_length','line_number':879,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':885,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':886,'multiline':False]
['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':889,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':890,'multiline':False]
['text':' Prepare head mask if needed','line_number':900,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':901,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':902,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':903,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':904,'multiline':False]
['text':' Matches the original model layout','line_number':943,'multiline':False]
['text':' In the original model, attentions for padding tokens are completely zeroed out.','line_number':944,'multiline':False]
['text':' This makes no difference most of the time because the other tokens won't attend to them,','line_number':945,'multiline':False]
['text':' but it does for the contact prediction task, which takes attentions as input,','line_number':946,'multiline':False]
['text':' so we have to mimic that here.','line_number':947,'multiline':False]
['text':' project back to size of vocabulary with bias','line_number':1061,'multiline':False]
['text':' take <s> token (equiv. to [CLS])','line_number':1247,'multiline':False]
['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':1266,'multiline':False]
