['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 Meta and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' This is not a complete list of all ESM models!','line_number':59,'multiline':False]
['text':' See all ESM models at https://huggingface.co/models?filter=esm','line_number':60,'multiline':False]
['text':' Transposes last two dimensions only','line_number':78,'multiline':False]
['text':' Matt: The PyTorch version of this layer does a lot of work to cache values, but we just rely on TF compilation','line_number':102,'multiline':False]
['text':' and/or XLA to sort out constants like that. It actually may not seem like this layer needs to be stateful at','line_number':103,'multiline':False]
['text':' all when we benefit from TF compilation, but it does. The reason is that self.inv_freq is a buffer in the','line_number':104,'multiline':False]
['text':' original implementation, but all the shared ESM checkpoints were trained with fp16 params. This means that','line_number':105,'multiline':False]
['text':' the inv_freq tensor was stored as a float16, and we need to replicate those lower-precision values or our','line_number':106,'multiline':False]
['text':' models give different outputs from the original.','line_number':107,'multiline':False]
['text':' Outer multiplication','line_number':123,'multiline':False]
['text':' remove eos token attentions','line_number':161,'multiline':False]
['text':' remove cls token attentions','line_number':166,'multiline':False]
['text':' features: batch x channels x tokens x tokens (symmetric)','line_number':171,'multiline':False]
['text':' Matt: I think this line was copied incorrectly from BERT, disabling for now','line_number':201,'multiline':False]
['text':' self.dropout = Dropout(config.hidden_dropout_prob)','line_number':202,'multiline':False]
['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':217,'multiline':False]
['text':' Note that if we want to support ESM-1 (not 1b!) in future then we need to support an','line_number':226,'multiline':False]
['text':' embedding_scale factor here.','line_number':227,'multiline':False]
['text':' Matt: ESM has the option to handle masking in MLM in a slightly unusual way. If the token_dropout','line_number':230,'multiline':False]
['text':' flag is False then it is handled in the same was as BERT/RoBERTa. If it is set to True, however,','line_number':231,'multiline':False]
['text':' masked tokens are treated as if they were selected for input dropout and zeroed out.','line_number':232,'multiline':False]
['text':' This "mask-dropout" is compensated for when masked tokens are not present, by scaling embeddings by','line_number':233,'multiline':False]
['text':' a factor of (fraction of unmasked tokens during training) / (fraction of unmasked tokens in sample).','line_number':234,'multiline':False]
['text':' This is analogous to the way that dropout layers scale down outputs during evaluation when not','line_number':235,'multiline':False]
['text':' actually dropping out values (or, equivalently, scale up their un-dropped outputs in training).','line_number':236,'multiline':False]
['text':' Hardcoded as the ratio used in all ESM model training runs','line_number':239,'multiline':False]
['text':' Matt: I think this line was copied incorrectly from BERT, disabling it for now.','line_number':253,'multiline':False]
['text':' embeddings = self.dropout(embeddings)','line_number':254,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':346,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':347,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':348,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':352,'multiline':False]
['text':' Matt: Our BERT model (which this code was derived from) scales attention logits down by sqrt(head_dim).','line_number':371,'multiline':False]
['text':' ESM scales the query down by the same factor instead. Modulo numerical stability these are equivalent,','line_number':372,'multiline':False]
['text':' but not when rotary embeddings get involved. Therefore, we scale the query here to match the original','line_number':373,'multiline':False]
['text':' ESM code and fix rotary embeddings.','line_number':374,'multiline':False]
['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':378,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':379,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':380,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':381,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':382,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':383,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':384,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':390,'multiline':False]
['text':' fp16 compatibility','line_number':399,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in EsmModel forward() function)','line_number':410,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':413,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':416,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':417,'multiline':False]
['text':' Mask heads if we want to','line_number':420,'multiline':False]
['text':' add attentions if we output them','line_number':513,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':608,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':620,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':625,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':635,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':648,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':650,'multiline':False]
['text':' add attentions if we output them','line_number':659,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':661,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPooler with Bert->Esm','line_number':776,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':790,'multiline':False]
['text':' to the first token.','line_number':791,'multiline':False]
['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':981,'multiline':False]
['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':982,'multiline':False]
['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':983,'multiline':False]
['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':984,'multiline':False]
['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':985,'multiline':False]
['text':' Copied from `modeling_tf_t5.py`','line_number':989,'multiline':False]
['text':' Provided a padding mask of dimensions [batch_size, mask_seq_length]','line_number':990,'multiline':False]
['text':' - if the model is a decoder, apply a causal mask in addition to the padding mask','line_number':991,'multiline':False]
['text':' - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':992,'multiline':False]
['text':' attention_mask needs to be sliced to the shape `[batch_size, 1, from_seq_length - cached_seq_length, to_seq_length]','line_number':1006,'multiline':False]
['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':1013,'multiline':False]
['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':1014,'multiline':False]
['text':' positions we want to attend and -10000.0 for masked positions.','line_number':1015,'multiline':False]
['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':1016,'multiline':False]
['text':' effectively the same as removing these entirely.','line_number':1017,'multiline':False]
['text':' Copied from `modeling_tf_t5.py` with -1e9 -> -10000','line_number':1023,'multiline':False]
['text':' If a 2D ou 3D attention mask is provided for the cross-attention','line_number':1025,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':1026,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':1027,'multiline':False]
['text':' T5 has a mask that can compare sequence ids, we can simulate this here with this transposition','line_number':1035,'multiline':False]
['text':' Cf. https://github.com/tensorflow/mesh/blob/8d2465e9bc93129b913b5ccc6a59aa97abd96ec6/mesh_tensorflow/transformer/transformer_layers.py#L270','line_number':1036,'multiline':False]
['text':' encoder_extended_attention_mask = tf.math.equal(encoder_extended_attention_mask,','line_number':1037,'multiline':False]
['text':'                                         tf.transpose(encoder_extended_attention_mask, perm=(-1, -2)))','line_number':1038,'multiline':False]
['text':' Prepare head mask if needed','line_number':1044,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':1045,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':1046,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':1047,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':1048,'multiline':False]
['text':' Matches the original model layout','line_number':1088,'multiline':False]
['text':' In the original model, attentions for padding tokens are completely zeroed out.','line_number':1089,'multiline':False]
['text':' This makes no difference most of the time because the other tokens won't attend to them,','line_number':1090,'multiline':False]
['text':' but it does for the contact prediction task, which takes attentions as input,','line_number':1091,'multiline':False]
['text':' so we have to mimic that here.','line_number':1092,'multiline':False]
['text':' Ensure word embeddings are built so that we actually have something to tie','line_number':1198,'multiline':False]
['text':' Separate bias to match the PT model and allow weight cross-loading to work','line_number':1313,'multiline':False]
['text':' Put it in the build so it gets the right name when adding it as a weight','line_number':1314,'multiline':False]
['text':' project back to size of vocabulary with bias','line_number':1337,'multiline':False]
['text':' take <s> token (equiv. to [CLS])','line_number':1539,'multiline':False]
['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':1568,'multiline':False]
