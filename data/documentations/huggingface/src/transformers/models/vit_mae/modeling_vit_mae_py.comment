['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 Facebook AI and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all ViTMAE models at https://huggingface.co/models?filter=vit_mae','line_number':50,'multiline':False]
['text':' here w goes first','line_number':156,'multiline':False]
['text':' use half of dimensions to encode grid_h','line_number':170,'multiline':False]
['text':' (H*W, D/2)','line_number':171,'multiline':False]
['text':' (H*W, D/2)','line_number':172,'multiline':False]
['text':' (H*W, D)','line_number':174,'multiline':False]
['text':' (D/2,)','line_number':187,'multiline':False]
['text':' (M,)','line_number':189,'multiline':False]
['text':' (M, D/2), outer product','line_number':190,'multiline':False]
['text':' (M, D/2)','line_number':192,'multiline':False]
['text':' (M, D/2)','line_number':193,'multiline':False]
['text':' (M, D)','line_number':195,'multiline':False]
['text':' fixed sin-cos embedding','line_number':211,'multiline':False]
['text':' initialize (and freeze) position embeddings by sin-cos embedding','line_number':219,'multiline':False]
['text':' initialize patch_embeddings like nn.Linear (instead of nn.Conv2d)','line_number':225,'multiline':False]
['text':' timm's trunc_normal_(std=.02) is effectively normal_(std=0.02) as cutoff is too big (2.)','line_number':229,'multiline':False]
['text':' noise in [0, 1]','line_number':246,'multiline':False]
['text':' sort noise for each sample','line_number':248,'multiline':False]
['text':' ascend: small is keep, large is remove','line_number':249,'multiline':False]
['text':' keep the first subset','line_number':252,'multiline':False]
['text':' generate the binary mask: 0 is keep, 1 is remove','line_number':256,'multiline':False]
['text':' unshuffle to get the binary mask','line_number':259,'multiline':False]
['text':' add position embeddings w/o cls token','line_number':268,'multiline':False]
['text':' masking: length -> length * config.mask_ratio','line_number':271,'multiline':False]
['text':' append cls token','line_number':274,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_vit.ViTSelfAttention ViT->ViTMAE','line_number':317,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':351,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':356,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':359,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':360,'multiline':False]
['text':' Mask heads if we want to','line_number':363,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_vit.ViTSelfOutput with ViT->ViTMAE','line_number':378,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_vit.ViTAttention with ViT->ViTMAE','line_number':397,'multiline':False]
['text':' Prune linear layers','line_number':412,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':418,'multiline':False]
['text':' add attentions if we output them','line_number':433,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_vit.ViTIntermediate ViT->ViTMAE','line_number':437,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_vit.ViTOutput ViT->ViTMAE','line_number':454,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_vit.ViTLayer with ViT->ViTMAE','line_number':470,'multiline':False]
['text':' in ViTMAE, layernorm is applied before self-attention','line_number':491,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':496,'multiline':False]
['text':' first residual connection','line_number':498,'multiline':False]
['text':' in ViTMAE, layernorm is also applied after self-attention','line_number':501,'multiline':False]
['text':' second residual connection is done here','line_number':505,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_vit.ViTEncoder with ViT->ViTMAE','line_number':513,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':579,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':580,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':637,'multiline':False]
['text':' Prepare head mask if needed','line_number':691,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':692,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':693,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':694,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':695,'multiline':False]
['text':' fixed sin-cos embedding','line_number':729,'multiline':False]
['text':' encoder to decoder','line_number':743,'multiline':False]
['text':' initialize (and freeze) position embeddings by sin-cos embedding','line_number':749,'multiline':False]
['text':' timm's trunc_normal_(std=.02) is effectively normal_(std=0.02) as cutoff is too big (2.)','line_number':755,'multiline':False]
['text':' embed tokens','line_number':766,'multiline':False]
['text':' append mask tokens to sequence','line_number':769,'multiline':False]
['text':' no cls token','line_number':771,'multiline':False]
['text':' unshuffle','line_number':772,'multiline':False]
['text':' append cls token','line_number':773,'multiline':False]
['text':' add pos embed','line_number':775,'multiline':False]
['text':' apply Transformer layers (blocks)','line_number':778,'multiline':False]
['text':' predictor projection','line_number':805,'multiline':False]
['text':' remove cls token','line_number':808,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':841,'multiline':False]
['text':' sanity checks','line_number':866,'multiline':False]
['text':' patchify','line_number':874,'multiline':False]
['text':' sanity check','line_number':898,'multiline':False]
['text':' unpatchify','line_number':902,'multiline':False]
['text':' [N, L], mean loss per patch','line_number':941,'multiline':False]
['text':' mean loss on removed patches','line_number':943,'multiline':False]
['text':' shape (batch_size, num_patches, patch_size*patch_size*num_channels)','line_number':995,'multiline':False]
