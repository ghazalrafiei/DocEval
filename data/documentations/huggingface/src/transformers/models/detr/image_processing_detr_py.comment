['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' noqa: F401','line_number':41,'multiline':False]
['text':' pylint: disable=invalid-name','line_number':81,'multiline':False]
['text':' Copied from transformers.models.vilt.image_processing_vilt.max_across_indices','line_number':196,'multiline':False]
['text':' Copied from transformers.models.vilt.image_processing_vilt.get_max_height_width','line_number':204,'multiline':False]
['text':' Copied from transformers.models.vilt.image_processing_vilt.make_pixel_mask','line_number':223,'multiline':False]
['text':' inspired by https://github.com/facebookresearch/detr/blob/master/datasets/coco.py#L33','line_number':242,'multiline':False]
['text':' inspired by https://github.com/facebookresearch/detr/blob/master/datasets/coco.py#L50','line_number':277,'multiline':False]
['text':' Get all COCO annotations for the given image.','line_number':292,'multiline':False]
['text':' for conversion to coco api','line_number':299,'multiline':False]
['text':' guard against no boxes via resizing','line_number':304,'multiline':False]
['text':' Converting the filtered keypoints list to a numpy array','line_number':322,'multiline':False]
['text':' Apply the keep mask here to filter the relevant annotations','line_number':324,'multiline':False]
['text':' see https://github.com/pytorch/pytorch/issues/50276','line_number':354,'multiline':False]
['text':' We didn't detect any mask :(','line_number':422,'multiline':False]
['text':' Merge the masks corresponding to the same stuff class','line_number':428,'multiline':False]
['text':' we filter empty queries and detection below threshold','line_number':486,'multiline':False]
['text':' It may be that we have several predicted masks for the same stuff class.','line_number':502,'multiline':False]
['text':' In the following, we track the list of masks ids for each stuff class (they are merged later on)','line_number':503,'multiline':False]
['text':' We filter out any mask that is too small','line_number':513,'multiline':False]
['text':' We know filter empty masks as long as we find some','line_number':515,'multiline':False]
['text':' TODO - (Amy) make compatible with other frameworks','line_number':591,'multiline':False]
['text':' TODO - (Amy) make compatible with other frameworks','line_number':614,'multiline':False]
['text':' Get the mask associated with the k class','line_number':665,'multiline':False]
['text':' Compute the area of all the stuff in query k','line_number':669,'multiline':False]
['text':' Eliminate disconnected tiny segments','line_number':673,'multiline':False]
['text':' Weigh each mask by its prediction score','line_number':704,'multiline':False]
['text':' [height, width]','line_number':706,'multiline':False]
['text':' Keep track of instances of each class','line_number':708,'multiline':False]
['text':' Check if mask exists and large enough to be a segment','line_number':714,'multiline':False]
['text':' Add current object segment to final segmentation map','line_number':725,'multiline':False]
['text':' TODO (Amy) - update to use `rescale_factor` instead of `scale`','line_number':952,'multiline':False]
['text':' PILImageResampling','line_number':1078,'multiline':False]
['text':' All transformations expect numpy arrays','line_number':1212,'multiline':False]
['text':' We assume that all images have the same channel dimension format.','line_number':1222,'multiline':False]
['text':' prepare (COCO annotations as a list of Dict -> DETR target as a single Dict per image)','line_number':1225,'multiline':False]
['text':' transformations','line_number':1244,'multiline':False]
['text':' Pads images and returns their mask: {'pixel_values': ..., 'pixel_mask': ...}','line_number':1281,'multiline':False]
['text':' POSTPROCESSING METHODS - TODO: add support for other frameworks','line_number':1300,'multiline':False]
['text':' inspired by https://github.com/facebookresearch/detr/blob/master/models/detr.py#L258','line_number':1301,'multiline':False]
['text':' convert to [x0, y0, x1, y1] format','line_number':1333,'multiline':False]
['text':' and from relative [0, 1] to absolute [0, height] coordinates','line_number':1335,'multiline':False]
['text':' we filter empty queries and detection below threshold','line_number':1374,'multiline':False]
['text':' inspired by https://github.com/facebookresearch/detr/blob/master/models/segmentation.py#L218','line_number':1387,'multiline':False]
['text':' inspired by https://github.com/facebookresearch/detr/blob/master/models/segmentation.py#L241','line_number':1433,'multiline':False]
['text':' default to is_thing_map of COCO panoptic','line_number':1466,'multiline':False]
['text':' we filter empty queries and detection below threshold','line_number':1485,'multiline':False]
['text':' It may be that we have several predicted masks for the same stuff class.','line_number':1498,'multiline':False]
['text':' In the following, we track the list of masks ids for each stuff class (they are merged later on)','line_number':1499,'multiline':False]
['text':' This helper function creates the final panoptic segmentation image','line_number':1507,'multiline':False]
['text':' It also returns the area of the masks that appears on the image','line_number':1508,'multiline':False]
['text':' We didn't detect any mask :(','line_number':1513,'multiline':False]
['text':' Merge the masks corresponding to the same stuff class','line_number':1519,'multiline':False]
['text':' We know filter empty masks as long as we find some','line_number':1543,'multiline':False]
['text':' inspired by https://github.com/facebookresearch/detr/blob/master/models/detr.py#L258','line_number':1571,'multiline':False]
['text':' Convert to [x0, y0, x1, y1] format','line_number':1602,'multiline':False]
['text':' Convert from relative [0, 1] to absolute [0, height] coordinates','line_number':1605,'multiline':False]
['text':' [batch_size, num_queries, num_classes+1]','line_number':1641,'multiline':False]
['text':' [batch_size, num_queries, height, width]','line_number':1642,'multiline':False]
['text':' Remove the null class `[..., :-1]`','line_number':1644,'multiline':False]
['text':' [batch_size, num_queries, height, width]','line_number':1646,'multiline':False]
['text':' Semantic segmentation logits of shape (batch_size, num_classes, height, width)','line_number':1648,'multiline':False]
['text':' Resize logits and compute semantic segmentation maps','line_number':1652,'multiline':False]
['text':' inspired by https://github.com/facebookresearch/detr/blob/master/models/segmentation.py#L218','line_number':1672,'multiline':False]
['text':' [batch_size, num_queries, num_classes+1]','line_number':1711,'multiline':False]
['text':' [batch_size, num_queries, height, width]','line_number':1712,'multiline':False]
['text':' [batch_size, num_queries, height, width]','line_number':1717,'multiline':False]
['text':' Predicted label and score of each query (batch_size, num_queries)','line_number':1719,'multiline':False]
['text':' Loop over items in batch size','line_number':1722,'multiline':False]
['text':' No mask found','line_number':1730,'multiline':False]
['text':' Get segmentation map and segment information of batch item','line_number':1737,'multiline':False]
['text':' Return segmentation map in run-length encoding (RLE) format','line_number':1749,'multiline':False]
['text':' inspired by https://github.com/facebookresearch/detr/blob/master/models/segmentation.py#L241','line_number':1756,'multiline':False]
['text':' [batch_size, num_queries, num_classes+1]','line_number':1804,'multiline':False]
['text':' [batch_size, num_queries, height, width]','line_number':1805,'multiline':False]
['text':' [batch_size, num_queries, height, width]','line_number':1810,'multiline':False]
['text':' Predicted label and score of each query (batch_size, num_queries)','line_number':1812,'multiline':False]
['text':' Loop over items in batch size','line_number':1815,'multiline':False]
['text':' No mask found','line_number':1823,'multiline':False]
['text':' Get segmentation map and segment information of batch item','line_number':1830,'multiline':False]
