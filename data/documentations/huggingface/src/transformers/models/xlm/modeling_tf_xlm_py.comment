['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2019-present, Facebook, Inc and the HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all XLM models at https://huggingface.co/models?filter=xlm','line_number':79,'multiline':False]
['text':' assert lengths.max().item() <= slen','line_number':97,'multiline':False]
['text':' attention mask is the same as mask, or triangular inferior attention (causal)','line_number':101,'multiline':False]
['text':' sanity check','line_number':109,'multiline':False]
['text':' assert shape_list(mask) == [bs, slen]','line_number':110,'multiline':False]
['text':' Input is (bs, qlen, dim)','line_number':144,'multiline':False]
['text':' Mask is (bs, klen) (non-causal) or (bs, klen, klen)','line_number':145,'multiline':False]
['text':' assert dim == self.dim, f'Dimensions do not match: {dim} input vs {self.dim} configured'','line_number':153,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':165,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':168,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':169,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':172,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':173,'multiline':False]
['text':' (bs, n_heads, klen, dim_per_head)','line_number':179,'multiline':False]
['text':' (bs, n_heads, klen, dim_per_head)','line_number':180,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':187,'multiline':False]
['text':' (bs, n_heads, qlen, klen)','line_number':189,'multiline':False]
['text':' (bs, n_heads, qlen, klen)','line_number':190,'multiline':False]
['text':' scores.masked_fill_(mask, -float('inf'))                            # (bs, n_heads, qlen, klen)','line_number':191,'multiline':False]
['text':' (bs, n_heads, qlen, klen)','line_number':194,'multiline':False]
['text':' (bs, n_heads, qlen, klen)','line_number':195,'multiline':False]
['text':' Mask heads if we want to','line_number':197,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':201,'multiline':False]
['text':' (bs, qlen, dim)','line_number':202,'multiline':False]
['text':' encoder / decoder, output layer','line_number':271,'multiline':False]
['text':' self.with_output = with_output','line_number':278,'multiline':False]
['text':' dictionary / languages','line_number':281,'multiline':False]
['text':' self.dico = dico','line_number':287,'multiline':False]
['text':' self.id2lang = config.id2lang','line_number':288,'multiline':False]
['text':' self.lang2id = config.lang2id','line_number':289,'multiline':False]
['text':' assert len(self.dico) == self.n_words','line_number':290,'multiline':False]
['text':' assert len(self.id2lang) == len(self.lang2id) == self.n_langs','line_number':291,'multiline':False]
['text':' model parameters','line_number':293,'multiline':False]
['text':' 512 by default','line_number':294,'multiline':False]
['text':' 2048 by default','line_number':295,'multiline':False]
['text':' 8 by default','line_number':296,'multiline':False]
['text':' embeddings','line_number':303,'multiline':False]
['text':' create_sinusoidal_embeddings(config.max_position_embeddings, self.dim, out=self.position_embeddings.weight)','line_number':309,'multiline':False]
['text':' padding_idx=self.pad_index)','line_number':313,'multiline':False]
['text':' transformer layers','line_number':316,'multiline':False]
['text':' if self.is_decoder:','line_number':321,'multiline':False]
['text':'     self.layer_norm15 = []','line_number':322,'multiline':False]
['text':'     self.encoder_attn = []','line_number':323,'multiline':False]
['text':' if self.is_decoder:','line_number':332,'multiline':False]
['text':'     self.layer_norm15.append(nn.LayerNorm(self.dim, eps=config.layer_norm_eps))','line_number':333,'multiline':False]
['text':'     self.encoder_attn.append(MultiHeadAttention(self.n_heads, self.dim, dropout=self.attention_dropout))','line_number':334,'multiline':False]
['text':' removed: src_enc=None, src_len=None','line_number':418,'multiline':False]
['text':' mask = input_ids != self.pad_index','line_number':436,'multiline':False]
['text':' check inputs','line_number':438,'multiline':False]
['text':' assert shape_list(lengths)[0] == bs','line_number':439,'multiline':False]
['text':' assert lengths.max().item() <= slen','line_number':444,'multiline':False]
['text':' input_ids = input_ids.transpose(0, 1)  # batch size as dimension 0','line_number':445,'multiline':False]
['text':' assert (src_enc is None) == (src_len is None)','line_number':446,'multiline':False]
['text':' if src_enc is not None:','line_number':447,'multiline':False]
['text':'     assert self.is_decoder','line_number':448,'multiline':False]
['text':'     assert src_enc.size(0) == bs','line_number':449,'multiline':False]
['text':' generate masks','line_number':451,'multiline':False]
['text':' if self.is_decoder and src_enc is not None:','line_number':453,'multiline':False]
['text':'     src_mask = torch.arange(src_len.max(), dtype=torch.long, device=lengths.device) < src_len[:, None]','line_number':454,'multiline':False]
['text':' position_ids','line_number':456,'multiline':False]
['text':' assert shape_list(position_ids) == [bs, slen]  # (slen, bs)','line_number':461,'multiline':False]
['text':' position_ids = position_ids.transpose(0, 1)','line_number':466,'multiline':False]
['text':' langs','line_number':468,'multiline':False]
['text':' assert shape_list(langs) == [bs, slen]  # (slen, bs)','line_number':470,'multiline':False]
['text':' langs = langs.transpose(0, 1)','line_number':475,'multiline':False]
['text':' Prepare head mask if needed','line_number':477,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':478,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':479,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':480,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x qlen x klen]','line_number':481,'multiline':False]
['text':' do not recompute cached elements','line_number':487,'multiline':False]
['text':' embeddings','line_number':497,'multiline':False]
['text':' transformer layers','line_number':514,'multiline':False]
['text':' self attention','line_number':522,'multiline':False]
['text':' encoder attention (for decoder only)','line_number':541,'multiline':False]
['text':' if self.is_decoder and src_enc is not None:','line_number':542,'multiline':False]
['text':'     attn = self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)','line_number':543,'multiline':False]
['text':'     attn = nn.functional.dropout(attn, p=self.dropout, training=self.training)','line_number':544,'multiline':False]
['text':'     tensor = tensor + attn','line_number':545,'multiline':False]
['text':'     tensor = self.layer_norm15[i](tensor)','line_number':546,'multiline':False]
['text':' FFN','line_number':548,'multiline':False]
['text':' Add last hidden state','line_number':553,'multiline':False]
['text':' update cache length','line_number':557,'multiline':False]
['text':' move back sequence length to dimension 0','line_number':561,'multiline':False]
['text':' tensor = tensor.transpose(0, 1)','line_number':562,'multiline':False]
['text':' Sometimes XLM has language embeddings so don't forget to build them as well if needed','line_number':581,'multiline':False]
['text':' Remove when XLMWithLMHead computes loss like other LM models','line_number':594,'multiline':False]
['text':' self.proj = nn.AdaptiveLogSoftmaxWithLoss(','line_number':812,'multiline':False]
['text':'     in_features=dim,','line_number':813,'multiline':False]
['text':'     n_classes=config.n_words,','line_number':814,'multiline':False]
['text':'     cutoffs=config.asm_cutoffs,','line_number':815,'multiline':False]
['text':'     div_value=config.asm_div_value,','line_number':816,'multiline':False]
['text':'     head_bias=True,  # default is False','line_number':817,'multiline':False]
['text':' )','line_number':818,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is an output-only bias for each token.','line_number':821,'multiline':False]
['text':' XLM does not have past caching features','line_number':859,'multiline':False]
['text':' Sometimes XLM has language embeddings so don't forget to build them as well if needed','line_number':1059,'multiline':False]
