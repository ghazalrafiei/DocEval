['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 The BAAI Teams Authors and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all AltCLIP models at https://huggingface.co/models?filter=altclip','line_number':45,'multiline':False]
['text':' contrastive loss function, adapted from','line_number':149,'multiline':False]
['text':' https://sachinruk.github.io/blog/pytorch/pytorch%20lightning/loss%20function/gpu/2021/03/07/CLIP.html','line_number':150,'multiline':False]
['text':' Copied from transformers.models.clip.modeling_clip.CLIPOutput with CLIP->AltCLIP','line_number':162,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaEmbeddings with Roberta->AltRoberta','line_number':199,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEmbeddings.__init__','line_number':205,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':212,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':213,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':216,'multiline':False]
['text':' End copy','line_number':225,'multiline':False]
['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':236,'multiline':False]
['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':248,'multiline':False]
['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':249,'multiline':False]
['text':' issue #5664','line_number':250,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaSelfAttention with Roberta->AltRoberta','line_number':289,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':334,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':335,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':336,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':340,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':361,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':362,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':363,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':364,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':365,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':366,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':367,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':370,'multiline':False]
['text':' fp16 compatibility','line_number':385,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in AltRobertaModel forward() function)','line_number':397,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':400,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':403,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':404,'multiline':False]
['text':' Mask heads if we want to','line_number':407,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaSelfOutput','line_number':424,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaAttention with Roberta->AltRoberta','line_number':439,'multiline':False]
['text':' Prune linear layers','line_number':454,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':460,'multiline':False]
['text':' add attentions if we output them','line_number':485,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaIntermediate with Roberta->AltRoberta','line_number':489,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaOutput','line_number':505,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaLayer with Roberta->AltRoberta','line_number':520,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':546,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':557,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':562,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':572,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':584,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':586,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':595,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaEncoder with Roberta->AltRoberta','line_number':607,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaPooler','line_number':701,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':709,'multiline':False]
['text':' to the first token.','line_number':710,'multiline':False]
['text':' Copied from transformers.models.clip.modeling_clip.CLIPAttention with CLIP->AltCLIP','line_number':717,'multiline':False]
['text':' get query proj','line_number':754,'multiline':False]
['text':' apply the causal_attention_mask first','line_number':773,'multiline':False]
['text':' this operation is a bit akward, but it's required to','line_number':794,'multiline':False]
['text':' make sure that attn_weights keeps its gradient.','line_number':795,'multiline':False]
['text':' In order to do so, attn_weights have to reshaped','line_number':796,'multiline':False]
['text':' twice and have to be reused in the following','line_number':797,'multiline':False]
['text':' Copied from transformers.models.clip.modeling_clip.CLIPMLP with CLIP->AltCLIP','line_number':822,'multiline':False]
['text':' Copied from transformers.models.clip.modeling_clip.CLIPEncoderLayer with CLIP->AltCLIP','line_number':838,'multiline':False]
['text':' Copied from transformers.models.clip.modeling_clip.CLIPEncoder with CLIP->AltCLIP','line_number':889,'multiline':False]
['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionEmbeddings with CLIP->AltCLIP','line_number':987,'multiline':False]
['text':' shape = [*, width, grid, grid]','line_number':1014,'multiline':False]
['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionTransformer with CLIPVisionTransformer->AltCLIPVisionTransformer,CLIPVisionConfig->AltCLIPVisionConfig,CLIPVisionEmbeddings->AltCLIPVisionEmbeddings,CLIPEncoder->AltCLIPEncoder,CLIP_VISION_INPUTS_DOCSTRING->ALTCLIP_VISION_INPUTS_DOCSTRING','line_number':1079,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1145,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertModel.__init__ with Bert->AltRoberta','line_number':1210,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1220,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertModel.forward','line_number':1237,'multiline':False]
['text':' past_key_values_length','line_number':1298,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':1312,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':1313,'multiline':False]
['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':1316,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':1317,'multiline':False]
['text':' Prepare head mask if needed','line_number':1327,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':1328,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':1329,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':1330,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':1331,'multiline':False]
['text':' last module outputs','line_number':1440,'multiline':False]
['text':' project every module','line_number':1443,'multiline':False]
['text':' pooler','line_number':1446,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1492,'multiline':False]
['text':' Use AltCLIP model's config for some fields (if specified) instead of those of vision & text components.','line_number':1521,'multiline':False]
['text':' Use AltCLIP model's config for some fields (if specified) instead of those of vision & text components.','line_number':1569,'multiline':False]
['text':' pooled_output','line_number':1583,'multiline':False]
['text':' Use AltCLIP model's config for some fields (if specified) instead of those of vision & text components.','line_number':1623,'multiline':False]
['text':' normalized features','line_number':1653,'multiline':False]
['text':' cosine similarity as logits','line_number':1657,'multiline':False]
['text':' Copied from transformers.models.roberta.modeling_roberta.create_position_ids_from_input_ids','line_number':1681,'multiline':False]
['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':1692,'multiline':False]
