['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2018 The Google AI Language Team Authors, The HuggingFace Inc. team, and the','line_number':2,'multiline':False]
['text':' Lxmert Authors.','line_number':3,'multiline':False]
['text':' Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':6,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':7,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':12,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':13,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':14,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':15,'multiline':False]
['text':' limitations under the License.','line_number':16,'multiline':False]
['text':' Object feature encoding','line_number':158,'multiline':False]
['text':' Box position encoding','line_number':168,'multiline':False]
['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':316,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':330,'multiline':False]
['text':' (batch size, num_heads, seq_len_q, seq_len_k)','line_number':333,'multiline':False]
['text':' scale attention_scores','line_number':334,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in TFLxmertModel call() function)','line_number':338,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':342,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':345,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':346,'multiline':False]
['text':' (batch_size, seq_len_q, all_head_size)','line_number':353,'multiline':False]
['text':' Self attention attends to itself, thus keys and queries are the same (input_tensor).','line_number':469,'multiline':False]
['text':' add attentions if we output them','line_number':533,'multiline':False]
['text':' Self-attention Layers','line_number':556,'multiline':False]
['text':' Intermediate and Output Layers (FFNs)','line_number':560,'multiline':False]
['text':' Cross Attention','line_number':575,'multiline':False]
['text':' Keras saving and loading model *does not work* with the same inputs for two layers.','line_number':577,'multiline':False]
['text':' Self Attention','line_number':607,'multiline':False]
['text':' FC layers','line_number':614,'multiline':False]
['text':' Layer output','line_number':618,'multiline':False]
['text':' Number of layers','line_number':688,'multiline':False]
['text':' Layers','line_number':693,'multiline':False]
['text':' Using self.layer instead of self.l_layer to support loading BERT weights.','line_number':694,'multiline':False]
['text':' Run language layers','line_number':718,'multiline':False]
['text':' Run relational layers','line_number':726,'multiline':False]
['text':' Run cross-modality layers','line_number':739,'multiline':False]
['text':' Positional Word Embeddings','line_number':853,'multiline':False]
['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':856,'multiline':False]
['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':857,'multiline':False]
['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':858,'multiline':False]
['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':859,'multiline':False]
['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':860,'multiline':False]
['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':863,'multiline':False]
['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':864,'multiline':False]
['text':' positions we want to attend and -10000.0 for masked positions.','line_number':865,'multiline':False]
['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':866,'multiline':False]
['text':' effectively the same as removing these entirely.','line_number':867,'multiline':False]
['text':' Run Lxmert encoder','line_number':885,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':1160,'multiline':False]
['text':' to the first token.','line_number':1161,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPredictionHeadTransform with Bert->Lxmert','line_number':1175,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLMPredictionHead with Bert->Lxmert','line_number':1213,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':1223,'multiline':False]
['text':' an output-only bias for each token.','line_number':1224,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMLMHead with Bert->Lxmert','line_number':1262,'multiline':False]
['text':' Decide the use of visual losses','line_number':1358,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':1368,'multiline':False]
['text':' an output-only bias for each token.','line_number':1369,'multiline':False]
['text':' Use of pretraining tasks','line_number':1409,'multiline':False]
['text':' Lxmert backbone','line_number':1415,'multiline':False]
['text':' Pre-training heads','line_number':1418,'multiline':False]
['text':' Loss functions','line_number':1425,'multiline':False]
['text':' Regression Losses','line_number':1604,'multiline':False]
['text':' exclude "*2" here to match the effect of QA losses.','line_number':1614,'multiline':False]
['text':' Previous: (loss *0) for 6 epochs, (loss *2) for 6 epochs.   (Used 10 instead of 6 in EMNLP paper)','line_number':1615,'multiline':False]
['text':' Now     : (loss *1) for 12 epochs','line_number':1616,'multiline':False]
['text':'','line_number':1617,'multiline':False]
['text':' * 2       # Multiply by 2 because > half of the data will not have label','line_number':1618,'multiline':False]
['text':' return total_loss, tf.stack(losses)[tf.new_axis, ...], answer_score.detach()','line_number':1621,'multiline':False]
