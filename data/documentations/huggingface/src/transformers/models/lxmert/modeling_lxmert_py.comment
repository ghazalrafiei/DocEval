['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2018 Hao Tan, Mohit Bansal, and the HuggingFace team','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' Load weights from TF model','line_number':208,'multiline':False]
['text':' adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v','line_number':220,'multiline':False]
['text':' which are not required for using pretrained model','line_number':221,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':281,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':282,'multiline':False]
['text':' visual_dim = 2048','line_number':324,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':350,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in BertModel forward() function)','line_number':353,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':357,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':360,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':361,'multiline':False]
['text':' Self attention attends to itself, thus keys and queries are the same (input_tensor).','line_number':409,'multiline':False]
['text':' add attentions if we output them','line_number':461,'multiline':False]
['text':' The cross-attention Layer','line_number':468,'multiline':False]
['text':' Self-attention Layers','line_number':471,'multiline':False]
['text':' Intermediate and Output Layers (FFNs)','line_number':475,'multiline':False]
['text':' Cross Attention','line_number':489,'multiline':False]
['text':' Self Attention','line_number':505,'multiline':False]
['text':' FC layers','line_number':511,'multiline':False]
['text':' Layer output','line_number':515,'multiline':False]
['text':' Object feature encoding','line_number':562,'multiline':False]
['text':' Box position encoding','line_number':566,'multiline':False]
['text':' Obj-level image embedding layer','line_number':587,'multiline':False]
['text':' Number of layers','line_number':591,'multiline':False]
['text':' Layers','line_number':596,'multiline':False]
['text':' Using self.layer instead of self.l_layer to support loading BERT weights.','line_number':597,'multiline':False]
['text':' Run language layers','line_number':619,'multiline':False]
['text':' Run relational layers','line_number':627,'multiline':False]
['text':' Run cross-modality layers','line_number':635,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':671,'multiline':False]
['text':' to the first token.','line_number':672,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':698,'multiline':False]
['text':' an output-only bias for each token.','line_number':699,'multiline':False]
['text':' Decide the use of visual losses','line_number':733,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':746,'multiline':False]
['text':' an output-only bias for each token.','line_number':747,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':785,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':786,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':889,'multiline':False]
['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':945,'multiline':False]
['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':946,'multiline':False]
['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':947,'multiline':False]
['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':948,'multiline':False]
['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':949,'multiline':False]
['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':952,'multiline':False]
['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':953,'multiline':False]
['text':' positions we want to attend and the dtype's smallest value for masked positions.','line_number':954,'multiline':False]
['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':955,'multiline':False]
['text':' effectively the same as removing these entirely.','line_number':956,'multiline':False]
['text':' Process the visual attention mask','line_number':960,'multiline':False]
['text':' Positional Word Embeddings','line_number':968,'multiline':False]
['text':' Run Lxmert encoder','line_number':971,'multiline':False]
['text':' Configuration','line_number':1026,'multiline':False]
['text':' Use of pretraining tasks','line_number':1031,'multiline':False]
['text':' Lxmert backbone','line_number':1037,'multiline':False]
['text':' Pre-training heads','line_number':1040,'multiline':False]
['text':' Weight initialization','line_number':1047,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1048,'multiline':False]
['text':' Loss functions','line_number':1051,'multiline':False]
['text':' Build new linear output','line_number':1131,'multiline':False]
['text':' initialize all new labels','line_number':1139,'multiline':False]
['text':' Copy labels from the previous weights','line_number':1142,'multiline':False]
['text':' Regression Losses','line_number':1255,'multiline':False]
['text':' Configuration','line_number':1292,'multiline':False]
['text':' Lxmert backbone','line_number':1297,'multiline':False]
['text':' Weight initialization','line_number':1302,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1303,'multiline':False]
['text':' Loss function','line_number':1306,'multiline':False]
['text':' Build new linear output','line_number':1362,'multiline':False]
['text':' initialize all new labels','line_number':1370,'multiline':False]
['text':' Copy labels from the previous weights','line_number':1373,'multiline':False]
