['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2021 NVIDIA The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' General docstring','line_number':43,'multiline':False]
['text':' Base docstring','line_number':46,'multiline':False]
['text':' Image classification docstring','line_number':50,'multiline':False]
['text':' See all SegFormer models at https://huggingface.co/models?filter=segformer','line_number':56,'multiline':False]
['text':' Copied from transformers.models.beit.modeling_beit.drop_path','line_number':87,'multiline':False]
['text':' work with diff dim tensors, not just 2D ConvNets','line_number':101,'multiline':False]
['text':' binarize','line_number':103,'multiline':False]
['text':' Copied from transformers.models.convnext.modeling_convnext.ConvNextDropPath with ConvNext->Segformer','line_number':108,'multiline':False]
['text':' (batch_size, num_channels, height, width) -> (batch_size, num_channels, height*width) -> (batch_size, height*width, num_channels)','line_number':141,'multiline':False]
['text':' this can be fed to a Transformer layer','line_number':142,'multiline':False]
['text':' Reshape to (batch_size, num_channels, height, width)','line_number':195,'multiline':False]
['text':' Apply sequence reduction','line_number':197,'multiline':False]
['text':' Reshape back to (batch_size, seq_len, num_channels)','line_number':199,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':206,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':211,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':214,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':215,'multiline':False]
['text':' Prune linear layers','line_number':260,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':266,'multiline':False]
['text':' add attentions if we output them','line_number':275,'multiline':False]
['text':' in Segformer, layernorm is applied before self-attention','line_number':335,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':342,'multiline':False]
['text':' first residual connection (with stochastic depth)','line_number':344,'multiline':False]
['text':' second residual connection (with stochastic depth)','line_number':350,'multiline':False]
['text':' stochastic depth decay rule','line_number':364,'multiline':False]
['text':' patch embeddings','line_number':367,'multiline':False]
['text':' Transformer blocks','line_number':380,'multiline':False]
['text':' each block consists of layers','line_number':384,'multiline':False]
['text':' Layer norms','line_number':403,'multiline':False]
['text':' first, obtain patch embeddings','line_number':423,'multiline':False]
['text':' second, send embeddings through blocks','line_number':425,'multiline':False]
['text':' third, apply layer norm','line_number':431,'multiline':False]
['text':' fourth, optionally reshape back to (batch_size, num_channels, height, width)','line_number':433,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':463,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':464,'multiline':False]
['text':' hierarchical Transformer encoder','line_number':515,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':518,'multiline':False]
['text':' Classifier head','line_number':582,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':585,'multiline':False]
['text':' convert last hidden states to (batch_size, height*width, hidden_size)','line_number':620,'multiline':False]
['text':' (batch_size, num_channels, height, width) -> (batch_size, height, width, num_channels)','line_number':623,'multiline':False]
['text':' global average pooling','line_number':627,'multiline':False]
['text':' linear layers which will unify the channel dimension of each of the encoder blocks to the same config.decoder_hidden_size','line_number':684,'multiline':False]
['text':' the following 3 layers implement the ConvModule of the original implementation','line_number':691,'multiline':False]
['text':' unify channel dimension','line_number':717,'multiline':False]
['text':' upsample','line_number':722,'multiline':False]
['text':' logits are of shape (batch_size, num_labels, height/4, width/4)','line_number':733,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':749,'multiline':False]
['text':' we need the intermediate hidden states','line_number':796,'multiline':False]
['text':' upsample logits to the images' original size','line_number':806,'multiline':False]
