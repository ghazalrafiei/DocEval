['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2023 Meta AI and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all Musicgen models at https://huggingface.co/models?filter=musicgen','line_number':61,'multiline':False]
['text':' Copied from transformers.models.encoder_decoder.modeling_encoder_decoder.shift_tokens_right','line_number':84,'multiline':False]
['text':' replace possible -100 values in labels by `pad_token_id`','line_number':97,'multiline':False]
['text':' in forward put the weights on the correct dtype and device of the param','line_number':114,'multiline':False]
['text':' zero pad','line_number':133,'multiline':False]
['text':' Create the position ids from the input token ids.','line_number':140,'multiline':False]
['text':' expand embeddings if needed','line_number':142,'multiline':False]
['text':' Copied from transformers.models.bart.modeling_bart.BartAttention with Bart->Musicgen','line_number':148,'multiline':False]
['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':197,'multiline':False]
['text':' for the decoder','line_number':198,'multiline':False]
['text':' get query proj','line_number':203,'multiline':False]
['text':' get key, value proj','line_number':205,'multiline':False]
['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':206,'multiline':False]
['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':207,'multiline':False]
['text':' the provided `key_value_states` to support prefix tuning','line_number':208,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':214,'multiline':False]
['text':' cross_attentions','line_number':218,'multiline':False]
['text':' reuse k, v, self_attention','line_number':222,'multiline':False]
['text':' self_attention','line_number':228,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':233,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':234,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':235,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':236,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':237,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':238,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':239,'multiline':False]
['text':' this operation is a bit awkward, but it's required to','line_number':276,'multiline':False]
['text':' make sure that attn_weights keeps its gradient.','line_number':277,'multiline':False]
['text':' In order to do so, attn_weights have to be reshaped','line_number':278,'multiline':False]
['text':' twice and have to be reused in the following','line_number':279,'multiline':False]
['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':298,'multiline':False]
['text':' partitioned across GPUs when using tensor-parallelism.','line_number':299,'multiline':False]
['text':' Copied from transformers.models.mbart.modeling_mbart.MBartDecoderLayer.forward','line_number':336,'multiline':False]
['text':' Self Attention','line_number':370,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':371,'multiline':False]
['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':373,'multiline':False]
['text':' Cross-Attention Block','line_number':384,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':391,'multiline':False]
['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':404,'multiline':False]
['text':' Fully Connected','line_number':407,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':672,'multiline':False]
['text':' retrieve input_ids and inputs_embeds','line_number':704,'multiline':False]
['text':' (bsz * codebooks, seq_len) -> (bsz, codebooks, seq_len)','line_number':708,'multiline':False]
['text':' past_key_values_length','line_number':718,'multiline':False]
['text':' expand encoder attention mask','line_number':728,'multiline':False]
['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':730,'multiline':False]
['text':' embed positions','line_number':735,'multiline':False]
['text':' decoder layers','line_number':749,'multiline':False]
['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':755,'multiline':False]
['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':764,'multiline':False]
['text':' add hidden states from the last decoder layer','line_number':813,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':841,'multiline':False]
['text':' decoder outputs consists of (dec_features, past_key_value, dec_hidden, dec_attn)','line_number':876,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':919,'multiline':False]
['text':' (bsz, num_codebooks, seq_len, vocab_size) -> (bsz * num_codebooks, seq_len, vocab_size)','line_number':991,'multiline':False]
['text':' apply the delay pattern mask','line_number':1028,'multiline':False]
['text':' for classifier free guidance we need to replicate the decoder args across the batch dim (we'll split these','line_number':1032,'multiline':False]
['text':' before sampling)','line_number':1033,'multiline':False]
['text':' (bsz * num_codebooks, seq_len) -> (bsz, num_codebooks, seq_len)','line_number':1071,'multiline':False]
['text':' we only apply the mask if we have a large enough seq len - otherwise we return as is','line_number':1081,'multiline':False]
['text':' fill the shifted ids with the prompt entries, offset by the codebook idx','line_number':1085,'multiline':False]
['text':' mono channel - loop over the codebooks one-by-one','line_number':1088,'multiline':False]
['text':' left/right channels are interleaved in the generated codebooks, so handle one then the other','line_number':1091,'multiline':False]
['text':' construct a pattern mask that indicates the positions of padding tokens for each codebook','line_number':1095,'multiline':False]
['text':' first fill the upper triangular part (the EOS padding)','line_number':1096,'multiline':False]
['text':' then fill the lower triangular part (the BOS padding)','line_number':1100,'multiline':False]
['text':' for left/right channel we need to duplicate every row of the pattern mask in an interleaved fashion','line_number':1104,'multiline':False]
['text':' find the first position to start generating - this is the first place we have the -1 token','line_number':1110,'multiline':False]
['text':' and will always be in the first codebook (since it has no codebook offset)','line_number':1111,'multiline':False]
['text':' we have no tokens that need to be filled - return entire matrix of input ids','line_number':1117,'multiline':False]
['text':' (bsz * num_codebooks, seq_len) -> (bsz, num_codebooks, seq_len)','line_number':1120,'multiline':False]
['text':' 1. Handle `generation_config` and kwargs that might update it, and validate the resulting objects','line_number':1211,'multiline':False]
['text':' All unused kwargs must be model kwargs','line_number':1216,'multiline':False]
['text':' 2. Set generation parameters if not already defined','line_number':1220,'multiline':False]
['text':' 3. Define model inputs','line_number':1236,'multiline':False]
['text':' inputs_tensor has to be defined','line_number':1237,'multiline':False]
['text':' model_input_name is defined if model-specific keyword input is passed','line_number':1238,'multiline':False]
['text':' otherwise model_input_name is None','line_number':1239,'multiline':False]
['text':' all model-specific keyword inputs are removed from `model_kwargs`','line_number':1240,'multiline':False]
['text':' 4. Define other model kwargs','line_number':1246,'multiline':False]
['text':' 5. Prepare `max_length` depending on other stopping criteria.','line_number':1258,'multiline':False]
['text':' 6. Prepare `input_ids` which will be used for auto-regressive generation','line_number':1288,'multiline':False]
['text':' Build the delay pattern mask for offsetting each codebook prediction by 1 (this behaviour is specific to MusicGen)','line_number':1289,'multiline':False]
['text':' stash the delay mask so that we don't have to recompute it in each forward pass','line_number':1299,'multiline':False]
['text':' 7. determine generation mode','line_number':1302,'multiline':False]
['text':' 8. prepare batched CFG externally (to enable coexistance with the unbatched CFG)','line_number':1314,'multiline':False]
['text':' 9. prepare distribution pre_processing samplers','line_number':1319,'multiline':False]
['text':' 10. prepare stopping criteria','line_number':1328,'multiline':False]
['text':' 11. run greedy search','line_number':1340,'multiline':False]
['text':' 11. prepare logits warper','line_number':1355,'multiline':False]
['text':' expand input_ids with `num_return_sequences` additional sequences per batch','line_number':1358,'multiline':False]
['text':' 12. run sample','line_number':1365,'multiline':False]
['text':' apply the pattern mask to the final ids','line_number':1391,'multiline':False]
['text':' revert the pattern delay mask by filtering the pad token id','line_number':1394,'multiline':False]
['text':' initialize with config','line_number':1443,'multiline':False]
['text':' make sure that the individual model's config refers to the shared config','line_number':1479,'multiline':False]
['text':' so that the updates to the config will be synced','line_number':1480,'multiline':False]
['text':' text encoder outputs might need to be projected to different dimension for decoder','line_number':1485,'multiline':False]
['text':' tie text encoder, decoder weights if config set accordingly','line_number':1504,'multiline':False]
['text':' tie text encoder & decoder if needed','line_number':1508,'multiline':False]
['text':' tie text encoder and decoder base model','line_number':1510,'multiline':False]
['text':' get the text encoder to compute the encoder hidden-states for generation','line_number':1523,'multiline':False]
['text':' At the moment fast initialization is not supported for composite models','line_number':1549,'multiline':False]
['text':' remove text encoder, audio encoder and decoder kwargs from kwargs','line_number':1653,'multiline':False]
['text':' Load and initialize the encoder and decoder','line_number':1661,'multiline':False]
['text':' The distinction between encoder and decoder at the model level is made','line_number':1662,'multiline':False]
['text':' by the value of the flag `is_decoder` that we need to set correctly.','line_number':1663,'multiline':False]
['text':' instantiate config with corresponding kwargs','line_number':1756,'multiline':False]
['text':' optionally project encoder_hidden_states','line_number':1843,'multiline':False]
['text':' mono input through encodec that we convert to stereo','line_number':1873,'multiline':False]
['text':' Decode','line_number':1878,'multiline':False]
['text':' apply the delay pattern mask','line_number':1939,'multiline':False]
['text':' for classifier free guidance we need to replicate the decoder args across the batch dim (we'll split these','line_number':1943,'multiline':False]
['text':' before sampling)','line_number':1944,'multiline':False]
['text':' Some generation methods already pass only the last input ID','line_number':1952,'multiline':False]
['text':' Default to old behavior: keep only final ID','line_number':1956,'multiline':False]
['text':' encoder_outputs is defined. input_ids not needed','line_number':1962,'multiline':False]
['text':' 1. Check whether the user has defined `decoder_input_ids` manually. To facilitate in terms of input naming,','line_number':1985,'multiline':False]
['text':' we also allow the user to pass it under `input_ids`, if the encoder does not use it as the main input.','line_number':1986,'multiline':False]
['text':' 2. Encoder-decoder models expect the `decoder_input_ids` to start with a special token. Let's ensure that.','line_number':1994,'multiline':False]
['text':' no user input -> use decoder_start_token_id as decoder_input_ids','line_number':2003,'multiline':False]
['text':' user input but doesn't start with decoder_start_token_id -> prepend decoder_start_token_id (and adjust','line_number':2007,'multiline':False]
['text':' decoder_attention_mask if provided)','line_number':2008,'multiline':False]
['text':' 1. get text encoder','line_number':2028,'multiline':False]
['text':' Compatibility with Accelerate big model inference: we need the encoder to outputs stuff on the same device','line_number':2030,'multiline':False]
['text':' as the inputs.','line_number':2031,'multiline':False]
['text':' 2. Prepare encoder args and encoder kwargs from model kwargs.','line_number':2035,'multiline':False]
['text':' 3. make sure that encoder returns `ModelOutput`','line_number':2049,'multiline':False]
['text':' for classifier free guidance we need to add a 'null' input to our encoder hidden states','line_number':2055,'multiline':False]
['text':' 1. get audio encoder','line_number':2070,'multiline':False]
['text':' Compatibility with Accelerate big model inference: we need the encoder to outputs stuff on the same device','line_number':2072,'multiline':False]
['text':' as the inputs.','line_number':2073,'multiline':False]
['text':' 2. Prepare encoder args and encoder kwargs from model kwargs.','line_number':2077,'multiline':False]
['text':' 3. make sure that encoder returns `ModelOutput`','line_number':2091,'multiline':False]
['text':' copy alternating left/right channel codes into stereo codebook','line_number':2120,'multiline':False]
['text':' make dummy input_ids with value -100, as a sanity check ensuring that they won't be used for encoding','line_number':2165,'multiline':False]
['text':' If there is some tensor in `model_kwargs`, we can infer the batch size from it. This is helpful with','line_number':2172,'multiline':False]
['text':' soft-prompting or in multimodal implementations built on top of decoder-only language models.','line_number':2173,'multiline':False]
['text':' 1. Handle `generation_config` and kwargs that might update it, and validate the resulting objects','line_number':2258,'multiline':False]
['text':' All unused kwargs must be model kwargs','line_number':2263,'multiline':False]
['text':' wrap the unconditional outputs as a BaseModelOutput for compatibility with the rest of generate','line_number':2268,'multiline':False]
['text':' 2. Set generation parameters if not already defined','line_number':2271,'multiline':False]
['text':' 3. Define model inputs','line_number':2287,'multiline':False]
['text':' inputs_tensor has to be defined','line_number':2288,'multiline':False]
['text':' model_input_name is defined if model-specific keyword input is passed','line_number':2289,'multiline':False]
['text':' otherwise model_input_name is None','line_number':2290,'multiline':False]
['text':' all model-specific keyword inputs are removed from `model_kwargs`','line_number':2291,'multiline':False]
['text':' 4. Define other model kwargs','line_number':2297,'multiline':False]
['text':' encoder_outputs are created and added to `model_kwargs`','line_number':2311,'multiline':False]
['text':' 5. Prepare `input_ids` which will be used for auto-regressive generation','line_number':2325,'multiline':False]
['text':' 6. Prepare `max_length` depending on other stopping criteria.','line_number':2335,'multiline':False]
['text':' build the delay pattern mask for offsetting each codebook prediction by 1 (this behaviour is specific to MusicGen)','line_number':2365,'multiline':False]
['text':' stash the delay mask so that we don't have to recompute in each forward pass','line_number':2371,'multiline':False]
['text':' input_ids are ready to be placed on the streamer (if used)','line_number':2374,'multiline':False]
['text':' 7. determine generation mode','line_number':2378,'multiline':False]
['text':' 8. prepare batched CFG externally (to enable coexistance with the unbatched CFG)','line_number':2390,'multiline':False]
['text':' 9. prepare distribution pre_processing samplers','line_number':2395,'multiline':False]
['text':' 10. prepare stopping criteria','line_number':2404,'multiline':False]
['text':' 11. run greedy search','line_number':2416,'multiline':False]
['text':' 11. prepare logits warper','line_number':2431,'multiline':False]
['text':' expand input_ids with `num_return_sequences` additional sequences per batch','line_number':2434,'multiline':False]
['text':' 12. run sample','line_number':2442,'multiline':False]
['text':' apply the pattern mask to the final ids','line_number':2468,'multiline':False]
['text':' revert the pattern delay mask by filtering the pad token id','line_number':2471,'multiline':False]
['text':' append the frame dimension back to the audio codes','line_number':2476,'multiline':False]
