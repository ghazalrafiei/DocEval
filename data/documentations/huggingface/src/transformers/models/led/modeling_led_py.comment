['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2021 Iz Beltagy, Matthew E. Peters, Arman Cohan and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all LED models at https://huggingface.co/models?filter=led','line_number':58,'multiline':False]
['text':' replace possible -100 values in labels by `pad_token_id`','line_number':72,'multiline':False]
['text':' make sure that global_attn_mask is positive','line_number':90,'multiline':False]
['text':' Copied from transformers.models.longformer.modeling_longformer.LongformerSelfAttention with Longformer->LEDEncoder','line_number':113,'multiline':False]
['text':' separate projection layers for tokens with global attention','line_number':130,'multiline':False]
['text':' project hidden states','line_number':172,'multiline':False]
['text':' normalize query','line_number':182,'multiline':False]
['text':' values to pad for attention probs','line_number':192,'multiline':False]
['text':' cast to fp32/fp16 then replace 1's with -inf','line_number':195,'multiline':False]
['text':' diagonal mask with zeros everywhere and -inf inplace of padding','line_number':199,'multiline':False]
['text':' pad local attention probs','line_number':204,'multiline':False]
['text':' compute local attention probs from global attention keys and contact over window dim','line_number':217,'multiline':False]
['text':' compute global attn indices required through out forward fn','line_number':219,'multiline':False]
['text':' calculate global attn probs from global key','line_number':226,'multiline':False]
['text':' concat to local_attn_probs','line_number':236,'multiline':False]
['text':' (batch_size, seq_len, num_heads, extra attention count + 2*window+1)','line_number':237,'multiline':False]
['text':' free memory','line_number':240,'multiline':False]
['text':' use fp32 for numerical stability','line_number':245,'multiline':False]
['text':' softmax sometimes inserts NaN if all positions are masked, replace them with 0','line_number':253,'multiline':False]
['text':' free memory','line_number':257,'multiline':False]
['text':' apply dropout','line_number':260,'multiline':False]
['text':' compute local attention output with global attention value and add','line_number':265,'multiline':False]
['text':' compute sum of global and local attn','line_number':267,'multiline':False]
['text':' compute local attn only','line_number':276,'multiline':False]
['text':' compute value for global attention and overwrite to attention output','line_number':284,'multiline':False]
['text':' TODO: remove the redundant computation','line_number':285,'multiline':False]
['text':' get only non zero global attn output','line_number':297,'multiline':False]
['text':' overwrite values with global attention','line_number':302,'multiline':False]
['text':' The attention weights for tokens with global attention are','line_number':306,'multiline':False]
['text':' just filler values, they were never used to compute the output.','line_number':307,'multiline':False]
['text':' Fill with 0 now, the correct values are in 'global_attn_probs'.','line_number':308,'multiline':False]
['text':' padding value is not important because it will be overwritten','line_number':323,'multiline':False]
['text':' total_num_heads x num_chunks x window_overlap x (hidden_dim+window_overlap+1). Padding value is not important because it'll be overwritten','line_number':365,'multiline':False]
['text':' total_num_heads x num_chunks x window_overlap*window_overlap+window_overlap','line_number':368,'multiline':False]
['text':' total_num_heads x num_chunks x window_overlap*window_overlap','line_number':371,'multiline':False]
['text':' non-overlapping chunks of size = 2w','line_number':382,'multiline':False]
['text':' use `as_strided` to make the chunks overlap with an overlap size = window_overlap','line_number':389,'multiline':False]
['text':' When exporting to ONNX, use this separate logic','line_number':397,'multiline':False]
['text':' have to use slow implementation since as_strided, unfold and 2d-tensor indexing aren't supported (yet) in ONNX export','line_number':398,'multiline':False]
['text':' TODO replace this with','line_number':400,'multiline':False]
['text':' > return hidden_states.unfold(dimension=1, size=window_overlap * 2, step=window_overlap).transpose(2, 3)','line_number':401,'multiline':False]
['text':' once `unfold` is supported','line_number':402,'multiline':False]
['text':' the case hidden_states.size(1) == window_overlap * 2 can also simply return hidden_states.unsqueeze(1), but that's control flow','line_number':403,'multiline':False]
['text':' group batch_size and num_heads dimensions into one, then chunk seq_len into chunks of size window_overlap * 2','line_number':449,'multiline':False]
['text':' matrix multiplication','line_number':456,'multiline':False]
['text':' bcxd: batch_size * num_heads x chunks x 2window_overlap x head_dim','line_number':457,'multiline':False]
['text':' bcyd: batch_size * num_heads x chunks x 2window_overlap x head_dim','line_number':458,'multiline':False]
['text':' bcxy: batch_size * num_heads x chunks x 2window_overlap x 2window_overlap','line_number':459,'multiline':False]
['text':' multiply','line_number':460,'multiline':False]
['text':' convert diagonals into columns','line_number':462,'multiline':False]
['text':' allocate space for the overall attention matrix where the chunks are combined. The last dimension','line_number':467,'multiline':False]
['text':' has (window_overlap * 2 + 1) columns. The first (window_overlap) columns are the window_overlap lower triangles (attention from a word to','line_number':468,'multiline':False]
['text':' window_overlap previous words). The following column is attention score from each word to itself, then','line_number':469,'multiline':False]
['text':' followed by window_overlap columns for the upper triangle.','line_number':470,'multiline':False]
['text':' copy parts from diagonal_chunked_attention_scores into the combined matrix of attentions','line_number':476,'multiline':False]
['text':' - copying the main diagonal and the upper triangle','line_number':477,'multiline':False]
['text':' - copying the lower triangle','line_number':484,'multiline':False]
['text':' separate batch_size and num_heads dimensions again','line_number':493,'multiline':False]
['text':' group batch_size and num_heads dimensions into one, then chunk seq_len into chunks of size 2 window overlap','line_number':514,'multiline':False]
['text':' group batch_size and num_heads dimensions into one','line_number':523,'multiline':False]
['text':' pad seq_len with w at the beginning of the sequence and another window overlap at the end','line_number':526,'multiline':False]
['text':' chunk padded_value into chunks of size 3 window overlap and an overlap of size window overlap','line_number':529,'multiline':False]
['text':' helper variable','line_number':548,'multiline':False]
['text':' max number of global attn indices in batch','line_number':551,'multiline':False]
['text':' indices of global attn','line_number':554,'multiline':False]
['text':' helper variable','line_number':557,'multiline':False]
['text':' location of the non-padding values within global attention indices','line_number':562,'multiline':False]
['text':' location of the padding values within global attention indices','line_number':565,'multiline':False]
['text':' create only global key vectors','line_number':585,'multiline':False]
['text':' (batch_size, seq_len, num_heads, max_num_global_attn_indices)','line_number':592,'multiline':False]
['text':' need to transpose since ONNX export only supports consecutive indexing: https://pytorch.org/docs/stable/onnx.html#writes-sets','line_number':595,'multiline':False]
['text':' cut local attn probs to global only','line_number':614,'multiline':False]
['text':' get value vectors for global only','line_number':616,'multiline':False]
['text':' use `matmul` because `einsum` crashes sometimes with fp16','line_number':622,'multiline':False]
['text':' attn = torch.einsum('blhs,bshd->blhd', (selected_attn_probs, selected_v))','line_number':623,'multiline':False]
['text':' compute attn output only global','line_number':624,'multiline':False]
['text':' reshape attn probs','line_number':629,'multiline':False]
['text':' compute attn output with global','line_number':634,'multiline':False]
['text':' prepare global hidden states','line_number':652,'multiline':False]
['text':' global key, query, value','line_number':658,'multiline':False]
['text':' normalize','line_number':663,'multiline':False]
['text':' reshape','line_number':666,'multiline':False]
['text':' (batch_size * self.num_heads, max_num_global_attn_indices, head_dim)','line_number':671,'multiline':False]
['text':' batch_size * self.num_heads, seq_len, head_dim)','line_number':674,'multiline':False]
['text':' batch_size * self.num_heads, seq_len, head_dim)','line_number':677,'multiline':False]
['text':' compute attn scores','line_number':679,'multiline':False]
['text':' need to transpose since ONNX export only supports consecutive indexing: https://pytorch.org/docs/stable/onnx.html#writes-sets','line_number':694,'multiline':False]
['text':' compute global attn probs','line_number':708,'multiline':False]
['text':' use fp32 for numerical stability','line_number':711,'multiline':False]
['text':' apply layer head masking','line_number':713,'multiline':False]
['text':' global attn output','line_number':729,'multiline':False]
['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':826,'multiline':False]
['text':' for the decoder','line_number':827,'multiline':False]
['text':' get query proj','line_number':831,'multiline':False]
['text':' get key, value proj','line_number':833,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':835,'multiline':False]
['text':' cross_attentions','line_number':839,'multiline':False]
['text':' reuse k, v, self_attention','line_number':843,'multiline':False]
['text':' self_attention','line_number':849,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':854,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':855,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':856,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':857,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':858,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':859,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':860,'multiline':False]
['text':' this operation is a bit awkward, but it's required to','line_number':896,'multiline':False]
['text':' make sure that attn_weights keeps its gradient.','line_number':897,'multiline':False]
['text':' In order to do so, attn_weights have to be reshaped','line_number':898,'multiline':False]
['text':' twice and have to be reused in the following','line_number':899,'multiline':False]
['text':' Self-Attention','line_number':1046,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':1047,'multiline':False]
['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':1049,'multiline':False]
['text':' Cross-Attention Block','line_number':1061,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':1067,'multiline':False]
['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':1081,'multiline':False]
['text':' Fully Connected','line_number':1084,'multiline':False]
['text':' Copied from transformers.models.longformer.modeling_longformer.LongformerBaseModelOutput with Longformer->LEDEncoder','line_number':1156,'multiline':False]
['text':' one value per layer','line_number':1651,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1672,'multiline':False]
['text':' longformer self-attention expects attention mask to have 0 (no attn), 1 (local attn), 2 (global attn)','line_number':1676,'multiline':False]
['text':' (global_attention_mask + 1) => 1 for local attention, 2 for global attention','line_number':1677,'multiline':False]
['text':' => final attention_mask => 0 for no attention, 1 for local attention 2 for global attention','line_number':1678,'multiline':False]
['text':' simply use `global_attention_mask` as `attention_mask`','line_number':1682,'multiline':False]
['text':' if no `attention_mask` is given','line_number':1683,'multiline':False]
['text':' padding','line_number':1695,'multiline':False]
['text':' no attention on the padding tokens','line_number':1726,'multiline':False]
['text':' check input_ids and inputs_embeds','line_number':1792,'multiline':False]
['text':' create default attention_mask','line_number':1801,'multiline':False]
['text':' merge `global_attention_mask` and `attention_mask`','line_number':1805,'multiline':False]
['text':' pad input if necessary','line_number':1809,'multiline':False]
['text':' retrieve input_shape','line_number':1817,'multiline':False]
['text':' convert attention_mask to float','line_number':1824,'multiline':False]
['text':' [bsz, seq_len] -> [bsz, seq_len]; 1 -> 0.0; 0 -> "-inf"','line_number':1826,'multiline':False]
['text':' get masking tensors','line_number':1829,'multiline':False]
['text':' check if head_mask has a correct number of layers specified if desired','line_number':1844,'multiline':False]
['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1854,'multiline':False]
['text':' skip the layer','line_number':1857,'multiline':False]
['text':' bzs x seq_len x num_attn_heads x (num_global_attn + attention_window_len + 1) => bzs x num_attn_heads x seq_len x (num_global_attn + attention_window_len + 1)','line_number':1884,'multiline':False]
['text':' bzs x num_attn_heads x num_global_attn x seq_len => bzs x num_attn_heads x seq_len x num_global_attn','line_number':1888,'multiline':False]
['text':' undo padding','line_number':1894,'multiline':False]
['text':' unpad `hidden_states` because the calling function is expecting a length == input_ids.size(1)','line_number':1896,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1945,'multiline':False]
['text':' retrieve input_ids and inputs_embeds','line_number':2045,'multiline':False]
['text':' past_key_values_length','line_number':2056,'multiline':False]
['text':' create causal mask','line_number':2062,'multiline':False]
['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2063,'multiline':False]
['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2071,'multiline':False]
['text':' expand encoder attention mask','line_number':2076,'multiline':False]
['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2078,'multiline':False]
['text':' embed positions','line_number':2083,'multiline':False]
['text':' decoder layers','line_number':2098,'multiline':False]
['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':2104,'multiline':False]
['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':2113,'multiline':False]
['text':' add hidden states from the last decoder layer','line_number':2160,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':2196,'multiline':False]
['text':' Using this like Bart, as LED is derived from it. So far','line_number':2245,'multiline':False]
['text':' No checkpoint on the hub exists that uses that in practice.','line_number':2246,'multiline':False]
['text':' https://github.com/huggingface/transformers/blob/ac3cb660cad283163f7c73cad511124e845ca388/src/transformers/models/bart/modeling_bart.py#L1153','line_number':2247,'multiline':False]
['text':' If the user passed a tuple for encoder_outputs, we wrap it in a LEDEncoderBaseModelOutput when return_dict=False','line_number':2264,'multiline':False]
['text':' decoder outputs consists of (dec_features, past_key_value, dec_hidden, dec_attn)','line_number':2273,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':2319,'multiline':False]
['text':' cut decoder_input_ids if past is used','line_number':2459,'multiline':False]
['text':' encoder_outputs is defined. input_ids not needed','line_number':2464,'multiline':False]
['text':' change this to avoid caching (presumably for debugging)','line_number':2473,'multiline':False]
['text':' cached cross_attention states don't have to be reordered -> they are always the same','line_number':2483,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':2517,'multiline':False]
['text':' last hidden state','line_number':2576,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':2646,'multiline':False]
['text':' If we are on multi-GPU, split add a dimension','line_number':2716,'multiline':False]
['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':2721,'multiline':False]
