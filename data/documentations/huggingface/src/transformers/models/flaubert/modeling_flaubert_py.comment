['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2019-present CNRS, Facebook Inc. and the HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all Flaubert models at https://huggingface.co/models?filter=flaubert','line_number':59,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.create_sinusoidal_embeddings','line_number':63,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.get_masks','line_number':72,'multiline':False]
['text':' attention mask is the same as mask, or triangular inferior attention (causal)','line_number':84,'multiline':False]
['text':' sanity check','line_number':91,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.MultiHeadAttention','line_number':98,'multiline':False]
['text':' Prune linear layers','line_number':121,'multiline':False]
['text':' Update hyper params','line_number':126,'multiline':False]
['text':' Input is (bs, qlen, dim)','line_number':135,'multiline':False]
['text':' Mask is (bs, klen) (non-causal) or (bs, klen, klen)','line_number':136,'multiline':False]
['text':' assert dim == self.dim, f'Dimensions do not match: {dim} input vs {self.dim} configured'','line_number':142,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':155,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':157,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':158,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':161,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':162,'multiline':False]
['text':' (bs, n_heads, klen, dim_per_head)','line_number':168,'multiline':False]
['text':' (bs, n_heads, klen, dim_per_head)','line_number':169,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':174,'multiline':False]
['text':' (bs, n_heads, qlen, klen)','line_number':175,'multiline':False]
['text':' (bs, n_heads, qlen, klen)','line_number':176,'multiline':False]
['text':' (bs, n_heads, qlen, klen)','line_number':177,'multiline':False]
['text':' (bs, n_heads, qlen, klen)','line_number':179,'multiline':False]
['text':' (bs, n_heads, qlen, klen)','line_number':180,'multiline':False]
['text':' Mask heads if we want to','line_number':182,'multiline':False]
['text':' (bs, n_heads, qlen, dim_per_head)','line_number':186,'multiline':False]
['text':' (bs, qlen, dim)','line_number':187,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.TransformerFFN','line_number':195,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.XLMPredLayer with XLM->Flaubert','line_number':296,'multiline':False]
['text':' default is False','line_number':317,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.XLMPreTrainedModel with XLM->Flaubert','line_number':339,'multiline':False]
['text':' , dico, is_encoder, with_output):','line_number':381,'multiline':False]
['text':' encoder / decoder, output layer','line_number':384,'multiline':False]
['text':' self.with_output = with_output','line_number':389,'multiline':False]
['text':' dictionary / languages','line_number':392,'multiline':False]
['text':' self.dico = dico','line_number':398,'multiline':False]
['text':' self.id2lang = config.id2lang','line_number':399,'multiline':False]
['text':' self.lang2id = config.lang2id','line_number':400,'multiline':False]
['text':' assert len(self.dico) == self.n_words','line_number':401,'multiline':False]
['text':' assert len(self.id2lang) == len(self.lang2id) == self.n_langs','line_number':402,'multiline':False]
['text':' model parameters','line_number':404,'multiline':False]
['text':' 512 by default','line_number':405,'multiline':False]
['text':' 2048 by default','line_number':406,'multiline':False]
['text':' 8 by default','line_number':407,'multiline':False]
['text':' embeddings','line_number':413,'multiline':False]
['text':' transformer layers','line_number':422,'multiline':False]
['text':' if self.is_decoder:','line_number':427,'multiline':False]
['text':'     self.layer_norm15 = nn.ModuleList()','line_number':428,'multiline':False]
['text':'     self.encoder_attn = nn.ModuleList()','line_number':429,'multiline':False]
['text':' if self.is_decoder:','line_number':434,'multiline':False]
['text':'     self.layer_norm15.append(nn.LayerNorm(self.dim, eps=config.layer_norm_eps))','line_number':435,'multiline':False]
['text':'     self.encoder_attn.append(MultiHeadAttention(self.n_heads, self.dim, dropout=self.attention_dropout))','line_number':436,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':447,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.XLMModel.get_input_embeddings','line_number':456,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.XLMModel.set_input_embeddings','line_number':460,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.XLMModel._prune_heads','line_number':464,'multiline':False]
['text':' removed: src_enc=None, src_len=None','line_number':500,'multiline':False]
['text':' mask = input_ids != self.pad_index','line_number':513,'multiline':False]
['text':' check inputs','line_number':515,'multiline':False]
['text':' input_ids = input_ids.transpose(0, 1)  # batch size as dimension 0','line_number':518,'multiline':False]
['text':' assert (src_enc is None) == (src_len is None)','line_number':519,'multiline':False]
['text':' if src_enc is not None:','line_number':520,'multiline':False]
['text':'     assert self.is_decoder','line_number':521,'multiline':False]
['text':'     assert src_enc.size(0) == bs','line_number':522,'multiline':False]
['text':' generate masks','line_number':524,'multiline':False]
['text':' if self.is_decoder and src_enc is not None:','line_number':526,'multiline':False]
['text':'     src_mask = torch.arange(src_len.max(), dtype=torch.long, device=lengths.device) < src_len[:, None]','line_number':527,'multiline':False]
['text':' Setting the position-ids to the registered buffer in constructor, it helps','line_number':529,'multiline':False]
['text':' when tracing the model without passing position-ids, solves','line_number':530,'multiline':False]
['text':' isues similar to issue #5664','line_number':531,'multiline':False]
['text':' (slen, bs)','line_number':540,'multiline':False]
['text':' position_ids = position_ids.transpose(0, 1)','line_number':541,'multiline':False]
['text':' langs','line_number':543,'multiline':False]
['text':' (slen, bs)','line_number':545,'multiline':False]
['text':' langs = langs.transpose(0, 1)','line_number':546,'multiline':False]
['text':' Prepare head mask if needed','line_number':548,'multiline':False]
['text':' do not recompute cached elements','line_number':551,'multiline':False]
['text':' embeddings','line_number':561,'multiline':False]
['text':' transformer layers','line_number':574,'multiline':False]
['text':' LayerDrop','line_number':578,'multiline':False]
['text':' self attention','line_number':587,'multiline':False]
['text':' encoder attention (for decoder only)','line_number':611,'multiline':False]
['text':' if self.is_decoder and src_enc is not None:','line_number':612,'multiline':False]
['text':'     attn = self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)','line_number':613,'multiline':False]
['text':'     attn = nn.functional.dropout(attn, p=self.dropout, training=self.training)','line_number':614,'multiline':False]
['text':'     tensor = tensor + attn','line_number':615,'multiline':False]
['text':'     tensor = self.layer_norm15[i](tensor)','line_number':616,'multiline':False]
['text':' FFN','line_number':618,'multiline':False]
['text':' Add last hidden state','line_number':628,'multiline':False]
['text':' update cache length','line_number':632,'multiline':False]
['text':' move back sequence length to dimension 0','line_number':636,'multiline':False]
['text':' tensor = tensor.transpose(0, 1)','line_number':637,'multiline':False]
['text':' Copied transformers.models.xlm.modeling_xlm.XLMWithLMHeadModel with XLM_INPUTS->FLAUBERT_INPUTS,XLM->Flaubert','line_number':652,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':661,'multiline':False]
['text':' (loss, logits) or (logits,) depending on if labels are provided.','line_number':730,'multiline':False]
['text':' Copied transformers.models.xlm.modeling_xlm.XLMForSequenceClassification with XLM_INPUTS->FLAUBERT_INPUTS,XLM->Flaubert','line_number':750,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':760,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.XLMForTokenClassification with XLM_INPUTS->FLAUBERT_INPUTS,XLM->Flaubert','line_number':853,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':863,'multiline':False]
['text':' Copied from transformers.models.xlm.modeling_xlm.XLMForQuestionAnsweringSimple with XLM_INPUTS->FLAUBERT_INPUTS,XLM->Flaubert','line_number':938,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':946,'multiline':False]
['text':' If we are on multi-GPU, split add a dimension','line_number':1008,'multiline':False]
['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1013,'multiline':False]
['text':' Copied from transformer.models.xlm.modeling_xlm.XLMForQuestionAnsweringOutput with XLM->Flaubert','line_number':1044,'multiline':False]
['text':' Copied from transformer.models.xlm.modeling_xlm.XLMForQuestionAnswering with XLM_INPUTS->FLAUBERT_INPUTS,XLM->Flaubert','line_number':1087,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1095,'multiline':False]
['text':' Copied from transformer.models.xlm.modeling_xlm.XLMForMultipleChoice with XLM_INPUTS->FLAUBERT_INPUTS,XLM->Flaubert','line_number':1209,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1218,'multiline':False]
