['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2021 NVIDIA Corporation and The HuggingFace Team.','line_number':2,'multiline':False]
['text':' Copyright (c) 2018-2021, NVIDIA CORPORATION.  All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':' soft dependency','line_number':57,'multiline':False]
['text':' See all BERT models at https://huggingface.co/models?filter=bert','line_number':74,'multiline':False]
['text':' Load weights from TF model','line_number':93,'multiline':False]
['text':' adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v','line_number':105,'multiline':False]
['text':' which are not required for using pretrained model','line_number':106,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEmbeddings with Bert -> QDQBert','line_number':151,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':161,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':162,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':165,'multiline':False]
['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':192,'multiline':False]
['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':193,'multiline':False]
['text':' issue #5664','line_number':194,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':263,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':264,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':265,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':269,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':289,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':290,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':291,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':292,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':293,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':294,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':295,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':298,'multiline':False]
['text':' fp16 compatibility','line_number':309,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in QDQBertModel forward() function)','line_number':321,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':324,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':327,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':328,'multiline':False]
['text':' Mask heads if we want to','line_number':331,'multiline':False]
['text':' Quantize Linear layer','line_number':353,'multiline':False]
['text':' Quantize the inputs to the residual add','line_number':359,'multiline':False]
['text':' Quantize the inputs to the residual add','line_number':366,'multiline':False]
['text':' Based on transformers.models.bert.modeling_bert.BertAttention with Bert -> QDQBert','line_number':373,'multiline':False]
['text':' Prune linear layers','line_number':388,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':394,'multiline':False]
['text':' add attentions if we output them','line_number':419,'multiline':False]
['text':' Quantize Linear layer','line_number':426,'multiline':False]
['text':' Quantize Linear layer','line_number':442,'multiline':False]
['text':' Quantize the inputs to the residual add','line_number':447,'multiline':False]
['text':' Quantize the inputs to the residual add','line_number':454,'multiline':False]
['text':' Based on transformers.models.bert.modeling_bert.BertLayer with Bert -> QDQBert','line_number':461,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':486,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':497,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':502,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':512,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':524,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':526,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':533,'multiline':False]
['text':' Based on transformers.models.bert.modeling_bert.BertEncoder with Bert -> QDQBert','line_number':545,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPooler with Bert -> QDQBert','line_number':637,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':645,'multiline':False]
['text':' to the first token.','line_number':646,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert -> QDQBert','line_number':653,'multiline':False]
['text':' Based on transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert -> QDQBert','line_number':671,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':677,'multiline':False]
['text':' an output-only bias for each token.','line_number':678,'multiline':False]
['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':683,'multiline':False]
['text':' Based on transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert -> QDQBert','line_number':692,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyNSPHead with Bert -> QDQBert','line_number':703,'multiline':False]
['text':' Based on transformers.models.bert.modeling_bert.BertPreTrainingHeads with Bert -> QDQBert','line_number':714,'multiline':False]
['text':' Based on transformers.models.bert.modeling_bert.BertPreTrainedModel with Bert -> QDQBert','line_number':727,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':742,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':743,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':849,'multiline':False]
['text':' past_key_values_length','line_number':933,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':947,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':948,'multiline':False]
['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':951,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':952,'multiline':False]
['text':' Prepare head mask if needed','line_number':962,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':963,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':964,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':965,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':966,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1019,'multiline':False]
['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':1114,'multiline':False]
['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1141,'multiline':False]
['text':' cut decoder_input_ids if past_key_values is used','line_number':1145,'multiline':False]
['text':' Some generation methods already pass only the last input ID','line_number':1149,'multiline':False]
['text':' Default to old behavior: keep only final ID','line_number':1153,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1185,'multiline':False]
['text':' -100 index = padding token','line_number':1243,'multiline':False]
['text':'  add a dummy token','line_number':1263,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1287,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1393,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1489,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1581,'multiline':False]
['text':' Initialize weights and apply final processing','line_number':1658,'multiline':False]
['text':' If we are on multi-GPU, split add a dimension','line_number':1714,'multiline':False]
['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1719,'multiline':False]
