['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2021 The HuggingFace Team and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all RemBERT models at https://huggingface.co/models?filter=rembert','line_number':66,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfAttention with Bert->RemBert','line_number':152,'multiline':False]
['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':183,'multiline':False]
['text':' Transpose the tensor from [batch_size, seq_length, num_attention_heads, attention_head_size] to [batch_size, num_attention_heads, seq_length, attention_head_size]','line_number':186,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':203,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':204,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':205,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':209,'multiline':False]
['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':229,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':230,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':231,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':232,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':233,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':234,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':235,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':238,'multiline':False]
['text':' (batch size, num_heads, seq_len_q, seq_len_k)','line_number':239,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in TFRemBertModel call() function)','line_number':245,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':248,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':251,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':252,'multiline':False]
['text':' Mask heads if we want to','line_number':255,'multiline':False]
['text':' (batch_size, seq_len_q, all_head_size)','line_number':262,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfOutput with Bert->RemBert','line_number':285,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertAttention with Bert->RemBert','line_number':316,'multiline':False]
['text':' add attentions (possibly with past_key_value) if we output them','line_number':351,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertIntermediate with Bert->RemBert','line_number':368,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertOutput with Bert->RemBert','line_number':398,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLayer with Bert->RemBert','line_number':429,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':455,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':469,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':474,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':484,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':497,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':499,'multiline':False]
['text':' add attentions if we output them','line_number':507,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':509,'multiline':False]
['text':' Add last layer','line_number':591,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPooler with Bert->RemBert','line_number':621,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':635,'multiline':False]
['text':' to the first token.','line_number':636,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMLMHead with Bert->RemBert','line_number':713,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer.call','line_number':763,'multiline':False]
['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':816,'multiline':False]
['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':817,'multiline':False]
['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':818,'multiline':False]
['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':819,'multiline':False]
['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':820,'multiline':False]
['text':' Copied from `modeling_tf_t5.py`','line_number':824,'multiline':False]
['text':' Provided a padding mask of dimensions [batch_size, mask_seq_length]','line_number':825,'multiline':False]
['text':' - if the model is a decoder, apply a causal mask in addition to the padding mask','line_number':826,'multiline':False]
['text':' - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':827,'multiline':False]
['text':' attention_mask needs to be sliced to the shape `[batch_size, 1, from_seq_length - cached_seq_length, to_seq_length]','line_number':841,'multiline':False]
['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':848,'multiline':False]
['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':849,'multiline':False]
['text':' positions we want to attend and -10000.0 for masked positions.','line_number':850,'multiline':False]
['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':851,'multiline':False]
['text':' effectively the same as removing these entirely.','line_number':852,'multiline':False]
['text':' Copied from `modeling_tf_t5.py` with -1e9 -> -10000','line_number':858,'multiline':False]
['text':' If a 2D ou 3D attention mask is provided for the cross-attention','line_number':860,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':861,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':862,'multiline':False]
['text':' T5 has a mask that can compare sequence ids, we can simulate this here with this transposition','line_number':870,'multiline':False]
['text':' Cf. https://github.com/tensorflow/mesh/blob/8d2465e9bc93129b913b5ccc6a59aa97abd96ec6/mesh_tensorflow/transformer/transformer_layers.py#L270','line_number':871,'multiline':False]
['text':' encoder_extended_attention_mask = tf.math.equal(encoder_extended_attention_mask,','line_number':872,'multiline':False]
['text':'                                         tf.transpose(encoder_extended_attention_mask, perm=(-1, -2)))','line_number':873,'multiline':False]
['text':' Prepare head mask if needed','line_number':879,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':880,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':881,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':882,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':883,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLMHeadModel.prepare_inputs_for_generation','line_number':1225,'multiline':False]
['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1228,'multiline':False]
['text':' cut decoder_input_ids if past is used','line_number':1232,'multiline':False]
['text':' shift labels to the left and cut last logit token','line_number':1306,'multiline':False]
