['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 Facebook AI Research (FAIR) and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' General docstring','line_number':55,'multiline':False]
['text':' Base docstring','line_number':58,'multiline':False]
['text':' Image classification docstring','line_number':62,'multiline':False]
['text':' See all DeiT models at https://huggingface.co/models?filter=deit','line_number':69,'multiline':False]
['text':' replace the masked visual tokens by mask_tokens','line_number':163,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTSelfAttention with ViT->DeiT','line_number':224,'multiline':False]
['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':253,'multiline':False]
['text':' Transpose the tensor from [batch_size, seq_length, num_attention_heads, attention_head_size] to [batch_size, num_attention_heads, seq_length, attention_head_size]','line_number':256,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':274,'multiline':False]
['text':' (batch size, num_heads, seq_len_q, seq_len_k)','line_number':275,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':280,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':283,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':284,'multiline':False]
['text':' Mask heads if we want to','line_number':287,'multiline':False]
['text':' (batch_size, seq_len_q, all_head_size)','line_number':294,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTSelfOutput with ViT->DeiT','line_number':315,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTAttention with ViT->DeiT','line_number':346,'multiline':False]
['text':' add attentions if we output them','line_number':370,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTIntermediate with ViT->DeiT','line_number':386,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTOutput with ViT->DeiT','line_number':416,'multiline':False]
['text':' in DeiT, layernorm is applied before self-attention','line_number':469,'multiline':False]
['text':' first residual connection','line_number':477,'multiline':False]
['text':' in DeiT, layernorm is also applied after self-attention','line_number':480,'multiline':False]
['text':' second residual connection is done here','line_number':485,'multiline':False]
['text':' add attentions if we output them','line_number':489,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTEncoder with ViT->DeiT','line_number':514,'multiline':False]
['text':' Add last layer','line_number':548,'multiline':False]
['text':' TF 2.0 image layers can't use NCHW format when running on CPU.','line_number':623,'multiline':False]
['text':' (batch_size, num_channels, height, width) -> (batch_size, height, width, num_channels)','line_number':624,'multiline':False]
['text':' Prepare head mask if needed','line_number':627,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':628,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':629,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':630,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':631,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTPreTrainedModel with ViT->DeiT all-casing','line_number':677,'multiline':False]
['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTPooler with ViT->DeiT','line_number':776,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':790,'multiline':False]
['text':' to the first token.','line_number':791,'multiline':False]
['text':' When the number of output channels >= 2, PyTorch's PixelShuffle and','line_number':820,'multiline':False]
['text':' TF's depth_to_space differ in their output as the order of channels selected for combining','line_number':821,'multiline':False]
['text':' is a permutation of the other c.f.','line_number':822,'multiline':False]
['text':' https://stackoverflow.com/questions/68272502/tf-depth-to-space-not-same-as-torchs-pixelshuffle-when-output-channels-1','line_number':823,'multiline':False]
['text':' Reshape to (batch_size, num_channels, height, width)','line_number':927,'multiline':False]
['text':' Reconstruct pixel values','line_number':933,'multiline':False]
['text':' TF 2.0 image layers can't use NCHW format when running on CPU, so intermediate layers use NHWC,','line_number':935,'multiline':False]
['text':' including the decoder. We transpose to compute the loss against the pixel values','line_number':936,'multiline':False]
['text':' (batch_size, height, width, num_channels) -> (batch_size, num_channels, height, width)','line_number':937,'multiline':False]
['text':' Swap axes as metric calculation reduces over the final dimension','line_number':950,'multiline':False]
['text':' Classifier head','line_number':997,'multiline':False]
['text':' we don't use the distillation token','line_number':1065,'multiline':False]
['text':' Classifier heads','line_number':1111,'multiline':False]
['text':' during inference, return the average of both classifier predictions','line_number':1157,'multiline':False]
