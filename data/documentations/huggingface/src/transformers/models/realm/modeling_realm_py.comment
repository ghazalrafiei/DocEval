['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 The REALM authors and The HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all REALM models at https://huggingface.co/models?filter=realm','line_number':54,'multiline':False]
['text':' Load weights from TF model','line_number':73,'multiline':False]
['text':' For pretrained openqa reader','line_number':89,'multiline':False]
['text':' For pretrained encoder','line_number':94,'multiline':False]
['text':' For finetuned reader','line_number':98,'multiline':False]
['text':' For embedder and scorer','line_number':107,'multiline':False]
['text':' finetuned','line_number':108,'multiline':False]
['text':' pretrained','line_number':116,'multiline':False]
['text':' adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v','line_number':122,'multiline':False]
['text':' which are not required for using pretrained model','line_number':123,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEmbeddings with Bert->Realm','line_number':165,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':175,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':176,'multiline':False]
['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':179,'multiline':False]
['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':206,'multiline':False]
['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':207,'multiline':False]
['text':' issue #5664','line_number':208,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->Realm','line_number':230,'multiline':False]
['text':' If this is instantiated as a cross-attention module, the keys','line_number':275,'multiline':False]
['text':' and values come from an encoder; the attention mask needs to be','line_number':276,'multiline':False]
['text':' such that the encoder's padding tokens are not attended to.','line_number':277,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':281,'multiline':False]
['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':302,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':303,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':304,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':305,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':306,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':307,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':308,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':311,'multiline':False]
['text':' fp16 compatibility','line_number':326,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in RealmModel forward() function)','line_number':338,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':341,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':344,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':345,'multiline':False]
['text':' Mask heads if we want to','line_number':348,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->Realm','line_number':365,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertAttention with Bert->Realm','line_number':380,'multiline':False]
['text':' Prune linear layers','line_number':395,'multiline':False]
['text':' Update hyper params and store pruned heads','line_number':401,'multiline':False]
['text':' add attentions if we output them','line_number':426,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->Realm','line_number':430,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->Realm','line_number':446,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertLayer with Bert->Realm','line_number':461,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':487,'multiline':False]
['text':' if decoder, the last output is tuple of self-attn cache','line_number':498,'multiline':False]
['text':' add self attentions if we output attention weights','line_number':503,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':513,'multiline':False]
['text':' add cross attentions if we output attention weights','line_number':525,'multiline':False]
['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':527,'multiline':False]
['text':' if decoder, return the attn key/values as the last output','line_number':536,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder with Bert->Realm','line_number':548,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_bert.BertPooler with Bert->Realm','line_number':642,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':650,'multiline':False]
['text':' to the first token.','line_number':651,'multiline':False]
['text':' The output weights are the same as the input embeddings, but there is','line_number':793,'multiline':False]
['text':' an output-only bias for each token.','line_number':794,'multiline':False]
['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':799,'multiline':False]
['text':' [num_spans]','line_number':861,'multiline':False]
['text':' [num_retrievals, num_spans]','line_number':865,'multiline':False]
['text':' [reader_beam_size, max_sequence_len, span_hidden_size * 2]','line_number':875,'multiline':False]
['text':' [reader_beam_size, max_sequence_len, span_hidden_size]','line_number':877,'multiline':False]
['text':' [reader_beam_size, num_candidates, span_hidden_size]','line_number':886,'multiline':False]
['text':' [reader_beam_size, num_candidates, span_hidden_size]','line_number':888,'multiline':False]
['text':' [reader_beam_size, num_candidates]','line_number':890,'multiline':False]
['text':' [reader_beam_size, num_candidates]','line_number':892,'multiline':False]
['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':972,'multiline':False]
['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':973,'multiline':False]
['text':' Weights initialization is mostly managed by other Realm models,','line_number':1013,'multiline':False]
['text':' but we also have them initialized here to keep a consistency.','line_number':1014,'multiline':False]
['text':' past_key_values_length','line_number':1071,'multiline':False]
['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':1085,'multiline':False]
['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':1086,'multiline':False]
['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':1089,'multiline':False]
['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':1090,'multiline':False]
['text':' Prepare head mask if needed','line_number':1100,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':1101,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':1102,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':1103,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':1104,'multiline':False]
['text':' [batch_size, hidden_size]','line_number':1209,'multiline':False]
['text':' [batch_size, retriever_proj_size]','line_number':1211,'multiline':False]
['text':' [batch_size * num_candidates, candidate_seq_len]','line_number':1337,'multiline':False]
['text':' [batch_size, retriever_proj_size]','line_number':1354,'multiline':False]
['text':' [batch_size * num_candidates, retriever_proj_size]','line_number':1356,'multiline':False]
['text':' [batch_size, num_candidates, retriever_proj_size]','line_number':1358,'multiline':False]
['text':' [batch_size, num_candidates]','line_number':1360,'multiline':False]
['text':' [batch_size * num_candidates, joint_seq_len, hidden_size]','line_number':1472,'multiline':False]
['text':' [batch_size * num_candidates, joint_seq_len, vocab_size]','line_number':1474,'multiline':False]
['text':' [batch_size, num_candidates]','line_number':1476,'multiline':False]
['text':' Compute marginal log-likelihood','line_number':1493,'multiline':False]
['text':' -100 index = padding token','line_number':1494,'multiline':False]
['text':' [batch_size * num_candidates * joint_seq_len, vocab_size]','line_number':1496,'multiline':False]
['text':' [batch_size * num_candidates * joint_seq_len]','line_number':1498,'multiline':False]
['text':' [batch_size, num_candidates, joint_seq_len]','line_number':1500,'multiline':False]
['text':' [batch_size, num_candidates, 1]','line_number':1504,'multiline':False]
['text':' [batch_size, num_candidates, joint_seq_len]','line_number':1506,'multiline':False]
['text':' [batch_size, joint_seq_len]','line_number':1508,'multiline':False]
['text':' []','line_number':1510,'multiline':False]
['text':' [reader_beam_size, joint_seq_len, hidden_size]','line_number':1595,'multiline':False]
['text':' [reader_beam_size, num_candidates], [num_candidates], [num_candidates]','line_number':1598,'multiline':False]
['text':' [searcher_beam_size, 1]','line_number':1602,'multiline':False]
['text':' [reader_beam_size, num_candidates]','line_number':1604,'multiline':False]
['text':' []','line_number':1606,'multiline':False]
['text':' []','line_number':1608,'multiline':False]
['text':' [1]','line_number':1610,'multiline':False]
['text':' [1]','line_number':1612,'multiline':False]
['text':' [reader_beam_size, num_answers, num_candidates]','line_number':1624,'multiline':False]
['text':' [reader_beam_size, num_candidates]','line_number':1632,'multiline':False]
['text':' []','line_number':1641,'multiline':False]
['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1646,'multiline':False]
['text':' `-1` is reserved for no answer.','line_number':1647,'multiline':False]
['text':' [1, projection_size]','line_number':1808,'multiline':False]
['text':' CPU computation starts.','line_number':1811,'multiline':False]
['text':' [1, block_emb_size]','line_number':1812,'multiline':False]
['text':' [1, searcher_beam_size]','line_number':1814,'multiline':False]
['text':' [searcher_beam_size]','line_number':1816,'multiline':False]
['text':' [searcher_beam_size, projection_size]','line_number':1818,'multiline':False]
['text':' CPU computation ends.','line_number':1820,'multiline':False]
['text':' Retrieve possible answers','line_number':1822,'multiline':False]
['text':' [searcher_beam_size]','line_number':1836,'multiline':False]
