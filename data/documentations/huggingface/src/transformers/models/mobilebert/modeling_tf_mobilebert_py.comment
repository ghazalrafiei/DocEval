['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2018 The Google AI Language Team Authors and The HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':' Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':' TokenClassification docstring','line_number':69,'multiline':False]
['text':' QuestionAnswering docstring','line_number':74,'multiline':False]
['text':' SequenceClassification docstring','line_number':81,'multiline':False]
['text':' See all MobileBERT models at https://huggingface.co/models?filter=mobilebert','line_number':88,'multiline':False]
['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPreTrainingLoss','line_number':92,'multiline':False]
['text':' Clip negative labels to zero here to avoid NaNs and errors - those positions will get masked later anyway','line_number':105,'multiline':False]
['text':' make sure only labels that are not equal to -100','line_number':107,'multiline':False]
['text':' are taken into account for the loss computation','line_number':108,'multiline':False]
['text':' Clip negative labels to zero here to avoid NaNs and errors - those positions will get masked later anyway','line_number':113,'multiline':False]
['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':190,'multiline':False]
['text':' any TensorFlow checkpoint file','line_number':191,'multiline':False]
['text':' From the paper MobileBERT: a Compact Task-Agnostic BERT for Resource-Limited','line_number':249,'multiline':False]
['text':' Devices (https://arxiv.org/abs/2004.02984)','line_number':250,'multiline':False]
['text':'','line_number':251,'multiline':False]
['text':' The embedding table in BERT models accounts for a substantial proportion of model size. To compress','line_number':252,'multiline':False]
['text':' the embedding layer, we reduce the embedding dimension to 128 in MobileBERT.','line_number':253,'multiline':False]
['text':' Then, we apply a 1D convolution with kernel size 3 on the raw token embedding to produce a 512','line_number':254,'multiline':False]
['text':' dimensional output.','line_number':255,'multiline':False]
['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':309,'multiline':False]
['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':324,'multiline':False]
['text':' (batch size, num_heads, seq_len_q, seq_len_k)','line_number':327,'multiline':False]
['text':' scale attention_scores','line_number':328,'multiline':False]
['text':' Apply the attention mask is (precomputed for all layers in TFMobileBertModel call() function)','line_number':332,'multiline':False]
['text':' Normalize the attention scores to probabilities.','line_number':336,'multiline':False]
['text':' This is actually dropping out entire tokens to attend to, which might','line_number':339,'multiline':False]
['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':340,'multiline':False]
['text':' Mask heads if we want to','line_number':343,'multiline':False]
['text':' (batch_size, seq_len_q, all_head_size)','line_number':352,'multiline':False]
['text':' add attentions if we output them','line_number':439,'multiline':False]
['text':' This method can return three different tuples of values. These different values make use of bottlenecks,','line_number':559,'multiline':False]
['text':' which are linear layers used to project the hidden states to a lower-dimensional vector, reducing memory','line_number':560,'multiline':False]
['text':' usage. These linear layer have weights that are learned during training.','line_number':561,'multiline':False]
['text':'','line_number':562,'multiline':False]
['text':' If `config.use_bottleneck_attention`, it will return the result of the bottleneck layer four times for the','line_number':563,'multiline':False]
['text':' key, query, value, and "layer input" to be used by the attention layer.','line_number':564,'multiline':False]
['text':' This bottleneck is used to project the hidden. This last layer input will be used as a residual tensor','line_number':565,'multiline':False]
['text':' in the attention self output, after the attention scores have been computed.','line_number':566,'multiline':False]
['text':'','line_number':567,'multiline':False]
['text':' If not `config.use_bottleneck_attention` and `config.key_query_shared_bottleneck`, this will return','line_number':568,'multiline':False]
['text':' four values, three of which have been passed through a bottleneck: the query and key, passed through the same','line_number':569,'multiline':False]
['text':' bottleneck, and the residual layer to be applied in the attention self output, through another bottleneck.','line_number':570,'multiline':False]
['text':'','line_number':571,'multiline':False]
['text':' Finally, in the last case, the values for the query, key and values are the hidden states without bottleneck,','line_number':572,'multiline':False]
['text':' and the residual layer will be this value passed through a bottleneck.','line_number':573,'multiline':False]
['text':' add attentions if we output them','line_number':700,'multiline':False]
['text':' Add last layer','line_number':758,'multiline':False]
['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':792,'multiline':False]
['text':' to the first token.','line_number':793,'multiline':False]
['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':970,'multiline':False]
['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':971,'multiline':False]
['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':972,'multiline':False]
['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':973,'multiline':False]
['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':974,'multiline':False]
['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':977,'multiline':False]
['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':978,'multiline':False]
['text':' positions we want to attend and -10000.0 for masked positions.','line_number':979,'multiline':False]
['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':980,'multiline':False]
['text':' effectively the same as removing these entirely.','line_number':981,'multiline':False]
['text':' Prepare head mask if needed','line_number':987,'multiline':False]
['text':' 1.0 in head_mask indicate we keep the head','line_number':988,'multiline':False]
['text':' attention_probs has shape bsz x n_heads x N x N','line_number':989,'multiline':False]
['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':990,'multiline':False]
['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':991,'multiline':False]
['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1342,'multiline':False]
['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1461,'multiline':False]
['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1557,'multiline':False]
['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1659,'multiline':False]
['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1770,'multiline':False]
['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1883,'multiline':False]
