['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 The OpenAI Authors and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' See all Whisper models at https://huggingface.co/models?filter=whisper','line_number':56,'multiline':False]
['text':' Copied from transformers.models.bart.modeling_tf_bart.shift_tokens_right','line_number':75,'multiline':False]
['text':' replace possible -100 values in labels by `pad_token_id`','line_number':83,'multiline':False]
['text':' "Verify that `labels` has only positive values and -100"','line_number':90,'multiline':False]
['text':' Make sure the assertion op is called by wrapping the result in an identity no-op','line_number':93,'multiline':False]
['text':' Copied from transformers.models.bart.modeling_tf_bart._make_causal_mask','line_number':100,'multiline':False]
['text':' Copied from transformers.models.bart.modeling_tf_bart._expand_mask','line_number':118,'multiline':False]
['text':' Copied from transformers.models.bart.modeling_tf_bart.TFBartAttention._shape with BART->whisper','line_number':193,'multiline':False]
['text':' Copied from transformers.models.bart.modeling_tf_bart.TFBartAttention.call with BART->whisper','line_number':197,'multiline':False]
['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':209,'multiline':False]
['text':' for the decoder','line_number':210,'multiline':False]
['text':' get query proj','line_number':214,'multiline':False]
['text':' get key, value proj','line_number':216,'multiline':False]
['text':' reuse k,v, cross_attentions','line_number':218,'multiline':False]
['text':' cross_attentions','line_number':222,'multiline':False]
['text':' reuse k, v, self_attention','line_number':226,'multiline':False]
['text':' self_attention','line_number':232,'multiline':False]
['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':237,'multiline':False]
['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':238,'multiline':False]
['text':' key/value_states (first "if" case)','line_number':239,'multiline':False]
['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':240,'multiline':False]
['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':241,'multiline':False]
['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':242,'multiline':False]
['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':243,'multiline':False]
['text':' Copied from transformers.models.speech_to_text.modeling_tf_speech_to_text.TFSpeech2TextEncoderLayer with Speech2Text->Whisper','line_number':334,'multiline':False]
['text':' Copied from transformers.models.speech_to_text.modeling_tf_speech_to_text.TFSpeech2TextDecoderLayer with Speech2Text->Whisper','line_number':411,'multiline':False]
['text':' Self Attention','line_number':471,'multiline':False]
['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':472,'multiline':False]
['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':474,'multiline':False]
['text':' Cross-Attention Block','line_number':485,'multiline':False]
['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':492,'multiline':False]
['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':505,'multiline':False]
['text':' Fully Connected','line_number':508,'multiline':False]
['text':' Padding is added in call() to match the PyTorch implementation','line_number':705,'multiline':False]
['text':' TF 2.0 layers can't use channels first format when running on CPU.','line_number':762,'multiline':False]
['text':' check if head_mask has a correct number of layers specified if desired','line_number':778,'multiline':False]
['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':792,'multiline':False]
['text':' skip the layer','line_number':794,'multiline':False]
['text':' create causal mask','line_number':880,'multiline':False]
['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':881,'multiline':False]
['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':891,'multiline':False]
['text':' retrieve input_ids and inputs_embeds','line_number':982,'multiline':False]
['text':' past_key_values_length','line_number':993,'multiline':False]
['text':' embed positions','line_number':1002,'multiline':False]
['text':' decoder layers','line_number':1009,'multiline':False]
['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':1015,'multiline':False]
['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1028,'multiline':False]
['text':' add hidden states from the last decoder layer','line_number':1058,'multiline':False]
['text':' If the user passed a tuple for encoder_outputs, we wrap it in a TFBaseModelOutput when return_dict=True','line_number':1179,'multiline':False]
['text':' decoder outputs consists of (dec_features, past_key_value, dec_hidden, dec_attn)','line_number':1187,'multiline':False]
['text':' Decoder and encoder embeddings are tied','line_number':1458,'multiline':False]
['text':' Legacy code for backward compatibility','line_number':1595,'multiline':False]
['text':' automatically detect the language','line_number':1628,'multiline':False]
['text':' defaults to transcribe','line_number':1638,'multiline':False]
['text':' Slicing the text prompt ids in a manner consistent with the OpenAI implementation','line_number':1653,'multiline':False]
['text':' to accomodate context space for the prefix (see https://github.com/openai/whisper/blob/c09a7ae299c4c34c5839a76380ae407e7d785914/whisper/decoding.py#L599)','line_number':1654,'multiline':False]
['text':' Set the decoder_start_token_id to <|startofprev|>','line_number':1656,'multiline':False]
['text':' Update the max generation length to include the prompt','line_number':1659,'multiline':False]
['text':' Reformat the forced_decoder_ids to incorporate the prompt','line_number':1665,'multiline':False]
['text':' TODO: Implement `WhisperTimeStampLogitsProcessor`.','line_number':1677,'multiline':False]
['text':' logits_processor = [TFWhisperTimeStampLogitsProcessor(generation_config)]','line_number':1679,'multiline':False]
['text':' cut decoder_input_ids if past is used','line_number':1735,'multiline':False]
['text':' xla','line_number':1739,'multiline':False]
['text':' no xla + past','line_number':1741,'multiline':False]
['text':' no xla + no past','line_number':1743,'multiline':False]
['text':' Needs to be passed to make Keras.layer.__call__ happy','line_number':1748,'multiline':False]
