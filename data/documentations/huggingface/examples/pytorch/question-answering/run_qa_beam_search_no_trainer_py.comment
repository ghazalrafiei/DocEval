['text':'!/usr/bin/env python','line_number':1,'multiline':False]
['text':' coding=utf-8','line_number':2,'multiline':False]
['text':' Copyright 2021 The HuggingFace Inc. team. All rights reserved.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]
['text':' limitations under the License.','line_number':15,'multiline':False]
['text':' You can also adapt this script on your own question answering task. Pointers for this are left as comments.','line_number':19,'multiline':False]
['text':' Will error if the minimal version of Transformers is not installed. Remove at your own risks.','line_number':58,'multiline':False]
['text':' Prefix all keys with metric_key_prefix + '_'','line_number':80,'multiline':False]
['text':' Sanity checks','line_number':267,'multiline':False]
['text':' Sending telemetry. Tracking the example usage helps us better allocate resources to maintain them. The','line_number':295,'multiline':False]
['text':' information sent is the one passed as arguments along with your Python/PyTorch versions.','line_number':296,'multiline':False]
['text':' Initialize the accelerator. We will let the accelerator handle device placement for us in this example.','line_number':299,'multiline':False]
['text':' If we're using tracking, we also need to initialize it here and it will pick up all supported trackers','line_number':300,'multiline':False]
['text':' in the environment','line_number':301,'multiline':False]
['text':' Make one log on every process with the configuration for debugging.','line_number':310,'multiline':False]
['text':' If passed along, set the training seed now.','line_number':324,'multiline':False]
['text':' Handle the repository creation','line_number':328,'multiline':False]
['text':' Retrieve of infer repo_name','line_number':331,'multiline':False]
['text':' Create repo and retrieve repo_id','line_number':335,'multiline':False]
['text':' Clone repo locally','line_number':337,'multiline':False]
['text':' Get the datasets: you can either provide your own CSV/JSON/TXT training and evaluation files (see below)','line_number':349,'multiline':False]
['text':' or just provide the name of one of the public datasets available on the hub at https://huggingface.co/datasets/','line_number':350,'multiline':False]
['text':' (the dataset will be downloaded automatically from the datasets Hub).','line_number':351,'multiline':False]
['text':'','line_number':352,'multiline':False]
['text':' For CSV/JSON files, this script will use the column called 'text' or the first column if no column called','line_number':353,'multiline':False]
['text':' 'text' is found. You can easily tweak this behavior (see below).','line_number':354,'multiline':False]
['text':'','line_number':355,'multiline':False]
['text':' In distributed training, the load_dataset function guarantee that only one local process can concurrently','line_number':356,'multiline':False]
['text':' download the dataset.','line_number':357,'multiline':False]
['text':' Downloading and loading a dataset from the hub.','line_number':359,'multiline':False]
['text':' See more about loading any type of standard or custom dataset (from files, python dict, pandas DataFrame, etc) at','line_number':371,'multiline':False]
['text':' https://huggingface.co/docs/datasets/loading_datasets.','line_number':372,'multiline':False]
['text':' Load pretrained model and tokenizer','line_number':374,'multiline':False]
['text':'','line_number':375,'multiline':False]
['text':' In distributed training, the .from_pretrained methods guarantee that only one local process can concurrently','line_number':376,'multiline':False]
['text':' download model & vocab.','line_number':377,'multiline':False]
['text':' Preprocessing the datasets.','line_number':385,'multiline':False]
['text':' Preprocessing is slighlty different for training and evaluation.','line_number':386,'multiline':False]
['text':' Padding side determines if we do (question|context) or (context|question).','line_number':393,'multiline':False]
['text':' Training preprocessing','line_number':404,'multiline':False]
['text':' Some of the questions have lots of whitespace on the left, which is not useful and will make the','line_number':406,'multiline':False]
['text':' truncation of the context fail (the tokenized question will take a lots of space). So we remove that','line_number':407,'multiline':False]
['text':' left whitespace','line_number':408,'multiline':False]
['text':' Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results','line_number':411,'multiline':False]
['text':' in one example possible giving several features when a context is long, each of those features having a','line_number':412,'multiline':False]
['text':' context that overlaps a bit the context of the previous feature.','line_number':413,'multiline':False]
['text':' Since one example might give us several features if it has a long context, we need a map from a feature to','line_number':427,'multiline':False]
['text':' its corresponding example. This key gives us just that.','line_number':428,'multiline':False]
['text':' The offset mappings will give us a map from token to character position in the original context. This will','line_number':430,'multiline':False]
['text':' help us compute the start_positions and end_positions.','line_number':431,'multiline':False]
['text':' The special tokens will help us build the p_mask (which indicates the tokens that can't be in answers).','line_number':433,'multiline':False]
['text':' Let's label those examples!','line_number':436,'multiline':False]
['text':' We will label impossible answers with the index of the CLS token.','line_number':444,'multiline':False]
['text':' Grab the sequence corresponding to that example (to know what is the context and what is the question).','line_number':449,'multiline':False]
['text':' Build the p_mask: non special tokens and context gets 0.0, the others get 1.0.','line_number':456,'multiline':False]
['text':' The cls token gets 1.0 too (for predictions of empty answers).','line_number':457,'multiline':False]
['text':' One example can give several spans, this is the index of the example containing this span of text.','line_number':465,'multiline':False]
['text':' If no answers are given, set the cls_index as answer.','line_number':468,'multiline':False]
['text':' Start/end character index of the answer in the text.','line_number':474,'multiline':False]
['text':' Start token index of the current span in the text.','line_number':478,'multiline':False]
['text':' End token index of the current span in the text.','line_number':483,'multiline':False]
['text':' Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).','line_number':487,'multiline':False]
['text':' Otherwise move the token_start_index and token_end_index to the two ends of the answer.','line_number':493,'multiline':False]
['text':' Note: we could go after the last offset if the answer is the last word (edge case).','line_number':494,'multiline':False]
['text':' We will select sample from whole data if agument is specified','line_number':509,'multiline':False]
['text':' Create train feature from dataset','line_number':511,'multiline':False]
['text':' Number of samples might increase during Feature Creation, We select only specified max samples','line_number':522,'multiline':False]
['text':' Validation preprocessing','line_number':525,'multiline':False]
['text':' Some of the questions have lots of whitespace on the left, which is not useful and will make the','line_number':527,'multiline':False]
['text':' truncation of the context fail (the tokenized question will take a lots of space). So we remove that','line_number':528,'multiline':False]
['text':' left whitespace','line_number':529,'multiline':False]
['text':' Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results','line_number':532,'multiline':False]
['text':' in one example possible giving several features when a context is long, each of those features having a','line_number':533,'multiline':False]
['text':' context that overlaps a bit the context of the previous feature.','line_number':534,'multiline':False]
['text':' Since one example might give us several features if it has a long context, we need a map from a feature to','line_number':548,'multiline':False]
['text':' its corresponding example. This key gives us just that.','line_number':549,'multiline':False]
['text':' The special tokens will help us build the p_mask (which indicates the tokens that can't be in answers).','line_number':552,'multiline':False]
['text':' For evaluation, we will need to convert our predictions to substrings of the context, so we keep the','line_number':555,'multiline':False]
['text':' corresponding example_id and we will store the offset mappings.','line_number':556,'multiline':False]
['text':' We still provide the index of the CLS token and the p_mask to the model, but not the is_impossible label.','line_number':559,'multiline':False]
['text':' Find the CLS token in the input ids.','line_number':564,'multiline':False]
['text':' Grab the sequence corresponding to that example (to know what is the context and what is the question).','line_number':568,'multiline':False]
['text':' Build the p_mask: non special tokens and context gets 0.0, the others 1.0.','line_number':575,'multiline':False]
['text':' One example can give several spans, this is the index of the example containing this span of text.','line_number':583,'multiline':False]
['text':' Set to None the offset_mapping that are not part of the context so it's easy to determine if a token','line_number':587,'multiline':False]
['text':' position is part of the context or not.','line_number':588,'multiline':False]
['text':' We will select sample from whole data','line_number':600,'multiline':False]
['text':' Validation Feature Creation','line_number':602,'multiline':False]
['text':' During Feature creation dataset samples might increase, we will select required samples again','line_number':614,'multiline':False]
['text':' We will select sample from whole data','line_number':622,'multiline':False]
['text':' Predict Feature Creation','line_number':624,'multiline':False]
['text':' During Feature creation dataset samples might increase, we will select required samples again','line_number':635,'multiline':False]
['text':' Log a few random samples from the training set:','line_number':638,'multiline':False]
['text':' DataLoaders creation:','line_number':642,'multiline':False]
['text':' If padding was already done ot max length, we use the default data collator that will just convert everything','line_number':644,'multiline':False]
['text':' to tensors.','line_number':645,'multiline':False]
['text':' Otherwise, `DataCollatorWithPadding` will apply dynamic padding for us (by padding to the maximum length of','line_number':648,'multiline':False]
['text':' the samples passed). When using mixed precision, we add `pad_to_multiple_of=8` to pad all tensors to multiple','line_number':649,'multiline':False]
['text':' of 8s, which will enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta).','line_number':650,'multiline':False]
['text':' Post-processing:','line_number':668,'multiline':False]
['text':' Post-processing: we match the start logits and end logits to answers in the original context.','line_number':670,'multiline':False]
['text':' Format the result to the format the metric expects.','line_number':683,'multiline':False]
['text':' create a numpy array and fill it with -100.','line_number':710,'multiline':False]
['text':' Now since we have create an array now we will populate it with the outputs gathered using accelerator.gather_for_metrics','line_number':712,'multiline':False]
['text':' populate columns','line_number':713,'multiline':False]
['text':' We have to fill it such that we have to take the whole tensor and replace it on the newly created array','line_number':714,'multiline':False]
['text':' And after every iteration we have to change the step','line_number':715,'multiline':False]
['text':' Optimizer','line_number':728,'multiline':False]
['text':' Split weights in two groups, one with weight decay and the other not.','line_number':729,'multiline':False]
['text':' Scheduler and math around the number of training steps.','line_number':743,'multiline':False]
['text':' Prepare everything with our `accelerator`.','line_number':757,'multiline':False]
['text':' We need to recalculate our total training steps as the size of the training dataloader may have changed.','line_number':762,'multiline':False]
['text':' Afterwards we recalculate our number of training epochs','line_number':766,'multiline':False]
['text':' Figure out how many steps we should save the Accelerator states','line_number':769,'multiline':False]
['text':' We need to initialize the trackers we use, and also store our configuration','line_number':774,'multiline':False]
['text':' TensorBoard cannot log Enums, need the raw value','line_number':777,'multiline':False]
['text':' Train!','line_number':781,'multiline':False]
['text':' Only show the progress bar once on each machine.','line_number':792,'multiline':False]
['text':' Potentially load in the weights and states from a previous save','line_number':797,'multiline':False]
['text':' Get the most recent checkpoint','line_number':803,'multiline':False]
['text':' Sorts folders by date modified, most recent checkpoint is the last','line_number':806,'multiline':False]
['text':' Extract `epoch_{i}` or `step_{i}`','line_number':812,'multiline':False]
['text':' need to multiply `gradient_accumulation_steps` to reflect real steps','line_number':820,'multiline':False]
['text':' update the progress_bar if load from checkpoint','line_number':826,'multiline':False]
['text':' We skip the first `n` batches in the dataloader when resuming from a checkpoint','line_number':834,'multiline':False]
['text':' We keep track of the loss at each epoch','line_number':842,'multiline':False]
['text':' Checks if the accelerator has performed an optimization step behind the scenes','line_number':852,'multiline':False]
['text':' intialize all lists to collect the batches','line_number':876,'multiline':False]
['text':' necessary to pad predictions and labels for being gathered','line_number':894,'multiline':False]
['text':' Get the max_length of the tensor','line_number':907,'multiline':False]
['text':' concatenate all numpy arrays collected above','line_number':909,'multiline':False]
['text':' delete the list of numpy arrays','line_number':916,'multiline':False]
['text':' intialize all lists to collect the batches','line_number':935,'multiline':False]
['text':' necessary to pad predictions and labels for being gathered','line_number':954,'multiline':False]
['text':' Get the max_length of the tensor','line_number':967,'multiline':False]
['text':' concatenate all numpy arrays collected above','line_number':969,'multiline':False]
['text':' delete the list of numpy arrays','line_number':976,'multiline':False]
