['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2021 The HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' List here the models to always test.','line_number':71,'multiline':False]
['text':' Most downloaded models','line_number':74,'multiline':False]
['text':' Pipeline-specific model (to be sure each pipeline has one model in this list)','line_number':89,'multiline':False]
['text':' We need to deactivate autoformatting here to write escaped triple quotes (we cannot use real triple quotes or','line_number':130,'multiline':False]
['text':' this would mess up the result if this function applied to this particular file).','line_number':131,'multiline':False]
['text':' fmt: off','line_number':132,'multiline':False]
['text':' Remove docstrings by splitting on triple " then triple ':','line_number':133,'multiline':False]
['text':' fmt: on','line_number':137,'multiline':False]
['text':' Remove empty lines and comments','line_number':140,'multiline':False]
['text':' remove anything that is after a # sign.','line_number':143,'multiline':False]
['text':' remove white lines','line_number':145,'multiline':False]
['text':' Keep doc examples only by splitting on triple "`"','line_number':162,'multiline':False]
['text':' Add leading and trailing "```" so the navigation is easier when compared to the original input `content`','line_number':164,'multiline':False]
['text':' Remove empty lines and comments','line_number':167,'multiline':False]
['text':' remove anything that is after a # sign.','line_number':170,'multiline':False]
['text':' remove white lines','line_number':172,'multiline':False]
['text':' test folders/files directly under `tests` folder','line_number':188,'multiline':False]
['text':' model specific test folders','line_number':193,'multiline':False]
['text':' Sagemaker tests are not meant to be run on the CI.','line_number':199,'multiline':False]
['text':' get the content as json object','line_number':298,'multiline':False]
['text':' get the difference','line_number':305,'multiline':False]
['text':' if both have the same key, check its content','line_number':308,'multiline':False]
['text':' get the model classes','line_number':313,'multiline':False]
['text':' get the module where the model classes are defined. We want to use the main `__init__` file, but it requires','line_number':319,'multiline':False]
['text':' all the framework being installed, which is not ideal for a simple script like test fetcher.','line_number':320,'multiline':False]
['text':' So we create a temporary and modified main `__init__` and access its `_import_structure`.','line_number':321,'multiline':False]
['text':' Get all the code related to `_import_structure`','line_number':325,'multiline':False]
['text':' bypass the framework check so we can get all the information even if frameworks are not available','line_number':332,'multiline':False]
['text':' create and load the temporary module','line_number':338,'multiline':False]
['text':' Finally, get `_import_structure` that we need','line_number':346,'multiline':False]
['text':' map model classes to their defined module','line_number':349,'multiline':False]
['text':' Get the corresponding modeling file path','line_number':355,'multiline':False]
['text':' We always add new python files','line_number':396,'multiline':False]
['text':' We check that deleted python files won't break corresponding tests.','line_number':399,'multiline':False]
['text':' Now for modified files','line_number':402,'multiline':False]
['text':' In case of renames, we'll look at the tests using both the old and new name.','line_number':404,'multiline':False]
['text':' Otherwise, we check modifications are in code and not docstrings.','line_number':408,'multiline':False]
['text':' We only consider Python files and doc files.','line_number':467,'multiline':False]
['text':' We always add new python/md files','line_number':470,'multiline':False]
['text':' Now for modified files','line_number':473,'multiline':False]
['text':' In case of renames, we'll look at the tests using both the old and new name.','line_number':475,'multiline':False]
['text':' Otherwise, we check modifications contain some doc example(s).','line_number':479,'multiline':False]
['text':' only include files in `src` or `docs/source/en/`','line_number':501,'multiline':False]
['text':' not include init files','line_number':503,'multiline':False]
['text':' These are files not doctested yet.','line_number':506,'multiline':False]
['text':' So far we don't have 100% coverage for doctest. This line will be removed once we achieve 100%.','line_number':510,'multiline':False]
['text':' Ignores all but the "utils/not_doctested.txt" file.','line_number':525,'multiline':False]
['text':' Loads the two versions','line_number':528,'multiline':False]
['text':' Compute the removed lines and return them','line_number':535,'multiline':False]
['text':' noqa','line_number':556,'multiline':False]
['text':' Add to the test files to run any removed entry from "utils/not_doctested.txt".','line_number':574,'multiline':False]
['text':' Do not run slow doctest tests on CircleCI','line_number':578,'multiline':False]
['text':' Make sure we did not end up with a test file that was removed','line_number':585,'multiline':False]
['text':' (:?^|\n) -> Non-catching group for the beginning of the doc or a new line.','line_number':591,'multiline':False]
['text':' \s*from\s+(\.+\S+)\s+import\s+([^\n]+) -> Line only contains from .xxx import yyy and we catch .xxx and yyy','line_number':592,'multiline':False]
['text':' (?=\n) -> Look-ahead to a new line. We can't just put \n here or using find_all on this re will only catch every','line_number':593,'multiline':False]
['text':'           other import.','line_number':594,'multiline':False]
['text':' (:?^|\n) -> Non-catching group for the beginning of the doc or a new line.','line_number':596,'multiline':False]
['text':' \s*from\s+(\.+\S+)\s+import\s+\(([^\)]+)\) -> Line continues with from .xxx import (yyy) and we catch .xxx and yyy','line_number':597,'multiline':False]
['text':' yyy will take multiple lines otherwise there wouldn't be parenthesis.','line_number':598,'multiline':False]
['text':' (:?^|\n) -> Non-catching group for the beginning of the doc or a new line.','line_number':600,'multiline':False]
['text':' \s*from\s+transformers(\S*)\s+import\s+([^\n]+) -> Line only contains from transformers.xxx import yyy and we catch','line_number':601,'multiline':False]
['text':'           .xxx and yyy','line_number':602,'multiline':False]
['text':' (?=\n) -> Look-ahead to a new line. We can't just put \n here or using find_all on this re will only catch every','line_number':603,'multiline':False]
['text':'           other import.','line_number':604,'multiline':False]
['text':' (:?^|\n) -> Non-catching group for the beginning of the doc or a new line.','line_number':606,'multiline':False]
['text':' \s*from\s+transformers(\S*)\s+import\s+\(([^\)]+)\) -> Line continues with from transformers.xxx import (yyy) and we','line_number':607,'multiline':False]
['text':' catch .xxx and yyy. yyy will take multiple lines otherwise there wouldn't be parenthesis.','line_number':608,'multiline':False]
['text':' Filter out all docstrings to not get imports in code examples. As before we need to deactivate formatting to','line_number':634,'multiline':False]
['text':' keep this as escaped quotes and avoid this function failing on this file.','line_number':635,'multiline':False]
['text':' fmt: skip','line_number':636,'multiline':False]
['text':' Let's start with relative imports','line_number':642,'multiline':False]
['text':' We need to remove parts of the module name depending on the depth of the relative imports.','line_number':650,'multiline':False]
['text':' Let's continue with direct imports','line_number':664,'multiline':False]
['text':' We need to find the relative path of those imports.','line_number':670,'multiline':False]
['text':' ignore the name of the repo since we add it below.','line_number':672,'multiline':False]
['text':' Double check we get proper modules (either a python file or a folder with an init).','line_number':678,'multiline':False]
['text':' The while loop is to recursively traverse all inits we may encounter: we will add things as we go.','line_number':717,'multiline':False]
['text':' If we end up in an __init__ we are often not actually importing from this init (except in the case where','line_number':721,'multiline':False]
['text':' the object is fully defined in the __init__)','line_number':722,'multiline':False]
['text':' So we get the imports from that init then try to find where our objects come from.','line_number':724,'multiline':False]
['text':' If there are any objects lefts, they may be a submodule','line_number':732,'multiline':False]
['text':' Then if there are still objects left, they are fully defined in the init, so we keep it as a','line_number':743,'multiline':False]
['text':' dependency.','line_number':744,'multiline':False]
['text':' The list of lines is a list of tuples (line_to_be_printed, module)','line_number':806,'multiline':False]
['text':' Keeping the modules lets us know where to insert each new lines in the list.','line_number':807,'multiline':False]
['text':' We will insert all those edges just after the line showing start.','line_number':815,'multiline':False]
['text':' We don't print the refs that where just here to help build lines.','line_number':822,'multiline':False]
['text':' Remove the files at the root of examples/framework since they are not proper examples (they are eith utils','line_number':842,'multiline':False]
['text':' or example test files).','line_number':843,'multiline':False]
['text':' Map all examples to the test files found in examples/framework.','line_number':851,'multiline':False]
['text':' Also map the test files to themselves.','line_number':855,'multiline':False]
['text':' Start from the example deps init.','line_number':872,'multiline':False]
['text':' Add all modules and all tests to all examples','line_number':874,'multiline':False]
['text':' Compute the direct dependencies of all modules.','line_number':877,'multiline':False]
['text':' This recurses the dependencies','line_number':881,'multiline':False]
['text':' We stop recursing at an init (cause we always end up in the main init and we don't want to add all','line_number':887,'multiline':False]
['text':' files which the main init imports)','line_number':888,'multiline':False]
['text':' Finally we can build the reverse map.','line_number':898,'multiline':False]
['text':' For inits, we don't do the reverse deps but the direct deps: if modifying an init, we want to make sure we test','line_number':904,'multiline':False]
['text':' all the modules impacted by that init.','line_number':905,'multiline':False]
['text':' Utility that tells us if a given file is a test (taking test examples into account)','line_number':933,'multiline':False]
['text':' Build the test map','line_number':941,'multiline':False]
['text':' Now we deal with the filtering if `filter_models` is True.','line_number':947,'multiline':False]
['text':' We filter to core models when a given file impacts more than half the model tests.','line_number':951,'multiline':False]
['text':' `test_file` is a path to a test folder/file, starting with `tests/`. For example,','line_number':997,'multiline':False]
['text':'   - `tests/models/bert/test_modeling_bert.py` or `tests/models/bert`','line_number':998,'multiline':False]
['text':'   - `tests/trainer/test_trainer.py` or `tests/trainer`','line_number':999,'multiline':False]
['text':'   - `tests/test_modeling_common.py`','line_number':1000,'multiline':False]
['text':' take the part like `models/bert` for modeling tests','line_number':1003,'multiline':False]
['text':' test folders under `tests` or python files under them','line_number':1006,'multiline':False]
['text':' take the part like tokenization, `pipeline`, etc. for other test categories','line_number':1007,'multiline':False]
['text':' common test files directly under `tests/`','line_number':1010,'multiline':False]
['text':' sort the keys & values','line_number':1017,'multiline':False]
['text':' Create the map that will give us all impacted modules.','line_number':1055,'multiline':False]
['text':' Remove duplicates','line_number':1062,'multiline':False]
['text':' Grab the corresponding test files:','line_number':1066,'multiline':False]
['text':' All modified tests need to be run.','line_number':1071,'multiline':False]
['text':' Then we grab the corresponding test files.','line_number':1077,'multiline':False]
['text':' Remove repo utils tests','line_number':1083,'multiline':False]
['text':' Remove SageMaker tests','line_number':1085,'multiline':False]
['text':' Make sure we did not end up with a test file that was removed','line_number':1087,'multiline':False]
['text':' Create a map that maps test categories to test files, i.e. `models/bert` -> [...test_modeling_bert.py, ...]','line_number':1104,'multiline':False]
['text':' Get all test directories (and some common test files) under `tests` and `tests/models` if `test_files_to_run`','line_number':1106,'multiline':False]
['text':' contains `tests` (i.e. when `setup.py` is changed).','line_number':1107,'multiline':False]
['text':' We use `all` in the case `commit_flags["test_all"]` as well as in `create_circleci_config.py` for processing','line_number':1115,'multiline':False]
