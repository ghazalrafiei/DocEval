['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2020 The HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' All paths are set with the intent you should run this script from the root of the repo with the command','line_number':50,'multiline':False]
['text':' python utils/check_copies.py','line_number':51,'multiline':False]
['text':' Mapping for files that are full copies of others (keys are copies, values the file to keep them up to data with)','line_number':57,'multiline':False]
['text':' If the introduction or the conclusion of the list change, the prompts may need to be updated.','line_number':65,'multiline':False]
['text':' This is to make sure the transformers module imported is the one in the repo.','line_number':125,'multiline':False]
['text':' Helper function. Returns `True` if `line` is the end parenthesis of a class/function definition','line_number':130,'multiline':False]
['text':' Helper function. Returns `True` if `line` is empty, starts with the `indent` or is the end parenthesis of a','line_number':135,'multiline':False]
['text':' class/function definition','line_number':136,'multiline':False]
['text':' enter the block body','line_number':224,'multiline':False]
['text':' Clean up empty lines at the end (if any).','line_number':229,'multiline':False]
['text':' `indent - 4` is the indent level of the target class/func header','line_number':263,'multiline':False]
['text':' from now on, the `block` means inner blocks unless explicitly specified','line_number':266,'multiline':False]
['text':' Find the lines for the definition header','line_number':271,'multiline':False]
['text':' the first line outside the definition header','line_number':279,'multiline':False]
['text':' if found, it will be an inner block','line_number':285,'multiline':False]
['text':' backtrace to include the lines before the found block's definition header (e.g. comments, decorators,','line_number':292,'multiline':False]
['text':' etc.) until an empty line is encountered.','line_number':293,'multiline':False]
['text':' between the current found block and the previous found block','line_number':304,'multiline':False]
['text':' give it a dummy name','line_number':306,'multiline':False]
['text':' Add it as a block','line_number':313,'multiline':False]
['text':' Add the current found block','line_number':316,'multiline':False]
['text':' We can't set this as the default value in the argument, otherwise `CopyCheckTester` will fail, as it uses a','line_number':357,'multiline':False]
['text':' patched temp directory.','line_number':358,'multiline':False]
['text':' Detail: the `Copied from` statement is originally designed to work with the last part of `TRANSFORMERS_PATH`,','line_number':362,'multiline':False]
['text':' (which is `transformers`). The same should be applied for `MODEL_TEST_PATH`. However, its last part is `models`','line_number':363,'multiline':False]
['text':' (to only check and search in it) which is a bit confusing. So we keep the copied statement staring with','line_number':364,'multiline':False]
['text':' `tests.models.` and change it to `tests` here.','line_number':365,'multiline':False]
['text':' First let's find the module where our object lives.','line_number':369,'multiline':False]
['text':' Now let's find the class / func in the code!','line_number':383,'multiline':False]
['text':' find the target specified in the current level in `parts` -> increase `indent` so we can search the next','line_number':391,'multiline':False]
['text':' the index of the first line in the (currently found) block *body*','line_number':393,'multiline':False]
['text':' `indent` is already one level deeper than the (found) class/func block's definition header','line_number':399,'multiline':False]
['text':' We found the beginning of the class / func, now let's find the end (when the indent diminishes).','line_number':401,'multiline':False]
['text':' `start_index` is the index of the class/func block's definition header','line_number':402,'multiline':False]
['text':' Split the code into blocks','line_number':467,'multiline':False]
['text':' `indent` is the indent of the class/func definition header, but `code_splits` expects the indent level of the','line_number':468,'multiline':False]
['text':' block body.','line_number':469,'multiline':False]
['text':' Catch the function/class name: it is expected that those do not match.','line_number':543,'multiline':False]
['text':' Find the first diff. Line 0 is special since we need to compare with the function/class names ignored.','line_number':552,'multiline':False]
['text':' Not a for loop cause `lines` is going to change (if `overwrite=True`).','line_number':586,'multiline':False]
['text':' There is some copied code here, let's retrieve the original.','line_number':597,'multiline':False]
['text':' Find the file lines, the object's code, and its blocks','line_number':600,'multiline':False]
['text':' code replaced by the patterns','line_number':605,'multiline':False]
['text':' `start_index` is the index of the first line (the definition header) after `# Copied from`.','line_number':615,'multiline':False]
['text':' (`indent != theoretical_indent` doesn't seem to occur so far, not sure what this case is for.)','line_number':616,'multiline':False]
['text':' enter the block body','line_number':618,'multiline':False]
['text':' Loop to check the observed code, stop when indentation diminishes or if we see a End copy comment.','line_number':623,'multiline':False]
['text':' We can't call `find_block_end` directly as there is sth. special `# End copy"` here.','line_number':624,'multiline':False]
['text':' There is a special pattern `# End copy` to stop early. It's not documented cause it shouldn't really be','line_number':631,'multiline':False]
['text':' used.','line_number':632,'multiline':False]
['text':' `line_index` is outside the block','line_number':634,'multiline':False]
['text':' Clean up empty lines at the end (if any).','line_number':635,'multiline':False]
['text':' Split the observed code into blocks','line_number':639,'multiline':False]
['text':' sanity check','line_number':643,'multiline':False]
['text':' observed code in a structured way (a dict mapping block names to blocks' code)','line_number':646,'multiline':False]
['text':' Below, we change some names in `theoretical_code_blocks` and `observed_code_blocks`. These mappings map the','line_number':652,'multiline':False]
['text':' original names to the modified names: this is used to restore the original order of the code blocks.','line_number':653,'multiline':False]
['text':' Update code blocks' name and content:','line_number':657,'multiline':False]
['text':'   If `"# Ignore copy"` is found in a block of the observed code:','line_number':658,'multiline':False]
['text':'     1. if it's a block only in the observed code --> add it to the theoretical code.','line_number':659,'multiline':False]
['text':'     2. if it's also in the theoretical code () --> put its content (body) to the corresponding block under the','line_number':660,'multiline':False]
['text':'        same name in the theoretical code.','line_number':661,'multiline':False]
['text':'   In both cases, we change the name to have a prefix `_ignored_` so we know if we can discard them during the','line_number':662,'multiline':False]
['text':'   comparison.','line_number':663,'multiline':False]
['text':' in the target --> just copy the content','line_number':670,'multiline':False]
['text':' not in the target --> add it','line_number':680,'multiline':False]
['text':' Respect the original block order:','line_number':691,'multiline':False]
['text':'   1. in `theoretical_code_blocks`: the new blocks will follow the existing ones','line_number':692,'multiline':False]
['text':'   2. in `observed_code_blocks`: the original order are kept with names modified potentially. This is necessary','line_number':693,'multiline':False]
['text':'      to compute the correct `diff_index` if `overwrite=True` and there is a diff.','line_number':694,'multiline':False]
['text':' Ignore the blocks specified to be ignored. This is the version used to check if there is a mismatch','line_number':704,'multiline':False]
['text':' stylify `theoretical_code` before compare (this is needed only when `replace_pattern` is not empty)','line_number':712,'multiline':False]
['text':' Remove `\n\n` in `theoretical_code` before compare (so no empty line)','line_number':715,'multiline':False]
['text':' Compute `observed_code` where we don't include any empty line + keep track the line index between the','line_number':719,'multiline':False]
['text':' original/processed `observed_code` so we can have the correct `diff_index`.','line_number':720,'multiline':False]
['text':' Test for a diff and act accordingly.','line_number':735,'multiline':False]
['text':' switch to the index in the original `observed_code` (i.e. before removing empty lines)','line_number':738,'multiline':False]
['text':' `theoretical_code_to_write` is a single string but may have several lines.','line_number':742,'multiline':False]
['text':' Here we treat it as a single entry in `lines`.','line_number':745,'multiline':False]
['text':' Warn the user a file has been modified.','line_number':749,'multiline':False]
['text':' Find the start of the list.','line_number':835,'multiline':False]
['text':' Keep going until the end of the list.','line_number':845,'multiline':False]
['text':' This regex captures metadata from an English model description, including model title, model link,','line_number':887,'multiline':False]
['text':' affiliations of the paper, title of the paper, authors of the paper, and supplemental data (see DistilBERT for','line_number':888,'multiline':False]
['text':' example).','line_number':889,'multiline':False]
['text':' This regex is used to synchronize link.','line_number':893,'multiline':False]
['text':' We exclude keys in localized README not in the main one.','line_number':909,'multiline':False]
['text':' Add an anchor white space behind a model description string for regex.','line_number':917,'multiline':False]
['text':' If metadata cannot be captured, the English version will be directly copied.','line_number':918,'multiline':False]
['text':' Synchronize link','line_number':926,'multiline':False]
['text':' Find the start prompt.','line_number':951,'multiline':False]
['text':' Fix potential doc links in the README','line_number':978,'multiline':False]
['text':' Build the converted Markdown.','line_number':1001,'multiline':False]
['text':' Compare the converted Markdowns','line_number':1013,'multiline':False]
['text':' Map a model name with the name it has in the README for the check_readme check','line_number':1032,'multiline':False]
['text':' Update this list with the models that shouldn't be in the README. This only concerns modular models or those who do','line_number':1049,'multiline':False]
['text':' not have an associated paper.','line_number':1050,'multiline':False]
['text':' Template for new entries to add in the main README when we have missing models.','line_number':1066,'multiline':False]
['text':' Remove exceptions','line_number':1095,'multiline':False]
