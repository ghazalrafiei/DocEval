['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2023 Microsoft Research and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' in ViT, the seq length equals the number of patches + 1 (we add 1 for the [CLS] token)','line_number':87,'multiline':False]
['text':' build `image_embeds_position_mask`','line_number':207,'multiline':False]
['text':' TODO: `image-to-text` pipeline for this model needs Processor.','line_number':262,'multiline':False]
['text':' overwrite from common to skip `image_to_text_projection.latent_query`','line_number':285,'multiline':False]
['text':' The original code use ` nn.Parameter(torch.randn(...))` for which this test won't pass.','line_number':295,'multiline':False]
['text':' signature.parameters is an OrderedDict => so arg_names order is deterministic','line_number':313,'multiline':False]
['text':' Checking the state dicts are correct','line_number':328,'multiline':False]
['text':' Checking there was no complain of missing weights','line_number':335,'multiline':False]
['text':' overwrite from common in order to use `self.model_tester.text_model_tester.num_hidden_layers`','line_number':338,'multiline':False]
['text':' check that output_hidden_states also work using config','line_number':370,'multiline':False]
['text':' overwrite from common in order to use `config.text_config.vocab_size` instead of `config.vocab_size`','line_number':376,'multiline':False]
['text':' Check that the embedding layer and decoding layer are the same in size and in value','line_number':400,'multiline':False]
['text':' self.assertTrue(check_same_values(embeddings, decoding))','line_number':401,'multiline':False]
['text':' # Check that after modification, they remain the same.','line_number':403,'multiline':False]
['text':' embeddings.weight.data.div_(2)','line_number':404,'multiline':False]
['text':' # Check that the embedding layer and decoding layer are the same in size and in value','line_number':405,'multiline':False]
['text':' self.assertTrue(embeddings.weight.shape, decoding.weight.shape)','line_number':406,'multiline':False]
['text':' self.assertTrue(check_same_values(embeddings, decoding))','line_number':407,'multiline':False]
['text':' # Check that after modification, they remain the same.','line_number':409,'multiline':False]
['text':' decoding.weight.data.div_(4)','line_number':410,'multiline':False]
['text':' # Check that the embedding layer and decoding layer are the same in size and in value','line_number':411,'multiline':False]
['text':' self.assertTrue(embeddings.weight.shape, decoding.weight.shape)','line_number':412,'multiline':False]
['text':' self.assertTrue(check_same_values(embeddings, decoding))','line_number':413,'multiline':False]
['text':' Check that after resize they remain tied.','line_number':415,'multiline':False]
['text':' decoding.weight.data.mul_(20)','line_number':420,'multiline':False]
['text':' # Check that the embedding layer and decoding layer are the same in size and in value','line_number':421,'multiline':False]
['text':' self.assertTrue(model.transformer.wte.weight.shape, model.lm_head.weight.shape)','line_number':422,'multiline':False]
['text':' self.assertTrue(check_same_values(model.transformer.wte, model.lm_head))','line_number':423,'multiline':False]
['text':' To be sure we have no Nan','line_number':435,'multiline':False]
['text':' Avoid memory leak. Without this, each call increase RAM usage by ~20MB.','line_number':507,'multiline':False]
['text':' (Even with this call, there are still memory leak by ~0.04MB)','line_number':508,'multiline':False]
['text':' We will verify our results on an image of cute cats','line_number':512,'multiline':False]
['text':' Specify `cleanup_and_extract=False` in order to see the raw model generation.','line_number':541,'multiline':False]
['text':' By default, the generated  text is cleanup and the entities are extracted.','line_number':543,'multiline':False]
['text':' fmt: off','line_number':588,'multiline':False]
['text':' fmt: on','line_number':597,'multiline':False]
['text':' test with the detail caption generation','line_number':614,'multiline':False]
['text':' fmt: off','line_number':646,'multiline':False]
['text':' fmt: on','line_number':660,'multiline':False]
['text':' left padding','line_number':703,'multiline':False]
['text':' left padding gives identical results as non-padding','line_number':712,'multiline':False]
['text':' right padding','line_number':751,'multiline':False]
['text':' For right padding, only the non-padded sequences will give the same results as non-padding','line_number':760,'multiline':False]
