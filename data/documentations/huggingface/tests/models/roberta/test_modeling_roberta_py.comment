['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2020 The HuggingFace Team. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' make sure that ids don't start with pad token','line_number':248,'multiline':False]
['text':' first forward pass','line_number':252,'multiline':False]
['text':' create hypothetical multiple next token and extent to next_input_ids','line_number':262,'multiline':False]
['text':' make sure that ids don't start with pad token','line_number':265,'multiline':False]
['text':' append to next input_ids and','line_number':270,'multiline':False]
['text':' select random slice','line_number':290,'multiline':False]
['text':' test that outputs are equal for slice','line_number':297,'multiline':False]
['text':' This regression test was failing with PyTorch < 1.3','line_number':422,'multiline':False]
['text':' compare the actual values for a slice.','line_number':537,'multiline':False]
['text':' roberta = torch.hub.load('pytorch/fairseq', 'roberta.base')','line_number':542,'multiline':False]
['text':' roberta.eval()','line_number':543,'multiline':False]
['text':' expected_slice = roberta.model.forward(input_ids)[0][:, :3, :3].detach()','line_number':544,'multiline':False]
['text':' compare the actual values for a slice.','line_number':555,'multiline':False]
['text':' roberta = torch.hub.load('pytorch/fairseq', 'roberta.base')','line_number':560,'multiline':False]
['text':' roberta.eval()','line_number':561,'multiline':False]
['text':' expected_slice = roberta.extract_features(input_ids)[:, :3, :3].detach()','line_number':562,'multiline':False]
['text':' roberta = torch.hub.load('pytorch/fairseq', 'roberta.large.mnli')','line_number':577,'multiline':False]
['text':' roberta.eval()','line_number':578,'multiline':False]
['text':' expected_tensor = roberta.predict("mnli", input_ids, return_logits=True).detach()','line_number':579,'multiline':False]
