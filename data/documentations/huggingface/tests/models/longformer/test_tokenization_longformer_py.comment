['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 Tsimur Hadeliya. All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' Copied from tests.models.roberta.test_tokenization_roberta.RobertaTokenizationTest with roberta-base->allenai/longformer-base-4096,Roberta->Longformer,roberta->longformer,','line_number':31,'multiline':False]
['text':' Ignore copy','line_number':33,'multiline':False]
['text':' Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt','line_number':42,'multiline':False]
['text':' , add_prefix_space=True)','line_number':93,'multiline':False]
['text':' Testing encoder arguments','line_number':135,'multiline':False]
['text':' Testing spaces after special tokens','line_number':149,'multiline':False]
['text':' mask token has a left space','line_number':153,'multiline':False]
['text':' token_type_ids should put 0 everywhere','line_number':181,'multiline':False]
['text':' attention_mask should put 1 everywhere, so sum over length should be 1','line_number':184,'multiline':False]
['text':' Rust correctly handles the space before the mask while python doesnt','line_number':193,'multiline':False]
['text':' Test which aims to verify that the offsets are well adapted to the argument `add_prefix_space` and','line_number':219,'multiline':False]
['text':' `trim_offsets`','line_number':220,'multiline':False]
['text':' `hello` is a token in the vocabulary of `pretrained_name`','line_number':223,'multiline':False]
['text':' tokenizer_r = self.rust_tokenizer_class.from_pretrained(','line_number':268,'multiline':False]
['text':'     pretrained_name, use_fast=True, add_prefix_space=True, trim_offsets=True','line_number':269,'multiline':False]
['text':' )','line_number':270,'multiline':False]
['text':' encoding = tokenizer_r(text, return_offsets_mapping=True, add_special_tokens=False)','line_number':271,'multiline':False]
['text':' self.assertEqual(encoding.offset_mapping[0], (1, 1 + len(text_of_1_token)))','line_number':272,'multiline':False]
['text':' self.assertEqual(','line_number':273,'multiline':False]
['text':'     encoding.offset_mapping[1],','line_number':274,'multiline':False]
['text':'     (1 + len(text_of_1_token) + 1, 1 + len(text_of_1_token) + 1 + len(text_of_1_token)),','line_number':275,'multiline':False]
['text':' )','line_number':276,'multiline':False]
