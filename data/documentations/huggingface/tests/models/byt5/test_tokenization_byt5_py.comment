['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2020 Google T5 Authors and HuggingFace Inc. team.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' XXX The default common tokenizer tests assume that every ID is decodable on its own.','line_number':55,'multiline':False]
['text':' This assumption is invalid for ByT5 because single bytes might not be','line_number':56,'multiline':False]
['text':' valid utf-8 (byte 128 for instance).','line_number':57,'multiline':False]
['text':' Here we're overriding the smallest possible method to provide','line_number':58,'multiline':False]
['text':' a clean sequence without making the same assumption.','line_number':59,'multiline':False]
['text':' toks_str = [t[1] for t in toks]','line_number':76,'multiline':False]
['text':' Ensure consistency','line_number':79,'multiline':False]
['text':' decoding','line_number':105,'multiline':False]
['text':' decoding','line_number':112,'multiline':False]
['text':' encode/decode, but with `encode` instead of `__call__`','line_number':116,'multiline':False]
['text':' fmt: skip','line_number':122,'multiline':False]
['text':' check if input_ids are returned and no decoder_input_ids','line_number':140,'multiline':False]
['text':' fmt: skip','line_number':161,'multiline':False]
['text':' fmt: skip','line_number':162,'multiline':False]
['text':' cannot use default save_and_load_tokenzier test method because tokenzier has no vocab','line_number':169,'multiline':False]
['text':' safety check on max_len default value so we are sure the test works','line_number':171,'multiline':False]
['text':' Now let's start the test','line_number':177,'multiline':False]
['text':' Isolate this from the other tests because we save additional tokens/etc','line_number':181,'multiline':False]
['text':' Isolate this from the other tests because we save additional tokens/etc','line_number':197,'multiline':False]
['text':' There is a conflict between the default value of extra_ids and adding a new special token through additional_special_tokens','line_number':221,'multiline':False]
['text':' We need to add the extra_ids in the list of the arg additional_special_tokens','line_number':222,'multiline':False]
['text':' the following checks allow us to verify that our test works as expected, i.e. that the tokenizer takes','line_number':255,'multiline':False]
['text':' into account the new value of additional_special_tokens given in the "tokenizer_config.json" and','line_number':256,'multiline':False]
['text':' "special_tokens_map.json" files','line_number':257,'multiline':False]
['text':' self.assertIn("an_additional_special_token",tokenizer_without_change_in_init.get_vocab()) # ByT5Tokenization no vocab','line_number':264,'multiline':False]
['text':' Now we test that we can change the value of additional_special_tokens in the from_pretrained','line_number':272,'multiline':False]
['text':' tokenizer can be instantiated without any pretrained files, so no need for pretrained tokenizer list','line_number':303,'multiline':False]
['text':' tokenizer does not have vocabulary','line_number':307,'multiline':False]
['text':' inputs cannot be pretokenized since ids depend on whole input string and not just on single characters','line_number':311,'multiline':False]
['text':' tests all ids in vocab => vocab doesn't exist so unnecessary to test','line_number':315,'multiline':False]
['text':' The default common tokenizer tests uses invalid tokens for ByT5 that can only accept one-character strings','line_number':320,'multiline':False]
['text':' and special added tokens as tokens','line_number':321,'multiline':False]
['text':' We need a different implementation of the test of the same name defined in TokenizerTesterMixin because this tokenizer','line_number':330,'multiline':False]
['text':' doesn't have a vocab','line_number':331,'multiline':False]
