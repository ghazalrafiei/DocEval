['text':' coding=utf-8','line_number':1,'multiline':False]
['text':' Copyright 2022 HuggingFace Inc.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]
['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]
['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]
['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]
['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]
['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]
['text':' limitations under the License.','line_number':14,'multiline':False]
['text':' make sure image is correctly rescaled','line_number':79,'multiline':False]
['text':' make sure image is correctly rescaled','line_number':97,'multiline':False]
['text':' Make sure that an exception is raised if image is not in [0, 1]','line_number':100,'multiline':False]
['text':' Make sure binary mask remains a binary mask','line_number':107,'multiline':False]
['text':' channels_first','line_number':128,'multiline':False]
['text':' channels_last','line_number':134,'multiline':False]
['text':' channels first','line_number':142,'multiline':False]
['text':' channels last','line_number':148,'multiline':False]
['text':' channel first','line_number':157,'multiline':False]
['text':' channel last','line_number':163,'multiline':False]
['text':' Test that function doesn't reorder if channel dim matches the input.','line_number':170,'multiline':False]
['text':' Test that function reorders if channel dim doesn't match the input.','line_number':179,'multiline':False]
['text':' Can pass in input_data_format and works if data format is ambiguous or unknown.','line_number':188,'multiline':False]
['text':' Test the output size defaults to (x, x) if an int is given.','line_number':196,'multiline':False]
['text':' Test the output size is the same as the input if a two element tuple/list is given.','line_number':201,'multiline':False]
['text':' To match pytorch behaviour, max_size is only relevant if size is an int','line_number':205,'multiline':False]
['text':' Test output size = (int(size * height / width), size) if size is an int and height > width','line_number':208,'multiline':False]
['text':' Test output size = (size, int(size * width / height)) if size is an int and width <= height','line_number':212,'multiline':False]
['text':' Test size is resized if longer size > max_size','line_number':216,'multiline':False]
['text':' Test output size = (int(size * height / width), size) if size is an int and height > width and','line_number':220,'multiline':False]
['text':' input has 4 channels','line_number':221,'multiline':False]
['text':' Test correct channel dimension is returned if output size if height == 3','line_number':228,'multiline':False]
['text':' Defaults to input format - channels first','line_number':229,'multiline':False]
['text':' Defaults to input format - channels last','line_number':234,'multiline':False]
['text':' Check the channel order is the same by default','line_number':250,'multiline':False]
['text':' Check channel order is changed if specified','line_number':255,'multiline':False]
['text':' Check PIL.Image.Image is returned if return_numpy=False','line_number':260,'multiline':False]
['text':' PIL size is in (width, height) order','line_number':263,'multiline':False]
['text':' Check an image with float values between 0-1 is returned with values in this range','line_number':266,'multiline':False]
['text':' Check that an image with 4 channels is resized correctly','line_number':274,'multiline':False]
['text':' Test that exception is raised if inputs are incorrect','line_number':283,'multiline':False]
['text':' Not a numpy array image','line_number':284,'multiline':False]
['text':' Number of mean values != number of channels','line_number':288,'multiline':False]
['text':' Number of std values != number of channels','line_number':292,'multiline':False]
['text':' Test result is correct - output data format is channels_first and normalization','line_number':296,'multiline':False]
['text':' correctly computed','line_number':297,'multiline':False]
['text':' Test image with 4 channels is normalized correctly','line_number':307,'multiline':False]
['text':' Test float32 image input keeps float32 dtype','line_number':318,'multiline':False]
['text':' Test float16 image input keeps float16 dtype','line_number':327,'multiline':False]
['text':' The mean and std are cast to match the dtype of the input image','line_number':332,'multiline':False]
['text':' Test int image input is converted to float32','line_number':340,'multiline':False]
['text':' Test that exception is raised if inputs are incorrect','line_number':352,'multiline':False]
['text':' Test result is correct - output data format is channels_first and center crop','line_number':356,'multiline':False]
['text':' correctly computed','line_number':357,'multiline':False]
['text':' Test that image is padded with zeros if crop size is larger than image size','line_number':364,'multiline':False]
['text':' Test image with 4 channels is cropped correctly','line_number':372,'multiline':False]
['text':' Check that the function and inverse function are inverse of each other','line_number':382,'multiline':False]
['text':' Check that the function and inverse function are inverse of each other','line_number':390,'multiline':False]
['text':' test list input','line_number':394,'multiline':False]
['text':' test numpy array input','line_number':398,'multiline':False]
['text':' test int input','line_number':417,'multiline':False]
['text':' test array input','line_number':420,'multiline':False]
['text':' fmt: off','line_number':439,'multiline':False]
['text':' fmt: on','line_number':444,'multiline':False]
['text':' Test that exception is raised if unknown padding mode is specified','line_number':446,'multiline':False]
['text':' Test that exception is raised if invalid padding is specified','line_number':450,'multiline':False]
['text':' Cannot pad on channel dimension','line_number':452,'multiline':False]
['text':' Test image is padded equally on all sides is padding is an int','line_number':455,'multiline':False]
['text':' fmt: off','line_number':456,'multiline':False]
['text':' fmt: on','line_number':463,'multiline':False]
['text':' Test the left and right of each axis is padded (pad_left, pad_right)','line_number':466,'multiline':False]
['text':' fmt: off','line_number':467,'multiline':False]
['text':' fmt: on','line_number':474,'multiline':False]
['text':' Test only one axis is padded (pad_left, pad_right)','line_number':477,'multiline':False]
['text':' fmt: off','line_number':478,'multiline':False]
['text':' fmt: on','line_number':486,'multiline':False]
['text':' Test padding with a constant value','line_number':489,'multiline':False]
['text':' fmt: off','line_number':490,'multiline':False]
['text':' fmt: on','line_number':497,'multiline':False]
['text':' fmt: off','line_number':500,'multiline':False]
['text':' fmt: on','line_number':506,'multiline':False]
['text':' Test padding with PaddingMode.REFLECT','line_number':508,'multiline':False]
['text':' fmt: off','line_number':509,'multiline':False]
['text':' fmt: on','line_number':517,'multiline':False]
['text':' Test padding with PaddingMode.REPLICATE','line_number':520,'multiline':False]
['text':' fmt: off','line_number':521,'multiline':False]
['text':' fmt: on','line_number':529,'multiline':False]
['text':' Test padding with PaddingMode.SYMMETRIC','line_number':532,'multiline':False]
['text':' fmt: off','line_number':533,'multiline':False]
['text':' fmt: on','line_number':541,'multiline':False]
['text':' Test we can specify the output data format','line_number':544,'multiline':False]
['text':' Test padding with PaddingMode.REFLECT','line_number':545,'multiline':False]
['text':' fmt: off','line_number':546,'multiline':False]
['text':' fmt: on','line_number':557,'multiline':False]
['text':' Test we can pad on an image with 2 channels','line_number':562,'multiline':False]
['text':' fmt: off','line_number':563,'multiline':False]
['text':' fmt: on','line_number':571,'multiline':False]
['text':' Test that an RGBA image is converted to RGB','line_number':580,'multiline':False]
['text':' For the moment, numpy images are returned as is','line_number':586,'multiline':False]
['text':' And PIL images are converted','line_number':591,'multiline':False]
['text':' Test that a grayscale image is converted to RGB','line_number':597,'multiline':False]
['text':' fmt: off','line_number':608,'multiline':False]
['text':' fmt: on','line_number':619,'multiline':False]
['text':' fmt: off','line_number':621,'multiline':False]
['text':' fmt: on','line_number':632,'multiline':False]
['text':' Can flip when the image has 2 channels','line_number':645,'multiline':False]
['text':' fmt: off','line_number':646,'multiline':False]
['text':' fmt: on','line_number':654,'multiline':False]
