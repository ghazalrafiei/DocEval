['text':' ---  Introductory prose','line_number':30,'multiline':False]
['text':' --- Shared function parameters','line_number':57,'multiline':False]
['text':' TODO where best to define default parameters?','line_number':193,'multiline':False]
['text':' TODO this is messy, we want the mapping to be agnostic about','line_number':208,'multiline':False]
['text':' the kind of plot to draw, but for the time being we need to set','line_number':209,'multiline':False]
['text':' this information so the SizeMapping can use it','line_number':210,'multiline':False]
['text':' Draw a test plot, using the passed in kwargs. The goal here is to','line_number':231,'multiline':False]
['text':' honor both (a) the current state of the plot cycler and (b) the','line_number':232,'multiline':False]
['text':' specified kwargs on all the lines we will draw, overriding when','line_number':233,'multiline':False]
['text':' relevant with the data semantics. Note that we won't cycle','line_number':234,'multiline':False]
['text':' internally; in other words, if `hue` is not used, all elements will','line_number':235,'multiline':False]
['text':' have the same color, but they will have the color that you would have','line_number':236,'multiline':False]
['text':' gotten from the corresponding matplotlib function, and calling the','line_number':237,'multiline':False]
['text':' function will advance the axes property cycle.','line_number':238,'multiline':False]
['text':' Set default error kwargs','line_number':244,'multiline':False]
['text':' Initialize the aggregation object','line_number':254,'multiline':False]
['text':' TODO abstract variable to aggregate over here-ish. Better name?','line_number':260,'multiline':False]
['text':' TODO How to handle NA? We don't want NA to propagate through to the','line_number':267,'multiline':False]
['text':' estimate/CI when some values are present, but we would also like','line_number':268,'multiline':False]
['text':' matplotlib to show "gaps" in the line when all values are missing.','line_number':269,'multiline':False]
['text':' This is straightforward absent aggregation, but complicated with it.','line_number':270,'multiline':False]
['text':' If we want to use nas, we need to conditionalize dropna in iter_data.','line_number':271,'multiline':False]
['text':' Loop over the semantic subsets and add to the plot','line_number':273,'multiline':False]
['text':' TODO eventually relax this constraint','line_number':287,'multiline':False]
['text':' Could pass as_index=False instead of reset_index,','line_number':291,'multiline':False]
['text':' but that fails on a corner case with older pandas.','line_number':292,'multiline':False]
['text':' Apply inverse axis scaling','line_number':298,'multiline':False]
['text':' --- Draw the main line(s)','line_number':304,'multiline':False]
['text':' XXX why not add to grouping variables?','line_number':306,'multiline':False]
['text':' --- Draw the confidence intervals','line_number':332,'multiline':False]
['text':' TODO handling of orientation will need to happen here','line_number':336,'multiline':False]
['text':' Set the capstyle properly on the error bars','line_number':361,'multiline':False]
['text':' Finalize the axes details','line_number':366,'multiline':False]
['text':' TODO this is messy, we want the mapping to be agnostic about','line_number':384,'multiline':False]
['text':' the kind of plot to draw, but for the time being we need to set','line_number':385,'multiline':False]
['text':' this information so the SizeMapping can use it','line_number':386,'multiline':False]
['text':' --- Determine the visual attributes of the plot','line_number':397,'multiline':False]
['text':' Define the vectors of x and y positions','line_number':405,'multiline':False]
['text':' Apply inverse scaling to the coordinate variables','line_number':410,'multiline':False]
['text':' Use a representative marker so scatter sets the edgecolor','line_number':416,'multiline':False]
['text':' properly for line art markers. We currently enforce either','line_number':417,'multiline':False]
['text':' all or none line art so this works.','line_number':418,'multiline':False]
['text':' Conditionally set the marker edgecolor based on whether the marker is "filled"','line_number':423,'multiline':False]
['text':' See https://github.com/matplotlib/matplotlib/issues/17849 for context','line_number':424,'multiline':False]
['text':' TODO in more recent matplotlib (which?) can pass a MarkerStyle here','line_number':427,'multiline':False]
['text':' Draw the scatter plot','line_number':432,'multiline':False]
['text':' Apply the mapping from semantic variables to artist attributes','line_number':435,'multiline':False]
['text':' Apply dependent default attributes','line_number':447,'multiline':False]
['text':' Finalize the axes details','line_number':455,'multiline':False]
['text':' Handle deprecation of ci parameter','line_number':477,'multiline':False]
['text':' XXX','line_number':497,'multiline':False]
['text':' Other functions have color as an explicit param,','line_number':505,'multiline':False]
['text':' and we should probably do that here too','line_number':506,'multiline':False]
['text':' Check for attempt to plot onto specific axes and warn','line_number':722,'multiline':False]
['text':' Use the full dataset to map the semantics','line_number':731,'multiline':False]
['text':' Extract the semantic mappings','line_number':752,'multiline':False]
['text':' Now extract the data that would be used to draw a single plot','line_number':778,'multiline':False]
['text':' Define the common plotting parameters','line_number':782,'multiline':False]
['text':' Add the grid semantics onto the plotter','line_number':793,'multiline':False]
['text':' Define the named variables for plotting on each facet','line_number':801,'multiline':False]
['text':' Rename the variables with a leading underscore to avoid','line_number':802,'multiline':False]
['text':' collisions with faceting variable names','line_number':803,'multiline':False]
['text':' Pass the row/col variables to FacetGrid with their original','line_number':809,'multiline':False]
['text':' names so that the axes titles render correctly','line_number':810,'multiline':False]
['text':' Handle faceting variables that lack name information','line_number':812,'multiline':False]
['text':' Rename the columns of the plot_data structure appropriately','line_number':817,'multiline':False]
['text':' Set up the FacetGrid object','line_number':822,'multiline':False]
['text':' Draw the plot','line_number':832,'multiline':False]
['text':' Label the axes, using the original variables','line_number':835,'multiline':False]
['text':' Pass "" when the variable name is None to overwrite internal variables','line_number':836,'multiline':False]
['text':' Replace the original plot data so the legend uses numeric data with','line_number':840,'multiline':False]
['text':' the correct type, since we force a categorical mapping above.','line_number':841,'multiline':False]
['text':' Handle the additional non-semantic keyword arguments out here.','line_number':844,'multiline':False]
['text':' We're selective because some kwargs may be seaborn function specific','line_number':845,'multiline':False]
['text':' and not relevant to the matplotlib artists going into the legend.','line_number':846,'multiline':False]
['text':' Ideally, we will have a better solution where we don't need to re-make','line_number':847,'multiline':False]
['text':' the legend out here and will have parity with the axes-level functions.','line_number':848,'multiline':False]
['text':' Rename the columns of the FacetGrid's `data` attribute','line_number':876,'multiline':False]
['text':' to match the original column names','line_number':877,'multiline':False]
