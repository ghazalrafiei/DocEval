['text':' TODO Reverting typing to Any as it was proving too complicated to','line_number':50,'multiline':False]
['text':' work out the right way to communicate the types to mypy. Revisit!','line_number':51,'multiline':False]
['text':' This happens when there is no variance in the orient coordinate data','line_number':101,'multiline':False]
['text':' Not exactly clear what the right default is, but 1 seems reasonable?','line_number':102,'multiline':False]
['text':' TODO sometimes we need to handle scalars (e.g. for Line)','line_number':119,'multiline':False]
['text':' but what is the best way to do that?','line_number':120,'multiline':False]
['text':' TODO this doesn't actually need to be a closure','line_number':175,'multiline':False]
['text':' Handle pd.NA; np<>pd interop with NA is tricky','line_number':180,'multiline':False]
['text':' We want values to appear in a True, False order but also want','line_number':204,'multiline':False]
['text':' True/False to be drawn at 1/0 positions respectively to avoid nasty','line_number':205,'multiline':False]
['text':' surprises if additional artists are added through the matplotlib API.','line_number':206,'multiline':False]
['text':' We accomplish this using axis inversion akin to what we do in Nominal.','line_number':207,'multiline':False]
['text':' Categorical (convert to strings), un-sortable','line_number':246,'multiline':False]
['text':' TODO flexibility over format() which isn't great for numbers / dates','line_number':263,'multiline':False]
['text':' TODO move to Nominal._get_scale?','line_number':268,'multiline':False]
['text':' TODO this needs some more complicated rethinking about how to pass','line_number':269,'multiline':False]
['text':' a unit dictionary down to these methods, along with how much we want','line_number':270,'multiline':False]
['text':' to invest in their API. What is it useful for tick() to do here?','line_number':271,'multiline':False]
['text':' (Ordinal may be different if we draw that contrast).','line_number':272,'multiline':False]
['text':' Any customization we do to allow, e.g., label wrapping will probably','line_number':273,'multiline':False]
['text':' require defining our own Formatter subclass.','line_number':274,'multiline':False]
['text':' We could also potentially implement auto-wrapping in an Axis subclass','line_number':275,'multiline':False]
['text':' (see Axis.draw ... it already is computing the bboxes).','line_number':276,'multiline':False]
['text':' major_locator, minor_locator = new._get_locators(**new._tick_params)','line_number':277,'multiline':False]
['text':' major_formatter = new._get_formatter(major_locator, **new._label_params)','line_number':278,'multiline':False]
['text':' axis.set_major_locator(major_locator)','line_number':283,'multiline':False]
['text':' if minor_locator is not None:','line_number':284,'multiline':False]
['text':'     axis.set_minor_locator(minor_locator)','line_number':285,'multiline':False]
['text':' axis.set_major_formatter(major_formatter)','line_number':286,'multiline':False]
['text':' TODO Currently just used in non-Coordinate contexts, but should','line_number':292,'multiline':False]
['text':' we use this to (A) set the padding we want for categorial plots','line_number':293,'multiline':False]
['text':' and (B) allow the values parameter for a Coordinate to set xlim/ylim','line_number':294,'multiline':False]
['text':' TODO array cast necessary to handle float/int mixture, which we need','line_number':299,'multiline':False]
['text':' to solve in a more systematic way probably','line_number':300,'multiline':False]
['text':' (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)','line_number':301,'multiline':False]
['text':' TODO define this more centrally','line_number':304,'multiline':False]
['text':' TODO only do this with explicit order?','line_number':306,'multiline':False]
['text':' (But also category dtype?)','line_number':307,'multiline':False]
['text':' TODO isin fails when units_seed mixes numbers and strings (numpy error?)','line_number':308,'multiline':False]
['text':' but np.isin also does not seem any faster? (Maybe not broadcasting in C)','line_number':309,'multiline':False]
['text':' keep = x.isin(units_seed)','line_number':310,'multiline':False]
['text':' Categorical (convert to strings), sortable, can skip ticklabels','line_number':403,'multiline':False]
['text':' Numeric, integral, can skip ticks/ticklabels','line_number':409,'multiline':False]
['text':' TODO How to allow disabling of legend for all uses of property?','line_number':470,'multiline':False]
['text':' Could add a Scale parameter, or perhaps Scale.suppress()?','line_number':471,'multiline':False]
['text':' Are there other useful parameters that would be in Scale.legend()','line_number':472,'multiline':False]
['text':' besides allowing Scale.legend(False)?','line_number':473,'multiline':False]
['text':' Avoid having an offset / scientific notation in a legend','line_number':478,'multiline':False]
['text':' as we don't represent that anywhere so it ends up incorrect.','line_number':479,'multiline':False]
['text':' This could become an option (e.g. Continuous.label(offset=True))','line_number':480,'multiline':False]
['text':' in which case we would need to figure out how to show it.','line_number':481,'multiline':False]
['text':' TODO Add this to deal with outliers?','line_number':533,'multiline':False]
['text':' outside: Literal["keep", "drop", "clip"] = "keep"','line_number':534,'multiline':False]
['text':' Input checks','line_number':574,'multiline':False]
['text':' Input checks','line_number':632,'multiline':False]
['text':' This is rarely useful (unless you are setting limits)','line_number':680,'multiline':False]
['text':' We could add other log options if necessary','line_number':743,'multiline':False]
['text':' TODO date: bool?','line_number':766,'multiline':False]
['text':' For when we only care about the time component, would affect','line_number':767,'multiline':False]
['text':' default formatter and norm conversion. Should also happen in','line_number':768,'multiline':False]
['text':' Property.default_scale. The alternative was having distinct','line_number':769,'multiline':False]
['text':' Calendric / Temporal scales, but that feels a bit fussy, and it','line_number':770,'multiline':False]
['text':' would get in the way of using first-letter shorthands because','line_number':771,'multiline':False]
['text':' Calendric and Continuous would collide. Still, we haven't implemented','line_number':772,'multiline':False]
['text':' those yet, and having a clear distinction betewen date(time) / time','line_number':773,'multiline':False]
['text':' may be more useful.','line_number':774,'multiline':False]
['text':' TODO ideally we would have concise coordinate ticks,','line_number':862,'multiline':False]
['text':' but full semantic ticks. Is that possible?','line_number':863,'multiline':False]
['text':' ----------------------------------------------------------------------------------- #','line_number':871,'multiline':False]
['text':' TODO Have this separate from Temporal or have Temporal(date=True) or similar?','line_number':874,'multiline':False]
['text':' class Calendric(Scale):','line_number':875,'multiline':False]
['text':' TODO Needed? Or handle this at layer (in stat or as param, eg binning=)','line_number':877,'multiline':False]
['text':' class Binned(Scale):','line_number':878,'multiline':False]
['text':' TODO any need for color-specific scales?','line_number':880,'multiline':False]
['text':' class Sequential(Continuous):','line_number':881,'multiline':False]
['text':' class Diverging(Continuous):','line_number':882,'multiline':False]
['text':' class Qualitative(Nominal):','line_number':883,'multiline':False]
['text':' ----------------------------------------------------------------------------------- #','line_number':886,'multiline':False]
['text':' Matplotlib requirement but not actually used','line_number':899,'multiline':False]
['text':' It appears that this needs to be initialized this way on matplotlib 3.1,','line_number':909,'multiline':False]
['text':' but not later versions. It is unclear whether there are any issues with it.','line_number':910,'multiline':False]
['text':' self.set_default_intervals()  Is this ever needed?','line_number':914,'multiline':False]
['text':' TODO do we want to distinguish view/data intervals? e.g. for a legend','line_number':922,'multiline':False]
['text':' we probably want to represent the full range of the data values, but','line_number':923,'multiline':False]
['text':' still norm the colormap. If so, we'll need to track data range separately','line_number':924,'multiline':False]
['text':' from the norm, which we currently don't do.','line_number':925,'multiline':False]
['text':' TODO how to do this in a configurable / auto way?','line_number':934,'multiline':False]
['text':' Would be cool to have legend density adapt to figure size, etc.','line_number':935,'multiline':False]
['text':' This is in matplotlib method; do we need this?','line_number':972,'multiline':False]
['text':' self.set_default_intervals()','line_number':973,'multiline':False]
['text':' Note that matplotlib actually returns a string here!','line_number':984,'multiline':False]
['text':' (e.g., with a log scale, axis.get_scale() returns "log")','line_number':985,'multiline':False]
['text':' Currently we just hit it with minor ticks where it checks for','line_number':986,'multiline':False]
['text':' scale == "log". I'm not sure how you'd actually use log-scale','line_number':987,'multiline':False]
['text':' minor "ticks" in a legend context, so this is fine....','line_number':988,'multiline':False]
['text':' ------------------------------------------------------------------------------------ #','line_number':995,'multiline':False]
['text':' Transform function creation','line_number':996,'multiline':False]
['text':' From https://iopscience.iop.org/article/10.1088/0957-0233/24/2/027001','line_number':1049,'multiline':False]
['text':' Note: currently not using base because we only get','line_number':1051,'multiline':False]
['text':' one parameter from the string, and are using c (this is consistent with d3)','line_number':1052,'multiline':False]
