['text':' stb_image - v2.28 - public domain image loader - http://nothings.org/stb
                                  no warranty implied; use at your own risk

   Do this:
      #define STB_IMAGE_IMPLEMENTATION
   before you include this file in *one* C or C++ file to create the implementation.

   // i.e. it should look like this:
   #include ...
   #include ...
   #include ...
   #define STB_IMAGE_IMPLEMENTATION
   #include "stb_image.h"

   You can #define STBI_ASSERT(x) before the #include to avoid using assert.h.
   And #define STBI_MALLOC, STBI_REALLOC, and STBI_FREE to avoid using malloc,realloc,free


   QUICK NOTES:
      Primarily of interest to game developers and other people who can
          avoid problematic images and only need the trivial interface

      JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)
      PNG 1/2/4/8/16-bit-per-channel

      TGA (not sure what subset, if a subset)
      BMP non-1bpp, non-RLE
      PSD (composited view only, no extra channels, 8/16 bit-per-channel)

      GIF (*comp always reports as 4-channel)
      HDR (radiance rgbE format)
      PIC (Softimage PIC)
      PNM (PPM and PGM binary only)

      Animated GIF still needs a proper API, but here's one way to do it:
          http://gist.github.com/urraka/685d9a6340b26b830d49

      - decode from memory or through FILE (define STBI_NO_STDIO to remove code)
      - decode from arbitrary I/O callbacks
      - SIMD acceleration on x86/x64 (SSE2) and ARM (NEON)

   Full documentation under "DOCUMENTATION" below.


LICENSE

  See end of file for license information.

RECENT REVISION HISTORY:

      2.28  (2023-01-29) many error fixes, security errors, just tons of stuff
      2.27  (2021-07-11) document stbi_info better, 16-bit PNM support, bug fixes
      2.26  (2020-07-13) many minor fixes
      2.25  (2020-02-02) fix warnings
      2.24  (2020-02-02) fix warnings; thread-local failure_reason and flip_vertically
      2.23  (2019-08-11) fix clang static analysis warning
      2.22  (2019-03-04) gif fixes, fix warnings
      2.21  (2019-02-25) fix typo in comment
      2.20  (2019-02-07) support utf8 filenames in Windows; fix warnings and platform ifdefs
      2.19  (2018-02-11) fix warning
      2.18  (2018-01-30) fix warnings
      2.17  (2018-01-29) bugfix, 1-bit BMP, 16-bitness query, fix warnings
      2.16  (2017-07-23) all functions have 16-bit variants; optimizations; bugfixes
      2.15  (2017-03-18) fix png-1,2,4; all Imagenet JPGs; no runtime SSE detection on GCC
      2.14  (2017-03-03) remove deprecated STBI_JPEG_OLD; fixes for Imagenet JPGs
      2.13  (2016-12-04) experimental 16-bit API, only for PNG so far; fixes
      2.12  (2016-04-02) fix typo in 2.11 PSD fix that caused crashes
      2.11  (2016-04-02) 16-bit PNGS; enable SSE2 in non-gcc x64
                         RGB-format JPEG; remove white matting in PSD;
                         allocate large structures on the stack;
                         correct channel count for PNG & BMP
      2.10  (2016-01-22) avoid warning introduced in 2.09
      2.09  (2016-01-16) 16-bit TGA; comments in PNM files; STBI_REALLOC_SIZED

   See end of file for full revision history.


 ============================    Contributors    =========================

 Image formats                          Extensions, features
    Sean Barrett (jpeg, png, bmp)          Jetro Lauha (stbi_info)
    Nicolas Schulz (hdr, psd)              Martin "SpartanJ" Golini (stbi_info)
    Jonathan Dummer (tga)                  James "moose2000" Brown (iPhone PNG)
    Jean-Marc Lienher (gif)                Ben "Disch" Wenger (io callbacks)
    Tom Seddon (pic)                       Omar Cornut (1/2/4-bit PNG)
    Thatcher Ulrich (psd)                  Nicolas Guillemot (vertical flip)
    Ken Miller (pgm, ppm)                  Richard Mitton (16-bit PSD)
    github:urraka (animated gif)           Junggon Kim (PNM comments)
    Christopher Forseth (animated gif)     Daniel Gibson (16-bit TGA)
                                           socks-the-fox (16-bit PNG)
                                           Jeremy Sawicki (handle all ImageNet JPGs)
 Optimizations & bugfixes                  Mikhail Morozov (1-bit BMP)
    Fabian "ryg" Giesen                    Anael Seghezzi (is-16-bit query)
    Arseny Kapoulkine                      Simon Breuss (16-bit PNM)
    John-Mark Allen
    Carmelo J Fdez-Aguera

 Bug & warning fixes
    Marc LeBlanc            David Woo          Guillaume George     Martins Mozeiko
    Christpher Lloyd        Jerry Jansson      Joseph Thomson       Blazej Dariusz Roszkowski
    Phil Jordan                                Dave Moore           Roy Eltham
    Hayaki Saito            Nathan Reed        Won Chun
    Luke Graham             Johan Duparc       Nick Verigakis       the Horde3D community
    Thomas Ruf              Ronny Chevalier                         github:rlyeh
    Janez Zemva             John Bartholomew   Michal Cichon        github:romigrou
    Jonathan Blow           Ken Hamada         Tero Hanninen        github:svdijk
    Eugene Golushkov        Laurent Gomila     Cort Stratton        github:snagar
    Aruelien Pocheville     Sergio Gonzalez    Thibault Reuille     github:Zelex
    Cass Everitt            Ryamond Barbiero                        github:grim210
    Paul Du Bois            Engin Manap        Aldo Culquicondor    github:sammyhw
    Philipp Wiesemann       Dale Weiler        Oriol Ferrer Mesia   github:phprus
    Josh Tobin              Neil Bickford      Matthew Gregan       github:poppolopoppo
    Julian Raschke          Gregory Mullen     Christian Floisand   github:darealshinji
    Baldur Karlsson         Kevin Schmidt      JR Smith             github:Michaelangel007
                            Brad Weinberger    Matvey Cherevko      github:mosra
    Luca Sas                Alexander Veselov  Zack Middleton       [reserved]
    Ryan C. Gordon          [reserved]                              [reserved]
                     DO NOT ADD YOUR NAME HERE

                     Jacko Dirks

  To add your name to the credits, pick a random blank space in the middle and fill it.
  80% of merge conflicts on stb PRs are due to people adding their name at the end
  of the credits.
','line_number':1,'multiline':True]
['text':' DOCUMENTATION','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':' Limitations:','line_number':132,'multiline':False]
['text':'    - no 12-bit-per-channel JPEG','line_number':133,'multiline':False]
['text':'    - no JPEGs with arithmetic coding','line_number':134,'multiline':False]
['text':'    - GIF always returns *comp=4','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':' Basic usage (see HDR discussion below for HDR usage):','line_number':137,'multiline':False]
['text':'    int x,y,n;','line_number':138,'multiline':False]
['text':'    unsigned char *data = stbi_load(filename, &x, &y, &n, 0);','line_number':139,'multiline':False]
['text':'    // ... process data if not NULL ...','line_number':140,'multiline':False]
['text':'    // ... x = width, y = height, n = # 8-bit components per pixel ...','line_number':141,'multiline':False]
['text':'    // ... replace '0' with '1'..'4' to force that many components per pixel','line_number':142,'multiline':False]
['text':'    // ... but 'n' will always be the number that it would have been if you said 0','line_number':143,'multiline':False]
['text':'    stbi_image_free(data);','line_number':144,'multiline':False]
['text':'','line_number':145,'multiline':False]
['text':' Standard parameters:','line_number':146,'multiline':False]
['text':'    int *x                 -- outputs image width in pixels','line_number':147,'multiline':False]
['text':'    int *y                 -- outputs image height in pixels','line_number':148,'multiline':False]
['text':'    int *channels_in_file  -- outputs # of image components in image file','line_number':149,'multiline':False]
['text':'    int desired_channels   -- if non-zero, # of image components requested in result','line_number':150,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':' The return value from an image loader is an 'unsigned char *' which points','line_number':152,'multiline':False]
['text':' to the pixel data, or NULL on an allocation failure or if the image is','line_number':153,'multiline':False]
['text':' corrupt or invalid. The pixel data consists of *y scanlines of *x pixels,','line_number':154,'multiline':False]
['text':' with each pixel consisting of N interleaved 8-bit components; the first','line_number':155,'multiline':False]
['text':' pixel pointed to is top-left-most in the image. There is no padding between','line_number':156,'multiline':False]
['text':' image scanlines or between pixels, regardless of format. The number of','line_number':157,'multiline':False]
['text':' components N is 'desired_channels' if desired_channels is non-zero, or','line_number':158,'multiline':False]
['text':' *channels_in_file otherwise. If desired_channels is non-zero,','line_number':159,'multiline':False]
['text':' *channels_in_file has the number of components that _would_ have been','line_number':160,'multiline':False]
['text':' output otherwise. E.g. if you set desired_channels to 4, you will always','line_number':161,'multiline':False]
['text':' get RGBA output, but you can check *channels_in_file to see if it's trivially','line_number':162,'multiline':False]
['text':' opaque because e.g. there were only 3 channels in the source image.','line_number':163,'multiline':False]
['text':'','line_number':164,'multiline':False]
['text':' An output image with N components has the following components interleaved','line_number':165,'multiline':False]
['text':' in this order in each pixel:','line_number':166,'multiline':False]
['text':'','line_number':167,'multiline':False]
['text':'     N=#comp     components','line_number':168,'multiline':False]
['text':'       1           grey','line_number':169,'multiline':False]
['text':'       2           grey, alpha','line_number':170,'multiline':False]
['text':'       3           red, green, blue','line_number':171,'multiline':False]
['text':'       4           red, green, blue, alpha','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':' If image loading fails for any reason, the return value will be NULL,','line_number':174,'multiline':False]
['text':' and *x, *y, *channels_in_file will be unchanged. The function','line_number':175,'multiline':False]
['text':' stbi_failure_reason() can be queried for an extremely brief, end-user','line_number':176,'multiline':False]
['text':' unfriendly explanation of why the load failed. Define STBI_NO_FAILURE_STRINGS','line_number':177,'multiline':False]
['text':' to avoid compiling these strings at all, and STBI_FAILURE_USERMSG to get slightly','line_number':178,'multiline':False]
['text':' more user-friendly ones.','line_number':179,'multiline':False]
['text':'','line_number':180,'multiline':False]
['text':' Paletted PNG, BMP, GIF, and PIC images are automatically depalettized.','line_number':181,'multiline':False]
['text':'','line_number':182,'multiline':False]
['text':' To query the width, height and component count of an image without having to','line_number':183,'multiline':False]
['text':' decode the full file, you can use the stbi_info family of functions:','line_number':184,'multiline':False]
['text':'','line_number':185,'multiline':False]
['text':'   int x,y,n,ok;','line_number':186,'multiline':False]
['text':'   ok = stbi_info(filename, &x, &y, &n);','line_number':187,'multiline':False]
['text':'   // returns ok=1 and sets x, y, n if image is a supported format,','line_number':188,'multiline':False]
['text':'   // 0 otherwise.','line_number':189,'multiline':False]
['text':'','line_number':190,'multiline':False]
['text':' Note that stb_image pervasively uses ints in its public API for sizes,','line_number':191,'multiline':False]
['text':' including sizes of memory buffers. This is now part of the API and thus','line_number':192,'multiline':False]
['text':' hard to change without causing breakage. As a result, the various image','line_number':193,'multiline':False]
['text':' loaders all have certain limits on image size; these differ somewhat','line_number':194,'multiline':False]
['text':' by format but generally boil down to either just under 2GB or just under','line_number':195,'multiline':False]
['text':' 1GB. When the decoded image would be larger than this, stb_image decoding','line_number':196,'multiline':False]
['text':' will fail.','line_number':197,'multiline':False]
['text':'','line_number':198,'multiline':False]
['text':' Additionally, stb_image will reject image files that have any of their','line_number':199,'multiline':False]
['text':' dimensions set to a larger value than the configurable STBI_MAX_DIMENSIONS,','line_number':200,'multiline':False]
['text':' which defaults to 2**24 = 16777216 pixels. Due to the above memory limit,','line_number':201,'multiline':False]
['text':' the only way to have an image with such dimensions load correctly','line_number':202,'multiline':False]
['text':' is for it to have a rather extreme aspect ratio. Either way, the','line_number':203,'multiline':False]
['text':' assumption here is that such larger images are likely to be malformed','line_number':204,'multiline':False]
['text':' or malicious. If you do need to load an image with individual dimensions','line_number':205,'multiline':False]
['text':' larger than that, and it still fits in the overall size limit, you can','line_number':206,'multiline':False]
['text':' #define STBI_MAX_DIMENSIONS on your own to be something larger.','line_number':207,'multiline':False]
['text':'','line_number':208,'multiline':False]
['text':' ===========================================================================','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' UNICODE:','line_number':211,'multiline':False]
['text':'','line_number':212,'multiline':False]
['text':'   If compiling for Windows and you wish to use Unicode filenames, compile','line_number':213,'multiline':False]
['text':'   with','line_number':214,'multiline':False]
['text':'       #define STBI_WINDOWS_UTF8','line_number':215,'multiline':False]
['text':'   and pass utf8-encoded filenames. Call stbi_convert_wchar_to_utf8 to convert','line_number':216,'multiline':False]
['text':'   Windows wchar_t filenames to utf8.','line_number':217,'multiline':False]
['text':'','line_number':218,'multiline':False]
['text':' ===========================================================================','line_number':219,'multiline':False]
['text':'','line_number':220,'multiline':False]
['text':' Philosophy','line_number':221,'multiline':False]
['text':'','line_number':222,'multiline':False]
['text':' stb libraries are designed with the following priorities:','line_number':223,'multiline':False]
['text':'','line_number':224,'multiline':False]
['text':'    1. easy to use','line_number':225,'multiline':False]
['text':'    2. easy to maintain','line_number':226,'multiline':False]
['text':'    3. good performance','line_number':227,'multiline':False]
['text':'','line_number':228,'multiline':False]
['text':' Sometimes I let "good performance" creep up in priority over "easy to maintain",','line_number':229,'multiline':False]
['text':' and for best performance I may provide less-easy-to-use APIs that give higher','line_number':230,'multiline':False]
['text':' performance, in addition to the easy-to-use ones. Nevertheless, it's important','line_number':231,'multiline':False]
['text':' to keep in mind that from the standpoint of you, a client of this library,','line_number':232,'multiline':False]
['text':' all you care about is #1 and #3, and stb libraries DO NOT emphasize #3 above all.','line_number':233,'multiline':False]
['text':'','line_number':234,'multiline':False]
['text':' Some secondary priorities arise directly from the first two, some of which','line_number':235,'multiline':False]
['text':' provide more explicit reasons why performance can't be emphasized.','line_number':236,'multiline':False]
['text':'','line_number':237,'multiline':False]
['text':'    - Portable ("ease of use")','line_number':238,'multiline':False]
['text':'    - Small source code footprint ("easy to maintain")','line_number':239,'multiline':False]
['text':'    - No dependencies ("ease of use")','line_number':240,'multiline':False]
['text':'','line_number':241,'multiline':False]
['text':' ===========================================================================','line_number':242,'multiline':False]
['text':'','line_number':243,'multiline':False]
['text':' I/O callbacks','line_number':244,'multiline':False]
['text':'','line_number':245,'multiline':False]
['text':' I/O callbacks allow you to read from arbitrary sources, like packaged','line_number':246,'multiline':False]
['text':' files or some other source. Data read from callbacks are processed','line_number':247,'multiline':False]
['text':' through a small internal buffer (currently 128 bytes) to try to reduce','line_number':248,'multiline':False]
['text':' overhead.','line_number':249,'multiline':False]
['text':'','line_number':250,'multiline':False]
['text':' The three functions you must define are "read" (reads some bytes of data),','line_number':251,'multiline':False]
['text':' "skip" (skips some bytes of data), "eof" (reports if the stream is at the end).','line_number':252,'multiline':False]
['text':'','line_number':253,'multiline':False]
['text':' ===========================================================================','line_number':254,'multiline':False]
['text':'','line_number':255,'multiline':False]
['text':' SIMD support','line_number':256,'multiline':False]
['text':'','line_number':257,'multiline':False]
['text':' The JPEG decoder will try to automatically use SIMD kernels on x86 when','line_number':258,'multiline':False]
['text':' supported by the compiler. For ARM Neon support, you must explicitly','line_number':259,'multiline':False]
['text':' request it.','line_number':260,'multiline':False]
['text':'','line_number':261,'multiline':False]
['text':' (The old do-it-yourself SIMD API is no longer supported in the current','line_number':262,'multiline':False]
['text':' code.)','line_number':263,'multiline':False]
['text':'','line_number':264,'multiline':False]
['text':' On x86, SSE2 will automatically be used when available based on a run-time','line_number':265,'multiline':False]
['text':' test; if not, the generic C versions are used as a fall-back. On ARM targets,','line_number':266,'multiline':False]
['text':' the typical path is to have separate builds for NEON and non-NEON devices','line_number':267,'multiline':False]
['text':' (at least this is true for iOS and Android). Therefore, the NEON support is','line_number':268,'multiline':False]
['text':' toggled by a build flag: define STBI_NEON to get NEON loops.','line_number':269,'multiline':False]
['text':'','line_number':270,'multiline':False]
['text':' If for some reason you do not want to use any of SIMD code, or if','line_number':271,'multiline':False]
['text':' you have issues compiling it, you can disable it entirely by','line_number':272,'multiline':False]
['text':' defining STBI_NO_SIMD.','line_number':273,'multiline':False]
['text':'','line_number':274,'multiline':False]
['text':' ===========================================================================','line_number':275,'multiline':False]
['text':'','line_number':276,'multiline':False]
['text':' HDR image support   (disable by defining STBI_NO_HDR)','line_number':277,'multiline':False]
['text':'','line_number':278,'multiline':False]
['text':' stb_image supports loading HDR images in general, and currently the Radiance','line_number':279,'multiline':False]
['text':' .HDR file format specifically. You can still load any file through the existing','line_number':280,'multiline':False]
['text':' interface; if you attempt to load an HDR file, it will be automatically remapped','line_number':281,'multiline':False]
['text':' to LDR, assuming gamma 2.2 and an arbitrary scale factor defaulting to 1;','line_number':282,'multiline':False]
['text':' both of these constants can be reconfigured through this interface:','line_number':283,'multiline':False]
['text':'','line_number':284,'multiline':False]
['text':'     stbi_hdr_to_ldr_gamma(2.2f);','line_number':285,'multiline':False]
['text':'     stbi_hdr_to_ldr_scale(1.0f);','line_number':286,'multiline':False]
['text':'','line_number':287,'multiline':False]
['text':' (note, do not use _inverse_ constants; stbi_image will invert them','line_number':288,'multiline':False]
['text':' appropriately).','line_number':289,'multiline':False]
['text':'','line_number':290,'multiline':False]
['text':' Additionally, there is a new, parallel interface for loading files as','line_number':291,'multiline':False]
['text':' (linear) floats to preserve the full dynamic range:','line_number':292,'multiline':False]
['text':'','line_number':293,'multiline':False]
['text':'    float *data = stbi_loadf(filename, &x, &y, &n, 0);','line_number':294,'multiline':False]
['text':'','line_number':295,'multiline':False]
['text':' If you load LDR images through this interface, those images will','line_number':296,'multiline':False]
['text':' be promoted to floating point values, run through the inverse of','line_number':297,'multiline':False]
['text':' constants corresponding to the above:','line_number':298,'multiline':False]
['text':'','line_number':299,'multiline':False]
['text':'     stbi_ldr_to_hdr_scale(1.0f);','line_number':300,'multiline':False]
['text':'     stbi_ldr_to_hdr_gamma(2.2f);','line_number':301,'multiline':False]
['text':'','line_number':302,'multiline':False]
['text':' Finally, given a filename (or an open file or memory block--see header','line_number':303,'multiline':False]
['text':' file for details) containing image data, you can query for the "most','line_number':304,'multiline':False]
['text':' appropriate" interface to use (that is, whether the image is HDR or','line_number':305,'multiline':False]
['text':' not), using:','line_number':306,'multiline':False]
['text':'','line_number':307,'multiline':False]
['text':'     stbi_is_hdr(char *filename);','line_number':308,'multiline':False]
['text':'','line_number':309,'multiline':False]
['text':' ===========================================================================','line_number':310,'multiline':False]
['text':'','line_number':311,'multiline':False]
['text':' iPhone PNG support:','line_number':312,'multiline':False]
['text':'','line_number':313,'multiline':False]
['text':' We optionally support converting iPhone-formatted PNGs (which store','line_number':314,'multiline':False]
['text':' premultiplied BGRA) back to RGB, even though they're internally encoded','line_number':315,'multiline':False]
['text':' differently. To enable this conversion, call','line_number':316,'multiline':False]
['text':' stbi_convert_iphone_png_to_rgb(1).','line_number':317,'multiline':False]
['text':'','line_number':318,'multiline':False]
['text':' Call stbi_set_unpremultiply_on_load(1) as well to force a divide per','line_number':319,'multiline':False]
['text':' pixel to remove any premultiplied alpha *only* if the image file explicitly','line_number':320,'multiline':False]
['text':' says there's premultiplied data (currently only happens in iPhone images,','line_number':321,'multiline':False]
['text':' and only if iPhone convert-to-rgb processing is on).','line_number':322,'multiline':False]
['text':'','line_number':323,'multiline':False]
['text':' ===========================================================================','line_number':324,'multiline':False]
['text':'','line_number':325,'multiline':False]
['text':' ADDITIONAL CONFIGURATION','line_number':326,'multiline':False]
['text':'','line_number':327,'multiline':False]
['text':'  - You can suppress implementation of any of the decoders to reduce','line_number':328,'multiline':False]
['text':'    your code footprint by #defining one or more of the following','line_number':329,'multiline':False]
['text':'    symbols before creating the implementation.','line_number':330,'multiline':False]
['text':'','line_number':331,'multiline':False]
['text':'        STBI_NO_JPEG','line_number':332,'multiline':False]
['text':'        STBI_NO_PNG','line_number':333,'multiline':False]
['text':'        STBI_NO_BMP','line_number':334,'multiline':False]
['text':'        STBI_NO_PSD','line_number':335,'multiline':False]
['text':'        STBI_NO_TGA','line_number':336,'multiline':False]
['text':'        STBI_NO_GIF','line_number':337,'multiline':False]
['text':'        STBI_NO_HDR','line_number':338,'multiline':False]
['text':'        STBI_NO_PIC','line_number':339,'multiline':False]
['text':'        STBI_NO_PNM   (.ppm and .pgm)','line_number':340,'multiline':False]
['text':'','line_number':341,'multiline':False]
['text':'  - You can request *only* certain decoders and suppress all other ones','line_number':342,'multiline':False]
['text':'    (this will be more forward-compatible, as addition of new decoders','line_number':343,'multiline':False]
['text':'    doesn't require you to disable them explicitly):','line_number':344,'multiline':False]
['text':'','line_number':345,'multiline':False]
['text':'        STBI_ONLY_JPEG','line_number':346,'multiline':False]
['text':'        STBI_ONLY_PNG','line_number':347,'multiline':False]
['text':'        STBI_ONLY_BMP','line_number':348,'multiline':False]
['text':'        STBI_ONLY_PSD','line_number':349,'multiline':False]
['text':'        STBI_ONLY_TGA','line_number':350,'multiline':False]
['text':'        STBI_ONLY_GIF','line_number':351,'multiline':False]
['text':'        STBI_ONLY_HDR','line_number':352,'multiline':False]
['text':'        STBI_ONLY_PIC','line_number':353,'multiline':False]
['text':'        STBI_ONLY_PNM   (.ppm and .pgm)','line_number':354,'multiline':False]
['text':'','line_number':355,'multiline':False]
['text':'   - If you use STBI_NO_PNG (or _ONLY_ without PNG), and you still','line_number':356,'multiline':False]
['text':'     want the zlib decoder to be available, #define STBI_SUPPORT_ZLIB','line_number':357,'multiline':False]
['text':'','line_number':358,'multiline':False]
['text':'  - If you define STBI_MAX_DIMENSIONS, stb_image will reject images greater','line_number':359,'multiline':False]
['text':'    than that size (in either width or height) without further processing.','line_number':360,'multiline':False]
['text':'    This is to let programs in the wild set an upper bound to prevent','line_number':361,'multiline':False]
['text':'    denial-of-service attacks on untrusted data, as one could generate a','line_number':362,'multiline':False]
['text':'    valid image of gigantic dimensions and force stb_image to allocate a','line_number':363,'multiline':False]
['text':'    huge block of memory and spend disproportionate time decoding it. By','line_number':364,'multiline':False]
['text':'    default this is set to (1 << 24), which is 16777216, but that's still','line_number':365,'multiline':False]
['text':'    very big.','line_number':366,'multiline':False]
['text':' STBI_NO_STDIO','line_number':370,'multiline':False]
['text':' only used for desired_channels','line_number':375,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':399,'multiline':False]
['text':'','line_number':400,'multiline':False]
['text':' PRIMARY API - works on images of any type','line_number':401,'multiline':False]
['text':'','line_number':402,'multiline':False]
['text':'','line_number':404,'multiline':False]
['text':' load image by filename, open file, or memory buffer','line_number':405,'multiline':False]
['text':'','line_number':406,'multiline':False]
['text':' fill 'data' with 'size' bytes.  return number of bytes actually read','line_number':410,'multiline':False]
['text':' skip the next 'n' bytes, or 'unget' the last -n bytes if negative','line_number':411,'multiline':False]
['text':' returns nonzero if we are at end of file/data','line_number':412,'multiline':False]
['text':'//////////////////////////////////','line_number':415,'multiline':False]
['text':'','line_number':416,'multiline':False]
['text':' 8-bits-per-channel interface','line_number':417,'multiline':False]
['text':'','line_number':418,'multiline':False]
['text':' for stbi_load_from_file, file pointer is left pointing immediately after image','line_number':428,'multiline':False]
['text':'//////////////////////////////////','line_number':440,'multiline':False]
['text':'','line_number':441,'multiline':False]
['text':' 16-bits-per-channel interface','line_number':442,'multiline':False]
['text':'','line_number':443,'multiline':False]
['text':'//////////////////////////////////','line_number':455,'multiline':False]
['text':'','line_number':456,'multiline':False]
['text':' float-per-channel interface','line_number':457,'multiline':False]
['text':'','line_number':458,'multiline':False]
['text':' STBI_NO_HDR','line_number':474,'multiline':False]
['text':' STBI_NO_LINEAR','line_number':479,'multiline':False]
['text':' stbi_is_hdr is always defined, but always returns false if STBI_NO_HDR','line_number':481,'multiline':False]
['text':' STBI_NO_STDIO','line_number':487,'multiline':False]
['text':' get a VERY brief reason for failure','line_number':489,'multiline':False]
['text':' on most compilers (and ALL modern mainstream compilers) this is threadsafe','line_number':490,'multiline':False]
['text':' free the loaded image -- this is just free()','line_number':493,'multiline':False]
['text':' get image dimensions & components without fully decoding','line_number':496,'multiline':False]
['text':' for image formats that explicitly notate that they have premultiplied alpha,','line_number':509,'multiline':False]
['text':' we just return the colors as stored in the file. set this flag to force','line_number':510,'multiline':False]
['text':' unpremultiplication. results are undefined if the unpremultiply overflow.','line_number':511,'multiline':False]
['text':' indicate whether we should process iphone images back to canonical format,','line_number':514,'multiline':False]
['text':' or just pass them through "as-is"','line_number':515,'multiline':False]
['text':' flip the image vertically, so the first pixel in the output array is the bottom left','line_number':518,'multiline':False]
['text':' as above, but only applies to images loaded on the thread that calls the function','line_number':521,'multiline':False]
['text':' this function is only available if your compiler supports thread-local variables;','line_number':522,'multiline':False]
['text':' calling it will fail to link if your compiler doesn't','line_number':523,'multiline':False]
['text':' ZLIB client - used by PNG, available for other purposes','line_number':528,'multiline':False]
['text':'','line_number':543,'multiline':False]
['text':'','line_number':544,'multiline':False]
['text':'//   end header file   /////////////////////////////////////////////////////','line_number':545,'multiline':False]
['text':' STBI_INCLUDE_STB_IMAGE_H','line_number':546,'multiline':False]
['text':' ptrdiff_t on osx','line_number':588,'multiline':False]
['text':' ldexp, pow','line_number':593,'multiline':False]
['text':' should produce compiler error if size is wrong','line_number':652,'multiline':False]
['text':' ok','line_number':672,'multiline':False]
['text':' ok','line_number':674,'multiline':False]
['text':' x86/x64 detection','line_number':689,'multiline':False]
['text':' gcc doesn't support sse2 intrinsics unless you compile with -msse2,','line_number':697,'multiline':False]
['text':' which in turn means it gets to use SSE2 everywhere. This is unfortunate,','line_number':698,'multiline':False]
['text':' but previous attempts to provide the SSE2 functions with runtime','line_number':699,'multiline':False]
['text':' detection caused numerous issues. The way architecture extensions are','line_number':700,'multiline':False]
['text':' exposed in GCC/Clang is, sadly, not really suited for one-file libs.','line_number':701,'multiline':False]
['text':' New behavior: if compiled with -msse2, we use SSE2 without any','line_number':702,'multiline':False]
['text':' detection; if not, we don't use it at all.','line_number':703,'multiline':False]
['text':' Note that __MINGW32__ doesn't actually mean 32-bit, so we have to avoid STBI__X64_TARGET','line_number':708,'multiline':False]
['text':'','line_number':709,'multiline':False]
['text':' 32-bit MinGW wants ESP to be 16-byte aligned, but this is not in the','line_number':710,'multiline':False]
['text':' Windows ABI and VC++ as well as Windows DLLs don't maintain that invariant.','line_number':711,'multiline':False]
['text':' As a result, enabling SSE2 on 32-bit MinGW is dangerous when not','line_number':712,'multiline':False]
['text':' simultaneously enabling "-mstackrealign".','line_number':713,'multiline':False]
['text':'','line_number':714,'multiline':False]
['text':' See https://github.com/nothings/stb/issues/81 for more information.','line_number':715,'multiline':False]
['text':'','line_number':716,'multiline':False]
['text':' So default to no SSE2 on 32-bit MinGW. If you've read this far and added','line_number':717,'multiline':False]
['text':' -mstackrealign to your build settings, feel free to #define STBI_MINGW_ENABLE_SSE2.','line_number':718,'multiline':False]
['text':' not VC6','line_number':728,'multiline':False]
['text':' __cpuid','line_number':729,'multiline':False]
['text':' assume GCC-style if not VC++','line_number':756,'multiline':False]
['text':' If we're even attempting to compile this on GCC/Clang, that means','line_number':761,'multiline':False]
['text':' -msse2 is on, which means the compiler is allowed to use SSE2','line_number':762,'multiline':False]
['text':' instructions at will, and so are we.','line_number':763,'multiline':False]
['text':' ARM NEON','line_number':771,'multiline':False]
['text':'/////////////////////////////////////////////','line_number':793,'multiline':False]
['text':'','line_number':794,'multiline':False]
['text':'  stbi__context struct and start_xxx functions','line_number':795,'multiline':False]
['text':' stbi__context structure is our basic context used by all images, so it','line_number':797,'multiline':False]
['text':' contains all the IO context, plus some basic image information','line_number':798,'multiline':False]
['text':' initialize a memory-decode context','line_number':817,'multiline':False]
['text':' initialize a callback-based context','line_number':826,'multiline':False]
['text':' have to read a byte to reset feof()'s flag ','line_number':845,'multiline':True]
['text':' push byte back onto stream if valid. ','line_number':847,'multiline':True]
['text':' static void stop_file(stbi__context *s) { }','line_number':861,'multiline':False]
['text':' !STBI_NO_STDIO','line_number':863,'multiline':False]
['text':' conceptually rewind SHOULD rewind to the beginning of the stream,','line_number':866,'multiline':False]
['text':' but we just rewind to the beginning of the initial buffer, because','line_number':867,'multiline':False]
['text':' we only use it after doing 'test', which only ever looks at at most 92 bytes','line_number':868,'multiline':False]
['text':' stb_image uses ints pervasively, including for offset calculations.','line_number':956,'multiline':False]
['text':' therefore the largest decoded image size we can support with the','line_number':957,'multiline':False]
['text':' current code, even on 64-bit targets, is INT_MAX. this is not a','line_number':958,'multiline':False]
['text':' significant limitation for the intended use case.','line_number':959,'multiline':False]
['text':'','line_number':960,'multiline':False]
['text':' we do, however, need to make sure our size calculations don't','line_number':961,'multiline':False]
['text':' overflow. hence a few helper functions for size calculations that','line_number':962,'multiline':False]
['text':' multiply integers together, making sure that they're non-negative','line_number':963,'multiline':False]
['text':' and no overflow occurs.','line_number':964,'multiline':False]
['text':' return 1 if the sum is valid, 0 on overflow.','line_number':966,'multiline':False]
['text':' negative terms are considered invalid.','line_number':967,'multiline':False]
['text':' now 0 <= b <= INT_MAX, hence also','line_number':971,'multiline':False]
['text':' 0 <= INT_MAX - b <= INTMAX.','line_number':972,'multiline':False]
['text':' And "a + b <= INT_MAX" (which might overflow) is the','line_number':973,'multiline':False]
['text':' same as a <= INT_MAX - b (no overflow)','line_number':974,'multiline':False]
['text':' returns 1 if the product is valid, 0 on overflow.','line_number':978,'multiline':False]
['text':' negative factors are considered invalid.','line_number':979,'multiline':False]
['text':' mul-by-0 is always safe','line_number':984,'multiline':False]
['text':' portable way to check for no overflows in a*b','line_number':985,'multiline':False]
['text':' returns 1 if "a*b + add" has no negative terms/factors and doesn't overflow','line_number':990,'multiline':False]
['text':' returns 1 if "a*b*c + add" has no negative terms/factors and doesn't overflow','line_number':996,'multiline':False]
['text':' returns 1 if "a*b*c*d + add" has no negative terms/factors and doesn't overflow','line_number':1001,'multiline':False]
['text':' mallocs with size overflow checking','line_number':1010,'multiline':False]
['text':' returns 1 if the sum of two signed ints is valid (between -2^31 and 2^31-1 inclusive), 0 on overflow.','line_number':1032,'multiline':False]
['text':' a and b have different signs, so no overflow','line_number':1035,'multiline':False]
['text':' same as a + b >= INT_MIN; INT_MIN - b cannot overflow since b < 0.','line_number':1037,'multiline':False]
['text':' returns 1 if the product of two signed shorts is valid, 0 on overflow.','line_number':1041,'multiline':False]
['text':' multiplication by 0 is always 0; check for -1 so SHRT_MIN/b doesn't overflow','line_number':1044,'multiline':False]
['text':' product is positive, so similar to mul2sizes_valid','line_number':1046,'multiline':False]
['text':' same as a * b >= SHRT_MIN','line_number':1048,'multiline':False]
['text':' stbi__err - error','line_number':1052,'multiline':False]
['text':' stbi__errpf - error returning pointer to float','line_number':1053,'multiline':False]
['text':' stbi__errpuc - error returning pointer to unsigned char','line_number':1054,'multiline':False]
['text':' STBI_THREAD_LOCAL','line_number':1095,'multiline':False]
['text':' make sure it's initialized if we add new fields','line_number':1098,'multiline':False]
['text':' default is 8 so most paths don't have to be changed','line_number':1099,'multiline':False]
['text':' all current input & output are this, but this is here so we can add BGR order','line_number':1100,'multiline':False]
['text':' test the formats with a very explicit header first (at least a FOURCC','line_number':1103,'multiline':False]
['text':' or distinctive magic number first)','line_number':1104,'multiline':False]
['text':' then the formats that can end up attempting to load with just 1 or 2','line_number':1128,'multiline':False]
['text':' bytes matching expectations; these are prone to false positives, so','line_number':1129,'multiline':False]
['text':' try them later','line_number':1130,'multiline':False]
['text':' test tga last because it's a crappy test!','line_number':1148,'multiline':False]
['text':' top half of each byte is sufficient approx of 16->8 bit scaling','line_number':1166,'multiline':False]
['text':' replicate to high and low byte, maps 0->0, 255->0xffff','line_number':1182,'multiline':False]
['text':' swap row0 with row1','line_number':1197,'multiline':False]
['text':' it is the responsibility of the loaders to make sure we get either 8 or 16 bit.','line_number':1231,'multiline':False]
['text':' @TODO: move stbi__convert_format to here','line_number':1239,'multiline':False]
['text':' it is the responsibility of the loaders to make sure we get either 8 or 16 bit.','line_number':1256,'multiline':False]
['text':' @TODO: move stbi__convert_format16 to here','line_number':1264,'multiline':False]
['text':' @TODO: special case RGB-to-Y (and RGBA-to-YA) for 8-bit-to-16-bit case to keep more precision','line_number':1265,'multiline':False]
['text':' UTF8 ','line_number':1296,'multiline':True]
['text':' UTF8 ','line_number':1305,'multiline':True]
['text':' UTF8 ','line_number':1308,'multiline':True]
['text':' need to 'unget' all the characters in the IO buffer','line_number':1343,'multiline':False]
['text':' need to 'unget' all the characters in the IO buffer','line_number':1355,'multiline':False]
['text':'! STBI_NO_STDIO','line_number':1371,'multiline':False]
['text':' !STBI_NO_STDIO','line_number':1463,'multiline':False]
['text':' !STBI_NO_LINEAR','line_number':1465,'multiline':False]
['text':' these is-hdr-or-not is defined independent of whether STBI_NO_LINEAR is','line_number':1467,'multiline':False]
['text':' defined, for API simplicity; if STBI_NO_LINEAR is defined, it always','line_number':1468,'multiline':False]
['text':' reports false!','line_number':1469,'multiline':False]
['text':' !STBI_NO_STDIO','line_number':1508,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':1534,'multiline':False]
['text':'','line_number':1535,'multiline':False]
['text':' Common code used by all image loaders','line_number':1536,'multiline':False]
['text':'','line_number':1537,'multiline':False]
['text':' at end of file, treat same as if from memory, but need to handle case','line_number':1545,'multiline':False]
['text':' where s->img_buffer isn't pointing to safe memory, e.g. 0-byte file','line_number':1546,'multiline':False]
['text':' nothing','line_number':1568,'multiline':False]
['text':' if feof() is true, check if buffer = end','line_number':1574,'multiline':False]
['text':' special case: we've only got the special 0 character at the end','line_number':1575,'multiline':False]
['text':' nothing','line_number':1586,'multiline':False]
['text':' already there!','line_number':1590,'multiline':False]
['text':' nothing','line_number':1608,'multiline':False]
['text':' nothing','line_number':1635,'multiline':False]
['text':' nothing','line_number':1644,'multiline':False]
['text':' nothing','line_number':1653,'multiline':False]
['text':' truncate int to byte without warnings','line_number':1669,'multiline':False]
['text':' nothing','line_number':1673,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':1675,'multiline':False]
['text':'','line_number':1676,'multiline':False]
['text':'  generic converter from built-in img_n to req_comp','line_number':1677,'multiline':False]
['text':'    individual types do this automatically as much as possible (e.g. jpeg','line_number':1678,'multiline':False]
['text':'    does all cases internally since it needs to colorspace convert anyway,','line_number':1679,'multiline':False]
['text':'    and it never has alpha, so very few cases ). png can automatically','line_number':1680,'multiline':False]
['text':'    interleave an alpha=255 channel, but falls back to this for other cases','line_number':1681,'multiline':False]
['text':'','line_number':1682,'multiline':False]
['text':'  assume data buffer is malloced, so malloc a new one and free that one','line_number':1683,'multiline':False]
['text':'  only failure mode is malloc failing','line_number':1684,'multiline':False]
['text':' nothing','line_number':1691,'multiline':False]
['text':' convert source image with img_n components to one with req_comp components;','line_number':1715,'multiline':False]
['text':' avoid switch per pixel, so use switch per scanline and massive macros','line_number':1716,'multiline':False]
['text':' nothing','line_number':1781,'multiline':False]
['text':' nothing','line_number':1787,'multiline':False]
['text':' convert source image with img_n components to one with req_comp components;','line_number':1811,'multiline':False]
['text':' avoid switch per pixel, so use switch per scanline and massive macros','line_number':1812,'multiline':False]
['text':' compute number of non-alpha components','line_number':1887,'multiline':False]
['text':' compute number of non-alpha components','line_number':1919,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':1947,'multiline':False]
['text':'','line_number':1948,'multiline':False]
['text':'  "baseline" JPEG/JFIF decoder','line_number':1949,'multiline':False]
['text':'','line_number':1950,'multiline':False]
['text':'    simple implementation','line_number':1951,'multiline':False]
['text':'      - doesn't support delayed output of y-dimension','line_number':1952,'multiline':False]
['text':'      - simple interface (only one output format: 8-bit interleaved RGB)','line_number':1953,'multiline':False]
['text':'      - doesn't try to recover corrupt jpegs','line_number':1954,'multiline':False]
['text':'      - doesn't allow partial loading, loading multiple at once','line_number':1955,'multiline':False]
['text':'      - still fast on x86 (copying globals into locals doesn't help x86)','line_number':1956,'multiline':False]
['text':'      - allocates lots of intermediate memory (full size of all components)','line_number':1957,'multiline':False]
['text':'        - non-interleaved case requires this anyway','line_number':1958,'multiline':False]
['text':'        - allows good upsampling (see next)','line_number':1959,'multiline':False]
['text':'    high-quality','line_number':1960,'multiline':False]
['text':'      - upsampled channels are bilinearly interpolated, even across blocks','line_number':1961,'multiline':False]
['text':'      - quality integer IDCT derived from IJG's 'slow'','line_number':1962,'multiline':False]
['text':'    performance','line_number':1963,'multiline':False]
['text':'      - fast huffman; reasonable integer IDCT','line_number':1964,'multiline':False]
['text':'      - some SIMD kernels for common paths on targets with SSE2/NEON','line_number':1965,'multiline':False]
['text':'      - uses a lot of intermediate memory, could cache poorly','line_number':1966,'multiline':False]
['text':' huffman decoding acceleration','line_number':1970,'multiline':False]
['text':' larger handles more cases; smaller stomps less cache','line_number':1971,'multiline':False]
['text':' weirdly, repacking this into AoS is a 10% speed loss, instead of a win','line_number':1975,'multiline':False]
['text':' old 'firstsymbol' - old 'firstcode'','line_number':1980,'multiline':False]
['text':' sizes for components, interleaved MCUs','line_number':1990,'multiline':False]
['text':' definition of jpeg image component','line_number':1995,'multiline':False]
['text':' progressive only','line_number':2007,'multiline':False]
['text':' number of 8x8 coefficient blocks','line_number':2008,'multiline':False]
['text':' jpeg entropy-coded buffer','line_number':2011,'multiline':False]
['text':' number of valid bits','line_number':2012,'multiline':False]
['text':' marker seen while filling entropy buffer','line_number':2013,'multiline':False]
['text':' flag if we saw a marker so must stop','line_number':2014,'multiline':False]
['text':' Adobe APP14 tag','line_number':2023,'multiline':False]
['text':' kernels','line_number':2029,'multiline':False]
['text':' build size list for each symbol (from JPEG spec)','line_number':2039,'multiline':False]
['text':' compute actual symbols (from jpeg spec)','line_number':2049,'multiline':False]
['text':' compute delta to add to code to compute symbol id','line_number':2053,'multiline':False]
['text':' compute largest code + 1 for this size, preshifted as needed later','line_number':2061,'multiline':False]
['text':' build non-spec acceleration table; 255 is flag for not-accelerated','line_number':2067,'multiline':False]
['text':' build a table that decodes both magnitude and value of small ACs in','line_number':2082,'multiline':False]
['text':' one go.','line_number':2083,'multiline':False]
['text':' magnitude code followed by receive_extend code','line_number':2096,'multiline':False]
['text':' if the result is small enough, we can fit it in fast_ac table','line_number':2101,'multiline':False]
['text':' consume fill bytes','line_number':2115,'multiline':False]
['text':' (1 << n) - 1','line_number':2127,'multiline':False]
['text':' decode a jpeg huffman value from the bitstream','line_number':2131,'multiline':False]
['text':' look at the top FAST_BITS and determine what symbol ID it is,','line_number':2139,'multiline':False]
['text':' if the code is <= FAST_BITS','line_number':2140,'multiline':False]
['text':' naive test is to shift the code_buffer down so k bits are','line_number':2152,'multiline':False]
['text':' valid, then test against maxcode. To speed this up, we've','line_number':2153,'multiline':False]
['text':' preshifted maxcode left so that it has (16-k) 0s at the','line_number':2154,'multiline':False]
['text':' end; in other words, regardless of the number of bits, it','line_number':2155,'multiline':False]
['text':' wants to be compared against something shifted to have 16;','line_number':2156,'multiline':False]
['text':' that way we don't need to shift inside the loop.','line_number':2157,'multiline':False]
['text':' error! code not found','line_number':2163,'multiline':False]
['text':' convert the huffman code to the symbol id','line_number':2171,'multiline':False]
['text':' symbol id out of bounds!','line_number':2173,'multiline':False]
['text':' convert the id to a symbol','line_number':2177,'multiline':False]
['text':' bias[n] = (-1<<n) + 1','line_number':2183,'multiline':False]
['text':' combined JPEG 'receive' and JPEG 'extend', since baseline','line_number':2186,'multiline':False]
['text':' always extends everything it receives.','line_number':2187,'multiline':False]
['text':' ran out of bits from stream, return 0s intead of continuing','line_number':2194,'multiline':False]
['text':' sign bit always in MSB; 0 if MSB clear (positive), 1 if MSB set (negative)','line_number':2196,'multiline':False]
['text':' get some unsigned bits','line_number':2204,'multiline':False]
['text':' ran out of bits from stream, return 0s intead of continuing','line_number':2210,'multiline':False]
['text':' ran out of bits from stream, return 0s intead of continuing','line_number':2223,'multiline':False]
['text':' given a value that's at position X in the zigzag stream,','line_number':2230,'multiline':False]
['text':' where does it appear in the 8x8 matrix coded as row-major?','line_number':2231,'multiline':False]
['text':' let corrupt input sample past end','line_number':2235,'multiline':False]
['text':' decode one 64-entry block--','line_number':2238,'multiline':False]
['text':' 0 all the ac values now so we can do it 32-bits at a time','line_number':2250,'multiline':False]
['text':' decode AC components, see JPEG spec','line_number':2262,'multiline':False]
['text':' fast-AC path','line_number':2271,'multiline':False]
['text':' run','line_number':2272,'multiline':False]
['text':' combined length','line_number':2273,'multiline':False]
['text':' decode into unzigzag'd location','line_number':2278,'multiline':False]
['text':' end block','line_number':2289,'multiline':False]
['text':' decode into unzigzag'd location','line_number':2293,'multiline':False]
['text':' first scan for DC coefficient, must be first','line_number':2312,'multiline':False]
['text':' 0 all the ac values now','line_number':2313,'multiline':False]
['text':' refinement scan for DC coefficient','line_number':2327,'multiline':False]
['text':' @OPTIMIZE: store non-zigzagged during the decode passes,','line_number':2334,'multiline':False]
['text':' and only de-zigzag when dequantizing','line_number':2335,'multiline':False]
['text':' fast-AC path','line_number':2357,'multiline':False]
['text':' run','line_number':2358,'multiline':False]
['text':' combined length','line_number':2359,'multiline':False]
['text':' refinement scan for these AC coefficients','line_number':2389,'multiline':False]
['text':' @OPTIMIZE see if we can use the fast path here, advance-by-r is so slow, eh','line_number':2411,'multiline':False]
['text':' force end of block','line_number':2421,'multiline':False]
['text':' r=15 s=0 should write 16 0s, so we just do','line_number':2423,'multiline':False]
['text':' a run of 15 0s and then write s (which is 0),','line_number':2424,'multiline':False]
['text':' so we don't have to do anything special here','line_number':2425,'multiline':False]
['text':' sign bit','line_number':2430,'multiline':False]
['text':' advance by r','line_number':2437,'multiline':False]
['text':' take a -128..127 value and stbi__clamp it and convert to 0..255','line_number':2462,'multiline':False]
['text':' trick to use a single test to catch both cases','line_number':2464,'multiline':False]
['text':' derived from jidctint -- DCT_ISLOW','line_number':2477,'multiline':False]
['text':' columns','line_number':2520,'multiline':False]
['text':' if all zeroes, shortcut -- this avoids dequantizing 0s and IDCTing','line_number':2522,'multiline':False]
['text':'    no shortcut                 0     seconds','line_number':2524,'multiline':False]
['text':'    (1|2|3|4|5|6|7)==0          0     seconds','line_number':2525,'multiline':False]
['text':'    all separate               -0.047 seconds','line_number':2526,'multiline':False]
['text':'    1 && 2|3 && 4|5 && 6|7:    -0.047 seconds','line_number':2527,'multiline':False]
['text':' constants scaled things up by 1<<12; let's bring them back','line_number':2532,'multiline':False]
['text':' down, but keep 2 extra bits of precision','line_number':2533,'multiline':False]
['text':' no fast case since the first 1D IDCT spread components out','line_number':2550,'multiline':False]
['text':' constants scaled things up by 1<<12, plus we had 1<<2 from first','line_number':2552,'multiline':False]
['text':' loop, plus horizontal and vertical each scale by sqrt(8) so together','line_number':2553,'multiline':False]
['text':' we've got an extra 1<<3, so 1<<17 total we need to remove.','line_number':2554,'multiline':False]
['text':' so we want to round that, which means adding 0.5 * 1<<17,','line_number':2555,'multiline':False]
['text':' aka 65536. Also, we'll end up with -128 to 127 that we want','line_number':2556,'multiline':False]
['text':' to encode as 0..255 by adding 128, so we'll add that before the shift','line_number':2557,'multiline':False]
['text':' tried computing the shifts into temps, or'ing the temps to see','line_number':2562,'multiline':False]
['text':' if any were out of range, but that was slower','line_number':2563,'multiline':False]
['text':' sse2 integer IDCT. not the fastest possible implementation but it','line_number':2576,'multiline':False]
['text':' produces bit-identical results to the generic C version so it's','line_number':2577,'multiline':False]
['text':' fully "transparent".','line_number':2578,'multiline':False]
['text':' This is constructed to match our regular (generic) integer IDCT exactly.','line_number':2580,'multiline':False]
['text':' dot product constant: even elems=x, odd elems=y','line_number':2584,'multiline':False]
['text':' out(0) = c0[even]*x + c0[odd]*y   (c0, x, y 16-bit, out 32-bit)','line_number':2587,'multiline':False]
['text':' out(1) = c1[even]*x + c1[odd]*y','line_number':2588,'multiline':False]
['text':' out = in << 12  (in 16-bit, out 32-bit)','line_number':2597,'multiline':False]
['text':' wide add','line_number':2602,'multiline':False]
['text':' wide sub','line_number':2607,'multiline':False]
['text':' butterfly a/b, add bias, then shift by "s" and pack','line_number':2612,'multiline':False]
['text':' 8-bit interleave step (for transposes)','line_number':2623,'multiline':False]
['text':' 16-bit interleave step (for transposes)','line_number':2629,'multiline':False]
['text':' even part ','line_number':2637,'multiline':True]
['text':' odd part ','line_number':2647,'multiline':True]
['text':' rounding biases in column/row passes, see stbi__idct_block for explanation.','line_number':2672,'multiline':False]
['text':' load','line_number':2676,'multiline':False]
['text':' column pass','line_number':2686,'multiline':False]
['text':' 16bit 8x8 transpose pass 1','line_number':2690,'multiline':False]
['text':' transpose pass 2','line_number':2696,'multiline':False]
['text':' transpose pass 3','line_number':2702,'multiline':False]
['text':' row pass','line_number':2709,'multiline':False]
['text':' pack','line_number':2713,'multiline':False]
['text':' a0a1a2a3...a7b0b1b2b3...b7','line_number':2714,'multiline':False]
['text':' 8bit 8x8 transpose pass 1','line_number':2719,'multiline':False]
['text':' a0e0a1e1...','line_number':2720,'multiline':False]
['text':' c0g0c1g1...','line_number':2721,'multiline':False]
['text':' transpose pass 2','line_number':2723,'multiline':False]
['text':' a0c0e0g0...','line_number':2724,'multiline':False]
['text':' b0d0f0h0...','line_number':2725,'multiline':False]
['text':' transpose pass 3','line_number':2727,'multiline':False]
['text':' a0b0c0d0...','line_number':2728,'multiline':False]
['text':' a4b4c4d4...','line_number':2729,'multiline':False]
['text':' store','line_number':2731,'multiline':False]
['text':' STBI_SSE2','line_number':2760,'multiline':False]
['text':' NEON integer IDCT. should produce bit-identical','line_number':2764,'multiline':False]
['text':' results to the generic C version.','line_number':2765,'multiline':False]
['text':' wide add','line_number':2794,'multiline':False]
['text':' wide sub','line_number':2799,'multiline':False]
['text':' butterfly a/b, then shift using "shiftop" by "s" and pack','line_number':2804,'multiline':False]
['text':' even part ','line_number':2815,'multiline':True]
['text':' odd part ','line_number':2828,'multiline':True]
['text':' load','line_number':2853,'multiline':False]
['text':' add DC bias','line_number':2863,'multiline':False]
['text':' column pass','line_number':2866,'multiline':False]
['text':' 16bit 8x8 transpose','line_number':2869,'multiline':False]
['text':' these three map to a single VTRN.16, VTRN.32, and VSWP, respectively.','line_number':2871,'multiline':False]
['text':' whether compilers actually get this is another story, sadly.','line_number':2872,'multiline':False]
['text':' pass 1','line_number':2893,'multiline':False]
['text':' a0b0a2b2a4b4a6b6','line_number':2894,'multiline':False]
['text':' pass 2','line_number':2899,'multiline':False]
['text':' a0b0c0d0a4b4c4d4','line_number':2900,'multiline':False]
['text':' pass 3','line_number':2905,'multiline':False]
['text':' a0b0c0d0e0f0g0h0','line_number':2906,'multiline':False]
['text':' row pass','line_number':2916,'multiline':False]
['text':' vrshrn_n_s32 only supports shifts up to 16, we need','line_number':2917,'multiline':False]
['text':' 17. so do a non-rounding shift of 16 first then follow','line_number':2918,'multiline':False]
['text':' up with a rounding shift by 1.','line_number':2919,'multiline':False]
['text':' pack and round','line_number':2923,'multiline':False]
['text':' again, these can translate into one instruction, but often don't.','line_number':2933,'multiline':False]
['text':' sadly can't use interleaved stores here since we only write','line_number':2953,'multiline':False]
['text':' 8 bytes to each scan line!','line_number':2954,'multiline':False]
['text':' 8x8 8-bit transpose pass 1','line_number':2956,'multiline':False]
['text':' pass 2','line_number':2962,'multiline':False]
['text':' pass 3','line_number':2968,'multiline':False]
['text':' store','line_number':2974,'multiline':False]
['text':' STBI_NEON','line_number':3005,'multiline':False]
['text':' if there's a pending marker from the entropy stream, return that','line_number':3008,'multiline':False]
['text':' otherwise, fetch from the stream and get a marker. if there's no','line_number':3009,'multiline':False]
['text':' marker, return 0xff, which is never a valid marker value','line_number':3010,'multiline':False]
['text':' consume repeated 0xff fill bytes','line_number':3022,'multiline':False]
['text':' in each scan, we'll have scan_n components, and the order','line_number':3026,'multiline':False]
['text':' of the components is specified by order[]','line_number':3027,'multiline':False]
['text':' after a restart interval, stbi__jpeg_reset the entropy decoder and','line_number':3030,'multiline':False]
['text':' the dc prediction','line_number':3031,'multiline':False]
['text':' no more than 1<<31 MCUs if no restart_interal? that's plenty safe,','line_number':3040,'multiline':False]
['text':' since we don't even allow 1<<30 pixels','line_number':3041,'multiline':False]
['text':' non-interleaved data, we just need to process one block at a time,','line_number':3051,'multiline':False]
['text':' in trivial scanline order','line_number':3052,'multiline':False]
['text':' number of blocks to do just depends on how many actual "pixels" this','line_number':3053,'multiline':False]
['text':' component has, independent of interleaved MCU blocking and such','line_number':3054,'multiline':False]
['text':' every data block is an MCU, so countdown the restart interval','line_number':3064,'multiline':False]
['text':' if it's NOT a restart, then just bail, so we get corrupt data','line_number':3068,'multiline':False]
['text':' rather than no data','line_number':3069,'multiline':False]
['text':' interleaved','line_number':3077,'multiline':False]
['text':' scan an interleaved mcu... process scan_n components in order','line_number':3082,'multiline':False]
['text':' scan out an mcu's worth of this component; that's just determined','line_number':3085,'multiline':False]
['text':' by the basic H and V specified for the component','line_number':3086,'multiline':False]
['text':' after all interleaved components, that's an interleaved MCU,','line_number':3100,'multiline':False]
['text':' so now count down the restart interval','line_number':3101,'multiline':False]
['text':' non-interleaved data, we just need to process one block at a time,','line_number':3117,'multiline':False]
['text':' in trivial scanline order','line_number':3118,'multiline':False]
['text':' number of blocks to do just depends on how many actual "pixels" this','line_number':3119,'multiline':False]
['text':' component has, independent of interleaved MCU blocking and such','line_number':3120,'multiline':False]
['text':' every data block is an MCU, so countdown the restart interval','line_number':3134,'multiline':False]
['text':' interleaved','line_number':3145,'multiline':False]
['text':' scan an interleaved mcu... process scan_n components in order','line_number':3149,'multiline':False]
['text':' scan out an mcu's worth of this component; that's just determined','line_number':3152,'multiline':False]
['text':' by the basic H and V specified for the component','line_number':3153,'multiline':False]
['text':' after all interleaved components, that's an interleaved MCU,','line_number':3164,'multiline':False]
['text':' so now count down the restart interval','line_number':3165,'multiline':False]
['text':' dequantize and idct the data','line_number':3188,'multiline':False]
['text':' no marker found','line_number':3207,'multiline':False]
['text':' DRI - specify restart interval','line_number':3210,'multiline':False]
['text':' DQT - define quantization table','line_number':3216,'multiline':False]
['text':' DHT - define huffman table','line_number':3233,'multiline':False]
['text':' Loop over i < n would write past end of values!','line_number':3248,'multiline':False]
['text':' check for comment block or APP blocks','line_number':3268,'multiline':False]
['text':' JFIF APP0 segment','line_number':3279,'multiline':False]
['text':' Adobe APP14 segment','line_number':3289,'multiline':False]
['text':' version','line_number':3298,'multiline':False]
['text':' flags0','line_number':3299,'multiline':False]
['text':' flags1','line_number':3300,'multiline':False]
['text':' color transform','line_number':3301,'multiline':False]
['text':' after we see SOS','line_number':3313,'multiline':False]
['text':' no match','line_number':3329,'multiline':False]
['text':' should be 63, but might be 0','line_number':3342,'multiline':False]
['text':' JPEG','line_number':3387,'multiline':False]
['text':' JPEG baseline','line_number':3390,'multiline':False]
['text':' Legal, but we don't handle it--but neither does IJG','line_number':3394,'multiline':False]
['text':' JPEG requires','line_number':3397,'multiline':False]
['text':' check that plane subsampling factors are integer ratios; our resamplers can't deal with fractional ratios','line_number':3445,'multiline':False]
['text':' and I've never seen a non-corrupted JPEG file actually use them','line_number':3446,'multiline':False]
['text':' compute interleaved mcu info','line_number':3454,'multiline':False]
['text':' these sizes can't be more than 17 bits','line_number':3459,'multiline':False]
['text':' number of effective pixels (e.g. for non-interleaved MCU)','line_number':3464,'multiline':False]
['text':' to simplify generation, we'll allocate enough memory to decode','line_number':3467,'multiline':False]
['text':' the bogus oversized data from using interleaved MCUs and their','line_number':3468,'multiline':False]
['text':' big blocks (e.g. a 16x16 iMCU on an image of width 33); we won't','line_number':3469,'multiline':False]
['text':' discard the extra data until colorspace conversion','line_number':3470,'multiline':False]
['text':'','line_number':3471,'multiline':False]
['text':' img_mcu_x, img_mcu_y: <=17 bits; comp[i].h and .v are <=4 (checked earlier)','line_number':3472,'multiline':False]
['text':' so these muls can't overflow with 32-bit ints (which we require)','line_number':3473,'multiline':False]
['text':' align blocks for idct using mmx/sse','line_number':3482,'multiline':False]
['text':' w2, h2 are multiples of 8 (see above)','line_number':3485,'multiline':False]
['text':' use comparisons since in some cases we handle more than one case (e.g. SOF)','line_number':3498,'multiline':False]
['text':' valid values are 0,1,2','line_number':3510,'multiline':False]
['text':' initialize cached marker to empty','line_number':3511,'multiline':False]
['text':' some files have extra padding after their blocks, so ok, we'll scan','line_number':3523,'multiline':False]
['text':' some JPEGs have junk at end, skip over it but if we find what looks','line_number':3536,'multiline':False]
['text':' like a valid marker, resume there','line_number':3537,'multiline':False]
['text':' might be a marker','line_number':3540,'multiline':False]
['text':' not a stuffed zero or lead-in to another marker, looks','line_number':3545,'multiline':False]
['text':' like an actual marker, return it','line_number':3546,'multiline':False]
['text':' stuffed zero has x=0 now which ends the loop, meaning we go','line_number':3549,'multiline':False]
['text':' back to regular scan loop.','line_number':3550,'multiline':False]
['text':' repeated 0xff keeps trying to read the next byte of the marker.','line_number':3551,'multiline':False]
['text':' decode image to YCbCr format','line_number':3557,'multiline':False]
['text':' if we reach eof without hitting a marker, stbi__get_marker() below will fail and we'll eventually return 0','line_number':3576,'multiline':False]
['text':' static jfif-centered resampling (across block boundaries)','line_number':3600,'multiline':False]
['text':' need to generate two samples vertically for every one in input','line_number':3615,'multiline':False]
['text':' need to generate two samples horizontally for every one in input','line_number':3624,'multiline':False]
['text':' if only one sample, can't do any interpolation','line_number':3629,'multiline':False]
['text':' need to generate 2x2 samples for every one in input','line_number':3653,'multiline':False]
['text':' need to generate 2x2 samples for every one in input','line_number':3677,'multiline':False]
['text':' process groups of 8 pixels for as long as we can.','line_number':3686,'multiline':False]
['text':' note we can't handle the last pixel in a row in this loop','line_number':3687,'multiline':False]
['text':' because we need to handle the filter boundary conditions.','line_number':3688,'multiline':False]
['text':' load and perform the vertical filtering pass','line_number':3691,'multiline':False]
['text':' this uses 3*x + y = 4*x + (y - x)','line_number':3692,'multiline':False]
['text':' current row','line_number':3700,'multiline':False]
['text':' horizontal filter works the same based on shifted vers of current','line_number':3702,'multiline':False]
['text':' row. "prev" is current row shifted right by 1 pixel; we need to','line_number':3703,'multiline':False]
['text':' insert the previous pixel value (from t1).','line_number':3704,'multiline':False]
['text':' "next" is current row shifted left by 1 pixel, with first pixel','line_number':3705,'multiline':False]
['text':' of next block of 8 pixels added in.','line_number':3706,'multiline':False]
['text':' horizontal filter, polyphase implementation since it's convenient:','line_number':3712,'multiline':False]
['text':' even pixels = 3*cur + prev = cur*4 + (prev - cur)','line_number':3713,'multiline':False]
['text':' odd  pixels = 3*cur + next = cur*4 + (next - cur)','line_number':3714,'multiline':False]
['text':' note the shared term.','line_number':3715,'multiline':False]
['text':' interleave even and odd pixels, then undo scaling.','line_number':3724,'multiline':False]
['text':' pack and write output','line_number':3730,'multiline':False]
['text':' load and perform the vertical filtering pass','line_number':3734,'multiline':False]
['text':' this uses 3*x + y = 4*x + (y - x)','line_number':3735,'multiline':False]
['text':' current row','line_number':3740,'multiline':False]
['text':' horizontal filter works the same based on shifted vers of current','line_number':3742,'multiline':False]
['text':' row. "prev" is current row shifted right by 1 pixel; we need to','line_number':3743,'multiline':False]
['text':' insert the previous pixel value (from t1).','line_number':3744,'multiline':False]
['text':' "next" is current row shifted left by 1 pixel, with first pixel','line_number':3745,'multiline':False]
['text':' of next block of 8 pixels added in.','line_number':3746,'multiline':False]
['text':' horizontal filter, polyphase implementation since it's convenient:','line_number':3752,'multiline':False]
['text':' even pixels = 3*cur + prev = cur*4 + (prev - cur)','line_number':3753,'multiline':False]
['text':' odd  pixels = 3*cur + next = cur*4 + (next - cur)','line_number':3754,'multiline':False]
['text':' note the shared term.','line_number':3755,'multiline':False]
['text':' undo scaling and round, then store with even/odd phases interleaved','line_number':3762,'multiline':False]
['text':' "previous" value for next iter','line_number':3769,'multiline':False]
['text':' resample with nearest-neighbor','line_number':3792,'multiline':False]
['text':' this is a reduced-precision calculation of YCbCr-to-RGB introduced','line_number':3801,'multiline':False]
['text':' to make sure the code produces the same results in both SIMD and scalar','line_number':3802,'multiline':False]
['text':' rounding','line_number':3808,'multiline':False]
['text':' step == 3 is pretty ugly on the final interleave, and i'm not convinced','line_number':3850,'multiline':False]
['text':' it's useful in practice (you wouldn't use it for textures, for example).','line_number':3851,'multiline':False]
['text':' so just accelerate step == 4 case.','line_number':3852,'multiline':False]
['text':' this is a fairly straightforward implementation and not super-optimized.','line_number':3854,'multiline':False]
['text':' alpha channel','line_number':3861,'multiline':False]
['text':' load','line_number':3864,'multiline':False]
['text':' -128','line_number':3868,'multiline':False]
['text':' -128','line_number':3869,'multiline':False]
['text':' unpack to short (and left-shift cr, cb by 8)','line_number':3871,'multiline':False]
['text':' color transform','line_number':3876,'multiline':False]
['text':' descale','line_number':3887,'multiline':False]
['text':' back to byte, set up for transpose','line_number':3892,'multiline':False]
['text':' transpose to interleave channels','line_number':3896,'multiline':False]
['text':' store','line_number':3902,'multiline':False]
['text':' in this version, step=3 support would be easy to add. but is there demand?','line_number':3911,'multiline':False]
['text':' this is a fairly straightforward implementation and not super-optimized.','line_number':3913,'multiline':False]
['text':' load','line_number':3921,'multiline':False]
['text':' expand to s16','line_number':3928,'multiline':False]
['text':' color transform','line_number':3933,'multiline':False]
['text':' undo scaling, round, convert to byte','line_number':3942,'multiline':False]
['text':' store, interleaving r/g/b/a','line_number':3949,'multiline':False]
['text':' rounding','line_number':3957,'multiline':False]
['text':' set up the kernels','line_number':3994,'multiline':False]
['text':' clean up the temporary component buffers','line_number':4015,'multiline':False]
['text':' expansion factor in each axis','line_number':4021,'multiline':False]
['text':' horizontal pixels pre-expansion','line_number':4022,'multiline':False]
['text':' how far through vertical expansion we are','line_number':4023,'multiline':False]
['text':' which pre-expansion row we're on','line_number':4024,'multiline':False]
['text':' fast 0..255 * 0..255 => 0..255 rounded multiplication','line_number':4027,'multiline':False]
['text':' make stbi__cleanup_jpeg safe','line_number':4035,'multiline':False]
['text':' validate req_comp','line_number':4037,'multiline':False]
['text':' load a jpeg image from whichever source, but leave in YCbCr format','line_number':4041,'multiline':False]
['text':' determine actual number of components to generate','line_number':4047,'multiline':False]
['text':' nothing to do if no components requested; check this now to avoid','line_number':4057,'multiline':False]
['text':' accessing uninitialized coutput[0] later','line_number':4058,'multiline':False]
['text':' resample and color-convert','line_number':4064,'multiline':False]
['text':' allocate line buffer big enough for upsampling off the edges','line_number':4076,'multiline':False]
['text':' with upsample factor of 4','line_number':4077,'multiline':False]
['text':' can't error after this so, this is safe','line_number':4103,'multiline':False]
['text':' now go ahead and resample','line_number':4110,'multiline':False]
['text':' CMYK','line_number':4140,'multiline':False]
['text':' YCCK','line_number':4149,'multiline':False]
['text':' YCbCr + alpha?  Ignore the fourth channel for now','line_number':4158,'multiline':False]
['text':' not used if n==3','line_number':4164,'multiline':False]
['text':' report original components, not output','line_number':4211,'multiline':False]
['text':' public domain zlib decode    v0.2  Sean Barrett 2006-11-18','line_number':4271,'multiline':False]
['text':'    simple implementation','line_number':4272,'multiline':False]
['text':'      - all input must be provided in an upfront buffer','line_number':4273,'multiline':False]
['text':'      - all output is written to a single output buffer (can malloc/realloc)','line_number':4274,'multiline':False]
['text':'    performance','line_number':4275,'multiline':False]
['text':'      - fast huffman','line_number':4276,'multiline':False]
['text':' fast-way is faster to check than jpeg huffman, but slow way is slower','line_number':4280,'multiline':False]
['text':' accelerate all cases in default tables','line_number':4281,'multiline':False]
['text':' number of symbols in literal/length alphabet','line_number':4283,'multiline':False]
['text':' zlib-style huffman encoding','line_number':4285,'multiline':False]
['text':' (jpegs packs from left, zlib from right, so can't share code)','line_number':4286,'multiline':False]
['text':' to bit reverse n bits, reverse 16 and shift','line_number':4306,'multiline':False]
['text':' e.g. 11 bits, bit reverse and shift away 5','line_number':4307,'multiline':False]
['text':' DEFLATE spec for generating codes','line_number':4315,'multiline':False]
['text':' preshift for inner loop','line_number':4333,'multiline':False]
['text':' sentinel','line_number':4337,'multiline':False]
['text':' zlib-from-memory implementation for PNG reading','line_number':4358,'multiline':False]
['text':'    because PNG allows splitting the zlib stream arbitrarily,','line_number':4359,'multiline':False]
['text':'    and it's annoying structurally to have PNG call ZLIB call PNG,','line_number':4360,'multiline':False]
['text':'    we require PNG read all the IDATs and combine them into a single','line_number':4361,'multiline':False]
['text':'    memory buffer','line_number':4362,'multiline':False]
['text':' treat this as EOF so we fail. ','line_number':4384,'multiline':True]
['text':' not resolved by fast table, so compute it the slow way','line_number':4404,'multiline':False]
['text':' use jpeg approach, which requires MSbits at top','line_number':4405,'multiline':False]
['text':' invalid code!','line_number':4411,'multiline':False]
['text':' code size is s, so:','line_number':4412,'multiline':False]
['text':' some data was corrupt somewhere!','line_number':4415,'multiline':False]
['text':' was originally an assert, but report failure instead.','line_number':4417,'multiline':False]
['text':' report error for unexpected end of data. ','line_number':4427,'multiline':True]
['text':' need to make room for n bytes','line_number':4441,'multiline':False]
['text':' error in huffman codes','line_number':4486,'multiline':False]
['text':' per DEFLATE, length codes 286 and 287 must not appear in compressed data','line_number':4502,'multiline':False]
['text':' per DEFLATE, distance codes 30 and 31 must not appear in compressed data','line_number':4510,'multiline':False]
['text':' run of one byte; common in images.','line_number':4522,'multiline':False]
['text':' padding for maximum single op','line_number':4543,'multiline':False]
['text':' discard','line_number':4600,'multiline':False]
['text':' drain the bit-packed data into header','line_number':4601,'multiline':False]
['text':' suppress MSVC run-time check','line_number':4604,'multiline':False]
['text':' now fill header the normal way','line_number':4610,'multiline':False]
['text':' int cinfo = cmf >> 4; ','line_number':4631,'multiline':True]
['text':' zlib spec','line_number':4634,'multiline':False]
['text':' zlib spec','line_number':4636,'multiline':False]
['text':' preset dictionary not allowed in png','line_number':4638,'multiline':False]
['text':' DEFLATE required for png','line_number':4640,'multiline':False]
['text':' window = 1 << (8 + cinfo)... but who cares, we fully buffer output','line_number':4641,'multiline':False]
['text':'
Init algorithm:
{
   int i;   // use <= to match clearly with spec
   for (i=0; i <= 143; ++i)     stbi__zdefault_length[i]   = 8;
   for (   ; i <= 255; ++i)     stbi__zdefault_length[i]   = 9;
   for (   ; i <= 279; ++i)     stbi__zdefault_length[i]   = 7;
   for (   ; i <= 287; ++i)     stbi__zdefault_length[i]   = 8;

   for (i=0; i <=  31; ++i)     stbi__zdefault_distance[i] = 5;
}
','line_number':4656,'multiline':True]
['text':' use fixed code lengths','line_number':4686,'multiline':False]
['text':' public domain "baseline" PNG decoder   v0.10  Sean Barrett 2006-11-18','line_number':4788,'multiline':False]
['text':'    simple implementation','line_number':4789,'multiline':False]
['text':'      - only 8-bit samples','line_number':4790,'multiline':False]
['text':'      - no CRC checking','line_number':4791,'multiline':False]
['text':'      - allocates lots of intermediate memory','line_number':4792,'multiline':False]
['text':'        - avoids problem of streaming data between subsystems','line_number':4793,'multiline':False]
['text':'        - avoids explicit window management','line_number':4794,'multiline':False]
['text':'    performance','line_number':4795,'multiline':False]
['text':'      - uses stb_zlib, a PD zlib implementation with fast huffman decoding','line_number':4796,'multiline':False]
['text':' synthetic filters used for first scanline to avoid needing a dummy row of 0s','line_number':4832,'multiline':False]
['text':' create the png data from post-deflated data','line_number':4853,'multiline':False]
['text':' copy it into a local for later','line_number':4861,'multiline':False]
['text':' extra bytes to write off the end into','line_number':4868,'multiline':False]
['text':' we used to check for exact match between raw_len and img_len on non-interlaced PNGs,','line_number':4877,'multiline':False]
['text':' but issue #276 reported a PNG in the wild that had extra data at the end (all zeros),','line_number':4878,'multiline':False]
['text':' so just check for raw_len < img_len always.','line_number':4879,'multiline':False]
['text':' store output to the rightmost img_len bytes, so we can decode in place','line_number':4894,'multiline':False]
['text':' bugfix: need to compute this after 'cur +=' computation above','line_number':4898,'multiline':False]
['text':' if first row, use special filter that doesn't sample previous row','line_number':4900,'multiline':False]
['text':' handle first byte explicitly','line_number':4904,'multiline':False]
['text':' first pixel','line_number':4933,'multiline':False]
['text':' first pixel top byte','line_number':4939,'multiline':False]
['text':' first pixel bottom byte','line_number':4940,'multiline':False]
['text':' this is a little gross, so that we don't switch per-pixel or per-component','line_number':4951,'multiline':False]
['text':' "none" filter turns into a memcpy here; make that explicit.','line_number':4958,'multiline':False]
['text':' the loop above sets the high byte of the pixels' alpha, but for','line_number':5005,'multiline':False]
['text':' 16 bit png files we also need the low byte set. we'll do that here.','line_number':5006,'multiline':False]
['text':' start at the beginning of the row again','line_number':5008,'multiline':False]
['text':' we make a separate pass to expand bits to pixels; for performance,','line_number':5016,'multiline':False]
['text':' this could run two scanlines behind the above code, so it won't','line_number':5017,'multiline':False]
['text':' intefere with filtering but will still be in the cache.','line_number':5018,'multiline':False]
['text':' unpack 1/2/4-bit into a 8-bit buffer. allows us to keep the common 8-bit path optimal at minimal cost for','line_number':5023,'multiline':False]
['text':' 1/2/4-bit png guarante byte alignment, if width is not multiple of 8/4/2 we'll decode dummy trailing data that','line_number':5024,'multiline':False]
['text':' will be skipped in the later loop','line_number':5025,'multiline':False]
['text':' scale grayscale values to 0..255 range','line_number':5026,'multiline':False]
['text':' note that the final byte might overshoot and write more data than desired.','line_number':5028,'multiline':False]
['text':' we can allocate enough data that this never writes out of memory, but it','line_number':5029,'multiline':False]
['text':' could also overwrite the next scanline. can it overwrite non-empty data','line_number':5030,'multiline':False]
['text':' on the next scanline? yes, consider 1-pixel-wide scanlines with 1-bit-per-pixel.','line_number':5031,'multiline':False]
['text':' so we need to explicitly clamp the final ones','line_number':5032,'multiline':False]
['text':' insert alpha = 255','line_number':5082,'multiline':False]
['text':' force the image data from big-endian to platform-native.','line_number':5101,'multiline':False]
['text':' this is done in a separate pass due to the decoding relying','line_number':5102,'multiline':False]
['text':' on the data being untouched, but could probably be done','line_number':5103,'multiline':False]
['text':' per-line during decode if care is taken.','line_number':5104,'multiline':False]
['text':' de-interlacing','line_number':5125,'multiline':False]
['text':' pass1_x[4] = 0, pass1_x[5] = 1, pass1_x[12] = 1','line_number':5135,'multiline':False]
['text':' compute color-based transparency, assuming we've','line_number':5167,'multiline':False]
['text':' already got 255 as the alpha value in the output','line_number':5168,'multiline':False]
['text':' compute color-based transparency, assuming we've','line_number':5191,'multiline':False]
['text':' already got 65535 as the alpha value in the output','line_number':5192,'multiline':False]
['text':' between here and free(out) below, exitting would leak','line_number':5218,'multiline':False]
['text':' STBI_THREAD_LOCAL','line_number':5278,'multiline':False]
['text':' convert bgr to rgb','line_number':5285,'multiline':False]
['text':' convert bgr to rgb and unpremultiply','line_number':5295,'multiline':False]
['text':' convert bgr to rgb','line_number':5311,'multiline':False]
['text':' if paletted, then pal_n is our final components, and','line_number':5390,'multiline':False]
['text':' img_n is # components to decompress/filter.','line_number':5391,'multiline':False]
['text':' even with SCAN_header, have to scan to see if we have a tRNS','line_number':5396,'multiline':False]
['text':' non-paletted with tRNS = constant alpha. if header-scanning, we can stop now.','line_number':5440,'multiline':False]
['text':' copy the values as-is','line_number':5447,'multiline':False]
['text':' non 8-bit images will be larger','line_number':5451,'multiline':False]
['text':' header scan definitely stops at first IDAT','line_number':5463,'multiline':False]
['text':' initial guess for decoded data size to avoid unnecessary reallocs','line_number':5499,'multiline':False]
['text':' bytes per line, per component','line_number':5500,'multiline':False]
['text':' pixels ','line_number':5501,'multiline':True]
['text':' filter mode per row ','line_number':5501,'multiline':True]
['text':' zlib should set error','line_number':5505,'multiline':False]
['text':' pal_img_n == 3 or 4','line_number':5526,'multiline':False]
['text':' record the actual colors we had','line_number':5527,'multiline':False]
['text':' non-paletted image with tRNS -> source image has (constant) alpha','line_number':5534,'multiline':False]
['text':' end of PNG chunk, read and skip CRC','line_number':5539,'multiline':False]
['text':' if critical, fail','line_number':5545,'multiline':False]
['text':' not threadsafe','line_number':5550,'multiline':False]
['text':' end of PNG chunk, read and skip CRC','line_number':5562,'multiline':False]
['text':' Microsoft/Windows BMP image','line_number':5650,'multiline':False]
['text':' discard filesize','line_number':5660,'multiline':False]
['text':' discard reserved','line_number':5661,'multiline':False]
['text':' discard reserved','line_number':5662,'multiline':False]
['text':' discard data offset','line_number':5663,'multiline':False]
['text':' returns 0..31 for the highest set bit','line_number':5675,'multiline':False]
['text':' >>=  1;','line_number':5697,'multiline':True]
['text':' max 2','line_number':5703,'multiline':False]
['text':' max 4','line_number':5704,'multiline':False]
['text':' max 8 per 4, now 8 bits','line_number':5705,'multiline':False]
['text':' max 16 per 8 bits','line_number':5706,'multiline':False]
['text':' max 32 per 8 bits','line_number':5707,'multiline':False]
['text':' extract an arbitrarily-aligned N-bit value (N=bits)','line_number':5711,'multiline':False]
['text':' from v, and then make it 8-bits long and fractionally','line_number':5712,'multiline':False]
['text':' extend it to full full range.','line_number':5713,'multiline':False]
['text':'0b11111111','line_number':5717,'multiline':True]
['text':'0b01010101','line_number':5718,'multiline':True]
['text':'0b01001001','line_number':5719,'multiline':True]
['text':'0b00010001','line_number':5720,'multiline':True]
['text':'0b00100001','line_number':5721,'multiline':True]
['text':'0b01000001','line_number':5722,'multiline':True]
['text':'0b10000001','line_number':5723,'multiline':True]
['text':'0b00000001','line_number':5724,'multiline':True]
['text':' BI_BITFIELDS specifies masks explicitly, don't override','line_number':5746,'multiline':False]
['text':' if all_a is 0 at end, then we loaded alpha channel but it was all 0','line_number':5760,'multiline':False]
['text':' otherwise, use defaults, which is all-0','line_number':5762,'multiline':False]
['text':' error','line_number':5767,'multiline':False]
['text':' discard filesize','line_number':5774,'multiline':False]
['text':' discard reserved','line_number':5775,'multiline':False]
['text':' discard reserved','line_number':5776,'multiline':False]
['text':' this includes PNG/JPEG modes','line_number':5803,'multiline':False]
['text':' bitfields requires 16 or 32 bits/pixel','line_number':5805,'multiline':False]
['text':' discard sizeof','line_number':5806,'multiline':False]
['text':' discard hres','line_number':5807,'multiline':False]
['text':' discard vres','line_number':5808,'multiline':False]
['text':' discard colorsused','line_number':5809,'multiline':False]
['text':' discard max important','line_number':5810,'multiline':False]
['text':' not documented, but generated by photoshop and handled by mspaint','line_number':5826,'multiline':False]
['text':' ?!?!?','line_number':5828,'multiline':False]
['text':' V4/V5 header','line_number':5835,'multiline':False]
['text':' override mr/mg/mb unless in BI_BITFIELDS mode, as per docs','line_number':5843,'multiline':False]
['text':' discard color space','line_number':5845,'multiline':False]
['text':' discard color space parameters','line_number':5847,'multiline':False]
['text':' discard rendering intent','line_number':5849,'multiline':False]
['text':' discard offset of profile data','line_number':5850,'multiline':False]
['text':' discard size of profile data','line_number':5851,'multiline':False]
['text':' discard reserved','line_number':5852,'multiline':False]
['text':' error code already set','line_number':5870,'multiline':False]
['text':' accept some number of extra bytes after the header, but if the offset points either to before','line_number':5894,'multiline':False]
['text':' the header ends or implies a large amount of extra data, reject the file as malformed','line_number':5895,'multiline':False]
['text':' max we actually read is below 256 bytes currently.','line_number':5897,'multiline':False]
['text':' what ordinarily goes here is a palette; 256 entries*4 bytes is its max size.','line_number':5898,'multiline':False]
['text':' we established that bytes_read_so_far is positive and sensible.','line_number':5902,'multiline':False]
['text':' the first half of this test rejects offsets that are either too small positives, or','line_number':5903,'multiline':False]
['text':' negative, and guarantees that info.offset >= bytes_read_so_far > 0. this in turn','line_number':5904,'multiline':False]
['text':' ensures the number computed in the second half of the test can't overflow.','line_number':5905,'multiline':False]
['text':' we can directly decode 3 or 4','line_number':5917,'multiline':False]
['text':' if they want monochrome, we'll post-convert','line_number':5920,'multiline':False]
['text':' sanity-check size','line_number':5922,'multiline':False]
['text':' bpp = 32 and pad = 0 ','line_number':6008,'multiline':True]
['text':' right shift amt to put high bit in position #7','line_number':6022,'multiline':False]
['text':' if alpha channel is all 0s, replace with all 255s','line_number':6067,'multiline':False]
['text':' stbi__convert_format frees input on failure','line_number':6088,'multiline':False]
['text':' Targa Truevision - TGA','line_number':6099,'multiline':False]
['text':' by Jonathan Dummer','line_number':6100,'multiline':False]
['text':' returns STBI_rgb or whatever, 0 on error','line_number':6102,'multiline':False]
['text':' only RGB or RGBA (incl. 16bit) or grey allowed','line_number':6104,'multiline':False]
['text':' fallthrough','line_number':6113,'multiline':False]
['text':' fallthrough','line_number':6118,'multiline':False]
['text':' discard Offset','line_number':6129,'multiline':False]
['text':' colormap type','line_number':6130,'multiline':False]
['text':' only RGB or indexed allowed','line_number':6133,'multiline':False]
['text':' image type','line_number':6135,'multiline':False]
['text':' colormapped (paletted) image','line_number':6136,'multiline':False]
['text':' skip index of first colormap entry and number of entries','line_number':6141,'multiline':False]
['text':'   check bits per palette color entry','line_number':6142,'multiline':False]
['text':' skip image x and y origin','line_number':6147,'multiline':False]
['text':' "normal" image w/o colormap - only RGB or grey allowed, +/- RLE','line_number':6149,'multiline':False]
['text':' only RGB or grey allowed, +/- RLE','line_number':6152,'multiline':False]
['text':' skip colormap specification and image x/y origin','line_number':6154,'multiline':False]
['text':' test width','line_number':6160,'multiline':False]
['text':' test height','line_number':6165,'multiline':False]
['text':' bits per pixel','line_number':6167,'multiline':False]
['text':' ignore alpha bits','line_number':6168,'multiline':False]
['text':' when using a colormap, tga_bits_per_pixel is the size of the indexes','line_number':6171,'multiline':False]
['text':' I don't think anything but 8 or 16bit indexes makes sense','line_number':6172,'multiline':False]
['text':' seems to have passed everything','line_number':6190,'multiline':False]
['text':'   discard Offset','line_number':6196,'multiline':False]
['text':'   color type','line_number':6197,'multiline':False]
['text':'   only RGB or indexed allowed','line_number':6199,'multiline':False]
['text':'   image type','line_number':6200,'multiline':False]
['text':' colormapped (paletted) image','line_number':6201,'multiline':False]
['text':' colortype 1 demands image type 1 or 9','line_number':6203,'multiline':False]
['text':' skip index of first colormap entry and number of entries','line_number':6204,'multiline':False]
['text':'   check bits per palette color entry','line_number':6205,'multiline':False]
['text':' skip image x and y origin','line_number':6208,'multiline':False]
['text':' "normal" image w/o colormap','line_number':6209,'multiline':False]
['text':' only RGB or grey allowed, +/- RLE','line_number':6211,'multiline':False]
['text':' skip colormap specification and image x/y origin','line_number':6212,'multiline':False]
['text':'   test width','line_number':6215,'multiline':False]
['text':'   test height','line_number':6217,'multiline':False]
['text':'   bits per pixel','line_number':6218,'multiline':False]
['text':' for colormapped images, bpp is size of an index','line_number':6220,'multiline':False]
['text':' if we got this far, everything's good and we can return 1 instead of 0','line_number':6224,'multiline':False]
['text':' read 16bit value and convert to 24bit RGB','line_number':6231,'multiline':False]
['text':' we have 3 channels with 5bits each','line_number':6235,'multiline':False]
['text':' Note that this saves the data in RGB(A) order, so it doesn't need to be swapped later','line_number':6239,'multiline':False]
['text':' some people claim that the most significant bit might be used for alpha','line_number':6244,'multiline':False]
['text':' (possibly if an alpha-bit is set in the "image descriptor byte")','line_number':6245,'multiline':False]
['text':' but that only made 16bit test images completely translucent..','line_number':6246,'multiline':False]
['text':' so let's treat all 15 and 16bit TGAs as RGB with no alpha.','line_number':6247,'multiline':False]
['text':'   read in the TGA header stuff','line_number':6251,'multiline':False]
['text':' int tga_alpha_bits = tga_inverted & 15; // the 4 lowest bits - unused (useless?)','line_number':6266,'multiline':False]
['text':'   image data','line_number':6267,'multiline':False]
['text':' @TODO','line_number':6276,'multiline':False]
['text':' @TODO','line_number':6277,'multiline':False]
['text':'   do a tiny bit of precessing','line_number':6284,'multiline':False]
['text':'   If I'm paletted, then I'll use the number of bits from the palette','line_number':6291,'multiline':False]
['text':' shouldn't really happen, stbi__tga_test() should have ensured basic consistency','line_number':6297,'multiline':False]
['text':'   tga info','line_number':6300,'multiline':False]
['text':' skip to the data's starting position (offset usually = 0)','line_number':6313,'multiline':False]
['text':'   do I need to load a palette?','line_number':6323,'multiline':False]
['text':' you have to have at least one entry! ','line_number':6325,'multiline':True]
['text':'   any data to skip? (offset usually = 0)','line_number':6330,'multiline':False]
['text':'   load the palette','line_number':6332,'multiline':False]
['text':'   load the data','line_number':6351,'multiline':False]
['text':'   if I'm in RLE mode, do I need to get a RLE stbi__pngchunk?','line_number':6353,'multiline':False]
['text':'   yep, get the next byte as a RLE command','line_number':6356,'multiline':False]
['text':'   OK, if I need to read a pixel, do it now','line_number':6367,'multiline':False]
['text':'   load however much data we did have','line_number':6369,'multiline':False]
['text':' read in index, then perform the lookup','line_number':6371,'multiline':False]
['text':' invalid index','line_number':6374,'multiline':False]
['text':'   read in the data raw','line_number':6385,'multiline':False]
['text':'   clear the reading flag for the next pixel','line_number':6390,'multiline':False]
['text':' end of reading a pixel','line_number':6392,'multiline':False]
['text':' copy data','line_number':6394,'multiline':False]
['text':'   in case we're in RLE mode, keep counting down','line_number':6398,'multiline':False]
['text':'   do I need to invert the image?','line_number':6401,'multiline':False]
['text':'   clear my palette, if I had one','line_number':6415,'multiline':False]
['text':' swap RGB - if the source data was RGB16, it already is in the right order','line_number':6421,'multiline':False]
['text':' convert to target component count','line_number':6432,'multiline':False]
['text':'   the things I do to get rid of an error message, and yet keep','line_number':6436,'multiline':False]
['text':'   Microsoft's C compilers happy... [8^(','line_number':6437,'multiline':False]
['text':'   OK, done','line_number':6440,'multiline':False]
['text':' *************************************************************************************************','line_number':6445,'multiline':False]
['text':' Photoshop PSD loader -- PD by Thatcher Ulrich, integration by Nicolas Schulz, tweaked by STB','line_number':6446,'multiline':False]
['text':' No-op.','line_number':6462,'multiline':False]
['text':' Copy next len+1 bytes literally.','line_number':6464,'multiline':False]
['text':' corrupt data','line_number':6467,'multiline':False]
['text':' Next -len+1 bytes in the dest are replicated from next source byte.','line_number':6476,'multiline':False]
['text':' (Interpret len as a negative 8-bit int.)','line_number':6477,'multiline':False]
['text':' corrupt data','line_number':6480,'multiline':False]
['text':' Check identifier','line_number':6503,'multiline':False]
['text':' "8BPS"','line_number':6504,'multiline':False]
['text':' Check file type version.','line_number':6507,'multiline':False]
['text':' Skip 6 reserved bytes.','line_number':6511,'multiline':False]
['text':' Read the number of channels (R, G, B, A, etc).','line_number':6514,'multiline':False]
['text':' Read the rows and columns of the image.','line_number':6519,'multiline':False]
['text':' Make sure the depth is 8 bits.','line_number':6528,'multiline':False]
['text':' Make sure the color mode is RGB.','line_number':6533,'multiline':False]
['text':' Valid options are:','line_number':6534,'multiline':False]
['text':'   0: Bitmap','line_number':6535,'multiline':False]
['text':'   1: Grayscale','line_number':6536,'multiline':False]
['text':'   2: Indexed color','line_number':6537,'multiline':False]
['text':'   3: RGB color','line_number':6538,'multiline':False]
['text':'   4: CMYK color','line_number':6539,'multiline':False]
['text':'   7: Multichannel','line_number':6540,'multiline':False]
['text':'   8: Duotone','line_number':6541,'multiline':False]
['text':'   9: Lab color','line_number':6542,'multiline':False]
['text':' Skip the Mode Data.  (It's the palette for indexed color; other info for other modes.)','line_number':6546,'multiline':False]
['text':' Skip the image resources.  (resolution, pen tool paths, etc)','line_number':6549,'multiline':False]
['text':' Skip the reserved data.','line_number':6552,'multiline':False]
['text':' Find out if the data is compressed.','line_number':6555,'multiline':False]
['text':' Known values:','line_number':6556,'multiline':False]
['text':'   0: no compression','line_number':6557,'multiline':False]
['text':'   1: RLE compressed','line_number':6558,'multiline':False]
['text':' Check size','line_number':6563,'multiline':False]
['text':' Create the destination image.','line_number':6567,'multiline':False]
['text':' Initialize the data to zero.','line_number':6579,'multiline':False]
['text':' memset( out, 0, pixelCount * 4 );','line_number':6580,'multiline':False]
['text':' Finally, the image data.','line_number':6582,'multiline':False]
['text':' RLE as used by .PSD and .TIFF','line_number':6584,'multiline':False]
['text':' Loop until you get the number of unpacked bytes you are expecting:','line_number':6585,'multiline':False]
['text':'     Read the next source byte into n.','line_number':6586,'multiline':False]
['text':'     If n is between 0 and 127 inclusive, copy the next n+1 bytes literally.','line_number':6587,'multiline':False]
['text':'     Else if n is between -127 and -1 inclusive, copy the next byte -n+1 times.','line_number':6588,'multiline':False]
['text':'     Else if n is 128, noop.','line_number':6589,'multiline':False]
['text':' Endloop','line_number':6590,'multiline':False]
['text':' The RLE-compressed data is preceded by a 2-byte data count for each row in the data,','line_number':6592,'multiline':False]
['text':' which we're going to just skip.','line_number':6593,'multiline':False]
['text':' Read the RLE data by channel.','line_number':6596,'multiline':False]
['text':' Fill this channel with default data.','line_number':6602,'multiline':False]
['text':' Read the RLE data.','line_number':6606,'multiline':False]
['text':' We're at the raw image data.  It's each channel in order (Red, Green, Blue, Alpha, ...)','line_number':6614,'multiline':False]
['text':' where each channel consists of an 8-bit (or 16-bit) value for each pixel in the image.','line_number':6615,'multiline':False]
['text':' Read the data by channel.','line_number':6617,'multiline':False]
['text':' Fill this channel with default data.','line_number':6620,'multiline':False]
['text':' output bpc','line_number':6633,'multiline':False]
['text':' input bpc','line_number':6639,'multiline':False]
['text':' remove weird white matte from PSD','line_number':6651,'multiline':False]
['text':' convert to desired output format','line_number':6680,'multiline':False]
['text':' stbi__convert_format frees input on failure','line_number':6687,'multiline':False]
['text':' *************************************************************************************************','line_number':6699,'multiline':False]
['text':' Softimage PIC loader','line_number':6700,'multiline':False]
['text':' by Tom Seddon','line_number':6701,'multiline':False]
['text':'','line_number':6702,'multiline':False]
['text':' See http://softimage.wiki.softimage.com/index.php/INFO:_PIC_file_format','line_number':6703,'multiline':False]
['text':' See http://ozviz.wasp.uwa.edu.au/~pbourke/dataformats/softimagepic/','line_number':6704,'multiline':False]
['text':' this will (should...) cater for even some bizarre stuff like having data','line_number':6761,'multiline':False]
['text':' for the same channel in multiple packets.','line_number':6762,'multiline':False]
['text':' has alpha channel?','line_number':6784,'multiline':False]
['text':' uncompressed','line_number':6797,'multiline':False]
['text':' Pure RLE','line_number':6806,'multiline':False]
['text':' Mixed RLE','line_number':6829,'multiline':False]
['text':' Repeated','line_number':6836,'multiline':False]
['text':' Raw','line_number':6851,'multiline':False]
['text':' skip `ratio'','line_number':6895,'multiline':False]
['text':' skip `fields'','line_number':6896,'multiline':False]
['text':' skip `pad'','line_number':6897,'multiline':False]
['text':' intermediate buffer is RGBA','line_number':6899,'multiline':False]
['text':' *************************************************************************************************','line_number':6925,'multiline':False]
['text':' GIF loader -- public domain by Jean-Marc Lienher -- simplified/shrunk by stb','line_number':6926,'multiline':False]
['text':' output buffer (always 4 components)','line_number':6937,'multiline':False]
['text':' The current "background" as far as a gif is concerned','line_number':6938,'multiline':False]
['text':' can't actually tell whether it's 3 or 4 until we parse the comments','line_number':7007,'multiline':False]
['text':' recurse to decode the prefixes, since the linked-list is backwards,','line_number':7039,'multiline':False]
['text':' and working backwards through an interleaved image would be nasty','line_number':7040,'multiline':False]
['text':' don't render transparent pixels;','line_number':7052,'multiline':False]
['text':' support no starting clear code','line_number':7094,'multiline':False]
['text':' start new block','line_number':7102,'multiline':False]
['text':' @OPTIMIZE: is there some way we can accelerate the non-clear path?','line_number':7113,'multiline':False]
['text':' clear code','line_number':7114,'multiline':False]
['text':' end of stream code','line_number':7120,'multiline':False]
['text':' this function is designed to support animated gifs, although stb_image doesn't support it','line_number':7157,'multiline':False]
['text':' two back is the image from two frames ago, used for a very specific disposal format','line_number':7158,'multiline':False]
['text':' on first frame, any non-written pixels get the background colour (non-transparent)','line_number':7166,'multiline':False]
['text':' stbi__g_failure_reason set by stbi__gif_header','line_number':7170,'multiline':False]
['text':' image is treated as "transparent" at the start - ie, nothing overwrites the current background;','line_number':7180,'multiline':False]
['text':' background colour is only used for pixels that are not rendered first frame, after that "background"','line_number':7181,'multiline':False]
['text':' color refers to the color that was there the previous frame.','line_number':7182,'multiline':False]
['text':' state of the background (starts transparent)','line_number':7184,'multiline':False]
['text':' pixels that were affected previous frame','line_number':7185,'multiline':False]
['text':' second frame - how do we dispose of the previous one?','line_number':7188,'multiline':False]
['text':' if I don't have an image to revert back to, default to the old background','line_number':7193,'multiline':False]
['text':' use previous graphic','line_number':7196,'multiline':False]
['text':' restore what was changed last frame to background before that frame;','line_number':7203,'multiline':False]
['text':' This is a non-disposal case eithe way, so just','line_number':7210,'multiline':False]
['text':' leave the pixels as is, and they will become the new background','line_number':7211,'multiline':False]
['text':' 1: do not dispose','line_number':7212,'multiline':False]
['text':' 0:  not specified.','line_number':7213,'multiline':False]
['text':' background is what out is after the undoing of the previou frame;','line_number':7216,'multiline':False]
['text':' clear my history;','line_number':7220,'multiline':False]
['text':' pixels that were affected previous frame','line_number':7221,'multiline':False]
['text':' Image Descriptor ','line_number':7226,'multiline':True]
['text':' if the width of the specified rectangle is 0, that means','line_number':7246,'multiline':False]
['text':' we may not see *any* pixels or the image is malformed;','line_number':7247,'multiline':False]
['text':' to make sure this is caught, move the current y down to','line_number':7248,'multiline':False]
['text':' max_y (which is what out_gif_code checks).','line_number':7249,'multiline':False]
['text':' first interlaced spacing','line_number':7256,'multiline':False]
['text':' if this was the first frame,','line_number':7275,'multiline':False]
['text':' if first frame, any pixel not drawn to gets the background color','line_number':7278,'multiline':False]
['text':' just in case it was made transparent, undo that; It will be reset next frame if need be;','line_number':7282,'multiline':False]
['text':' Comment Extension.','line_number':7291,'multiline':False]
['text':' Graphic Control Extension.','line_number':7295,'multiline':False]
['text':' delay - 1/100th of a second, saving as 1/1000ths.','line_number':7299,'multiline':False]
['text':' unset old transparent','line_number':7301,'multiline':False]
['text':' don't need transparent','line_number':7311,'multiline':False]
['text':' gif stream termination code','line_number':7326,'multiline':False]
['text':' using '1' causes warning on some compilers','line_number':7327,'multiline':False]
['text':' end of animated gif marker','line_number':7369,'multiline':False]
['text':' free temp buffer;','line_number':7416,'multiline':False]
['text':' do the final conversion after loading everything;','line_number':7421,'multiline':False]
['text':' end of animated gif marker','line_number':7440,'multiline':False]
['text':' moved conversion to after successful load so that the same','line_number':7445,'multiline':False]
['text':' can be done for multiple frames.','line_number':7446,'multiline':False]
['text':' if there was an error and we allocated an image buffer, free it!','line_number':7450,'multiline':False]
['text':' free buffers needed for multiple frame loading;','line_number':7454,'multiline':False]
['text':' *************************************************************************************************','line_number':7464,'multiline':False]
['text':' Radiance RGBE HDR loader','line_number':7465,'multiline':False]
['text':' originally by Nicolas Schulz','line_number':7466,'multiline':False]
['text':' flush to end of line','line_number':7497,'multiline':False]
['text':' Exponent','line_number':7512,'multiline':False]
['text':' fallthrough ','line_number':7528,'multiline':True]
['text':' fallthrough ','line_number':7533,'multiline':True]
['text':' Check identifier','line_number':7554,'multiline':False]
['text':' Parse header','line_number':7559,'multiline':False]
['text':' Parse width and height','line_number':7571,'multiline':False]
['text':' can't use sscanf() if we're not using stdio!','line_number':7572,'multiline':False]
['text':' Read data','line_number':7601,'multiline':False]
['text':' Load image data','line_number':7606,'multiline':False]
['text':' image data is stored as some number of sca','line_number':7607,'multiline':False]
['text':' Read flat data','line_number':7609,'multiline':False]
['text':' Read RLE-encoded data','line_number':7619,'multiline':False]
['text':' not run-length encoded, so we have to actually use THIS data as a decoded','line_number':7627,'multiline':False]
['text':' pixel (note this can't be a valid pixel--one of RGB must be >= 128)','line_number':7628,'multiline':False]
['text':' yes, this makes no sense','line_number':7638,'multiline':False]
['text':' Run','line_number':7661,'multiline':False]
['text':' Dump','line_number':7672,'multiline':False]
['text':' STBI_NO_HDR','line_number':7741,'multiline':False]
['text':' *************************************************************************************************','line_number':7894,'multiline':False]
['text':' Portable Gray Map and Portable Pixel Map loader','line_number':7895,'multiline':False]
['text':' by Ken Miller','line_number':7896,'multiline':False]
['text':'','line_number':7897,'multiline':False]
['text':' PGM: http://netpbm.sourceforge.net/doc/pgm.html','line_number':7898,'multiline':False]
['text':' PPM: http://netpbm.sourceforge.net/doc/ppm.html','line_number':7899,'multiline':False]
['text':'','line_number':7900,'multiline':False]
['text':' Known limitations:','line_number':7901,'multiline':False]
['text':'    Does not support comments in the header section','line_number':7902,'multiline':False]
['text':'    Does not support ASCII image data (formats P2 and P3)','line_number':7903,'multiline':False]
['text':' stbi__convert_format frees input on failure','line_number':7954,'multiline':False]
['text':' Get identifier','line_number':8002,'multiline':False]
['text':' '5' is 1-component .pgm; '6' is 3-component .ppm','line_number':8010,'multiline':False]
['text':' read width','line_number':8015,'multiline':False]
['text':' read height','line_number':8020,'multiline':False]
['text':' read max value','line_number':8025,'multiline':False]
['text':' test tga last because it's a crappy test!','line_number':8082,'multiline':False]
['text':' !STBI_NO_STDIO','line_number':8148,'multiline':False]
['text':' STB_IMAGE_IMPLEMENTATION','line_number':8174,'multiline':False]
['text':'
   revision history:
      2.20  (2019-02-07) support utf8 filenames in Windows; fix warnings and platform ifdefs
      2.19  (2018-02-11) fix warning
      2.18  (2018-01-30) fix warnings
      2.17  (2018-01-29) change sbti__shiftsigned to avoid clang -O2 bug
                         1-bit BMP
                         *_is_16_bit api
                         avoid warnings
      2.16  (2017-07-23) all functions have 16-bit variants;
                         STBI_NO_STDIO works again;
                         compilation fixes;
                         fix rounding in unpremultiply;
                         optimize vertical flip;
                         disable raw_len validation;
                         documentation fixes
      2.15  (2017-03-18) fix png-1,2,4 bug; now all Imagenet JPGs decode;
                         warning fixes; disable run-time SSE detection on gcc;
                         uniform handling of optional "return" values;
                         thread-safe initialization of zlib tables
      2.14  (2017-03-03) remove deprecated STBI_JPEG_OLD; fixes for Imagenet JPGs
      2.13  (2016-11-29) add 16-bit API, only supported for PNG right now
      2.12  (2016-04-02) fix typo in 2.11 PSD fix that caused crashes
      2.11  (2016-04-02) allocate large structures on the stack
                         remove white matting for transparent PSD
                         fix reported channel count for PNG & BMP
                         re-enable SSE2 in non-gcc 64-bit
                         support RGB-formatted JPEG
                         read 16-bit PNGs (only as 8-bit)
      2.10  (2016-01-22) avoid warning introduced in 2.09 by STBI_REALLOC_SIZED
      2.09  (2016-01-16) allow comments in PNM files
                         16-bit-per-pixel TGA (not bit-per-component)
                         info() for TGA could break due to .hdr handling
                         info() for BMP to shares code instead of sloppy parse
                         can use STBI_REALLOC_SIZED if allocator doesn't support realloc
                         code cleanup
      2.08  (2015-09-13) fix to 2.07 cleanup, reading RGB PSD as RGBA
      2.07  (2015-09-13) fix compiler warnings
                         partial animated GIF support
                         limited 16-bpc PSD support
                         #ifdef unused functions
                         bug with < 92 byte PIC,PNM,HDR,TGA
      2.06  (2015-04-19) fix bug where PSD returns wrong '*comp' value
      2.05  (2015-04-19) fix bug in progressive JPEG handling, fix warning
      2.04  (2015-04-15) try to re-enable SIMD on MinGW 64-bit
      2.03  (2015-04-12) extra corruption checking (mmozeiko)
                         stbi_set_flip_vertically_on_load (nguillemot)
                         fix NEON support; fix mingw support
      2.02  (2015-01-19) fix incorrect assert, fix warning
      2.01  (2015-01-17) fix various warnings; suppress SIMD on gcc 32-bit without -msse2
      2.00b (2014-12-25) fix STBI_MALLOC in progressive JPEG
      2.00  (2014-12-25) optimize JPG, including x86 SSE2 & NEON SIMD (ryg)
                         progressive JPEG (stb)
                         PGM/PPM support (Ken Miller)
                         STBI_MALLOC,STBI_REALLOC,STBI_FREE
                         GIF bugfix -- seemingly never worked
                         STBI_NO_*, STBI_ONLY_*
      1.48  (2014-12-14) fix incorrectly-named assert()
      1.47  (2014-12-14) 1/2/4-bit PNG support, both direct and paletted (Omar Cornut & stb)
                         optimize PNG (ryg)
                         fix bug in interlaced PNG with user-specified channel count (stb)
      1.46  (2014-08-26)
              fix broken tRNS chunk (colorkey-style transparency) in non-paletted PNG
      1.45  (2014-08-16)
              fix MSVC-ARM internal compiler error by wrapping malloc
      1.44  (2014-08-07)
              various warning fixes from Ronny Chevalier
      1.43  (2014-07-15)
              fix MSVC-only compiler problem in code changed in 1.42
      1.42  (2014-07-09)
              don't define _CRT_SECURE_NO_WARNINGS (affects user code)
              fixes to stbi__cleanup_jpeg path
              added STBI_ASSERT to avoid requiring assert.h
      1.41  (2014-06-25)
              fix search&replace from 1.36 that messed up comments/error messages
      1.40  (2014-06-22)
              fix gcc struct-initialization warning
      1.39  (2014-06-15)
              fix to TGA optimization when req_comp != number of components in TGA;
              fix to GIF loading because BMP wasn't rewinding (whoops, no GIFs in my test suite)
              add support for BMP version 5 (more ignored fields)
      1.38  (2014-06-06)
              suppress MSVC warnings on integer casts truncating values
              fix accidental rename of 'skip' field of I/O
      1.37  (2014-06-04)
              remove duplicate typedef
      1.36  (2014-06-03)
              convert to header file single-file library
              if de-iphone isn't set, load iphone images color-swapped instead of returning NULL
      1.35  (2014-05-27)
              various warnings
              fix broken STBI_SIMD path
              fix bug where stbi_load_from_file no longer left file pointer in correct place
              fix broken non-easy path for 32-bit BMP (possibly never used)
              TGA optimization by Arseny Kapoulkine
      1.34  (unknown)
              use STBI_NOTUSED in stbi__resample_row_generic(), fix one more leak in tga failure case
      1.33  (2011-07-14)
              make stbi_is_hdr work in STBI_NO_HDR (as specified), minor compiler-friendly improvements
      1.32  (2011-07-13)
              support for "info" function for all supported filetypes (SpartanJ)
      1.31  (2011-06-20)
              a few more leak fixes, bug in PNG handling (SpartanJ)
      1.30  (2011-06-11)
              added ability to load files via callbacks to accomidate custom input streams (Ben Wenger)
              removed deprecated format-specific test/load functions
              removed support for installable file formats (stbi_loader) -- would have been broken for IO callbacks
   anyway error cases in bmp and tga give messages and don't leak (Raymond Barbiero, grisha) fix inefficiency in
   decoding 32-bit BMP (David Woo) 1.29  (2010-08-16) various warning fixes from Aurelien Pocheville 1.28  (2010-08-01)
              fix bug in GIF palette transparency (SpartanJ)
      1.27  (2010-08-01)
              cast-to-stbi_uc to fix warnings
      1.26  (2010-07-24)
              fix bug in file buffering for PNG reported by SpartanJ
      1.25  (2010-07-17)
              refix trans_data warning (Won Chun)
      1.24  (2010-07-12)
              perf improvements reading from files on platforms with lock-heavy fgetc()
              minor perf improvements for jpeg
              deprecated type-specific functions so we'll get feedback if they're needed
              attempt to fix trans_data warning (Won Chun)
      1.23    fixed bug in iPhone support
      1.22  (2010-07-10)
              removed image *writing* support
              stbi_info support from Jetro Lauha
              GIF support from Jean-Marc Lienher
              iPhone PNG-extensions from James Brown
              warning-fixes from Nicolas Schulz and Janez Zemva (i.stbi__err. Janez (U+017D)emva)
      1.21    fix use of 'stbi_uc' in header (reported by jon blow)
      1.20    added support for Softimage PIC, by Tom Seddon
      1.19    bug in interlaced PNG corruption check (found by ryg)
      1.18  (2008-08-02)
              fix a threading bug (local mutable static)
      1.17    support interlaced PNG
      1.16    major bugfix - stbi__convert_format converted one too many pixels
      1.15    initialize some fields for thread safety
      1.14    fix threadsafe conversion bug
              header-file-only version (#define STBI_HEADER_FILE_ONLY before including)
      1.13    threadsafe
      1.12    const qualifiers in the API
      1.11    Support installable IDCT, colorspace conversion routines
      1.10    Fixes for 64-bit (don't use "unsigned long")
              optimized upsampling by Fabian "ryg" Giesen
      1.09    Fix format-conversion for PSD code (bad global variables!)
      1.08    Thatcher Ulrich's PSD code integrated by Nicolas Schulz
      1.07    attempt to fix C++ warning/errors again
      1.06    attempt to fix C++ warning/errors again
      1.05    fix TGA loading to return correct *comp and use good luminance calc
      1.04    default float alpha is 1, not 255; use 'void *' for stbi_image_free
      1.03    bugfixes to STBI_NO_STDIO, STBI_NO_HDR
      1.02    support for (subset of) HDR files, float interface for preferred access to them
      1.01    fix bug: possible bug in handling right-side up bmps... not sure
              fix bug: the stbi__bmp_load() and stbi__tga_load() functions didn't work at all
      1.00    interface to zlib that skips zlib header
      0.99    correct handling of alpha in palette
      0.98    TGA loader by lonesock; dynamically add loaders (untested)
      0.97    jpeg errors on too large a file; also catch another malloc failure
      0.96    fix detection of invalid v value - particleman@mollyrocket forum
      0.95    during header scan, seek to markers in case of padding
      0.94    STBI_NO_STDIO to disable stdio usage; rename all #defines the same
      0.93    handle jpegtran output; verbose errors
      0.92    read 4,8,16,24,32-bit BMP files of several formats
      0.91    output 24-bit Windows 3.0 BMP files
      0.90    fix a few more warnings; bump version number to approach 1.0
      0.61    bugfixes due to Marc LeBlanc, Christopher Lloyd
      0.60    fix compiling as c++
      0.59    fix warnings: merge Dave Moore's -Wall fixes
      0.58    fix bug: zlib uncompressed mode len/nlen was wrong endian
      0.57    fix bug: jpg last huffman symbol before marker was >9 bits but less than 16 available
      0.56    fix bug: zlib uncompressed mode len vs. nlen
      0.55    fix bug: restart_interval not initialized to 0
      0.54    allow NULL for 'int *comp'
      0.53    fix bug in png 3->4; speedup png decoding
      0.52    png handles req_comp=3,4 directly; minor cleanup; jpeg comments
      0.51    obey req_comp requests, 1-component jpegs return as 1-component,
              on 'test' only check type, not whether we support this variant
      0.50  (2006-11-19)
              first released version
','line_number':8176,'multiline':True]
['text':'
------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright (c) 2017 Sean Barrett
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain (www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
------------------------------------------------------------------------------
','line_number':8356,'multiline':True]
