['text':' --------------------------------','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':' Basic usage:','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' --------','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':'  The LOG() and LOG_TEE() macros are ready to go by default','line_number':18,'multiline':False]
['text':'   they do not require any initialization.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':'  LOGLN() and LOG_TEELN() are variants which automatically','line_number':21,'multiline':False]
['text':'   include \n character at the end of the log string.','line_number':22,'multiline':False]
['text':'','line_number':23,'multiline':False]
['text':'  LOG() behaves exactly like printf, by default writing to a logfile.','line_number':24,'multiline':False]
['text':'  LOG_TEE() additionally, prints to the screen too ( mimics Unix tee command ).','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':'  Default logfile is named','line_number':27,'multiline':False]
['text':'   "llama.<threadID>.log"','line_number':28,'multiline':False]
['text':'  Default LOG_TEE() secondary output target is','line_number':29,'multiline':False]
['text':'   stderr','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':'  Logs can be dynamically disabled or enabled using functions:','line_number':32,'multiline':False]
['text':'   log_disable()','line_number':33,'multiline':False]
['text':'  and','line_number':34,'multiline':False]
['text':'   log_enable()','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':'  A log target can be changed with:','line_number':37,'multiline':False]
['text':'   log_set_target( string )','line_number':38,'multiline':False]
['text':'    creating and opening, or re-opening a file by string filename','line_number':39,'multiline':False]
['text':'  or','line_number':40,'multiline':False]
['text':'   log_set_target( FILE* )','line_number':41,'multiline':False]
['text':'    allowing to point at stderr, stdout, or any valid FILE* file handler.','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':' --------','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':' End of Basic usage.','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':' --------------------------------','line_number':48,'multiline':False]
['text':' Specifies a log target.','line_number':50,'multiline':False]
['text':'  default uses log_handler() with "llama.log" log file','line_number':51,'multiline':False]
['text':'  this can be changed, by defining LOG_TARGET','line_number':52,'multiline':False]
['text':'  like so:','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':'  #define LOG_TARGET (a valid FILE*)','line_number':55,'multiline':False]
['text':'  #include "log.h"','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':'  or it can be simply redirected to stdout or stderr','line_number':58,'multiline':False]
['text':'  like so:','line_number':59,'multiline':False]
['text':'','line_number':60,'multiline':False]
['text':'  #define LOG_TARGET stderr','line_number':61,'multiline':False]
['text':'  #include "log.h"','line_number':62,'multiline':False]
['text':'','line_number':63,'multiline':False]
['text':'  The log target can also be redirected to a different function','line_number':64,'multiline':False]
['text':'  like so:','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':'  #define LOG_TARGET log_handler_different()','line_number':67,'multiline':False]
['text':'  #include "log.h"','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':'  FILE* log_handler_different()','line_number':70,'multiline':False]
['text':'  {','line_number':71,'multiline':False]
['text':'      return stderr;','line_number':72,'multiline':False]
['text':'  }','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':'  or:','line_number':75,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':'  #define LOG_TARGET log_handler_another_one("somelog.log")','line_number':77,'multiline':False]
['text':'  #include "log.h"','line_number':78,'multiline':False]
['text':'','line_number':79,'multiline':False]
['text':'  FILE* log_handler_another_one(char*filename)','line_number':80,'multiline':False]
['text':'  {','line_number':81,'multiline':False]
['text':'      static FILE* logfile = nullptr;','line_number':82,'multiline':False]
['text':'      (...)','line_number':83,'multiline':False]
['text':'      if( !logfile )','line_number':84,'multiline':False]
['text':'      {','line_number':85,'multiline':False]
['text':'          fopen(...)','line_number':86,'multiline':False]
['text':'      }','line_number':87,'multiline':False]
['text':'      (...)','line_number':88,'multiline':False]
['text':'      return logfile','line_number':89,'multiline':False]
['text':'  }','line_number':90,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':' Utility for synchronizing log configuration state','line_number':100,'multiline':False]
['text':'  since std::optional was introduced only in c++17','line_number':101,'multiline':False]
['text':' Utility to obtain "pid" like unique process id and use it when creating log files.','line_number':109,'multiline':False]
['text':' std::this_thread::get_id() is the most portable way of obtaining a "process id"','line_number':115,'multiline':False]
['text':'  it's not the same as "pid" but is unique enough to solve multiple instances','line_number':116,'multiline':False]
['text':'  trying to write to the same log.','line_number':117,'multiline':False]
['text':' Utility function for generating log file names with unique id based on thread id.','line_number':126,'multiline':False]
['text':'  invocation with log_filename_generator( "llama", "log" ) creates a string "llama.<number>.log"','line_number':127,'multiline':False]
['text':'  where the number is a runtime id of the current thread.','line_number':128,'multiline':False]
['text':' INTERNAL, DO NOT USE','line_number':132,'multiline':False]
['text':' Utility for turning #define values into string literals','line_number':160,'multiline':False]
['text':'  so we can have a define for stderr and','line_number':161,'multiline':False]
['text':'  we can print "stderr" instead of literal stderr, etc.','line_number':162,'multiline':False]
['text':' Allows disabling timestamps.','line_number':168,'multiline':False]
['text':'  in order to disable, define LOG_NO_TIMESTAMPS','line_number':169,'multiline':False]
['text':'  like so:','line_number':170,'multiline':False]
['text':'','line_number':171,'multiline':False]
['text':'  #define LOG_NO_TIMESTAMPS','line_number':172,'multiline':False]
['text':'  #include "log.h"','line_number':173,'multiline':False]
['text':'','line_number':174,'multiline':False]
['text':' Allows disabling file/line/function prefix','line_number':201,'multiline':False]
['text':'  in order to disable, define LOG_NO_FILE_LINE_FUNCTION','line_number':202,'multiline':False]
['text':'  like so:','line_number':203,'multiline':False]
['text':'','line_number':204,'multiline':False]
['text':'  #define LOG_NO_FILE_LINE_FUNCTION','line_number':205,'multiline':False]
['text':'  #include "log.h"','line_number':206,'multiline':False]
['text':'','line_number':207,'multiline':False]
['text':' INTERNAL, DO NOT USE','line_number':234,'multiline':False]
['text':'  USE LOG() INSTEAD','line_number':235,'multiline':False]
['text':'','line_number':236,'multiline':False]
['text':' INTERNAL, DO NOT USE','line_number':257,'multiline':False]
['text':'  USE LOG_TEE() INSTEAD','line_number':258,'multiline':False]
['text':'','line_number':259,'multiline':False]
['text':' The '\0' as a last argument, is a trick to bypass the silly','line_number':290,'multiline':False]
['text':'  "warning: ISO C++11 requires at least one argument for the "..." in a variadic macro"','line_number':291,'multiline':False]
['text':'  so we can have a single macro which can be called just like printf.','line_number':292,'multiline':False]
['text':' Main LOG macro.','line_number':294,'multiline':False]
['text':'  behaves like printf, and supports arguments the exact same way.','line_number':295,'multiline':False]
['text':'','line_number':296,'multiline':False]
['text':' Main TEE macro.','line_number':303,'multiline':False]
['text':'  does the same as LOG','line_number':304,'multiline':False]
['text':'  and','line_number':305,'multiline':False]
['text':'  simultaneously writes stderr.','line_number':306,'multiline':False]
['text':'','line_number':307,'multiline':False]
['text':' Secondary target can be changed just like LOG_TARGET','line_number':308,'multiline':False]
['text':'  by defining LOG_TEE_TARGET','line_number':309,'multiline':False]
['text':'','line_number':310,'multiline':False]
['text':' LOG macro variants with auto endline.','line_number':317,'multiline':False]
['text':' INTERNAL, DO NOT USE','line_number':326,'multiline':False]
['text':' Disable primary target','line_number':346,'multiline':False]
['text':' If previously disabled, only enable, and keep previous target','line_number':349,'multiline':False]
['text':' Otherwise, process the arguments','line_number':354,'multiline':False]
['text':' Log is disabled','line_number':363,'multiline':False]
['text':' with fallback in case something went wrong','line_number':369,'multiline':False]
['text':' do the (re)initialization','line_number':373,'multiline':False]
['text':'  Verify whether the file was opened, otherwise fallback to stderr','line_number':401,'multiline':False]
['text':' At this point we let the init flag be to true below, and let the target fallback to stderr','line_number':407,'multiline':False]
['text':'  otherwise we would repeatedly fopen() which was already unsuccessful','line_number':408,'multiline':False]
['text':' INTERNAL, DO NOT USE','line_number':416,'multiline':False]
['text':' Disables logs entirely at runtime.','line_number':422,'multiline':False]
['text':'  Makes LOG() and LOG_TEE() produce no output,','line_number':423,'multiline':False]
['text':'  until enabled back.','line_number':424,'multiline':False]
['text':' INTERNAL, DO NOT USE','line_number':427,'multiline':False]
['text':' Enables logs at runtime.','line_number':433,'multiline':False]
['text':' INTERNAL, DO NOT USE','line_number':436,'multiline':False]
['text':' Sets target fir logs, either by a file name or FILE* pointer (stdout, stderr, or any valid FILE*)','line_number':442,'multiline':False]
['text':' INTERNAL, DO NOT USE','line_number':445,'multiline':False]
['text':' INTERNAL, DO NOT USE','line_number':449,'multiline':False]
['text':' Enable or disable creating separate log files for each run.','line_number':452,'multiline':False]
['text':'  can ONLY be invoked BEFORE first log use.','line_number':453,'multiline':False]
['text':' Enable or disable append mode for log file.','line_number':455,'multiline':False]
['text':'  can ONLY be invoked BEFORE first log use.','line_number':456,'multiline':False]
['text':' INTERNAL, DO NOT USE','line_number':458,'multiline':False]
['text':' format
    printf("  -h, --help            show this help message and exit\n");','line_number':558,'multiline':True]
['text':' spacing
    printf("__-param----------------Description\n");','line_number':560,'multiline':True]
['text':' INTERNAL, DO NOT USE','line_number':573,'multiline':False]
['text':' dummy stub','line_number':698,'multiline':False]
['text':' dummy stub','line_number':700,'multiline':False]
['text':' convert to normal fprintf','line_number':703,'multiline':False]
['text':' convert to normal fprintf','line_number':706,'multiline':False]
['text':' dummy stub','line_number':709,'multiline':False]
['text':' dummy stub','line_number':712,'multiline':False]
['text':' dummy stub','line_number':715,'multiline':False]
['text':' dummy stub','line_number':718,'multiline':False]
['text':' dummy stub','line_number':721,'multiline':False]
['text':' LOG_DISABLE_LOGS','line_number':723,'multiline':False]
